
# 1 "D:\develop\AK7030-good\AK7030-OTP\common.c"

# 12 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 164 "D:\develop\AK7030-good\AK7030-OTP\yn8p520.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char LVDCON @ 0x001;


volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit PA0 @ ((unsigned)&PORTA*8)+0;
volatile bit PA1 @ ((unsigned)&PORTA*8)+1;
volatile bit PA2 @ ((unsigned)&PORTA*8)+2;
volatile bit PA3 @ ((unsigned)&PORTA*8)+3;
volatile bit PA4 @ ((unsigned)&PORTA*8)+4;
volatile bit PA5 @ ((unsigned)&PORTA*8)+5;
volatile bit PA6 @ ((unsigned)&PORTA*8)+6;
volatile bit PA7 @ ((unsigned)&PORTA*8)+7;


volatile unsigned char PORTB @ 0x006;

volatile bit PB0 @ ((unsigned)&PORTB*8)+0;
volatile bit PB1 @ ((unsigned)&PORTB*8)+1;
volatile bit PB2 @ ((unsigned)&PORTB*8)+2;
volatile bit PB3 @ ((unsigned)&PORTB*8)+3;
volatile bit PB4 @ ((unsigned)&PORTB*8)+4;
volatile bit PB5 @ ((unsigned)&PORTB*8)+5;
volatile bit PB6 @ ((unsigned)&PORTB*8)+6;
volatile bit PB7 @ ((unsigned)&PORTB*8)+7;


volatile unsigned char TMR0L @ 0x007;
volatile unsigned char TMR0H @ 0x008;



volatile unsigned int TMR0 @ 0x007;


volatile unsigned int T0CON @ 0x009;


volatile bit T0PS0 @ ((unsigned)&T0CON*8)+0;
volatile bit T0PS1 @ ((unsigned)&T0CON*8)+1;
volatile bit T0PS2 @ ((unsigned)&T0CON*8)+2;
volatile bit PSA @ ((unsigned)&T0CON*8)+3;
volatile bit T0SE @ ((unsigned)&T0CON*8)+4;
volatile bit T0CS @ ((unsigned)&T0CON*8)+5;
volatile bit T08BIT @ ((unsigned)&T0CON*8)+6;
volatile bit TMR0ON @ ((unsigned)&T0CON*8)+7;


volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned : 4;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INT0IF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INT0IE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned TMR0IF : 1;
unsigned : 2;
unsigned TMR0IE : 1;
};
} INTCONbits @ 0x00B;




volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit INT1IF @ ((unsigned)&PIR1*8)+6;
volatile bit INT2IF @ ((unsigned)&PIR1*8)+7;


volatile unsigned char PIR2 @ 0x00D;

volatile bit OP1IF @ ((unsigned)&PIR2*8)+0;
volatile bit OP2IF @ ((unsigned)&PIR2*8)+1;
volatile bit ADIF @ ((unsigned)&PIR2*8)+2;
volatile bit LVDIF @ ((unsigned)&PIR2*8)+3;
volatile bit PWMIF @ ((unsigned)&PIR2*8)+4;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+5;



volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1INSYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit RD16 @ ((unsigned)&T1CON*8)+7;


volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile unsigned char SSPBUF @ 0x013;



volatile unsigned char SSPCON @ 0x014;

volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;
volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;


volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;

volatile union {
struct {
unsigned CCP1M : 4;
unsigned DC1B : 2;
};
struct {
unsigned CCP1M0 : 1;
unsigned CCP1M1 : 1;
unsigned CCP1M2 : 1;
unsigned CCP1M3 : 1;
unsigned CCP1Y : 1;
unsigned CCP1X : 1;
};
} CCP1CONbits @ 0x017;



volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit RXPARITY @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RCD8 @ ((unsigned)&RCSTA*8)+0;
volatile bit RC9 @ ((unsigned)&RCSTA*8)+6;
volatile bit nRC8 @ ((unsigned)&RCSTA*8)+6;
volatile bit RC8_9 @ ((unsigned)&RCSTA*8)+6;


volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;



volatile unsigned char OP1CON0 @ 0x01B;


volatile union {
struct {
unsigned OP1F : 4;
};
struct {
unsigned OP1F0 : 1;
unsigned OP1F1 : 1;
unsigned OP1F2 : 1;
unsigned OP1F3 : 1;
unsigned OP1ZLF : 1;
unsigned OP1POL : 1;
unsigned OP1OUT : 1;
unsigned OP1ON : 1;
};
} OP1CON0bits @ 0x01B;



volatile unsigned char OP1CON1 @ 0x01C;


volatile union {
struct {
unsigned OP1NCH : 2;
unsigned RSV : 2;
unsigned OP1PCH : 2;
};
struct {
unsigned OP1NCH0 : 1;
unsigned OP1NCH1 : 1;
unsigned RSV0 : 1;
unsigned RSV1 : 1;
unsigned OP1PCH0 : 1;
unsigned OP1PCH1 : 1;
unsigned OP1INTN : 1;
unsigned OP1INTP : 1;
};
} OP1CON1bits @ 0x01C;



volatile unsigned char OP1CON2 @ 0x01D;


volatile union {
struct {
unsigned RSV0 : 1;
unsigned RSV1 : 1;
unsigned RSV2 : 1;
unsigned RSV3 : 1;
unsigned A1O2N : 1;
unsigned A1NS : 1;
unsigned OP1A2DEN : 1;
unsigned OP1OUTEN : 1;
};
} OP1CON2bits @ 0x01D;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+1;
volatile bit GO @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+2;

volatile union {
struct {
unsigned ADON : 1;
unsigned G0 : 1;
unsigned CHS : 4;
};
struct {
unsigned ADON : 1;
unsigned GO : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
unsigned CHS2 : 1;
unsigned CHS3 : 1;
};
} ADCON0bits @ 0x01f;

# 541
volatile unsigned char WDTCON @ 0x081;

volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;

volatile union {
struct {
unsigned SWDTEN : 1;
};
} WDTCONbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile unsigned char DACCON @ 0x087;


volatile union {
struct {
unsigned DACCH : 2;
};
struct {
unsigned DACCH0 : 1;
unsigned DACCH1 : 1;
unsigned DAC0EN : 1;
unsigned DAC1EN : 1;
};
} DACCONbits @ 0x087;


volatile unsigned char DACR0 @ 0x088;
volatile unsigned char DACR1 @ 0x089;


volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit INT1IE @ ((unsigned)&PIE1*8)+6;
volatile bit INT2IE @ ((unsigned)&PIE1*8)+7;


volatile unsigned char PIE2 @ 0x08D;

volatile bit OP1IE @ ((unsigned)&PIE2*8)+0;
volatile bit OP2IE @ ((unsigned)&PIE2*8)+1;
volatile bit ADIE @ ((unsigned)&PIE2*8)+2;
volatile bit LVDIE @ ((unsigned)&PIE2*8)+3;
volatile bit PWMIE @ ((unsigned)&PIE2*8)+4;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+5;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit INTEDG2 @ ((unsigned)&PCON*8)+2;
volatile bit INTEDG1 @ ((unsigned)&PCON*8)+3;
volatile bit INTEDG0 @ ((unsigned)&PCON*8)+4;
volatile bit CKOE @ ((unsigned)&PCON*8)+5;
volatile bit I2C_AUX @ ((unsigned)&PCON*8)+6;
volatile bit nBO @ ((unsigned)&PCON*8)+0;



volatile unsigned char PWST @ 0x08F;


volatile unsigned char SSPADD2 @ 0x090;


volatile unsigned char SSPCON2 @ 0x091;
volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile unsigned char PR2 @ 0x092;


volatile unsigned char SSPADD @ 0x093;


volatile unsigned char SSPSTAT @ 0x094;

volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit R_nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit S @ ((unsigned)&SSPSTAT*8)+3;
volatile bit P @ ((unsigned)&SSPSTAT*8)+4;
volatile bit D_nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;
volatile bit R @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D @ ((unsigned)&SSPSTAT*8)+5;
volatile bit I2C_READ @ ((unsigned)&SSPSTAT*8)+2;
volatile bit I2C_START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit I2C_STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit I2C_DATA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit R_W @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D_A @ ((unsigned)&SSPSTAT*8)+5;
volatile bit READ_WRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit DATA_ADDRESS @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nWRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nADDRESS @ ((unsigned)&SSPSTAT*8)+5;


volatile unsigned char PWMCON1 @ 0x096;

volatile bit PWM1ASE @ ((unsigned)&PWMCON1*8)+0;
volatile bit PWM1OP2ASEN @ ((unsigned)&PWMCON1*8)+1;
volatile bit PWM1OP1ASEN @ ((unsigned)&PWMCON1*8)+2;
volatile bit PWM1RSE @ ((unsigned)&PWMCON1*8)+4;
volatile bit PWM1OP2RSEN @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM1OP1RSEN @ ((unsigned)&PWMCON1*8)+6;



volatile unsigned char PWMCON0 @ 0x097;

volatile bit PWM1S @ ((unsigned)&PWMCON0*8)+6;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit TXPARITY @ ((unsigned)&TXSTA*8)+3;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TXD8 @ ((unsigned)&TXSTA*8)+0;
volatile bit nTX8 @ ((unsigned)&TXSTA*8)+6;
volatile bit TX8_9 @ ((unsigned)&TXSTA*8)+6;


volatile unsigned char SPBRG @ 0x099;



volatile unsigned char UARTCON @ 0x09A;

volatile bit INVMODE @ ((unsigned)&UARTCON*8)+0;
volatile bit PARITY @ ((unsigned)&UARTCON*8)+1;
volatile bit RXODD_EVEN @ ((unsigned)&UARTCON*8)+2;
volatile bit BOUD_CLK @ ((unsigned)&UARTCON*8)+3;
volatile bit HALF_DUPLEX @ ((unsigned)&UARTCON*8)+4;
volatile bit DLSB @ ((unsigned)&UARTCON*8)+5;
volatile bit STOP_BIT1 @ ((unsigned)&UARTCON*8)+6;
volatile bit STOP_BIT0 @ ((unsigned)&UARTCON*8)+7;


volatile unsigned char OP2CON0 @ 0x09B;


volatile union {
struct {
unsigned OP2F : 4;
};
struct {
unsigned OP2F0 : 1;
unsigned OP2F1 : 1;
unsigned OP2F2 : 1;
unsigned OP2F3 : 1;
unsigned OP2ZLF : 1;
unsigned OP2POL : 1;
unsigned OP2OUT : 1;
unsigned OP2ON : 1;
};
} OP2CON0bits @ 0x09B;



volatile unsigned char OP2CON1 @ 0x09C;


volatile union {
struct {
unsigned OP2NCH : 3;
unsigned OP2PCH : 3;
};
struct {
unsigned OP2NCH0 : 1;
unsigned OP2NCH1 : 1;
unsigned OP2NCH2 : 1;
unsigned OP2PCH0 : 1;
unsigned OP2PCH1 : 1;
unsigned OP2PCH2 : 1;
unsigned OP2INTN : 1;
unsigned OP2INTP : 1;
};
} OP2CON1bits @ 0x09C;



volatile unsigned char OP2CON2 @ 0x09D;


volatile union {
struct {
unsigned PGA : 3;
};
struct {
unsigned PGA0 : 1;
unsigned PGA1 : 1;
unsigned PGA2 : 1;
unsigned PGAEN : 1;
unsigned A2O2N : 1;
unsigned A2NS : 1;
unsigned OP2A2DEN : 1;
unsigned OP2OUTEN : 1;
};
} OP2CON2bits @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ADCON1 @ 0x09F;

volatile bit ADCS0 @ ((unsigned)&ADCON1*8)+0;
volatile bit ADCS1 @ ((unsigned)&ADCON1*8)+1;
volatile bit ADCS2 @ ((unsigned)&ADCON1*8)+2;
volatile bit ACQT0 @ ((unsigned)&ADCON1*8)+3;
volatile bit ACQT1 @ ((unsigned)&ADCON1*8)+4;
volatile bit ACQT2 @ ((unsigned)&ADCON1*8)+5;
volatile bit ADVREF0 @ ((unsigned)&ADCON1*8)+4;
volatile bit ADVERF1 @ ((unsigned)&ADCON1*8)+5;

volatile union {
struct {
unsigned ADCS : 3;
unsigned ACQT : 3;
unsigned ADVREF : 2;
};
struct {
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
unsigned ADCS2 : 1;
unsigned ACQT0 : 1;
unsigned ACQT1 : 1;
unsigned ACOT2 : 1;
unsigned ADVREF0 : 1;
unsigned ADVREF1 : 1;
};
} ADCON1bits @ 0x09f;

# 833
volatile unsigned char PAPU @ 0x105;



volatile unsigned char PBPU @ 0x106;



volatile unsigned char PBMASK @ 0x107;



volatile unsigned char CLKPR @ 0x108;

volatile bit CLKPS0 @ ((unsigned)&CLKPR*8)+0;
volatile bit CLKPS1 @ ((unsigned)&CLKPR*8)+1;
volatile bit CLKPCE @ ((unsigned)&CLKPR*8)+7;


volatile unsigned char SMCR @ 0x109;

volatile bit SE @ ((unsigned)&SMCR*8)+0;
volatile bit SM0 @ ((unsigned)&SMCR*8)+1;
volatile bit SM1 @ ((unsigned)&SMCR*8)+2;
volatile bit SM2 @ ((unsigned)&SMCR*8)+3;


volatile unsigned char ALG0 @ 0x10C;


volatile bit DACBIASEN @ ((unsigned)&ALG0*8)+4;
volatile bit IOVCCEN @ ((unsigned)&ALG0*8)+5;
volatile bit BIASEN @ ((unsigned)&ALG0*8)+6;
volatile bit LDO2P0EN @ ((unsigned)&ALG0*8)+7;


volatile unsigned char ALG1 @ 0x10D;



volatile unsigned char ALG2 @ 0x10E;



volatile unsigned char ALG3 @ 0x10F;

# 885
volatile unsigned char PAPD @ 0x185;




volatile unsigned char PBPD @ 0x186;



volatile unsigned char PAOD @ 0x187;
volatile bit PAOD6 @ ((unsigned)&PAOD*8)+6;
volatile bit PAOD7 @ ((unsigned)&PAOD*8)+7;



volatile unsigned char PBOD @ 0x188;
volatile bit PBOD2 @ ((unsigned)&PBOD*8)+2;
volatile bit PBOD7 @ ((unsigned)&PBOD*8)+7;



volatile unsigned char ALG4 @ 0x18C;



volatile unsigned char ALG5 @ 0x18D;



volatile unsigned char ALG6 @ 0x18E;



volatile unsigned char ALG7 @ 0x18F;

# 50 "D:\develop\AK7030-good\AK7030-OTP\common.h"
void clock_config();
void timer1_config();
void timer1_interrupt_config();

void adConverter_config();

void setAdcSampleChannel(unsigned char ucChannel);




void process_AD_Converter_Value();

# 68
unsigned int getAdOriginalCh12Value();
unsigned int getAdOriginalCh13Value();

unsigned int getAdOriginalCh14Value();

unsigned char isPermitSampleTime();

void clrSampeTime();

void setDAC0_ChannelValue(unsigned char ucValue);

void startTwelveHourTimer(unsigned int uiSetTime);
void startThreeHoursTimer(unsigned int uiSetTime);

void startOneHoursTimer(unsigned int uiSetTime);

# 89
void startTwentyMinTimer(unsigned int uiSetValue);
unsigned char isFinishedTwentyMinTimer();

void clearTwelveHoursTimer();
void clearThreeHoursTimer();
void clearOneHoursTimer();
void clearTwentyMinTimer();


unsigned char isFinishedTwelveHoursTimer();
unsigned char isFinishedThreeHoursTimer();
unsigned char isFinishedOneHoursTimer();

unsigned char getAD_ConvertFlag();
void setAD_ConvertFlag(unsigned char flag);

void setWaitResetFlag(unsigned char bValue);

# 13 "D:\develop\AK7030-good\AK7030-OTP\periph.h"
void dac_init();
void op1_init();
void op2_init();
void int_enable(unsigned char mode);

void adc_test_init(unsigned char channel,unsigned char ref);

void adc_start();
unsigned int adc_get(void);

# 16 "D:\develop\AK7030-good\AK7030-OTP\common.c"
static unsigned char adc_convert_flag = 0;

# 23
static unsigned char sampleTimes;
static unsigned char sampleChannelSelect = 12;



typedef struct
{
unsigned char timer10msStopWatch;

}TimeStopWatch;

static TimeStopWatch timer;

static unsigned int uiBigTimer = 0,uiSmallTimer = 0;

static unsigned int uiTwentySecondsTimer = 0;

static unsigned int uiOneHourTimer = 0;

static unsigned int uiTwentyMinTimer = 0;

static unsigned char bBigTimerStartFlag = 0, bSmallTimerStartFlag = 0;

static unsigned char bOneHourTimerStartFlag = 0;

static unsigned char bTwentyMinStartFlag = 0;

static unsigned char bWaitResetFlag = 0;

static void AD_Sample(void);

void setWaitResetFlag(unsigned char bValue)
{
bWaitResetFlag = bValue;
}

static unsigned char getWaitResetFlag(void)
{
return bWaitResetFlag;
}

static void setPWM_Width(unsigned char ucWidth)
{
static unsigned char ucOldWidth = 0;
if( ucOldWidth != ucWidth)
{
CCPR1L = ucWidth;
ucOldWidth = ucWidth;
}
}

unsigned int FilterCh13(int *tmpValue)
{
unsigned char i = 0, j = 0;

unsigned int filter_temp = 0, filter_sum = 0;

unsigned int filter_buf[3];

for(int cir = 0;cir < 3; cir++)
filter_buf[cir] = *tmpValue++;



for(j = 0; j < 3 - 1; j++)
{
for(i = 0; i < 3 - 1 - j; i++)
{
if(filter_buf[i] > filter_buf[i + 1])
{

filter_temp = filter_buf[i];

filter_buf[i] = filter_buf[i + 1];

filter_buf[i + 1] = filter_temp;
}
}
}

for(i = 2; i < 3 - 2; i++)
{
filter_sum += filter_buf[i];
}


return (filter_sum >> 2 );
}




unsigned int Filter(int *tmpValue)
{

unsigned char i = 0, j = 0;

unsigned int filter_temp = 0, filter_sum = 0;

unsigned int filter_buf[3];

for(int cir = 0;cir < 3; cir++)
filter_buf[cir] = *tmpValue++;



for(j = 0; j < 3 - 1; j++)
{
for(i = 0; i < 3 - 1 - j; i++)
{
if(filter_buf[i] > filter_buf[i + 1])
{

filter_temp = filter_buf[i];

filter_buf[i] = filter_buf[i + 1];

filter_buf[i + 1] = filter_temp;
}
}
}

for(i = 1; i < 3 - 1; i++)
{
filter_sum += filter_buf[i];
}


return (filter_sum );

}


static int uiSampleCh12[3];

static int uiSampleCh13[8];

static int uiSampleChannelFourteenth[3];


void vPutSampleDataIntoTable(unsigned int uiSampleData,unsigned char channel)
{

static unsigned char ucCh12Length = 0;

static unsigned char ucCh13Length = 0;

static unsigned char ucChannelFourteenthLength = 0;
static unsigned int uiCalWidthArrayNew = 0;
static unsigned int uiCalWidthArrayOld = 0;
if(channel == 12)
{
if(ucCh12Length < 3)
{
uiSampleCh12[ucCh12Length] = uiSampleData;

ucCh12Length++;

if( 3 == ucCh12Length )
{
ucCh12Length = 0;



static unsigned char bInitArrayFlag = 0;

static unsigned int uiCalWidthArray[1],uiCalWidthCnt = 0;

static unsigned char uiInitWidth = 75;

uiCalWidthArrayNew = Filter(uiSampleCh12);

unsigned int uiDeviationValue = 0,uiAbstractValue = 0;

if( uiCalWidthArrayNew >= uiCalWidthArrayOld)
uiAbstractValue = uiCalWidthArrayNew - uiCalWidthArrayOld;
else
uiAbstractValue = uiCalWidthArrayOld - uiCalWidthArrayNew;

uiDeviationValue = ((uiCalWidthArrayNew+uiCalWidthArrayOld)>>1)+ uiAbstractValue;

if(uiCalWidthCnt>400)
uiDeviationValue =400;


uiCalWidthArrayOld=uiCalWidthArrayNew;




if(uiDeviationValue > (312))
{


uiInitWidth++;

}
else if(uiDeviationValue < (312))
{


uiInitWidth--;

}
else
;

if(uiInitWidth > 249)
uiInitWidth = 249;

if(uiInitWidth < 75)
uiInitWidth = 75;
else
;

if( 1 == getWaitResetFlag())
uiInitWidth = 150;

setPWM_Width(uiInitWidth);


}
}
else
{
ucCh12Length = 0;

uiSampleCh12[ucCh12Length] = uiSampleData;
}
}
else if(channel == 13)
{
if(ucCh13Length < 8)
{
uiSampleCh13[ucCh13Length] = uiSampleData;

ucCh13Length++;
}
else
{
ucCh13Length = 0;

uiSampleCh13[ucCh13Length] = uiSampleData;
}
}
else if(channel == 14)
{
if(ucChannelFourteenthLength < 3)
{
uiSampleChannelFourteenth[ucChannelFourteenthLength] = uiSampleData;

ucChannelFourteenthLength++;
}
else
{
ucChannelFourteenthLength = 0;

uiSampleCh13[ucChannelFourteenthLength] = uiSampleData;
}
}
else
{
ucCh12Length = 0;

ucCh13Length = 0;

ucChannelFourteenthLength = 0;

for(int i = 0;i < 3; i++)
{
uiSampleCh12[i] = 0;

uiSampleCh13[i] = 0;

uiSampleChannelFourteenth[i] = 0;

}
}
}


void clock_config()
{

CLKPR = 0x80;
CLKPR = 0x00;
while(CLKPCE);
}

void timer1_config()
{

TMR1H=0xCF;
TMR1L=0x2C;
T1CON=0xE1;
TMR1IE=1;

}



void timer1_interrupt_config()
{
GIE = 1;
PEIE = 1;
}



unsigned char getAD_ConvertFlag()
{
return adc_convert_flag;
}


void setAD_ConvertFlag(unsigned char flag)
{
adc_convert_flag = flag;
}

# 349
unsigned int getAdOriginalCh12Value()
{


return Filter(uiSampleCh12);

# 358
}


unsigned int getAdOriginalCh13Value()
{

return FilterCh13(uiSampleCh13);

# 369
}


unsigned int getAdOriginalCh14Value()
{

return Filter(uiSampleChannelFourteenth);

# 379
}



void process_AD_Converter_Value()
{
if(getAD_ConvertFlag())
{
setAD_ConvertFlag(0);
AD_Sample();
if(12 == sampleChannelSelect)
adc_test_init(12,3);
else
adc_test_init(13,3);
adc_start();
}
}

# 406
static void AD_Sample(void)
{
if(sampleTimes < 3)
{
sampleTimes++;

if(sampleTimes >= 3)
{
sampleTimes = 0;

if(sampleChannelSelect == 12)
{
sampleChannelSelect = 13;
}

else
{
sampleChannelSelect = 12;
}
}
}
}


void setDAC0_ChannelValue(unsigned char ucValue)
{
DACR0=ucValue;
}

void startTwelveHourTimer(unsigned int uiSetTime )
{
if((0 == uiBigTimer) && ( 0 == bBigTimerStartFlag))
{
uiBigTimer = uiSetTime;
bBigTimerStartFlag = 1;
}

# 447
}

void clearTwelveHoursTimer()
{
uiBigTimer = 0;
bBigTimerStartFlag = 0;
}


void clearThreeHoursTimer()
{
uiSmallTimer = 0;
bSmallTimerStartFlag = 0;
}

void clearOneHoursTimer()
{
uiOneHourTimer = 0;
bOneHourTimerStartFlag = 0;
}


void clearTwentyMinTimer()
{
uiTwentyMinTimer = 0;
bTwentyMinStartFlag = 0;
}


void startThreeHoursTimer(unsigned int uiSetTime)
{
if(( 0 == uiSmallTimer ) && ( 0 == bSmallTimerStartFlag ))
{
uiSmallTimer = uiSetTime;
bSmallTimerStartFlag = 1;
}

# 487
}

void startOneHoursTimer(unsigned int uiSetTime)
{
if(( 0 == uiOneHourTimer ) && ( 0 == bOneHourTimerStartFlag ))
{
uiOneHourTimer = uiSetTime;
bOneHourTimerStartFlag = 1;
}

# 500
}

# 514
void startTwentyMinTimer(unsigned int uiSetValue )
{
if(( 0 == uiTwentyMinTimer) && ( 0 == bTwentyMinStartFlag))
{
uiTwentyMinTimer = uiSetValue;
bTwentyMinStartFlag = 1;
}
}


unsigned char isFinishedTwentyMinTimer()
{
if(( 0 == uiTwentyMinTimer ) && bTwentyMinStartFlag )
{
bTwentyMinStartFlag = 0;
return 1;
}
else
return 0;
}

# 548
unsigned char isFinishedTwelveHoursTimer()
{
if(( uiBigTimer == 0 ) && bBigTimerStartFlag )
{
bBigTimerStartFlag = 0;
return 1;
}
else
return 0;
}

unsigned char isFinishedThreeHoursTimer()
{
if((uiSmallTimer == 0) && bSmallTimerStartFlag)
{
bSmallTimerStartFlag = 0;
return 1;
}
else
return 0;
}



unsigned char isFinishedOneHoursTimer()
{
if((uiOneHourTimer == 0) && bOneHourTimerStartFlag)
{
bOneHourTimerStartFlag = 0;
return 1;
}
else
return 0;
}


unsigned char isPermitSampleTime()
{
if(timer.timer10msStopWatch >= 10)
{
return 1;
}
else
return 0;
}

void clrSampeTime()
{
timer.timer10msStopWatch = 0;
}




void interrupt ISR(void)
{
static unsigned char ucTimer1sCnt = 0;


if(TMR1IF == 1)
{
TMR1IF = 0 ;
timer.timer10msStopWatch++;
ucTimer1sCnt++;



if(ucTimer1sCnt >= 100)
{
ucTimer1sCnt = 0;
if(uiBigTimer > 0)
uiBigTimer--;

if(uiSmallTimer)
uiSmallTimer--;

if(uiTwentySecondsTimer)
uiTwentySecondsTimer--;

if(uiTwentyMinTimer)
uiTwentyMinTimer--;

if( uiOneHourTimer )
uiOneHourTimer--;
}
}

if(ADIF)
{

ADIF=0;
setAD_ConvertFlag(1);

if(sampleChannelSelect == 12)
{


vPutSampleDataIntoTable(adc_get(),12);

# 649
}
else
{



vPutSampleDataIntoTable(adc_get(),13);

}

}
}
