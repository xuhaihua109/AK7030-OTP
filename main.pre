
# 1 "D:\develop\190625\AK7030-OTP\main.c"

# 12 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdio.h"
typedef int ptrdiff_t;
typedef unsigned size_t;
typedef unsigned short wchar_t;

# 31 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdarg.h"
typedef void * va_list[1];

#pragma inline(__va_start)
extern void * __va_start(void);

#pragma inline(__va_arg)
extern void * __va_arg(void *, ...);

# 27 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int errno;

# 58
struct __prbuf
{
char * ptr;
void (* func)(char);
};

# 17 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\conio.h"
extern int errno;


extern void init_uart(void);

extern char getch(void);
extern char getche(void);
extern void putch(char);
extern void ungetch(char);

extern bit kbhit(void);

# 31
extern char * cgets(char *);
extern void cputs(const char *);

# 103 "C:\Program Files (x86)\HI-TECH Software\PICC\9.83\include\stdio.h"
extern int cprintf(char *, ...);
#pragma printf_check(cprintf)



extern int _doprnt(struct __prbuf *, const register char *, register va_list);

# 195
extern char * gets(char *);
extern int puts(const char *);
extern int scanf(const char *, ...);
extern int sscanf(const char *, const char *, ...);
extern int vprintf(const char *, va_list);
extern int vsprintf(char *, const char *, va_list);
extern int vscanf(const char *, va_list ap);
extern int vsscanf(const char *, const char *, va_list);

#pragma printf_check(printf) const
#pragma printf_check(sprintf) const
extern int sprintf(char *, const char *, ...);
extern int printf(const char *, ...);

# 164 "D:\develop\190625\AK7030-OTP\yn8p520.h"
volatile unsigned char INDF @ 0x000;



volatile unsigned char LVDCON @ 0x001;


volatile unsigned char PCL @ 0x002;



volatile unsigned char STATUS @ 0x003;

volatile bit CARRY @ ((unsigned)&STATUS*8)+0;
volatile bit DC @ ((unsigned)&STATUS*8)+1;
volatile bit ZERO @ ((unsigned)&STATUS*8)+2;
volatile bit nPD @ ((unsigned)&STATUS*8)+3;
volatile bit nTO @ ((unsigned)&STATUS*8)+4;
volatile bit IRP @ ((unsigned)&STATUS*8)+7;
volatile bit RP0 @ ((unsigned)&STATUS*8)+5;
volatile bit RP1 @ ((unsigned)&STATUS*8)+6;

volatile union {
struct {
unsigned C : 1;
unsigned DC : 1;
unsigned Z : 1;
unsigned nPD : 1;
unsigned nTO : 1;
unsigned RP : 2;
unsigned IRP : 1;
};
struct {
unsigned : 5;
unsigned RP0 : 1;
unsigned RP1 : 1;
};
} STATUSbits @ 0x003;



volatile unsigned char FSR @ 0x004;



volatile unsigned char PORTA @ 0x005;

volatile bit PA0 @ ((unsigned)&PORTA*8)+0;
volatile bit PA1 @ ((unsigned)&PORTA*8)+1;
volatile bit PA2 @ ((unsigned)&PORTA*8)+2;
volatile bit PA3 @ ((unsigned)&PORTA*8)+3;
volatile bit PA4 @ ((unsigned)&PORTA*8)+4;
volatile bit PA5 @ ((unsigned)&PORTA*8)+5;
volatile bit PA6 @ ((unsigned)&PORTA*8)+6;
volatile bit PA7 @ ((unsigned)&PORTA*8)+7;


volatile unsigned char PORTB @ 0x006;

volatile bit PB0 @ ((unsigned)&PORTB*8)+0;
volatile bit PB1 @ ((unsigned)&PORTB*8)+1;
volatile bit PB2 @ ((unsigned)&PORTB*8)+2;
volatile bit PB3 @ ((unsigned)&PORTB*8)+3;
volatile bit PB4 @ ((unsigned)&PORTB*8)+4;
volatile bit PB5 @ ((unsigned)&PORTB*8)+5;
volatile bit PB6 @ ((unsigned)&PORTB*8)+6;
volatile bit PB7 @ ((unsigned)&PORTB*8)+7;


volatile unsigned char TMR0L @ 0x007;
volatile unsigned char TMR0H @ 0x008;



volatile unsigned int TMR0 @ 0x007;


volatile unsigned int T0CON @ 0x009;


volatile bit T0PS0 @ ((unsigned)&T0CON*8)+0;
volatile bit T0PS1 @ ((unsigned)&T0CON*8)+1;
volatile bit T0PS2 @ ((unsigned)&T0CON*8)+2;
volatile bit PSA @ ((unsigned)&T0CON*8)+3;
volatile bit T0SE @ ((unsigned)&T0CON*8)+4;
volatile bit T0CS @ ((unsigned)&T0CON*8)+5;
volatile bit T08BIT @ ((unsigned)&T0CON*8)+6;
volatile bit TMR0ON @ ((unsigned)&T0CON*8)+7;


volatile unsigned char PCLATH @ 0x00A;


volatile union {
struct {
unsigned : 4;
};
} PCLATHbits @ 0x00A;



volatile unsigned char INTCON @ 0x00B;

volatile bit RBIF @ ((unsigned)&INTCON*8)+0;
volatile bit INT0IF @ ((unsigned)&INTCON*8)+1;
volatile bit T0IF @ ((unsigned)&INTCON*8)+2;
volatile bit RBIE @ ((unsigned)&INTCON*8)+3;
volatile bit INT0IE @ ((unsigned)&INTCON*8)+4;
volatile bit T0IE @ ((unsigned)&INTCON*8)+5;
volatile bit PEIE @ ((unsigned)&INTCON*8)+6;
volatile bit GIE @ ((unsigned)&INTCON*8)+7;
volatile bit TMR0IF @ ((unsigned)&INTCON*8)+2;
volatile bit TMR0IE @ ((unsigned)&INTCON*8)+5;

volatile union {
struct {
unsigned RBIF : 1;
unsigned INTF : 1;
unsigned T0IF : 1;
unsigned RBIE : 1;
unsigned INTE : 1;
unsigned T0IE : 1;
unsigned PEIE : 1;
unsigned GIE : 1;
};
struct {
unsigned : 2;
unsigned TMR0IF : 1;
unsigned : 2;
unsigned TMR0IE : 1;
};
} INTCONbits @ 0x00B;




volatile unsigned char PIR1 @ 0x00C;

volatile bit TMR1IF @ ((unsigned)&PIR1*8)+0;
volatile bit TMR2IF @ ((unsigned)&PIR1*8)+1;
volatile bit CCP1IF @ ((unsigned)&PIR1*8)+2;
volatile bit SSPIF @ ((unsigned)&PIR1*8)+3;
volatile bit TXIF @ ((unsigned)&PIR1*8)+4;
volatile bit RCIF @ ((unsigned)&PIR1*8)+5;
volatile bit INT1IF @ ((unsigned)&PIR1*8)+6;
volatile bit INT2IF @ ((unsigned)&PIR1*8)+7;


volatile unsigned char PIR2 @ 0x00D;

volatile bit OP1IF @ ((unsigned)&PIR2*8)+0;
volatile bit OP2IF @ ((unsigned)&PIR2*8)+1;
volatile bit ADIF @ ((unsigned)&PIR2*8)+2;
volatile bit LVDIF @ ((unsigned)&PIR2*8)+3;
volatile bit PWMIF @ ((unsigned)&PIR2*8)+4;
volatile bit BCLIF @ ((unsigned)&PIR2*8)+5;



volatile unsigned char TMR1L @ 0x00E;



volatile unsigned char TMR1H @ 0x00F;



volatile unsigned int TMR1 @ 0x00E;


volatile unsigned char T1CON @ 0x010;

volatile bit TMR1ON @ ((unsigned)&T1CON*8)+0;
volatile bit TMR1CS @ ((unsigned)&T1CON*8)+1;
volatile bit nT1SYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1OSCEN @ ((unsigned)&T1CON*8)+3;
volatile bit T1INSYNC @ ((unsigned)&T1CON*8)+2;
volatile bit T1CKPS0 @ ((unsigned)&T1CON*8)+4;
volatile bit T1CKPS1 @ ((unsigned)&T1CON*8)+5;
volatile bit RD16 @ ((unsigned)&T1CON*8)+7;


volatile unsigned char TMR2 @ 0x011;



volatile unsigned char T2CON @ 0x012;


volatile bit T2CKPS0 @ ((unsigned)&T2CON*8)+0;
volatile bit T2CKPS1 @ ((unsigned)&T2CON*8)+1;
volatile bit TMR2ON @ ((unsigned)&T2CON*8)+2;
volatile bit TOUTPS0 @ ((unsigned)&T2CON*8)+3;
volatile bit TOUTPS1 @ ((unsigned)&T2CON*8)+4;
volatile bit TOUTPS2 @ ((unsigned)&T2CON*8)+5;
volatile bit TOUTPS3 @ ((unsigned)&T2CON*8)+6;


volatile unsigned char SSPBUF @ 0x013;



volatile unsigned char SSPCON @ 0x014;

volatile bit CKP @ ((unsigned)&SSPCON*8)+4;
volatile bit SSPEN @ ((unsigned)&SSPCON*8)+5;
volatile bit SSPOV @ ((unsigned)&SSPCON*8)+6;
volatile bit WCOL @ ((unsigned)&SSPCON*8)+7;
volatile bit SSPM0 @ ((unsigned)&SSPCON*8)+0;
volatile bit SSPM1 @ ((unsigned)&SSPCON*8)+1;
volatile bit SSPM2 @ ((unsigned)&SSPCON*8)+2;
volatile bit SSPM3 @ ((unsigned)&SSPCON*8)+3;


volatile unsigned char CCPR1L @ 0x015;



volatile unsigned char CCPR1H @ 0x016;



volatile unsigned int CCPR1 @ 0x015;


volatile unsigned char CCP1CON @ 0x017;

volatile bit CCP1M0 @ ((unsigned)&CCP1CON*8)+0;
volatile bit CCP1M1 @ ((unsigned)&CCP1CON*8)+1;
volatile bit CCP1M2 @ ((unsigned)&CCP1CON*8)+2;
volatile bit CCP1M3 @ ((unsigned)&CCP1CON*8)+3;
volatile bit CCP1Y @ ((unsigned)&CCP1CON*8)+4;
volatile bit CCP1X @ ((unsigned)&CCP1CON*8)+5;

volatile union {
struct {
unsigned CCP1M : 4;
unsigned DC1B : 2;
};
struct {
unsigned CCP1M0 : 1;
unsigned CCP1M1 : 1;
unsigned CCP1M2 : 1;
unsigned CCP1M3 : 1;
unsigned CCP1Y : 1;
unsigned CCP1X : 1;
};
} CCP1CONbits @ 0x017;



volatile unsigned char RCSTA @ 0x018;

volatile bit RX9D @ ((unsigned)&RCSTA*8)+0;
volatile bit OERR @ ((unsigned)&RCSTA*8)+1;
volatile bit FERR @ ((unsigned)&RCSTA*8)+2;
volatile bit RXPARITY @ ((unsigned)&RCSTA*8)+3;
volatile bit CREN @ ((unsigned)&RCSTA*8)+4;
volatile bit SREN @ ((unsigned)&RCSTA*8)+5;
volatile bit RX9 @ ((unsigned)&RCSTA*8)+6;
volatile bit SPEN @ ((unsigned)&RCSTA*8)+7;
volatile bit RCD8 @ ((unsigned)&RCSTA*8)+0;
volatile bit RC9 @ ((unsigned)&RCSTA*8)+6;
volatile bit nRC8 @ ((unsigned)&RCSTA*8)+6;
volatile bit RC8_9 @ ((unsigned)&RCSTA*8)+6;


volatile unsigned char TXREG @ 0x019;



volatile unsigned char RCREG @ 0x01A;



volatile unsigned char OP1CON0 @ 0x01B;


volatile union {
struct {
unsigned OP1F : 4;
};
struct {
unsigned OP1F0 : 1;
unsigned OP1F1 : 1;
unsigned OP1F2 : 1;
unsigned OP1F3 : 1;
unsigned OP1ZLF : 1;
unsigned OP1POL : 1;
unsigned OP1OUT : 1;
unsigned OP1ON : 1;
};
} OP1CON0bits @ 0x01B;



volatile unsigned char OP1CON1 @ 0x01C;


volatile union {
struct {
unsigned OP1NCH : 2;
unsigned RSV : 2;
unsigned OP1PCH : 2;
};
struct {
unsigned OP1NCH0 : 1;
unsigned OP1NCH1 : 1;
unsigned RSV0 : 1;
unsigned RSV1 : 1;
unsigned OP1PCH0 : 1;
unsigned OP1PCH1 : 1;
unsigned OP1INTN : 1;
unsigned OP1INTP : 1;
};
} OP1CON1bits @ 0x01C;



volatile unsigned char OP1CON2 @ 0x01D;


volatile union {
struct {
unsigned RSV0 : 1;
unsigned RSV1 : 1;
unsigned RSV2 : 1;
unsigned RSV3 : 1;
unsigned A1O2N : 1;
unsigned A1NS : 1;
unsigned OP1A2DEN : 1;
unsigned OP1OUTEN : 1;
};
} OP1CON2bits @ 0x01D;



volatile unsigned char ADRESH @ 0x01E;



volatile unsigned char ADCON0 @ 0x01F;

volatile bit ADON @ ((unsigned)&ADCON0*8)+0;
volatile bit GO_nDONE @ ((unsigned)&ADCON0*8)+1;
volatile bit GO @ ((unsigned)&ADCON0*8)+1;
volatile bit CHS0 @ ((unsigned)&ADCON0*8)+2;
volatile bit CHS1 @ ((unsigned)&ADCON0*8)+3;
volatile bit CHS2 @ ((unsigned)&ADCON0*8)+4;
volatile bit CHS3 @ ((unsigned)&ADCON0*8)+5;
volatile bit nDONE @ ((unsigned)&ADCON0*8)+2;
volatile bit GO_DONE @ ((unsigned)&ADCON0*8)+2;

volatile union {
struct {
unsigned ADON : 1;
unsigned G0 : 1;
unsigned CHS : 4;
};
struct {
unsigned ADON : 1;
unsigned GO : 1;
unsigned CHS0 : 1;
unsigned CHS1 : 1;
unsigned CHS2 : 1;
unsigned CHS3 : 1;
};
} ADCON0bits @ 0x01f;

# 541
volatile unsigned char WDTCON @ 0x081;

volatile bit SWDTEN @ ((unsigned)&WDTCON*8)+0;

volatile union {
struct {
unsigned SWDTEN : 1;
};
} WDTCONbits @ 0x081;



volatile unsigned char TRISA @ 0x085;

volatile bit TRISA0 @ ((unsigned)&TRISA*8)+0;
volatile bit TRISA1 @ ((unsigned)&TRISA*8)+1;
volatile bit TRISA2 @ ((unsigned)&TRISA*8)+2;
volatile bit TRISA3 @ ((unsigned)&TRISA*8)+3;
volatile bit TRISA4 @ ((unsigned)&TRISA*8)+4;
volatile bit TRISA5 @ ((unsigned)&TRISA*8)+5;
volatile bit TRISA6 @ ((unsigned)&TRISA*8)+6;
volatile bit TRISA7 @ ((unsigned)&TRISA*8)+7;


volatile unsigned char TRISB @ 0x086;

volatile bit TRISB0 @ ((unsigned)&TRISB*8)+0;
volatile bit TRISB1 @ ((unsigned)&TRISB*8)+1;
volatile bit TRISB2 @ ((unsigned)&TRISB*8)+2;
volatile bit TRISB3 @ ((unsigned)&TRISB*8)+3;
volatile bit TRISB4 @ ((unsigned)&TRISB*8)+4;
volatile bit TRISB5 @ ((unsigned)&TRISB*8)+5;
volatile bit TRISB6 @ ((unsigned)&TRISB*8)+6;
volatile bit TRISB7 @ ((unsigned)&TRISB*8)+7;

volatile unsigned char DACCON @ 0x087;


volatile union {
struct {
unsigned DACCH : 2;
};
struct {
unsigned DACCH0 : 1;
unsigned DACCH1 : 1;
unsigned DAC0EN : 1;
unsigned DAC1EN : 1;
};
} DACCONbits @ 0x087;


volatile unsigned char DACR0 @ 0x088;
volatile unsigned char DACR1 @ 0x089;


volatile unsigned char PIE1 @ 0x08C;

volatile bit TMR1IE @ ((unsigned)&PIE1*8)+0;
volatile bit TMR2IE @ ((unsigned)&PIE1*8)+1;
volatile bit CCP1IE @ ((unsigned)&PIE1*8)+2;
volatile bit SSPIE @ ((unsigned)&PIE1*8)+3;
volatile bit TXIE @ ((unsigned)&PIE1*8)+4;
volatile bit RCIE @ ((unsigned)&PIE1*8)+5;
volatile bit INT1IE @ ((unsigned)&PIE1*8)+6;
volatile bit INT2IE @ ((unsigned)&PIE1*8)+7;


volatile unsigned char PIE2 @ 0x08D;

volatile bit OP1IE @ ((unsigned)&PIE2*8)+0;
volatile bit OP2IE @ ((unsigned)&PIE2*8)+1;
volatile bit ADIE @ ((unsigned)&PIE2*8)+2;
volatile bit LVDIE @ ((unsigned)&PIE2*8)+3;
volatile bit PWMIE @ ((unsigned)&PIE2*8)+4;
volatile bit BCLIE @ ((unsigned)&PIE2*8)+5;



volatile unsigned char PCON @ 0x08E;

volatile bit nBOR @ ((unsigned)&PCON*8)+0;
volatile bit nPOR @ ((unsigned)&PCON*8)+1;
volatile bit INTEDG2 @ ((unsigned)&PCON*8)+2;
volatile bit INTEDG1 @ ((unsigned)&PCON*8)+3;
volatile bit INTEDG0 @ ((unsigned)&PCON*8)+4;
volatile bit CKOE @ ((unsigned)&PCON*8)+5;
volatile bit I2C_AUX @ ((unsigned)&PCON*8)+6;
volatile bit nBO @ ((unsigned)&PCON*8)+0;



volatile unsigned char PWST @ 0x08F;


volatile unsigned char SSPADD2 @ 0x090;


volatile unsigned char SSPCON2 @ 0x091;
volatile bit SEN @ ((unsigned)&SSPCON2*8)+0;
volatile bit RSEN @ ((unsigned)&SSPCON2*8)+1;
volatile bit PEN @ ((unsigned)&SSPCON2*8)+2;
volatile bit RCEN @ ((unsigned)&SSPCON2*8)+3;
volatile bit ACKEN @ ((unsigned)&SSPCON2*8)+4;
volatile bit ACKDT @ ((unsigned)&SSPCON2*8)+5;
volatile bit ACKSTAT @ ((unsigned)&SSPCON2*8)+6;
volatile bit GCEN @ ((unsigned)&SSPCON2*8)+7;


volatile unsigned char PR2 @ 0x092;


volatile unsigned char SSPADD @ 0x093;


volatile unsigned char SSPSTAT @ 0x094;

volatile bit BF @ ((unsigned)&SSPSTAT*8)+0;
volatile bit UA @ ((unsigned)&SSPSTAT*8)+1;
volatile bit R_nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit S @ ((unsigned)&SSPSTAT*8)+3;
volatile bit P @ ((unsigned)&SSPSTAT*8)+4;
volatile bit D_nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit CKE @ ((unsigned)&SSPSTAT*8)+6;
volatile bit SMP @ ((unsigned)&SSPSTAT*8)+7;
volatile bit R @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D @ ((unsigned)&SSPSTAT*8)+5;
volatile bit I2C_READ @ ((unsigned)&SSPSTAT*8)+2;
volatile bit I2C_START @ ((unsigned)&SSPSTAT*8)+3;
volatile bit I2C_STOP @ ((unsigned)&SSPSTAT*8)+4;
volatile bit I2C_DATA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit R_W @ ((unsigned)&SSPSTAT*8)+2;
volatile bit D_A @ ((unsigned)&SSPSTAT*8)+5;
volatile bit READ_WRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit DATA_ADDRESS @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nW @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nA @ ((unsigned)&SSPSTAT*8)+5;
volatile bit nWRITE @ ((unsigned)&SSPSTAT*8)+2;
volatile bit nADDRESS @ ((unsigned)&SSPSTAT*8)+5;


volatile unsigned char PWMCON1 @ 0x096;

volatile bit PWM1ASE @ ((unsigned)&PWMCON1*8)+0;
volatile bit PWM1OP2ASEN @ ((unsigned)&PWMCON1*8)+1;
volatile bit PWM1OP1ASEN @ ((unsigned)&PWMCON1*8)+2;
volatile bit PWM1RSE @ ((unsigned)&PWMCON1*8)+4;
volatile bit PWM1OP2RSEN @ ((unsigned)&PWMCON1*8)+5;
volatile bit PWM1OP1RSEN @ ((unsigned)&PWMCON1*8)+6;



volatile unsigned char PWMCON0 @ 0x097;

volatile bit PWM1S @ ((unsigned)&PWMCON0*8)+6;



volatile unsigned char TXSTA @ 0x098;

volatile bit TX9D @ ((unsigned)&TXSTA*8)+0;
volatile bit TRMT @ ((unsigned)&TXSTA*8)+1;
volatile bit BRGH @ ((unsigned)&TXSTA*8)+2;
volatile bit TXPARITY @ ((unsigned)&TXSTA*8)+3;
volatile bit SYNC @ ((unsigned)&TXSTA*8)+4;
volatile bit TXEN @ ((unsigned)&TXSTA*8)+5;
volatile bit TX9 @ ((unsigned)&TXSTA*8)+6;
volatile bit CSRC @ ((unsigned)&TXSTA*8)+7;
volatile bit TXD8 @ ((unsigned)&TXSTA*8)+0;
volatile bit nTX8 @ ((unsigned)&TXSTA*8)+6;
volatile bit TX8_9 @ ((unsigned)&TXSTA*8)+6;


volatile unsigned char SPBRG @ 0x099;



volatile unsigned char UARTCON @ 0x09A;

volatile bit INVMODE @ ((unsigned)&UARTCON*8)+0;
volatile bit PARITY @ ((unsigned)&UARTCON*8)+1;
volatile bit RXODD_EVEN @ ((unsigned)&UARTCON*8)+2;
volatile bit BOUD_CLK @ ((unsigned)&UARTCON*8)+3;
volatile bit HALF_DUPLEX @ ((unsigned)&UARTCON*8)+4;
volatile bit DLSB @ ((unsigned)&UARTCON*8)+5;
volatile bit STOP_BIT1 @ ((unsigned)&UARTCON*8)+6;
volatile bit STOP_BIT0 @ ((unsigned)&UARTCON*8)+7;


volatile unsigned char OP2CON0 @ 0x09B;


volatile union {
struct {
unsigned OP2F : 4;
};
struct {
unsigned OP2F0 : 1;
unsigned OP2F1 : 1;
unsigned OP2F2 : 1;
unsigned OP2F3 : 1;
unsigned OP2ZLF : 1;
unsigned OP2POL : 1;
unsigned OP2OUT : 1;
unsigned OP2ON : 1;
};
} OP2CON0bits @ 0x09B;



volatile unsigned char OP2CON1 @ 0x09C;


volatile union {
struct {
unsigned OP2NCH : 3;
unsigned OP2PCH : 3;
};
struct {
unsigned OP2NCH0 : 1;
unsigned OP2NCH1 : 1;
unsigned OP2NCH2 : 1;
unsigned OP2PCH0 : 1;
unsigned OP2PCH1 : 1;
unsigned OP2PCH2 : 1;
unsigned OP2INTN : 1;
unsigned OP2INTP : 1;
};
} OP2CON1bits @ 0x09C;



volatile unsigned char OP2CON2 @ 0x09D;


volatile union {
struct {
unsigned PGA : 3;
};
struct {
unsigned PGA0 : 1;
unsigned PGA1 : 1;
unsigned PGA2 : 1;
unsigned PGAEN : 1;
unsigned A2O2N : 1;
unsigned A2NS : 1;
unsigned OP2A2DEN : 1;
unsigned OP2OUTEN : 1;
};
} OP2CON2bits @ 0x09D;



volatile unsigned char ADRESL @ 0x09E;



volatile unsigned char ADCON1 @ 0x09F;

volatile bit ADCS0 @ ((unsigned)&ADCON1*8)+0;
volatile bit ADCS1 @ ((unsigned)&ADCON1*8)+1;
volatile bit ADCS2 @ ((unsigned)&ADCON1*8)+2;
volatile bit ACQT0 @ ((unsigned)&ADCON1*8)+3;
volatile bit ACQT1 @ ((unsigned)&ADCON1*8)+4;
volatile bit ACQT2 @ ((unsigned)&ADCON1*8)+5;
volatile bit ADVREF0 @ ((unsigned)&ADCON1*8)+4;
volatile bit ADVERF1 @ ((unsigned)&ADCON1*8)+5;

volatile union {
struct {
unsigned ADCS : 3;
unsigned ACQT : 3;
unsigned ADVREF : 2;
};
struct {
unsigned ADCS0 : 1;
unsigned ADCS1 : 1;
unsigned ADCS2 : 1;
unsigned ACQT0 : 1;
unsigned ACQT1 : 1;
unsigned ACOT2 : 1;
unsigned ADVREF0 : 1;
unsigned ADVREF1 : 1;
};
} ADCON1bits @ 0x09f;

# 833
volatile unsigned char PAPU @ 0x105;



volatile unsigned char PBPU @ 0x106;



volatile unsigned char PBMASK @ 0x107;



volatile unsigned char CLKPR @ 0x108;

volatile bit CLKPS0 @ ((unsigned)&CLKPR*8)+0;
volatile bit CLKPS1 @ ((unsigned)&CLKPR*8)+1;
volatile bit CLKPCE @ ((unsigned)&CLKPR*8)+7;


volatile unsigned char SMCR @ 0x109;

volatile bit SE @ ((unsigned)&SMCR*8)+0;
volatile bit SM0 @ ((unsigned)&SMCR*8)+1;
volatile bit SM1 @ ((unsigned)&SMCR*8)+2;
volatile bit SM2 @ ((unsigned)&SMCR*8)+3;


volatile unsigned char ALG0 @ 0x10C;


volatile bit DACBIASEN @ ((unsigned)&ALG0*8)+4;
volatile bit IOVCCEN @ ((unsigned)&ALG0*8)+5;
volatile bit BIASEN @ ((unsigned)&ALG0*8)+6;
volatile bit LDO2P0EN @ ((unsigned)&ALG0*8)+7;


volatile unsigned char ALG1 @ 0x10D;



volatile unsigned char ALG2 @ 0x10E;



volatile unsigned char ALG3 @ 0x10F;

# 885
volatile unsigned char PAPD @ 0x185;




volatile unsigned char PBPD @ 0x186;



volatile unsigned char PAOD @ 0x187;
volatile bit PAOD6 @ ((unsigned)&PAOD*8)+6;
volatile bit PAOD7 @ ((unsigned)&PAOD*8)+7;



volatile unsigned char PBOD @ 0x188;
volatile bit PBOD6 @ ((unsigned)&PBOD*8)+6;



volatile unsigned char ALG4 @ 0x18C;



volatile unsigned char ALG5 @ 0x18D;



volatile unsigned char ALG6 @ 0x18E;



volatile unsigned char ALG7 @ 0x18F;

# 26 "D:\develop\190625\AK7030-OTP\common.h"
void clock_config();
void timer1_config();
void timer1_interrupt_config();

void adConverter_config();

void setAdcSampleChannel(unsigned char ucChannel);




void process_AD_Converter_Value();

# 44
unsigned int getAdOriginalCh1Value();
unsigned int getAdOriginaCh4Value();

unsigned int getAdOriginalCh14Value();

unsigned char isPermitSampleTime();

void clrSampeTime();

void setDAC0_ChannelValue(unsigned char ucValue);

void startTwelveHourTimer(unsigned int uiSetTime);
void startThreeHoursTimer(unsigned int uiSetTime);


void startTwentySecondsTimer();
unsigned char isFinishedTwentySecondsTimer();


void clearTwelveHoursTimer();
void clearThreeHoursTimer();
void clearTwentySecondsTimer();

unsigned char isFinishedTwelveHoursTimer();
unsigned char isFinishedThreeHoursTimer();

unsigned char getAD_ConvertFlag();
void setAD_ConvertFlag(unsigned char flag);

# 13 "D:\develop\190625\AK7030-OTP\periph.h"
void dac_init();
void op1_init();
void op2_init();
void int_enable(unsigned char mode);

void adc_test_init(unsigned char channel,unsigned char ref);

void adc_start();
unsigned int adc_get(void);


# 26 "D:\develop\190625\AK7030-OTP\main.c"
#pragma inline(_delay)
extern void _delay(unsigned long);

# 70
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x2FFF & 0x3FFF & 0x3FFF & 0x3FFF & 0x3FFF & 0x3FFF");;
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0x3FFF & 0x3FDF & 0x3FFF & 0x3FFE");;
asm("\tpsect config,class=CONFIG,delta=2"); asm("\tdw ""0X3FFF & 0x3FFF & 0x3FFF & 0x3FF8");;

# 82
static void clearAllTimer(void)
{
clearTwelveHoursTimer();
clearThreeHoursTimer();
clearTwentySecondsTimer();
}



static void clearPinPortAndTimer(void)
{
PB0 = 0;
PA0 = 0;
PA1 = 0;
PA2 = 0;
PA3 = 0;
PAOD7 = 0;
PA7 = 0;
clearAllTimer();
}


static void initPin(void)
{
PB6 = 1;
PBOD6 = 1;



PA0 = 0;
PA1 = 0;
PA2 = 0;
PA3 = 0;
PB0 = 0;
PB1 = 1;
PA6 = 0;
PA7 = 0;
PAOD7 = 0;

}

# 128
void main (void)
{
enum setp_Adc4
{
ADC4_STEP_INIT = 0,
ADC4_STEP_FIRST,
ADC4_STEP_SECOND,
ADC4_STEP_THIRD,
ADC4_STEP_FOURTH,
ADC4_STEP_FIFTH,
ADC4_STEP_SIXTH,
};


static unsigned char ucWaitTime1S = 0;

static unsigned char ucWaitTimeO3s = 0;

static unsigned char ucSmallTimerActionFlag = 0;

static unsigned char ucSetSmallActionFlag = 0;

TRISA0 = 0;
TRISA1 = 0;
TRISA2 = 0;
TRISA3 = 0;
TRISB0 = 0;
TRISB1 = 0;
TRISA6 = 0;
TRISA7 = 0;
TRISB6 = 0;


initPin();


TRISB2 = 1;

TRISB7 = 1;
TRISB4 = 1;

clock_config();
timer1_config();
timer1_interrupt_config();

adc_test_init(14,3);

dac_init();
op1_init();
op2_init();


adc_start();


enum AD_CHANNEL_4_VALUE_PATH
{
LESS_THAN_1911 = 0,
BETWEEN_1911_AND_2067,
BETWEEN_2067_AND_2204,
BETWEEN_2204_AND_2340,
MORE_THAN_2340,
};

enum MAIN_LOOP_STEP
{
MAIN_LOOP_STEP_INIT = 0,
MAIN_LOOP_STEP_FIRST,
MAIN_LOOP_STEP_SECOND,
MAIN_LOOP_STEP_THIRD,
MAIN_LOOP_STEP_FOURTH,
MAIN_LOOP_STEP_FIFTH,
MAIN_LOOP_STEP_SIXTH,
MAIN_LOOP_STEP_SEVENTH,
MAIN_LOOP_STEP_3_HOUR_BRANCH,
MAIN_LOOP_STEP_12_HOUR_END,
}


static enum MAIN_LOOP_STEP enumMainLoopStep = MAIN_LOOP_STEP_INIT;

static enum AD_CHANNEL_4_VALUE_PATH ucChannel4Type = 0;

static unsigned char ucTimerPowerLed = 0;


while(1)
{
asm(" clrwdt");

process_AD_Converter_Value();

if(isPermitSampleTime())
{
clrSampeTime();

if(ucTimerPowerLed < 30)
{
ucTimerPowerLed ++;
}
else
{
ucTimerPowerLed = 0;
PB1 = 0;
}


switch(enumMainLoopStep)
{
case MAIN_LOOP_STEP_INIT:
{
static unsigned char ucTimerZeroPoint5s = 0;
if(getAdOriginalCh14Value() > 1950)
{
ucTimerZeroPoint5s++;
}
else
ucTimerZeroPoint5s = 0;

if(ucTimerZeroPoint5s >= 5)
{
ucTimerZeroPoint5s = 0;
enumMainLoopStep = MAIN_LOOP_STEP_FIRST;
}
break;
}

case MAIN_LOOP_STEP_FIRST:
{
static unsigned char ucTimerZeroPoint3s = 0;


if(getAdOriginalCh14Value() > 1950)
{

enumMainLoopStep = MAIN_LOOP_STEP_SECOND;

ucTimerZeroPoint3s = 0;


}
else
{
ucTimerZeroPoint3s++;

if(ucTimerZeroPoint3s >= 3)
{
ucTimerZeroPoint3s = 0;

clearPinPortAndTimer();
}
}


break;
}

case MAIN_LOOP_STEP_SECOND:
{
static unsigned char ucTimerP5s = 0;

PA6 = 1;

if(ucTimerP5s < 5)
ucTimerP5s++;
else
{
ucTimerP5s = 0;

enumMainLoopStep = MAIN_LOOP_STEP_THIRD;
}

break;
}

case MAIN_LOOP_STEP_THIRD:
{
static unsigned char ucTimerADC1ZeroP5s = 0;

static unsigned char ucTimerLessADC1ZeroP5s = 0;

static unsigned char ucTimerLessADC1ZeroP5sFlag = 0;

static unsigned char ucTimerRightP5s = 0;

if(getAdOriginalCh1Value() < 115)
{
ucTimerADC1ZeroP5s = 0;

ucTimerLessADC1ZeroP5s++;
}
else
{
ucTimerADC1ZeroP5s++;

ucTimerLessADC1ZeroP5s = 0;
}

if(ucTimerADC1ZeroP5s >= 5)
{
ucTimerADC1ZeroP5s = 0;
enumMainLoopStep = MAIN_LOOP_STEP_FOURTH;
}
else if( ucTimerLessADC1ZeroP5s >= 5)
{

if(getAdOriginalCh1Value() < 105)
{
ucTimerRightP5s++;
}
else
{
ucTimerRightP5s = 0;
}

if(ucTimerRightP5s >= 5)
{
ucTimerLessADC1ZeroP5s = 0;
ucTimerRightP5s = 0;
enumMainLoopStep = MAIN_LOOP_STEP_3_HOUR_BRANCH;
}
else
{
;
}
}
else
{
;
}

if((MAIN_LOOP_STEP_3_HOUR_BRANCH == enumMainLoopStep) || (MAIN_LOOP_STEP_FOURTH == enumMainLoopStep))
{
ucTimerRightP5s = 0;
ucTimerADC1ZeroP5s = 0;
ucTimerLessADC1ZeroP5s = 0;
}


break;
}

case MAIN_LOOP_STEP_FOURTH:
{

startTwelveHourTimer(600);
enumMainLoopStep = MAIN_LOOP_STEP_FIFTH;

break;
}

case MAIN_LOOP_STEP_FIFTH:
{

if(isFinishedTwelveHoursTimer())
{
enumMainLoopStep = MAIN_LOOP_STEP_12_HOUR_END;
}
else
{
static enum setp_Adc4 ucADC4_Step = ADC4_STEP_INIT;

switch(ucADC4_Step)
{
case ADC4_STEP_INIT:
{
startTwentySecondsTimer();
ucADC4_Step = ADC4_STEP_FIRST;
break;
}

case ADC4_STEP_FIRST:
{
if(getAdOriginaCh4Value() < 1911)
ucChannel4Type = LESS_THAN_1911;
else if(getAdOriginaCh4Value() < 2067)
ucChannel4Type = BETWEEN_1911_AND_2067;
else if(getAdOriginaCh4Value() < 2204)
ucChannel4Type = BETWEEN_2067_AND_2204;
else if(getAdOriginaCh4Value() < 2340)
ucChannel4Type = BETWEEN_2204_AND_2340;
else
ucChannel4Type = MORE_THAN_2340;

ucADC4_Step = ADC4_STEP_SECOND;
break;
}

case ADC4_STEP_SECOND:
{
switch(ucChannel4Type)
{

case LESS_THAN_1911:
{
static unsigned char ucTimerDelay = 0;
static unsigned char ucLoaderStep = 0;

switch(ucLoaderStep)
{
case 0:
{
PB0 = 1;
ucLoaderStep++;
break;
}

case 1:
{
if(ucTimerDelay >= 5)
{
PA0 = 1;
ucTimerDelay = 0;
ucLoaderStep++;
}
else
ucTimerDelay++;
break;
}

case 2:
{
if(ucTimerDelay >= 5)
{
PA1= 1;
ucTimerDelay = 0;
ucLoaderStep++;
}
else
ucTimerDelay++;
break;
}


case 3:
{
if(ucTimerDelay >= 5)
{
PA2= 1;
ucTimerDelay = 0;
ucLoaderStep++;
}
else
ucTimerDelay++;
break;
}

case 4:
{
if(ucTimerDelay >= 5)
{
PA3 = 1;
ucTimerDelay = 0;
ucLoaderStep++;
}
else
ucTimerDelay++;
break;
}

case 5:
{
if(ucTimerDelay >= 5)
{
PB0 = 0;
PA0 = 0;
PA1 = 0;
PA2 = 0;
PA3 = 0;
ucTimerDelay = 0;
ucLoaderStep++;
}
else
ucTimerDelay++;
break;
}

case 6:
{
if(ucTimerDelay >= 2)
{
ucTimerDelay = 0;

ucLoaderStep = 0;
ucADC4_Step = ADC4_STEP_THIRD;
}
else
ucTimerDelay++;
break;
}


default:
break;
}

break;
}

case BETWEEN_1911_AND_2067:
{
static unsigned char ucTimerDelay1 = 0;
static unsigned char ucLoaderStep1 = 0;
switch(ucLoaderStep1)
{
case 0:
{
PB0 = 1;
ucLoaderStep1++;
break;
}

case 1:
{
if(ucTimerDelay1 >= 5)
{
PA0 = 1;
ucTimerDelay1 = 0;
ucLoaderStep1++;
}
else
ucTimerDelay1++;
break;
}

case 2:
{
if(ucTimerDelay1 >= 5)
{
PA1= 1;
ucTimerDelay1 = 0;
ucLoaderStep1++;
}
else
ucTimerDelay1++;
break;
}

case 3:
{
if(ucTimerDelay1 >= 5)
{
PA2 = 1;
ucTimerDelay1 = 0;
ucLoaderStep1++;
}
else
ucTimerDelay1++;
break;
}

case 4:
{
if(ucTimerDelay1 >= 5)
{
PA3 = 1;
ucTimerDelay1 = 0;
ucLoaderStep1++;
}
else
ucTimerDelay1++;
break;
}

case 5:
{
if(ucTimerDelay1 >= 5)
{
PA0 = 0;
PA1 = 0;
PA2 = 0;
PA3 = 0;
ucTimerDelay1 = 0;
ucLoaderStep1++;
}
else
ucTimerDelay1++;
break;
}

case 6:
{
if(ucTimerDelay1 >= 2)
{
ucTimerDelay1 = 0;

ucLoaderStep1 = 0;
ucADC4_Step = ADC4_STEP_THIRD;
}
else
ucTimerDelay1++;
break;
}


default:
break;
}

break;
}


case BETWEEN_2067_AND_2204:
{
static unsigned char ucTimerDelay2 = 0;
static unsigned char ucLoaderStep2 = 0;
switch(ucLoaderStep2)
{
case 0:
{
PB0 = 1;
PA0 = 1;
ucLoaderStep2++;
break;
}

case 1:
{
if(ucTimerDelay2 >= 5)
{
PA1 = 1;
ucTimerDelay2 = 0;
ucLoaderStep2++;
}
else
ucTimerDelay2++;
break;
}

case 2:
{
if(ucTimerDelay2 >= 5)
{
PA2 = 1;
ucTimerDelay2 = 0;
ucLoaderStep2++;
}
else
ucTimerDelay2++;
break;
}

case 3:
{
if(ucTimerDelay2 >= 5)
{
PA3 = 1;
ucTimerDelay2 = 0;
ucLoaderStep2++;
}
else
ucTimerDelay2++;
break;
}

case 4:
{
if(ucTimerDelay2 >= 5)
{

PA1 = 0;
PA2 = 0;
PA3 = 0;
ucTimerDelay2 = 0;
ucLoaderStep2++;
}
else
ucTimerDelay2++;
break;
}

case 5:
{
if(ucTimerDelay2 >= 2)
{
ucTimerDelay2 = 0;

ucLoaderStep2 = 0;
ucADC4_Step = ADC4_STEP_THIRD;;
}
else
ucTimerDelay2++;
break;
}


default:
break;
}

break;
}


case BETWEEN_2204_AND_2340:
{
static unsigned char ucTimerDelay3 = 0;
static unsigned char ucLoaderStep3 = 0;
switch(ucLoaderStep3)
{
case 0:
{
PB0 = 1;
PA0 = 1;
PA1 = 1;
ucLoaderStep3++;
break;
}

case 1:
{
if(ucTimerDelay3 >= 5)
{
PA2 = 1;
ucTimerDelay3 = 0;
ucLoaderStep3++;
}
else
ucTimerDelay3++;
break;
}

case 2:
{
if(ucTimerDelay3 >= 5)
{
PA3 = 1;
ucTimerDelay3 = 0;
ucLoaderStep3++;
}
else
ucTimerDelay3++;
break;
}


case 3:
{
if(ucTimerDelay3 >= 5)
{

PA2 = 0;
PA3 = 0;
ucTimerDelay3 = 0;
ucLoaderStep3++;
}
else
ucTimerDelay3++;
break;
}

case 4:
{
if(ucTimerDelay3 >= 2)
{
ucTimerDelay3 = 0;

ucLoaderStep3 = 0;
ucADC4_Step = ADC4_STEP_THIRD;;
}
else
ucTimerDelay3++;
break;
}


default:
break;
}

break;
}


case MORE_THAN_2340:
{
static unsigned char ucTimerDelay4 = 0;
static unsigned char ucLoaderStep4 = 0;
switch(ucLoaderStep4)
{
case 0:
{
PB0 = 1;
PA0 = 1;
PA1 = 1;
PA2 = 1;
ucLoaderStep4++;
break;
}

case 1:
{
if(ucTimerDelay4 >= 5)
{
PA3 = 1;
ucTimerDelay4 = 0;
ucLoaderStep4++;
}
else
ucTimerDelay4++;
break;
}

case 2:
{
if(ucTimerDelay4 >= 5)
{
PA3 = 0;
ucTimerDelay4 = 0;
ucLoaderStep4++;
}
else
ucTimerDelay4++;
break;
}

case 3:
{
if(ucTimerDelay4 >= 2)
{
ucTimerDelay4 = 0;

ucLoaderStep4 = 0;
ucADC4_Step = ADC4_STEP_THIRD;
}
else
ucTimerDelay4++;
break;
}


default:
break;
}

break;
}

default:
break;
}

break;
}

case ADC4_STEP_THIRD:
{
static unsigned char ucTimerDelayP5s = 0;

static unsigned char ucTimerPA6DelayP1s = 0;

static unsigned char ucTimerPB6DelayP1s = 0;

if(isFinishedTwentySecondsTimer())
{
if(ucTimerPA6DelayP1s < 1)
{
PA6 = 0;
ucTimerPA6DelayP1s++;
}
else
{
if(ucTimerPB6DelayP1s < 1)
{
PBOD6 =0;
PB6 = 1;
ucTimerPB6DelayP1s++;
}
else
{
if(ucTimerDelayP5s < 3)
{
ucTimerDelayP5s++;
}
else
{

ucTimerDelayP5s = 0;

ucTimerPB6DelayP1s = 0;
ucTimerPA6DelayP1s = 0;

static unsigned char ucTimerForDACR0_CNT1 = 0, ucTimerForDACR0_CNT2 = 0;

static unsigned char ucTimerForDACR0_CNT1_f = 0, ucTimerForDACR0_CNT2_f = 0;

if((getAdOriginalCh14Value() > 2800))
{
ucTimerForDACR0_CNT1++;
ucTimerForDACR0_CNT2 = 0;
}
else
{
ucTimerForDACR0_CNT2 = 0;
ucTimerForDACR0_CNT1++;
}

if(ucTimerForDACR0_CNT1 >= 3)
ucTimerForDACR0_CNT1_f = 1;

if(ucTimerForDACR0_CNT2 >= 3)
ucTimerForDACR0_CNT2_f = 1;

if(ucTimerForDACR0_CNT1_f)
{
DACR0=0x0F;
ucADC4_Step = ADC4_STEP_FOURTH;
}
else if(ucTimerForDACR0_CNT2_f)
{
DACR0=0x07;
ucADC4_Step = ADC4_STEP_FOURTH;
}
else
{
;
}

if(ADC4_STEP_FOURTH == ucADC4_Step)
{
ucTimerForDACR0_CNT1 = 0;
ucTimerForDACR0_CNT2 = 0;
ucTimerForDACR0_CNT1_f = 0;
ucTimerForDACR0_CNT2_f = 0;
}
}
}
}
}
else
ucADC4_Step = ADC4_STEP_FIRST;

break;
}

case ADC4_STEP_FOURTH:
{
static unsigned char ucTimer1s = 0;

static unsigned char ucTimerSeond1s = 0;

if(ucTimerSeond1s < 3)
{
ucTimerSeond1s++;
}
else
{
ucTimerSeond1s = 0;

if(ucTimer1s < 3)
{
ucTimer1s++;
PB6 = 1;
PBOD6 = 1;
}
else
{
ucTimer1s = 0;

enumMainLoopStep = MAIN_LOOP_STEP_FIRST;
ucADC4_Step = ADC4_STEP_INIT;
}
}

break;
}

default:
break;
}

}

break;
}

case MAIN_LOOP_STEP_3_HOUR_BRANCH:
{
enum hour_3_branch_step{
HOUR_3_BRANCH_STEP_FIRST,
HOUR_3_BRANCH_STEP_SECOND,
HOUR_3_BRANCH_STEP_THIRD,
};

static enum hour_3_branch_step enumBranchStep = HOUR_3_BRANCH_STEP_FIRST;

switch(enumBranchStep)
{
case HOUR_3_BRANCH_STEP_FIRST:
{
PA7 = 1;
PAOD7 = 1;
startThreeHoursTimer(60);

PB0 = 1;
PA0 = 1;
PA1 = 1;
PA2 = 1;
PA3 = 1;

enumBranchStep = HOUR_3_BRANCH_STEP_SECOND;
break;
}

case HOUR_3_BRANCH_STEP_SECOND:
{
static unsigned char ucTimer20s = 0;

if(ucTimer20s < 200)
{
ucTimer20s++;

}
else
{

ucTimer20s = 0;

enumBranchStep = HOUR_3_BRANCH_STEP_THIRD;

PA6 = 0;
}
break;
}

case HOUR_3_BRANCH_STEP_THIRD:
{
if(isFinishedThreeHoursTimer())
{
enumBranchStep = HOUR_3_BRANCH_STEP_FIRST;
enumMainLoopStep = MAIN_LOOP_STEP_12_HOUR_END;
}
else
{
static unsigned char ucTimerX1P5s = 0;

static unsigned char ucTimerLessX1P5s = 0;

if(getAdOriginalCh1Value() < 130)
{
ucTimerX1P5s = 0;
ucTimerLessX1P5s++;
}
else
{
ucTimerX1P5s++;
ucTimerLessX1P5s = 0;
}

if(ucTimerX1P5s >= 5)
{
ucTimerX1P5s = 0;
PAOD7 = 0;
PA7 = 0;
clearThreeHoursTimer();

enumBranchStep = HOUR_3_BRANCH_STEP_FIRST;

enumMainLoopStep = MAIN_LOOP_STEP_SECOND;
}
else if(ucTimerLessX1P5s >= 5)
{
static unsigned char ucTimerX2P5s = 0;

static unsigned char ucTimerLessX2P5s = 0;

if(getAdOriginalCh14Value() >= 1950)
{
ucTimerX2P5s++;
ucTimerLessX2P5s = 0;
}
else
{
ucTimerX2P5s = 0;
ucTimerLessX2P5s++;
}

if(ucTimerX2P5s >= 5)
{
ucTimerX2P5s = 0;
}
else if(ucTimerLessX2P5s >= 5)
{
clearPinPortAndTimer();
enumMainLoopStep = MAIN_LOOP_STEP_FIRST;
}
else
{
;
}
}
else
{
;
}

}

break;
}


default:
break;
}

break;
}

case MAIN_LOOP_STEP_12_HOUR_END:
{
enum INTERNAL_STEP {
INTERNAL_FIRST_STEP,
INTERNAL_SECOND_STEP,
INTERNAL_THIRD_STEP,
INTERNAL_FOUTTH_STEP,
};

static enum INTERNAL_STEP enumInteralStep = INTERNAL_FIRST_STEP;

switch (enumInteralStep)
{
case INTERNAL_FIRST_STEP:
{
PB0 = 0;
PB1 = 0;
PA0 = 0;
PA1 = 0;
PA2 = 0;
PA3 = 0;
PBOD6 = 0;
PB6 = 1;
PA6 =0;

enumInteralStep = INTERNAL_SECOND_STEP;
break;
}

case INTERNAL_SECOND_STEP:
{
static unsigned char ucTimer1s = 0;

if(getAdOriginalCh14Value() <= 1000)
{
ucTimer1s++;
}
else
ucTimer1s = 0;

if(ucTimer1s >= 10)
{
enumInteralStep = INTERNAL_THIRD_STEP;
ucTimer1s = 0;
}
break;
}

case INTERNAL_THIRD_STEP:
{
static unsigned char ucTimerP3s = 0;

if(getAdOriginalCh14Value() >= 1950)
{
ucTimerP3s++;
}
else
ucTimerP3s = 0;

if(ucTimerP3s >= 3)
{
enumInteralStep = INTERNAL_FIRST_STEP;
ucTimerP3s = 0;
clearAllTimer();

DACR0=0x0F;
initPin();


enumMainLoopStep = MAIN_LOOP_STEP_INIT;

}
break;
}

default:
break;
}

break;
}

default:
break;
}

}
}


}

