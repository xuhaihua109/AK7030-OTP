

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Dec 09 15:15:08 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text468,local,class=CODE,delta=2
    16                           	psect	text473,local,class=CODE,delta=2
    17                           	psect	text474,local,class=CODE,delta=2
    18                           	psect	text475,local,class=CODE,delta=2
    19                           	psect	text476,local,class=CODE,delta=2
    20                           	psect	text477,local,class=CODE,delta=2
    21                           	psect	text478,local,class=CODE,delta=2
    22                           	psect	text479,local,class=CODE,delta=2
    23                           	psect	text480,local,class=CODE,delta=2
    24                           	psect	text482,local,class=CODE,delta=2
    25                           	psect	text483,local,class=CODE,delta=2
    26                           	psect	text484,local,class=CODE,delta=2
    27                           	psect	text485,local,class=CODE,delta=2
    28                           	psect	text486,local,class=CODE,delta=2
    29                           	psect	text487,local,class=CODE,delta=2
    30                           	psect	text488,local,class=CODE,delta=2
    31                           	psect	text489,local,class=CODE,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text492,local,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  000A                     	;#
    37                           
    38                           	psect	config
    39  2000  2FFF               	dw	12287	;#
    40  2001  3FDE               	dw	16350	;#
    41  2002  3FF8               	dw	16376	;#
    42                           
    43                           	psect	idataBANK0
    44  0000                     __pidataBANK0:	
    45  001F                     _ADCON0	set	31
    46  001E                     _ADRESH	set	30
    47  001B                     _OP1CON0	set	27
    48  001C                     _OP1CON1	set	28
    49  001D                     _OP1CON2	set	29
    50  0010                     _T1CON	set	16
    51  000F                     _TMR1H	set	15
    52  000E                     _TMR1L	set	14
    53  006A                     _ADIF	set	106
    54  00F8                     _ADON	set	248
    55  005F                     _GIE	set	95
    56  00F9                     _GO	set	249
    57  0028                     _PA0	set	40
    58  0029                     _PA1	set	41
    59  002A                     _PA2	set	42
    60  002B                     _PA3	set	43
    61  0032                     _PB2	set	50
    62  005E                     _PEIE	set	94
    63  0060                     _TMR1IF	set	96
    64  009F                     _ADCON1	set	159
    65  009E                     _ADRESL	set	158
    66  0087                     _DACCON	set	135
    67  0088                     _DACR0	set	136
    68  009B                     _OP2CON0	set	155
    69  009C                     _OP2CON1	set	156
    70  009D                     _OP2CON2	set	157
    71  046A                     _ADIE	set	1130
    72  0460                     _TMR1IE	set	1120
    73  0428                     _TRISA0	set	1064
    74  0429                     _TRISA1	set	1065
    75  042A                     _TRISA2	set	1066
    76  042B                     _TRISA3	set	1067
    77  042F                     _TRISA7	set	1071
    78  0430                     _TRISB0	set	1072
    79  0431                     _TRISB1	set	1073
    80  0432                     _TRISB2	set	1074
    81  0433                     _TRISB3	set	1075
    82  0434                     _TRISB4	set	1076
    83  0435                     _TRISB5	set	1077
    84  0436                     _TRISB6	set	1078
    85  0437                     _TRISB7	set	1079
    86  0108                     _CLKPR	set	264
    87  0847                     _CLKPCE	set	2119
    88                           
    89                           	psect	cinit
    90  01E1                     start_initialization:	
    91  01E1  3020               	movlw	low __pbssBANK0
    92                           
    93                           ; Clear objects allocated to COMMON
    94  01E2  01F6               	clrf	__pbssCOMMON& (0+127)
    95  01E3  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    96  01E4  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    97  01E5  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
    98  01E6  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
    99                           
   100                           ; Clear objects allocated to BANK0
   101  01E7  1383               	bcf	3,7	;select IRP bank0
   102  01E8  0084               	movwf	4
   103  01E9  303F               	movlw	low (__pbssBANK0+31)
   104  01EA  118A  2224         	fcall	clear_ram
   105                           
   106                           ;initializer for _sampleChannelSelect
   107  01EC  300D               	movlw	13
   108  01ED  00C4               	movwf	__pdataBANK0& (0+127)
   109  01EE                     end_of_initialization:	
   110                           ;End of C runtime variable initialization code
   111                           
   112  01EE  0183               	clrf	3
   113  01EF  118A  280D         	ljmp	_main	;jump to C main() function
   114                           
   115                           	psect	bssCOMMON
   116  0076                     __pbssCOMMON:	
   117  0076                     _uiBigTimer:	
   118  0076                     	ds	2
   119  0078                     ISR@ucTimer1sCnt:	
   120  0078                     	ds	1
   121  0079                     _adc_convert_flag:	
   122  0079                     	ds	1
   123  007A                     _timer:	
   124  007A                     	ds	1
   125                           
   126                           	psect	bssBANK0
   127  0020                     __pbssBANK0:	
   128  0020                     _buffer_Sample_AD_Value:	
   129  0020                     	ds	12
   130  002C                     _adc_original_CH13_value:	
   131  002C                     	ds	2
   132  002E                     _adc_original_value:	
   133  002E                     	ds	2
   134  0030                     _multiFilterMaxValue:	
   135  0030                     	ds	2
   136  0032                     _multiFilterMinValue:	
   137  0032                     	ds	2
   138  0034                     _uiSmallTimer:	
   139  0034                     	ds	2
   140  0036                     _sampleTimes:	
   141  0036                     	ds	1
   142  0037                     main@ampStep:	
   143  0037                     	ds	1
   144  0038                     main@tDA_timer:	
   145  0038                     	ds	1
   146  0039                     main@ucCheckBatteryCnt:	
   147  0039                     	ds	1
   148  003A                     main@ucConfirmTimer1S:	
   149  003A                     	ds	1
   150  003B                     main@ucConfirmTimerZptS:	
   151  003B                     	ds	1
   152  003C                     main@ucConfrimeCnt:	
   153  003C                     	ds	1
   154  003D                     main@ucInit:	
   155  003D                     	ds	1
   156  003E                     main@ucInstalledBatteryCnt:	
   157  003E                     	ds	1
   158                           
   159                           	psect	dataBANK0
   160  0044                     __pdataBANK0:	
   161  0044                     _sampleChannelSelect:	
   162  0044                     	ds	1
   163                           
   164                           	psect	clrtext
   165  0224                     clear_ram:	
   166                           ;	Called with FSR containing the base address, and
   167                           ;	W with the last address+1
   168                           
   169  0224  0064               	clrwdt	;clear the watchdog before getting into this loop
   170  0225                     clrloop:	
   171  0225  0180               	clrf	0	;clear RAM location pointed to by FSR
   172  0226  0A84               	incf	4,f	;increment pointer
   173  0227  0604               	xorwf	4,w	;XOR with final address
   174  0228  1903               	btfsc	3,2	;have we reached the end yet?
   175  0229  3400               	retlw	0	;all done for this memory range, return
   176  022A  0604               	xorwf	4,w	;XOR again to restore value
   177  022B  2A25               	goto	clrloop	;do the next byte
   178                           
   179                           	psect	cstackCOMMON
   180  0070                     __pcstackCOMMON:	
   181  0070                     ?_clock_config:	
   182  0070                     ?_timer1_config:	
   183                           ; 0 bytes @ 0x0
   184                           
   185  0070                     ?_timer1_interrupt_config:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_dac_init:	
   189                           ; 0 bytes @ 0x0
   190                           
   191  0070                     ?_op1_init:	
   192                           ; 0 bytes @ 0x0
   193                           
   194  0070                     ?_op2_init:	
   195                           ; 0 bytes @ 0x0
   196                           
   197  0070                     ?_adc_start:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_clrSampeTime:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ?_process_AD_Converter_Value:	
   204                           ; 0 bytes @ 0x0
   205                           
   206  0070                     ?_setDAC0_ChannelValue:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_startBigTimer:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_startSmallTimer:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?_AD_Sample:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_main:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_setAD_ConvertFlag:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_ISR:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?i1_setAD_ConvertFlag:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ??i1_setAD_ConvertFlag:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?_isPermitSampleTime:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_isFinishedBigTimer:	
   237                           ; 1 bytes @ 0x0
   238                           
   239  0070                     ?_isFinishedSmallTimer:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_getAD_ConvertFlag:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_adc_get:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     i1setAD_ConvertFlag@flag:	
   249                           ; 2 bytes @ 0x0
   250                           
   251                           
   252                           ; 1 bytes @ 0x0
   253  0070                     	ds	2
   254  0072                     ??_adc_get:	
   255  0072                     adc_get@val:	
   256                           ; 0 bytes @ 0x2
   257                           
   258                           
   259                           ; 2 bytes @ 0x2
   260  0072                     	ds	2
   261  0074                     ??_ISR:	
   262                           
   263                           ; 0 bytes @ 0x4
   264  0074                     	ds	2
   265                           
   266                           	psect	cstackBANK0
   267  003F                     __pcstackBANK0:	
   268  003F                     ??_clock_config:	
   269  003F                     ??_timer1_config:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  003F                     ??_timer1_interrupt_config:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  003F                     ?_adc_test_init:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  003F                     ??_dac_init:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  003F                     ??_op1_init:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  003F                     ??_op2_init:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  003F                     ??_adc_start:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  003F                     ??_isPermitSampleTime:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  003F                     ??_clrSampeTime:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  003F                     ??_setDAC0_ChannelValue:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  003F                     ??_startBigTimer:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  003F                     ??_startSmallTimer:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  003F                     ??_isFinishedBigTimer:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  003F                     ??_isFinishedSmallTimer:	
   309                           ; 0 bytes @ 0x0
   310                           
   311  003F                     ??_getAD_ConvertFlag:	
   312                           ; 0 bytes @ 0x0
   313                           
   314  003F                     ??_setAD_ConvertFlag:	
   315                           ; 0 bytes @ 0x0
   316                           
   317  003F                     ?_getAdOriginalCh13Value:	
   318                           ; 0 bytes @ 0x0
   319                           
   320  003F                     ?_getAdOriginalValue:	
   321                           ; 2 bytes @ 0x0
   322                           
   323  003F                     setAD_ConvertFlag@flag:	
   324                           ; 2 bytes @ 0x0
   325                           
   326  003F                     setDAC0_ChannelValue@ucValue:	
   327                           ; 1 bytes @ 0x0
   328                           
   329  003F                     adc_test_init@ref:	
   330                           ; 1 bytes @ 0x0
   331                           
   332                           
   333                           ; 1 bytes @ 0x0
   334  003F                     	ds	1
   335  0040                     ??_adc_test_init:	
   336                           
   337                           ; 0 bytes @ 0x1
   338  0040                     	ds	1
   339  0041                     ??_getAdOriginalCh13Value:	
   340  0041                     ??_AD_Sample:	
   341                           ; 0 bytes @ 0x2
   342                           
   343  0041                     ??_getAdOriginalValue:	
   344                           ; 0 bytes @ 0x2
   345                           
   346  0041                     adc_test_init@channel:	
   347                           ; 0 bytes @ 0x2
   348                           
   349                           
   350                           ; 1 bytes @ 0x2
   351  0041                     	ds	2
   352  0043                     AD_Sample@index:	
   353                           
   354                           ; 1 bytes @ 0x4
   355  0043                     	ds	1
   356  0044                     ??_process_AD_Converter_Value:	
   357  0044                     ??_main:	
   358                           ; 0 bytes @ 0x5
   359                           
   360                           
   361                           	psect	maintext
   362  000D                     __pmaintext:	
   363                           ; 0 bytes @ 0x5
   364 ;;Data sizes: Strings 0, constant 0, data 1, bss 36, persistent 0 stack 0
   365 ;;Auto spaces:   Size  Autos    Used
   366 ;; COMMON          14      6      11
   367 ;; BANK0           80      5      37
   368 ;; BANK1           80      0       0
   369 ;; BANK3           96      0       0
   370 ;; BANK2           96      0       0
   371 ;;
   372 ;; Pointer list with targets:
   373 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   374 ;;
   375 ;; ?_getAdOriginalCh13Value	unsigned int  size(1) Largest target is 0
   376 ;;
   377 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   378 ;;
   379 ;;
   380 ;; Critical Paths under _main in COMMON
   381 ;;
   382 ;;   None.
   383 ;;
   384 ;; Critical Paths under _ISR in COMMON
   385 ;;
   386 ;;   _ISR->_adc_get
   387 ;;
   388 ;; Critical Paths under _main in BANK0
   389 ;;
   390 ;;   _process_AD_Converter_Value->_AD_Sample
   391 ;;   _AD_Sample->_getAdOriginalValue
   392 ;;
   393 ;; Critical Paths under _ISR in BANK0
   394 ;;
   395 ;;   None.
   396 ;;
   397 ;; Critical Paths under _main in BANK1
   398 ;;
   399 ;;   None.
   400 ;;
   401 ;; Critical Paths under _ISR in BANK1
   402 ;;
   403 ;;   None.
   404 ;;
   405 ;; Critical Paths under _main in BANK3
   406 ;;
   407 ;;   None.
   408 ;;
   409 ;; Critical Paths under _ISR in BANK3
   410 ;;
   411 ;;   None.
   412 ;;
   413 ;; Critical Paths under _main in BANK2
   414 ;;
   415 ;;   None.
   416 ;;
   417 ;; Critical Paths under _ISR in BANK2
   418 ;;
   419 ;;   None.
   420 ;;
   421 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   422 ;;
   423 ;;
   424 ;;Call Graph Tables:
   425 ;;
   426 ;; ---------------------------------------------------------------------------------
   427 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   428 ;; ---------------------------------------------------------------------------------
   429 ;; (0) _main                                                 0     0      0     156
   430 ;;                       _clock_config
   431 ;;                      _timer1_config
   432 ;;            _timer1_interrupt_config
   433 ;;                      _adc_test_init
   434 ;;                           _dac_init
   435 ;;                           _op1_init
   436 ;;                           _op2_init
   437 ;;                          _adc_start
   438 ;;                 _isPermitSampleTime
   439 ;;                       _clrSampeTime
   440 ;;         _process_AD_Converter_Value
   441 ;;             _getAdOriginalCh13Value
   442 ;;               _setDAC0_ChannelValue
   443 ;;                      _startBigTimer
   444 ;;                    _startSmallTimer
   445 ;;                 _isFinishedBigTimer
   446 ;;               _isFinishedSmallTimer
   447 ;; ---------------------------------------------------------------------------------
   448 ;; (1) _process_AD_Converter_Value                           0     0      0      90
   449 ;;                  _getAD_ConvertFlag
   450 ;;                  _setAD_ConvertFlag
   451 ;;                          _AD_Sample
   452 ;;                          _adc_start
   453 ;; ---------------------------------------------------------------------------------
   454 ;; (2) _AD_Sample                                            3     3      0      68
   455 ;;                                              2 BANK0      3     3      0
   456 ;;                 _getAdOriginalValue
   457 ;; ---------------------------------------------------------------------------------
   458 ;; (3) _getAdOriginalValue                                   2     0      2       0
   459 ;;                                              0 BANK0      2     0      2
   460 ;; ---------------------------------------------------------------------------------
   461 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   462 ;;                                              0 BANK0      1     1      0
   463 ;; ---------------------------------------------------------------------------------
   464 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   465 ;; ---------------------------------------------------------------------------------
   466 ;; (1) _isFinishedSmallTimer                                 0     0      0       0
   467 ;; ---------------------------------------------------------------------------------
   468 ;; (1) _isFinishedBigTimer                                   0     0      0       0
   469 ;; ---------------------------------------------------------------------------------
   470 ;; (1) _startSmallTimer                                      0     0      0       0
   471 ;; ---------------------------------------------------------------------------------
   472 ;; (1) _startBigTimer                                        0     0      0       0
   473 ;; ---------------------------------------------------------------------------------
   474 ;; (1) _setDAC0_ChannelValue                                 1     1      0      22
   475 ;;                                              0 BANK0      1     1      0
   476 ;; ---------------------------------------------------------------------------------
   477 ;; (1) _getAdOriginalCh13Value                               2     0      2       0
   478 ;;                                              0 BANK0      2     0      2
   479 ;; ---------------------------------------------------------------------------------
   480 ;; (1) _clrSampeTime                                         0     0      0       0
   481 ;; ---------------------------------------------------------------------------------
   482 ;; (1) _isPermitSampleTime                                   0     0      0       0
   483 ;; ---------------------------------------------------------------------------------
   484 ;; (2) _adc_start                                            0     0      0       0
   485 ;; ---------------------------------------------------------------------------------
   486 ;; (1) _op2_init                                             0     0      0       0
   487 ;; ---------------------------------------------------------------------------------
   488 ;; (1) _op1_init                                             0     0      0       0
   489 ;; ---------------------------------------------------------------------------------
   490 ;; (1) _dac_init                                             0     0      0       0
   491 ;; ---------------------------------------------------------------------------------
   492 ;; (1) _adc_test_init                                        3     2      1      44
   493 ;;                                              0 BANK0      3     2      1
   494 ;; ---------------------------------------------------------------------------------
   495 ;; (1) _timer1_interrupt_config                              0     0      0       0
   496 ;; ---------------------------------------------------------------------------------
   497 ;; (1) _timer1_config                                        0     0      0       0
   498 ;; ---------------------------------------------------------------------------------
   499 ;; (1) _clock_config                                         0     0      0       0
   500 ;; ---------------------------------------------------------------------------------
   501 ;; Estimated maximum stack depth 3
   502 ;; ---------------------------------------------------------------------------------
   503 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   504 ;; ---------------------------------------------------------------------------------
   505 ;; (4) _ISR                                                  2     2      0      97
   506 ;;                                              4 COMMON     2     2      0
   507 ;;                i1_setAD_ConvertFlag
   508 ;;                            _adc_get
   509 ;; ---------------------------------------------------------------------------------
   510 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   511 ;;                                              0 COMMON     1     1      0
   512 ;; ---------------------------------------------------------------------------------
   513 ;; (5) _adc_get                                              4     2      2      24
   514 ;;                                              0 COMMON     4     2      2
   515 ;; ---------------------------------------------------------------------------------
   516 ;; Estimated maximum stack depth 5
   517 ;; ---------------------------------------------------------------------------------
   518 ;; Call Graph Graphs:
   519 ;; _main (ROOT)
   520 ;;   _clock_config
   521 ;;   _timer1_config
   522 ;;   _timer1_interrupt_config
   523 ;;   _adc_test_init
   524 ;;   _dac_init
   525 ;;   _op1_init
   526 ;;   _op2_init
   527 ;;   _adc_start
   528 ;;   _isPermitSampleTime
   529 ;;   _clrSampeTime
   530 ;;   _process_AD_Converter_Value
   531 ;;     _getAD_ConvertFlag
   532 ;;     _setAD_ConvertFlag
   533 ;;     _AD_Sample
   534 ;;       _getAdOriginalValue
   535 ;;     _adc_start
   536 ;;   _getAdOriginalCh13Value
   537 ;;   _setDAC0_ChannelValue
   538 ;;   _startBigTimer
   539 ;;   _startSmallTimer
   540 ;;   _isFinishedBigTimer
   541 ;;   _isFinishedSmallTimer
   542 ;;
   543 ;; _ISR (ROOT)
   544 ;;   i1_setAD_ConvertFlag
   545 ;;   _adc_get
   546 ;;
   547 ;; Address spaces:
   548 ;;Name               Size   Autos  Total    Cost      Usage
   549 ;;BANK3               60      0       0      10        0.0%
   550 ;;BITBANK3            60      0       0       9        0.0%
   551 ;;SFR3                 0      0       0       4        0.0%
   552 ;;BITSFR3              0      0       0       4        0.0%
   553 ;;BANK2               60      0       0      12        0.0%
   554 ;;BITBANK2            60      0       0      11        0.0%
   555 ;;SFR2                 0      0       0       5        0.0%
   556 ;;BITSFR2              0      0       0       5        0.0%
   557 ;;SFR1                 0      0       0       2        0.0%
   558 ;;BITSFR1              0      0       0       2        0.0%
   559 ;;BANK1               50      0       0       8        0.0%
   560 ;;BITBANK1            50      0       0       7        0.0%
   561 ;;CODE                 0      0       0       0        0.0%
   562 ;;DATA                 0      0      37       6        0.0%
   563 ;;ABS                  0      0      30       3        0.0%
   564 ;;NULL                 0      0       0       0        0.0%
   565 ;;STACK                0      0       7       2        0.0%
   566 ;;BANK0               50      5      25       5       46.3%
   567 ;;BITBANK0            50      0       0       4        0.0%
   568 ;;SFR0                 0      0       0       1        0.0%
   569 ;;BITSFR0              0      0       0       1        0.0%
   570 ;;COMMON               E      6       B       1       78.6%
   571 ;;BITCOMMON            E      0       0       0        0.0%
   572                           
   573                           
   574 ;; *************** function _main *****************
   575 ;; Defined at:
   576 ;;		line 84 in file "C:\dev\AK7030-OTP\main.c"
   577 ;; Parameters:    Size  Location     Type
   578 ;;		None
   579 ;; Auto vars:     Size  Location     Type
   580 ;;		None
   581 ;; Return value:  Size  Location     Type
   582 ;;		None               void
   583 ;; Registers used:
   584 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   585 ;; Tracked objects:
   586 ;;		On entry : 17F/0
   587 ;;		On exit  : 60/0
   588 ;;		Unchanged: FFE00/0
   589 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   590 ;;      Params:         0       0       0       0       0
   591 ;;      Locals:         0       0       0       0       0
   592 ;;      Temps:          0       0       0       0       0
   593 ;;      Totals:         0       0       0       0       0
   594 ;;Total ram usage:        0 bytes
   595 ;; Hardware stack levels required when called:    5
   596 ;; This function calls:
   597 ;;		_clock_config
   598 ;;		_timer1_config
   599 ;;		_timer1_interrupt_config
   600 ;;		_adc_test_init
   601 ;;		_dac_init
   602 ;;		_op1_init
   603 ;;		_op2_init
   604 ;;		_adc_start
   605 ;;		_isPermitSampleTime
   606 ;;		_clrSampeTime
   607 ;;		_process_AD_Converter_Value
   608 ;;		_getAdOriginalCh13Value
   609 ;;		_setDAC0_ChannelValue
   610 ;;		_startBigTimer
   611 ;;		_startSmallTimer
   612 ;;		_isFinishedBigTimer
   613 ;;		_isFinishedSmallTimer
   614 ;; This function is called by:
   615 ;;		Startup code after reset
   616 ;; This function uses a non-reentrant model
   617 ;;
   618  000D                     _main:	
   619                           
   620                           ;main.c: 85: enum step
   621                           ;main.c: 86: {
   622                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   623                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   624                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   625                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   626                           ;main.c: 91: SET_PA2_VALUE,
   627                           ;main.c: 92: PROCESS_AD_VALUE,
   628                           ;main.c: 93: WAIT_SET_TIME_FINISHED,
   629                           ;main.c: 94: SET_TIME_BE_FINISHED,
   630                           ;main.c: 95: CHECKING_PULL_OUT_BATTERY,
   631                           ;main.c: 96: CHECKING_INSTALLED_BATTERY,
   632                           ;main.c: 97: };
   633                           ;main.c: 99: enum workTimerType
   634                           ;main.c: 100: {
   635                           ;main.c: 101: BIG_TIMER_WORK = 0,
   636                           
   637                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   638  000D  1683               	bsf	3,5	;RP0=1, select bank1
   639  000E  1005               	bcf	5,0
   640                           
   641                           ;main.c: 110: TRISA1 = 0;
   642  000F  1085               	bcf	5,1
   643                           
   644                           ;main.c: 111: TRISA3 = 0;
   645  0010  1185               	bcf	5,3
   646                           
   647                           ;main.c: 112: TRISA2 = 0;
   648  0011  1105               	bcf	5,2
   649                           
   650                           ;main.c: 113: PA2 = 1;
   651  0012  1283               	bcf	3,5	;RP0=0, select bank0
   652  0013  1505               	bsf	5,2
   653                           
   654                           ;main.c: 114: PA0 = 1;
   655  0014  1405               	bsf	5,0
   656                           
   657                           ;main.c: 116: TRISB2 = 1;
   658  0015  1683               	bsf	3,5	;RP0=1, select bank1
   659  0016  1506               	bsf	6,2
   660                           
   661                           ;main.c: 118: TRISB1 = 1;
   662  0017  1486               	bsf	6,1
   663                           
   664                           ;main.c: 119: TRISB0 = 1;
   665  0018  1406               	bsf	6,0
   666                           
   667                           ;main.c: 121: clock_config();
   668  0019  118A  222C  118A   	fcall	_clock_config
   669                           
   670                           ;main.c: 122: timer1_config();
   671  001C  118A  2208  118A   	fcall	_timer1_config
   672                           
   673                           ;main.c: 123: timer1_interrupt_config();
   674  001F  118A  2251  118A   	fcall	_timer1_interrupt_config
   675                           
   676                           ;main.c: 125: adc_test_init(13,3);
   677  0022  3003               	movlw	3
   678  0023  1283               	bcf	3,5	;RP0=0, select bank0
   679  0024  00BF               	movwf	?_adc_test_init
   680  0025  300D               	movlw	13
   681  0026  118A  21CD  118A   	fcall	_adc_test_init
   682                           
   683                           ;main.c: 127: dac_init();
   684  0029  118A  2248  118A   	fcall	_dac_init
   685                           
   686                           ;main.c: 128: op1_init();
   687  002C  118A  21F1  118A   	fcall	_op1_init
   688                           
   689                           ;main.c: 129: op2_init();
   690  002F  118A  221B  118A   	fcall	_op2_init
   691                           
   692                           ;main.c: 132: adc_start();
   693  0032  118A  2100  118A   	fcall	_adc_start
   694                           
   695                           ;main.c: 145: switch(ampStep)
   696  0035  28D3               	goto	l3063
   697  0036                     l668:	
   698                           ;main.c: 146: {
   699                           ;main.c: 147: case SENSE_PB2_INPUT_VOLTAGE:
   700                           
   701                           
   702                           ;main.c: 148: {
   703                           ;main.c: 149: if(!PB2)
   704  0036  1906               	btfsc	6,2
   705  0037  28D3               	goto	l3063
   706  0038                     l3071:	
   707                           
   708                           ;main.c: 150: ampStep++;
   709  0038  1283               	bcf	3,5	;RP0=0, select bank0
   710  0039  0AB7               	incf	main@ampStep,f
   711  003A  28D3               	goto	l3063
   712  003B                     l671:	
   713                           ;main.c: 152: }
   714                           ;main.c: 154: case SENSE_PB2_DURATION_ONE_SECOND:
   715                           
   716                           
   717                           ;main.c: 155: {
   718                           ;main.c: 156: static unsigned char ucConfirmTimer1S = 0;
   719                           ;main.c: 157: if(!PB2)
   720  003B  1906               	btfsc	6,2
   721  003C  283F               	goto	l3075
   722                           
   723                           ;main.c: 158: {
   724                           ;main.c: 159: ucConfirmTimer1S++;
   725  003D  0ABA               	incf	main@ucConfirmTimer1S,f
   726                           
   727                           ;main.c: 160: }
   728  003E  2840               	goto	l3077
   729  003F                     l3075:	
   730                           
   731                           ;main.c: 161: else
   732                           ;main.c: 162: {
   733                           ;main.c: 163: ucConfirmTimer1S = 0;
   734  003F  01BA               	clrf	main@ucConfirmTimer1S
   735  0040                     l3077:	
   736                           
   737                           ;main.c: 164: }
   738                           ;main.c: 166: if(ucConfirmTimer1S >= 10)
   739  0040  300A               	movlw	10
   740  0041  023A               	subwf	main@ucConfirmTimer1S,w
   741  0042  1C03               	skipc
   742  0043  28D3               	goto	l3063
   743                           
   744                           ;main.c: 167: {
   745                           ;main.c: 168: ucConfirmTimer1S = 0;
   746  0044  01BA               	clrf	main@ucConfirmTimer1S
   747  0045  2838               	goto	l3071
   748  0046                     l677:	
   749                           ;main.c: 173: }
   750                           ;main.c: 175: case SENSE_PB2_INPUT_VOLTAGE__AGAIN:
   751                           
   752                           
   753                           ;main.c: 176: {
   754                           ;main.c: 177: if(!PB2)
   755  0046  2836               	goto	l668
   756  0047                     l679:	
   757                           ;main.c: 180: }
   758                           ;main.c: 182: case SENSE_PB2_DURATION__SECOND:
   759                           
   760                           
   761                           ;main.c: 183: {
   762                           ;main.c: 184: static unsigned char ucConfirmTimerZptS = 0;
   763                           ;main.c: 185: if(!PB2)
   764  0047  1906               	btfsc	6,2
   765  0048  284B               	goto	l3087
   766                           
   767                           ;main.c: 186: {
   768                           ;main.c: 187: ucConfirmTimerZptS++;
   769  0049  0ABB               	incf	main@ucConfirmTimerZptS,f
   770                           
   771                           ;main.c: 188: }
   772  004A  284C               	goto	l3089
   773  004B                     l3087:	
   774                           
   775                           ;main.c: 189: else
   776                           ;main.c: 190: {
   777                           ;main.c: 191: ucConfirmTimerZptS = 0;
   778  004B  01BB               	clrf	main@ucConfirmTimerZptS
   779  004C                     l3089:	
   780                           
   781                           ;main.c: 192: }
   782                           ;main.c: 194: if(ucConfirmTimerZptS >= 3)
   783  004C  3003               	movlw	3
   784  004D  023B               	subwf	main@ucConfirmTimerZptS,w
   785  004E  1C03               	skipc
   786  004F  28D3               	goto	l3063
   787                           
   788                           ;main.c: 195: {
   789                           ;main.c: 196: ucConfirmTimerZptS = 0;
   790  0050  01BB               	clrf	main@ucConfirmTimerZptS
   791  0051  2838               	goto	l3071
   792  0052                     l685:	
   793                           ;main.c: 201: }
   794                           ;main.c: 203: case SET_PA2_VALUE:
   795                           
   796                           
   797                           ;main.c: 204: {
   798                           ;main.c: 205: PA2 = 0;
   799  0052  1105               	bcf	5,2
   800  0053  2838               	goto	l3071
   801  0054                     l3097:	
   802                           
   803                           ;main.c: 211: {
   804                           ;main.c: 212: static unsigned char ucInit = 0;
   805                           ;main.c: 213: if(getAdOriginalCh13Value() > 40)
   806  0054  118A  223E  118A   	fcall	_getAdOriginalCh13Value
   807  0057  3000               	movlw	0
   808  0058  0240               	subwf	?_getAdOriginalCh13Value+1,w
   809  0059  3029               	movlw	41
   810  005A  1903               	skipnz
   811  005B  023F               	subwf	?_getAdOriginalCh13Value,w
   812  005C  1C03               	skipc
   813  005D  286A               	goto	l3107
   814  005E                     l3099:	
   815  005E  301B               	movlw	27
   816                           
   817                           ;main.c: 214: {
   818                           ;main.c: 215: PA0 = 0;
   819  005F  1005               	bcf	5,0
   820                           
   821                           ;main.c: 216: PA1 = 1;
   822  0060  1485               	bsf	5,1
   823                           
   824                           ;main.c: 217: PA3 = 1;
   825  0061  1585               	bsf	5,3
   826                           
   827                           ;main.c: 218: tDA_timer = BIG_TIMER_WORK;
   828  0062  01B8               	clrf	main@tDA_timer
   829                           
   830                           ;main.c: 219: setDAC0_ChannelValue(27);
   831  0063  118A  224D  118A   	fcall	_setDAC0_ChannelValue
   832                           
   833                           ;main.c: 220: startBigTimer();
   834  0066  118A  21FD  118A   	fcall	_startBigTimer
   835                           
   836                           ;main.c: 221: }
   837  0069  2838               	goto	l3071
   838  006A                     l3107:	
   839                           
   840                           ;main.c: 222: else if(getAdOriginalCh13Value() <35)
   841  006A  118A  223E  118A   	fcall	_getAdOriginalCh13Value
   842  006D  3000               	movlw	0
   843  006E  0240               	subwf	?_getAdOriginalCh13Value+1,w
   844  006F  3023               	movlw	35
   845  0070  1903               	skipnz
   846  0071  023F               	subwf	?_getAdOriginalCh13Value,w
   847  0072  1803               	skipnc
   848  0073  2881               	goto	l3113
   849  0074  3019               	movlw	25
   850                           
   851                           ;main.c: 223: {
   852                           ;main.c: 224: PA0 = 1;
   853  0075  1405               	bsf	5,0
   854                           
   855                           ;main.c: 225: PA1 = 0;
   856  0076  1085               	bcf	5,1
   857                           
   858                           ;main.c: 226: PA3 = 0;
   859  0077  1185               	bcf	5,3
   860                           
   861                           ;main.c: 227: tDA_timer = SMALL_TIMER_WORK;
   862  0078  01B8               	clrf	main@tDA_timer
   863  0079  0AB8               	incf	main@tDA_timer,f
   864                           
   865                           ;main.c: 228: setDAC0_ChannelValue(25);
   866  007A  118A  224D  118A   	fcall	_setDAC0_ChannelValue
   867                           
   868                           ;main.c: 229: startSmallTimer();
   869  007D  118A  2212  118A   	fcall	_startSmallTimer
   870                           
   871                           ;main.c: 230: }
   872  0080  2838               	goto	l3071
   873  0081                     l3113:	
   874                           
   875                           ;main.c: 231: else
   876                           ;main.c: 232: {
   877                           ;main.c: 233: if(!ucInit)
   878  0081  08BD               	movf	main@ucInit,f
   879  0082  1D03               	skipz
   880  0083  2838               	goto	l3071
   881                           
   882                           ;main.c: 234: {
   883                           ;main.c: 235: ucInit = 1;
   884  0084  01BD               	clrf	main@ucInit
   885  0085  0ABD               	incf	main@ucInit,f
   886  0086  285E               	goto	l3099
   887  0087                     l3125:	
   888                           ;main.c: 240: setDAC0_ChannelValue(27);
   889                           
   890                           ;main.c: 239: tDA_timer = BIG_TIMER_WORK;
   891                           
   892                           ;main.c: 238: PA3 = 1;
   893                           
   894                           ;main.c: 237: PA1 = 1;
   895                           
   896                           ;main.c: 236: PA0 = 0;
   897                           
   898                           
   899                           ;main.c: 254: {
   900                           ;main.c: 255: static unsigned char ucConfrimeCnt = 0;
   901                           ;main.c: 256: if(!isFinishedBigTimer())
   902  0087  118A  2239  118A   	fcall	_isFinishedBigTimer
   903  008A  3800               	iorlw	0
   904  008B  1D03               	skipz
   905  008C  2838               	goto	l3071
   906                           
   907                           ;main.c: 257: {
   908                           ;main.c: 258: if(!PB2)
   909  008D  1906               	btfsc	6,2
   910  008E  2891               	goto	l3131
   911                           
   912                           ;main.c: 259: ucConfrimeCnt++;
   913  008F  0ABC               	incf	main@ucConfrimeCnt,f
   914  0090  2892               	goto	l3133
   915  0091                     l3131:	
   916                           
   917                           ;main.c: 260: else
   918                           ;main.c: 261: ucConfrimeCnt = 0;
   919  0091  01BC               	clrf	main@ucConfrimeCnt
   920  0092                     l3133:	
   921                           
   922                           ;main.c: 263: if(ucConfrimeCnt >=3)
   923  0092  3003               	movlw	3
   924  0093  023C               	subwf	main@ucConfrimeCnt,w
   925  0094  1C03               	skipc
   926  0095  28D3               	goto	l3063
   927  0096  3004               	movlw	4
   928                           
   929                           ;main.c: 264: {
   930                           ;main.c: 265: ucConfrimeCnt = 0;
   931  0097  01BC               	clrf	main@ucConfrimeCnt
   932                           
   933                           ;main.c: 266: ampStep = SET_PA2_VALUE;
   934  0098  28AA               	goto	L1
   935  0099                     l3141:	
   936                           
   937                           ;main.c: 277: {
   938                           ;main.c: 278: if(!isFinishedSmallTimer())
   939  0099  118A  2234  118A   	fcall	_isFinishedSmallTimer
   940  009C  3800               	iorlw	0
   941  009D  1D03               	skipz
   942  009E  2838               	goto	l3071
   943                           
   944                           ;main.c: 279: {
   945                           ;main.c: 280: if(getAdOriginalCh13Value() > 40)
   946  009F  118A  223E  118A   	fcall	_getAdOriginalCh13Value
   947  00A2  3000               	movlw	0
   948  00A3  0240               	subwf	?_getAdOriginalCh13Value+1,w
   949  00A4  3029               	movlw	41
   950  00A5  1903               	skipnz
   951  00A6  023F               	subwf	?_getAdOriginalCh13Value,w
   952  00A7  1C03               	skipc
   953  00A8  28D3               	goto	l3063
   954                           
   955                           ;main.c: 281: ampStep = PROCESS_AD_VALUE;
   956  00A9  3005               	movlw	5
   957  00AA                     L1:	
   958  00AA  00B7               	movwf	main@ampStep
   959  00AB  28D3               	goto	l3063
   960  00AC                     l3151:	
   961  00AC  0838               	movf	main@tDA_timer,w
   962                           
   963                           ; Switch size 1, requested type "space"
   964                           ; Number of cases is 2, Range of values is 0 to 1
   965                           ; switch strategies available:
   966                           ; Name         Instructions Cycles
   967                           ; simple_byte            7     4 (average)
   968                           ; direct_byte           11     7 (fixed)
   969                           ; jumptable            260     6 (fixed)
   970                           ; rangetable             6     6 (fixed)
   971                           ; spacedrange           10     9 (fixed)
   972                           ; locatedrange           2     3 (fixed)
   973                           ;	Chosen strategy is simple_byte
   974  00AD  3A00               	xorlw	0	; case 0
   975  00AE  1903               	skipnz
   976  00AF  2887               	goto	l3125
   977  00B0  3A01               	xorlw	1	; case 1
   978  00B1  1903               	skipnz
   979  00B2  2899               	goto	l3141
   980  00B3  28EE               	goto	l666
   981  00B4                     l710:	
   982                           ;main.c: 295: }
   983                           ;main.c: 297: case SET_TIME_BE_FINISHED:
   984                           
   985  00B4  3019               	movlw	25
   986                           
   987                           ;main.c: 298: {
   988                           ;main.c: 299: PA2 = 1;
   989  00B5  1505               	bsf	5,2
   990                           
   991                           ;main.c: 300: PA0 = 0;
   992  00B6  1005               	bcf	5,0
   993                           
   994                           ;main.c: 301: PA1 = 0;
   995  00B7  1085               	bcf	5,1
   996                           
   997                           ;main.c: 302: PA3 = 0;
   998  00B8  1185               	bcf	5,3
   999                           
  1000                           ;main.c: 303: setDAC0_ChannelValue(25);
  1001  00B9  118A  224D  118A   	fcall	_setDAC0_ChannelValue
  1002  00BC  2838               	goto	l3071
  1003  00BD                     l711:	
  1004                           ;main.c: 306: }
  1005                           ;main.c: 308: case CHECKING_PULL_OUT_BATTERY:
  1006                           
  1007                           
  1008                           ;main.c: 309: {
  1009                           ;main.c: 310: static unsigned char ucCheckBatteryCnt = 0;
  1010                           ;main.c: 311: if(PB2)
  1011  00BD  1D06               	btfss	6,2
  1012  00BE  28C1               	goto	l3159
  1013                           
  1014                           ;main.c: 312: ucCheckBatteryCnt++;
  1015  00BF  0AB9               	incf	main@ucCheckBatteryCnt,f
  1016  00C0  28C2               	goto	l3161
  1017  00C1                     l3159:	
  1018                           
  1019                           ;main.c: 313: else
  1020                           ;main.c: 314: ucCheckBatteryCnt = 0;
  1021  00C1  01B9               	clrf	main@ucCheckBatteryCnt
  1022  00C2                     l3161:	
  1023                           
  1024                           ;main.c: 316: if(ucCheckBatteryCnt > 2)
  1025  00C2  3003               	movlw	3
  1026  00C3  0239               	subwf	main@ucCheckBatteryCnt,w
  1027  00C4  1C03               	skipc
  1028  00C5  28D3               	goto	l3063
  1029                           
  1030                           ;main.c: 317: {
  1031                           ;main.c: 318: ucCheckBatteryCnt = 0;
  1032  00C6  01B9               	clrf	main@ucCheckBatteryCnt
  1033  00C7  2838               	goto	l3071
  1034  00C8                     l717:	
  1035                           ;main.c: 322: }
  1036                           ;main.c: 324: case CHECKING_INSTALLED_BATTERY:
  1037                           
  1038                           
  1039                           ;main.c: 325: {
  1040                           ;main.c: 326: static unsigned char ucInstalledBatteryCnt = 0;
  1041                           ;main.c: 327: if(!PB2)
  1042  00C8  1906               	btfsc	6,2
  1043  00C9  28CC               	goto	l3169
  1044                           
  1045                           ;main.c: 328: ucInstalledBatteryCnt++;
  1046  00CA  0ABE               	incf	main@ucInstalledBatteryCnt,f
  1047  00CB  28CD               	goto	l3171
  1048  00CC                     l3169:	
  1049                           
  1050                           ;main.c: 329: else
  1051                           ;main.c: 330: ucInstalledBatteryCnt = 0;
  1052  00CC  01BE               	clrf	main@ucInstalledBatteryCnt
  1053  00CD                     l3171:	
  1054                           
  1055                           ;main.c: 332: if(ucInstalledBatteryCnt > 10)
  1056  00CD  300B               	movlw	11
  1057  00CE  023E               	subwf	main@ucInstalledBatteryCnt,w
  1058  00CF  1C03               	skipc
  1059  00D0  28D3               	goto	l3063
  1060                           
  1061                           ;main.c: 333: {
  1062                           ;main.c: 334: ucInstalledBatteryCnt = 0;
  1063  00D1  01BE               	clrf	main@ucInstalledBatteryCnt
  1064                           
  1065                           ;main.c: 335: ampStep = SENSE_PB2_INPUT_VOLTAGE;
  1066  00D2  01B7               	clrf	main@ampStep
  1067  00D3                     l3063:	
  1068  00D3  0064               	clrwdt	;#
  1069                           
  1070                           ;main.c: 140: if(isPermitSampleTime())
  1071  00D4  118A  2243  118A   	fcall	_isPermitSampleTime
  1072  00D7  3A00               	xorlw	0
  1073  00D8  1903               	skipnz
  1074  00D9  28D3               	goto	l3063
  1075                           
  1076                           ;main.c: 141: {
  1077                           ;main.c: 142: clrSampeTime();
  1078  00DA  118A  2254  118A   	fcall	_clrSampeTime
  1079                           
  1080                           ;main.c: 143: process_AD_Converter_Value();
  1081  00DD  118A  20EF  118A   	fcall	_process_AD_Converter_Value
  1082  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1083  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1084  00E2  0837               	movf	main@ampStep,w
  1085                           
  1086                           ; Switch size 1, requested type "space"
  1087                           ; Number of cases is 10, Range of values is 0 to 9
  1088                           ; switch strategies available:
  1089                           ; Name         Instructions Cycles
  1090                           ; direct_byte           27     7 (fixed)
  1091                           ; simple_byte           31    16 (average)
  1092                           ; jumptable            260     6 (fixed)
  1093                           ; rangetable            14     6 (fixed)
  1094                           ; spacedrange           26     9 (fixed)
  1095                           ; locatedrange          10     3 (fixed)
  1096                           ;	Chosen strategy is direct_byte
  1097  00E3  0084               	movwf	4
  1098  00E4  300A               	movlw	10
  1099  00E5  0204               	subwf	4,w
  1100  00E6  1803               	skipnc
  1101  00E7  28D3               	goto	l3063
  1102  00E8  3001               	movlw	high S3227
  1103  00E9  008A               	movwf	10
  1104  00EA  1003               	clrc
  1105  00EB  0D04               	rlf	4,w
  1106  00EC  3EB9               	addlw	low S3227
  1107  00ED  0082               	movwf	2
  1108  00EE                     l666:	
  1109  00EE  28D3               	goto	l3063
  1110  00EF                     __end_of_main:	
  1111                           
  1112                           	psect	swtext1
  1113  01B9                     __pswtext1:	
  1114  01B9                     S3227:	
  1115  01B9  118A  2836         	ljmp	l668
  1116  01BB  118A  283B         	ljmp	l671
  1117  01BD  118A  2846         	ljmp	l677
  1118  01BF  118A  2847         	ljmp	l679
  1119  01C1  118A  2852         	ljmp	l685
  1120  01C3  118A  2854         	ljmp	l3097
  1121  01C5  118A  28AC         	ljmp	l3151
  1122  01C7  118A  28B4         	ljmp	l710
  1123  01C9  118A  28BD         	ljmp	l711
  1124  01CB  118A  28C8         	ljmp	l717
  1125                           
  1126                           	psect	text468
  1127  00EF                     __ptext468:	
  1128 ;; =============== function _main ends ============
  1129                           
  1130                           
  1131 ;; *************** function _process_AD_Converter_Value *****************
  1132 ;; Defined at:
  1133 ;;		line 94 in file "C:\dev\AK7030-OTP\common.c"
  1134 ;; Parameters:    Size  Location     Type
  1135 ;;		None
  1136 ;; Auto vars:     Size  Location     Type
  1137 ;;		None
  1138 ;; Return value:  Size  Location     Type
  1139 ;;		None               void
  1140 ;; Registers used:
  1141 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1142 ;; Tracked objects:
  1143 ;;		On entry : 0/0
  1144 ;;		On exit  : 0/0
  1145 ;;		Unchanged: FFE9F/0
  1146 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1147 ;;      Params:         0       0       0       0       0
  1148 ;;      Locals:         0       0       0       0       0
  1149 ;;      Temps:          0       0       0       0       0
  1150 ;;      Totals:         0       0       0       0       0
  1151 ;;Total ram usage:        0 bytes
  1152 ;; Hardware stack levels used:    1
  1153 ;; Hardware stack levels required when called:    4
  1154 ;; This function calls:
  1155 ;;		_getAD_ConvertFlag
  1156 ;;		_setAD_ConvertFlag
  1157 ;;		_AD_Sample
  1158 ;;		_adc_start
  1159 ;; This function is called by:
  1160 ;;		_main
  1161 ;; This function uses a non-reentrant model
  1162 ;;
  1163  00EF                     _process_AD_Converter_Value:	
  1164                           
  1165                           ;common.c: 65: return adc_convert_flag;
  1166                           
  1167                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1168                           
  1169                           ;common.c: 95: if(getAD_ConvertFlag())
  1170                           
  1171                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1172  00EF  0879               	movf	_adc_convert_flag,w
  1173  00F0  3A00               	xorlw	0
  1174  00F1  1903               	skipnz
  1175  00F2  0008               	return
  1176                           
  1177                           ;common.c: 96: {
  1178                           ;common.c: 97: setAD_ConvertFlag(0);
  1179  00F3  3000               	movlw	0
  1180  00F4  20FB  118A         	fcall	_setAD_ConvertFlag
  1181                           
  1182                           ;common.c: 98: AD_Sample();
  1183  00F6  2103  118A         	fcall	_AD_Sample
  1184                           
  1185                           ;common.c: 100: adc_start();
  1186  00F8  2900               	ljmp	l2901
  1187  00F9                     __end_of_process_AD_Converter_Value:	
  1188  00F9                     __ptext472:	
  1189 ;; =============== function _setAD_ConvertFlag ends ============
  1190                           
  1191                           
  1192 ;; *************** function _getAD_ConvertFlag *****************
  1193 ;; Defined at:
  1194 ;;		line 64 in file "C:\dev\AK7030-OTP\common.c"
  1195 ;; Parameters:    Size  Location     Type
  1196 ;;		None
  1197 ;; Auto vars:     Size  Location     Type
  1198 ;;		None
  1199 ;; Return value:  Size  Location     Type
  1200 ;;                  1    wreg      unsigned char 
  1201 ;; Registers used:
  1202 ;;		wreg
  1203 ;; Tracked objects:
  1204 ;;		On entry : 0/0
  1205 ;;		On exit  : 0/0
  1206 ;;		Unchanged: FFFFF/0
  1207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1208 ;;      Params:         0       0       0       0       0
  1209 ;;      Locals:         0       0       0       0       0
  1210 ;;      Temps:          0       0       0       0       0
  1211 ;;      Totals:         0       0       0       0       0
  1212 ;;Total ram usage:        0 bytes
  1213 ;; Hardware stack levels used:    1
  1214 ;; Hardware stack levels required when called:    2
  1215 ;; This function calls:
  1216 ;;		Nothing
  1217 ;; This function is called by:
  1218 ;;		_process_AD_Converter_Value
  1219 ;; This function uses a non-reentrant model
  1220 ;;
  1221  00F9                     _getAD_ConvertFlag:	
  1222                           
  1223                           ;common.c: 65: return adc_convert_flag;
  1224                           
  1225                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1226  00F9  0879               	movf	_adc_convert_flag,w
  1227  00FA  0008               	return
  1228  00FB                     __end_of_getAD_ConvertFlag:	
  1229  00FB                     __ptext471:	
  1230 ;; =============== function _getAdOriginalValue ends ============
  1231                           
  1232                           
  1233 ;; *************** function _setAD_ConvertFlag *****************
  1234 ;; Defined at:
  1235 ;;		line 70 in file "C:\dev\AK7030-OTP\common.c"
  1236 ;; Parameters:    Size  Location     Type
  1237 ;;  flag            1    wreg     unsigned char 
  1238 ;; Auto vars:     Size  Location     Type
  1239 ;;  flag            1    0[BANK0 ] unsigned char 
  1240 ;; Return value:  Size  Location     Type
  1241 ;;		None               void
  1242 ;; Registers used:
  1243 ;;		wreg
  1244 ;; Tracked objects:
  1245 ;;		On entry : 0/0
  1246 ;;		On exit  : 60/0
  1247 ;;		Unchanged: FFF9F/0
  1248 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1249 ;;      Params:         0       0       0       0       0
  1250 ;;      Locals:         0       1       0       0       0
  1251 ;;      Temps:          0       0       0       0       0
  1252 ;;      Totals:         0       1       0       0       0
  1253 ;;Total ram usage:        1 bytes
  1254 ;; Hardware stack levels used:    1
  1255 ;; Hardware stack levels required when called:    2
  1256 ;; This function calls:
  1257 ;;		Nothing
  1258 ;; This function is called by:
  1259 ;;		_process_AD_Converter_Value
  1260 ;; This function uses a non-reentrant model
  1261 ;;
  1262  00FB                     _setAD_ConvertFlag:	
  1263                           
  1264                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1265                           ;setAD_ConvertFlag@flag stored from wreg
  1266  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1267  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1268  00FD  00BF               	movwf	setAD_ConvertFlag@flag
  1269                           
  1270                           ;common.c: 71: adc_convert_flag = flag;
  1271  00FE  00F9               	movwf	_adc_convert_flag
  1272  00FF  0008               	return
  1273  0100                     __end_of_setAD_ConvertFlag:	
  1274  0100                     __ptext481:	
  1275 ;; =============== function _isPermitSampleTime ends ============
  1276                           
  1277                           
  1278 ;; *************** function _adc_start *****************
  1279 ;; Defined at:
  1280 ;;		line 99 in file "C:\dev\AK7030-OTP\periph.c"
  1281 ;; Parameters:    Size  Location     Type
  1282 ;;		None
  1283 ;; Auto vars:     Size  Location     Type
  1284 ;;		None
  1285 ;; Return value:  Size  Location     Type
  1286 ;;		None               void
  1287 ;; Registers used:
  1288 ;;		None
  1289 ;; Tracked objects:
  1290 ;;		On entry : 40/20
  1291 ;;		On exit  : 60/0
  1292 ;;		Unchanged: FFF9F/0
  1293 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1294 ;;      Params:         0       0       0       0       0
  1295 ;;      Locals:         0       0       0       0       0
  1296 ;;      Temps:          0       0       0       0       0
  1297 ;;      Totals:         0       0       0       0       0
  1298 ;;Total ram usage:        0 bytes
  1299 ;; Hardware stack levels used:    1
  1300 ;; Hardware stack levels required when called:    2
  1301 ;; This function calls:
  1302 ;;		Nothing
  1303 ;; This function is called by:
  1304 ;;		_main
  1305 ;;		_process_AD_Converter_Value
  1306 ;; This function uses a non-reentrant model
  1307 ;;
  1308  0100                     _adc_start:	
  1309  0100                     l2901:	
  1310                           ; Regs used in _adc_start: []
  1311                           
  1312                           
  1313                           ;periph.c: 100: GO=1;
  1314  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1315  0101  149F               	bsf	31,1
  1316  0102  0008               	return
  1317  0103                     __end_of_adc_start:	
  1318  0103                     __ptext469:	
  1319 ;; =============== function _process_AD_Converter_Value ends ============
  1320                           
  1321                           
  1322 ;; *************** function _AD_Sample *****************
  1323 ;; Defined at:
  1324 ;;		line 114 in file "C:\dev\AK7030-OTP\common.c"
  1325 ;; Parameters:    Size  Location     Type
  1326 ;;		None
  1327 ;; Auto vars:     Size  Location     Type
  1328 ;;  index           1    4[BANK0 ] unsigned char 
  1329 ;; Return value:  Size  Location     Type
  1330 ;;		None               void
  1331 ;; Registers used:
  1332 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1333 ;; Tracked objects:
  1334 ;;		On entry : 60/0
  1335 ;;		On exit  : 60/0
  1336 ;;		Unchanged: FFE9F/0
  1337 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1338 ;;      Params:         0       0       0       0       0
  1339 ;;      Locals:         0       1       0       0       0
  1340 ;;      Temps:          0       2       0       0       0
  1341 ;;      Totals:         0       3       0       0       0
  1342 ;;Total ram usage:        3 bytes
  1343 ;; Hardware stack levels used:    1
  1344 ;; Hardware stack levels required when called:    3
  1345 ;; This function calls:
  1346 ;;		_getAdOriginalValue
  1347 ;; This function is called by:
  1348 ;;		_process_AD_Converter_Value
  1349 ;; This function uses a non-reentrant model
  1350 ;;
  1351  0103                     _AD_Sample:	
  1352                           
  1353                           ;common.c: 115: if(sampleTimes < 6)
  1354                           
  1355                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1356  0103  3006               	movlw	6
  1357  0104  0236               	subwf	_sampleTimes,w
  1358  0105  1803               	skipnc
  1359  0106  0008               	return
  1360                           
  1361                           ;common.c: 116: {
  1362                           ;common.c: 118: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1363  0107  215B  118A         	fcall	_getAdOriginalValue
  1364  0109  1003               	clrc
  1365  010A  0D36               	rlf	_sampleTimes,w
  1366  010B  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1367  010C  0084               	movwf	4
  1368  010D  083F               	movf	?_getAdOriginalValue,w
  1369  010E  1383               	bcf	3,7	;select IRP bank0
  1370  010F  0080               	movwf	0
  1371  0110  0A84               	incf	4,f
  1372  0111  0840               	movf	?_getAdOriginalValue+1,w
  1373  0112  0080               	movwf	0
  1374                           
  1375                           ;common.c: 120: if(sampleTimes == 0)
  1376  0113  08B6               	movf	_sampleTimes,f
  1377  0114  1D03               	skipz
  1378  0115  291E               	goto	l3005
  1379                           
  1380                           ;common.c: 121: {
  1381                           ;common.c: 122: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1382  0116  0821               	movf	_buffer_Sample_AD_Value+1,w
  1383  0117  00B1               	movwf	_multiFilterMaxValue+1
  1384  0118  0820               	movf	_buffer_Sample_AD_Value,w
  1385  0119  00B0               	movwf	_multiFilterMaxValue
  1386                           
  1387                           ;common.c: 123: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1388  011A  0821               	movf	_buffer_Sample_AD_Value+1,w
  1389  011B  00B3               	movwf	_multiFilterMinValue+1
  1390  011C  0820               	movf	_buffer_Sample_AD_Value,w
  1391  011D  00B2               	movwf	_multiFilterMinValue
  1392  011E                     l3005:	
  1393                           
  1394                           ;common.c: 124: }
  1395                           ;common.c: 126: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1396  011E  2160  118A         	fcall	PL2	;call to abstracted procedure
  1397  0120  0231               	subwf	_multiFilterMaxValue+1,w
  1398  0121  1D03               	skipz
  1399  0122  2925               	goto	u505
  1400  0123  0841               	movf	??_AD_Sample,w
  1401  0124  0230               	subwf	_multiFilterMaxValue,w
  1402  0125                     u505:	
  1403  0125  1803               	skipnc
  1404  0126  2930               	goto	l1420
  1405                           
  1406                           ;common.c: 127: {
  1407                           ;common.c: 128: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1408  0127  1003               	clrc
  1409  0128  0D36               	rlf	_sampleTimes,w
  1410  0129  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1411  012A  0084               	movwf	4
  1412  012B  0800               	movf	0,w
  1413  012C  00B0               	movwf	_multiFilterMaxValue
  1414  012D  0A84               	incf	4,f
  1415  012E  0800               	movf	0,w
  1416  012F  00B1               	movwf	_multiFilterMaxValue+1
  1417  0130                     l1420:	
  1418                           
  1419                           ;common.c: 129: }
  1420                           ;common.c: 130: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1421  0130  2160  118A         	fcall	PL2	;call to abstracted procedure
  1422  0132  0833               	movf	_multiFilterMinValue+1,w
  1423  0133  0242               	subwf	??_AD_Sample+1,w
  1424  0134  1D03               	skipz
  1425  0135  2938               	goto	u515
  1426  0136  0832               	movf	_multiFilterMinValue,w
  1427  0137  0241               	subwf	??_AD_Sample,w
  1428  0138                     u515:	
  1429  0138  1803               	skipnc
  1430  0139  2943               	goto	l3011
  1431                           
  1432                           ;common.c: 131: {
  1433                           ;common.c: 132: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1434  013A  1003               	clrc
  1435  013B  0D36               	rlf	_sampleTimes,w
  1436  013C  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1437  013D  0084               	movwf	4
  1438  013E  0800               	movf	0,w
  1439  013F  00B2               	movwf	_multiFilterMinValue
  1440  0140  0A84               	incf	4,f
  1441  0141  0800               	movf	0,w
  1442  0142  00B3               	movwf	_multiFilterMinValue+1
  1443  0143                     l3011:	
  1444  0143  3006               	movlw	6
  1445                           
  1446                           ;common.c: 137: sampleTimes++;
  1447  0144  0AB6               	incf	_sampleTimes,f
  1448                           
  1449                           ;common.c: 139: if(sampleTimes >= 6)
  1450  0145  0236               	subwf	_sampleTimes,w
  1451  0146  1C03               	skipc
  1452  0147  0008               	return
  1453                           
  1454                           ;common.c: 140: {
  1455                           ;common.c: 141: sampleTimes = 0;
  1456  0148  01B6               	clrf	_sampleTimes
  1457                           
  1458                           ;common.c: 144: {
  1459                           ;common.c: 146: sampleCH13Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1460  0149  0844               	movf	_sampleChannelSelect,w
  1461  014A  3A0D               	xorlw	13
  1462                           
  1463                           ;common.c: 147: sampleChannelSelect = 13;
  1464  014B  300D               	movlw	13
  1465  014C  00C4               	movwf	_sampleChannelSelect
  1466                           
  1467                           ;common.c: 158: }
  1468                           ;common.c: 160: for(unsigned char index = 0; index < 6;index++)
  1469                           
  1470                           ;common.c: 148: }
  1471  014D  01C3               	clrf	AD_Sample@index
  1472  014E                     l3033:	
  1473                           
  1474                           ;common.c: 161: buffer_Sample_AD_Value[index] = 0;
  1475  014E  1003               	clrc
  1476  014F  0D43               	rlf	AD_Sample@index,w
  1477  0150  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1478  0151  0084               	movwf	4
  1479  0152  3006               	movlw	6
  1480  0153  0180               	clrf	0
  1481  0154  0A84               	incf	4,f
  1482  0155  0180               	clrf	0
  1483  0156  0AC3               	incf	AD_Sample@index,f
  1484  0157  0243               	subwf	AD_Sample@index,w
  1485  0158  1803               	btfsc	3,0
  1486  0159  0008               	return
  1487  015A  294E               	goto	l3033
  1488  015B                     __end_of_AD_Sample:	
  1489  015B                     __ptext470:	
  1490 ;; =============== function _AD_Sample ends ============
  1491                           
  1492                           
  1493 ;; *************** function _getAdOriginalValue *****************
  1494 ;; Defined at:
  1495 ;;		line 76 in file "C:\dev\AK7030-OTP\common.c"
  1496 ;; Parameters:    Size  Location     Type
  1497 ;;		None
  1498 ;; Auto vars:     Size  Location     Type
  1499 ;;		None
  1500 ;; Return value:  Size  Location     Type
  1501 ;;                  2    0[BANK0 ] unsigned int 
  1502 ;; Registers used:
  1503 ;;		wreg
  1504 ;; Tracked objects:
  1505 ;;		On entry : 60/0
  1506 ;;		On exit  : 60/0
  1507 ;;		Unchanged: FFF9F/0
  1508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1509 ;;      Params:         0       2       0       0       0
  1510 ;;      Locals:         0       0       0       0       0
  1511 ;;      Temps:          0       0       0       0       0
  1512 ;;      Totals:         0       2       0       0       0
  1513 ;;Total ram usage:        2 bytes
  1514 ;; Hardware stack levels used:    1
  1515 ;; Hardware stack levels required when called:    2
  1516 ;; This function calls:
  1517 ;;		Nothing
  1518 ;; This function is called by:
  1519 ;;		_AD_Sample
  1520 ;; This function uses a non-reentrant model
  1521 ;;
  1522  015B                     _getAdOriginalValue:	
  1523                           
  1524                           ;common.c: 77: return adc_original_value;
  1525                           
  1526                           ; Regs used in _getAdOriginalValue: [wreg]
  1527  015B  082F               	movf	_adc_original_value+1,w
  1528  015C  00C0               	movwf	?_getAdOriginalValue+1
  1529  015D  082E               	movf	_adc_original_value,w
  1530  015E  00BF               	movwf	?_getAdOriginalValue
  1531  015F  0008               	return
  1532  0160                     __end_of_getAdOriginalValue:	
  1533  0160                     PL2:	
  1534  0160  1003               	clrc
  1535  0161  0D36               	rlf	_sampleTimes,w
  1536  0162  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1537  0163  0084               	movwf	4
  1538  0164  0800               	movf	0,w
  1539  0165  00C1               	movwf	??_AD_Sample
  1540  0166  0A84               	incf	4,f
  1541  0167  0800               	movf	0,w
  1542  0168  00C2               	movwf	??_AD_Sample+1
  1543  0169  0008               	return
  1544                           
  1545                           	psect	text473
  1546  0234                     __ptext473:	
  1547 ;; =============== function _getAD_ConvertFlag ends ============
  1548                           
  1549                           
  1550 ;; *************** function _isFinishedSmallTimer *****************
  1551 ;; Defined at:
  1552 ;;		line 217 in file "C:\dev\AK7030-OTP\common.c"
  1553 ;; Parameters:    Size  Location     Type
  1554 ;;		None
  1555 ;; Auto vars:     Size  Location     Type
  1556 ;;		None
  1557 ;; Return value:  Size  Location     Type
  1558 ;;                  1    wreg      unsigned char 
  1559 ;; Registers used:
  1560 ;;		wreg, status,2, status,0
  1561 ;; Tracked objects:
  1562 ;;		On entry : 60/0
  1563 ;;		On exit  : 60/0
  1564 ;;		Unchanged: FFF9F/0
  1565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1566 ;;      Params:         0       0       0       0       0
  1567 ;;      Locals:         0       0       0       0       0
  1568 ;;      Temps:          0       0       0       0       0
  1569 ;;      Totals:         0       0       0       0       0
  1570 ;;Total ram usage:        0 bytes
  1571 ;; Hardware stack levels used:    1
  1572 ;; Hardware stack levels required when called:    2
  1573 ;; This function calls:
  1574 ;;		Nothing
  1575 ;; This function is called by:
  1576 ;;		_main
  1577 ;; This function uses a non-reentrant model
  1578 ;;
  1579  0234                     _isFinishedSmallTimer:	
  1580                           
  1581                           ;common.c: 218: if(uiSmallTimer == 0)
  1582                           
  1583                           ; Regs used in _isFinishedSmallTimer: [wreg+status,2+status,0]
  1584  0234  0835               	movf	_uiSmallTimer+1,w
  1585  0235  0434               	iorwf	_uiSmallTimer,w
  1586  0236  1903               	btfsc	3,2
  1587                           
  1588                           ;common.c: 219: return 1;
  1589  0237  3401               	retlw	1
  1590                           
  1591                           ;common.c: 220: else
  1592                           ;common.c: 221: return 0;
  1593  0238  3400               	retlw	0
  1594  0239                     __end_of_isFinishedSmallTimer:	
  1595                           
  1596                           	psect	text474
  1597  0239                     __ptext474:	
  1598 ;; =============== function _isFinishedSmallTimer ends ============
  1599                           
  1600                           
  1601 ;; *************** function _isFinishedBigTimer *****************
  1602 ;; Defined at:
  1603 ;;		line 209 in file "C:\dev\AK7030-OTP\common.c"
  1604 ;; Parameters:    Size  Location     Type
  1605 ;;		None
  1606 ;; Auto vars:     Size  Location     Type
  1607 ;;		None
  1608 ;; Return value:  Size  Location     Type
  1609 ;;                  1    wreg      unsigned char 
  1610 ;; Registers used:
  1611 ;;		wreg, status,2, status,0
  1612 ;; Tracked objects:
  1613 ;;		On entry : 60/0
  1614 ;;		On exit  : 60/0
  1615 ;;		Unchanged: FFF9F/0
  1616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1617 ;;      Params:         0       0       0       0       0
  1618 ;;      Locals:         0       0       0       0       0
  1619 ;;      Temps:          0       0       0       0       0
  1620 ;;      Totals:         0       0       0       0       0
  1621 ;;Total ram usage:        0 bytes
  1622 ;; Hardware stack levels used:    1
  1623 ;; Hardware stack levels required when called:    2
  1624 ;; This function calls:
  1625 ;;		Nothing
  1626 ;; This function is called by:
  1627 ;;		_main
  1628 ;; This function uses a non-reentrant model
  1629 ;;
  1630  0239                     _isFinishedBigTimer:	
  1631                           
  1632                           ;common.c: 210: if(uiBigTimer == 0)
  1633                           
  1634                           ; Regs used in _isFinishedBigTimer: [wreg+status,2+status,0]
  1635  0239  0877               	movf	_uiBigTimer+1,w
  1636  023A  0476               	iorwf	_uiBigTimer,w
  1637  023B  1903               	btfsc	3,2
  1638                           
  1639                           ;common.c: 211: return 1;
  1640  023C  3401               	retlw	1
  1641                           
  1642                           ;common.c: 212: else
  1643                           ;common.c: 213: return 0;
  1644  023D  3400               	retlw	0
  1645  023E                     __end_of_isFinishedBigTimer:	
  1646                           
  1647                           	psect	text475
  1648  0212                     __ptext475:	
  1649 ;; =============== function _isFinishedBigTimer ends ============
  1650                           
  1651                           
  1652 ;; *************** function _startSmallTimer *****************
  1653 ;; Defined at:
  1654 ;;		line 199 in file "C:\dev\AK7030-OTP\common.c"
  1655 ;; Parameters:    Size  Location     Type
  1656 ;;		None
  1657 ;; Auto vars:     Size  Location     Type
  1658 ;;		None
  1659 ;; Return value:  Size  Location     Type
  1660 ;;		None               void
  1661 ;; Registers used:
  1662 ;;		wreg
  1663 ;; Tracked objects:
  1664 ;;		On entry : 60/20
  1665 ;;		On exit  : 60/0
  1666 ;;		Unchanged: FFF9F/0
  1667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1668 ;;      Params:         0       0       0       0       0
  1669 ;;      Locals:         0       0       0       0       0
  1670 ;;      Temps:          0       0       0       0       0
  1671 ;;      Totals:         0       0       0       0       0
  1672 ;;Total ram usage:        0 bytes
  1673 ;; Hardware stack levels used:    1
  1674 ;; Hardware stack levels required when called:    2
  1675 ;; This function calls:
  1676 ;;		Nothing
  1677 ;; This function is called by:
  1678 ;;		_main
  1679 ;; This function uses a non-reentrant model
  1680 ;;
  1681  0212                     _startSmallTimer:	
  1682                           
  1683                           ;common.c: 200: uiSmallTimer = 10800;
  1684                           
  1685                           ; Regs used in _startSmallTimer: [wreg]
  1686  0212  3030               	movlw	48
  1687  0213  1283               	bcf	3,5	;RP0=0, select bank0
  1688  0214  00B4               	movwf	_uiSmallTimer
  1689  0215  302A               	movlw	42
  1690  0216  00B5               	movwf	_uiSmallTimer+1
  1691                           
  1692                           ;common.c: 203: uiSmallTimer = 180;
  1693  0217  30B4               	movlw	180
  1694  0218  00B4               	movwf	_uiSmallTimer
  1695  0219  01B5               	clrf	_uiSmallTimer+1
  1696  021A  0008               	return
  1697  021B                     __end_of_startSmallTimer:	
  1698                           
  1699                           	psect	text476
  1700  01FD                     __ptext476:	
  1701 ;; =============== function _startSmallTimer ends ============
  1702                           
  1703                           
  1704 ;; *************** function _startBigTimer *****************
  1705 ;; Defined at:
  1706 ;;		line 186 in file "C:\dev\AK7030-OTP\common.c"
  1707 ;; Parameters:    Size  Location     Type
  1708 ;;		None
  1709 ;; Auto vars:     Size  Location     Type
  1710 ;;		None
  1711 ;; Return value:  Size  Location     Type
  1712 ;;		None               void
  1713 ;; Registers used:
  1714 ;;		wreg
  1715 ;; Tracked objects:
  1716 ;;		On entry : 40/20
  1717 ;;		On exit  : 60/20
  1718 ;;		Unchanged: FFF9F/0
  1719 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1720 ;;      Params:         0       0       0       0       0
  1721 ;;      Locals:         0       0       0       0       0
  1722 ;;      Temps:          0       0       0       0       0
  1723 ;;      Totals:         0       0       0       0       0
  1724 ;;Total ram usage:        0 bytes
  1725 ;; Hardware stack levels used:    1
  1726 ;; Hardware stack levels required when called:    2
  1727 ;; This function calls:
  1728 ;;		Nothing
  1729 ;; This function is called by:
  1730 ;;		_main
  1731 ;; This function uses a non-reentrant model
  1732 ;;
  1733  01FD                     _startBigTimer:	
  1734                           
  1735                           ;common.c: 187: uiBigTimer = 34200;
  1736                           
  1737                           ; Regs used in _startBigTimer: [wreg]
  1738  01FD  3098               	movlw	152
  1739  01FE  00F6               	movwf	_uiBigTimer
  1740  01FF  3085               	movlw	133
  1741  0200  00F7               	movwf	_uiBigTimer+1
  1742                           
  1743                           ;common.c: 189: uiBigTimer = 70;
  1744  0201  3046               	movlw	70
  1745  0202  00F6               	movwf	_uiBigTimer
  1746  0203  303C               	movlw	60
  1747  0204  01F7               	clrf	_uiBigTimer+1
  1748                           
  1749                           ;common.c: 193: uiBigTimer = 60;
  1750  0205  00F6               	movwf	_uiBigTimer
  1751  0206  01F7               	clrf	_uiBigTimer+1
  1752  0207  0008               	return
  1753  0208                     __end_of_startBigTimer:	
  1754                           
  1755                           	psect	text477
  1756  024D                     __ptext477:	
  1757 ;; =============== function _startBigTimer ends ============
  1758                           
  1759                           
  1760 ;; *************** function _setDAC0_ChannelValue *****************
  1761 ;; Defined at:
  1762 ;;		line 181 in file "C:\dev\AK7030-OTP\common.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  ucValue         1    wreg     unsigned char 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  ucValue         1    0[BANK0 ] unsigned char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;		None               void
  1769 ;; Registers used:
  1770 ;;		wreg
  1771 ;; Tracked objects:
  1772 ;;		On entry : 60/0
  1773 ;;		On exit  : 60/20
  1774 ;;		Unchanged: FFF9F/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1776 ;;      Params:         0       0       0       0       0
  1777 ;;      Locals:         0       1       0       0       0
  1778 ;;      Temps:          0       0       0       0       0
  1779 ;;      Totals:         0       1       0       0       0
  1780 ;;Total ram usage:        1 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    2
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789  024D                     _setDAC0_ChannelValue:	
  1790                           
  1791                           ; Regs used in _setDAC0_ChannelValue: [wreg]
  1792                           ;setDAC0_ChannelValue@ucValue stored from wreg
  1793  024D  00BF               	movwf	setDAC0_ChannelValue@ucValue
  1794                           
  1795                           ;common.c: 182: DACR0=ucValue;
  1796  024E  1683               	bsf	3,5	;RP0=1, select bank1
  1797  024F  0088               	movwf	8	;volatile
  1798  0250  0008               	return
  1799  0251                     __end_of_setDAC0_ChannelValue:	
  1800                           
  1801                           	psect	text478
  1802  023E                     __ptext478:	
  1803 ;; =============== function _setDAC0_ChannelValue ends ============
  1804                           
  1805                           
  1806 ;; *************** function _getAdOriginalCh13Value *****************
  1807 ;; Defined at:
  1808 ;;		line 87 in file "C:\dev\AK7030-OTP\common.c"
  1809 ;; Parameters:    Size  Location     Type
  1810 ;;		None
  1811 ;; Auto vars:     Size  Location     Type
  1812 ;;		None
  1813 ;; Return value:  Size  Location     Type
  1814 ;;                  2    0[BANK0 ] unsigned int 
  1815 ;; Registers used:
  1816 ;;		wreg
  1817 ;; Tracked objects:
  1818 ;;		On entry : 60/0
  1819 ;;		On exit  : 60/0
  1820 ;;		Unchanged: FFF9F/0
  1821 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1822 ;;      Params:         0       2       0       0       0
  1823 ;;      Locals:         0       0       0       0       0
  1824 ;;      Temps:          0       0       0       0       0
  1825 ;;      Totals:         0       2       0       0       0
  1826 ;;Total ram usage:        2 bytes
  1827 ;; Hardware stack levels used:    1
  1828 ;; Hardware stack levels required when called:    2
  1829 ;; This function calls:
  1830 ;;		Nothing
  1831 ;; This function is called by:
  1832 ;;		_main
  1833 ;; This function uses a non-reentrant model
  1834 ;;
  1835  023E                     _getAdOriginalCh13Value:	
  1836                           
  1837                           ;common.c: 88: return adc_original_CH13_value;
  1838                           
  1839                           ; Regs used in _getAdOriginalCh13Value: [wreg]
  1840  023E  082D               	movf	_adc_original_CH13_value+1,w
  1841  023F  00C0               	movwf	?_getAdOriginalCh13Value+1
  1842  0240  082C               	movf	_adc_original_CH13_value,w
  1843  0241  00BF               	movwf	?_getAdOriginalCh13Value
  1844  0242  0008               	return
  1845  0243                     __end_of_getAdOriginalCh13Value:	
  1846                           
  1847                           	psect	text479
  1848  0254                     __ptext479:	
  1849 ;; =============== function _getAdOriginalCh13Value ends ============
  1850                           
  1851                           
  1852 ;; *************** function _clrSampeTime *****************
  1853 ;; Defined at:
  1854 ;;		line 235 in file "C:\dev\AK7030-OTP\common.c"
  1855 ;; Parameters:    Size  Location     Type
  1856 ;;		None
  1857 ;; Auto vars:     Size  Location     Type
  1858 ;;		None
  1859 ;; Return value:  Size  Location     Type
  1860 ;;		None               void
  1861 ;; Registers used:
  1862 ;;		status,2
  1863 ;; Tracked objects:
  1864 ;;		On entry : 0/0
  1865 ;;		On exit  : 0/0
  1866 ;;		Unchanged: FFFFF/0
  1867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1868 ;;      Params:         0       0       0       0       0
  1869 ;;      Locals:         0       0       0       0       0
  1870 ;;      Temps:          0       0       0       0       0
  1871 ;;      Totals:         0       0       0       0       0
  1872 ;;Total ram usage:        0 bytes
  1873 ;; Hardware stack levels used:    1
  1874 ;; Hardware stack levels required when called:    2
  1875 ;; This function calls:
  1876 ;;		Nothing
  1877 ;; This function is called by:
  1878 ;;		_main
  1879 ;; This function uses a non-reentrant model
  1880 ;;
  1881  0254                     _clrSampeTime:	
  1882                           
  1883                           ;common.c: 236: timer.timer10msStopWatch = 0;
  1884                           
  1885                           ; Regs used in _clrSampeTime: [status,2]
  1886  0254  01FA               	clrf	_timer
  1887  0255  0008               	return
  1888  0256                     __end_of_clrSampeTime:	
  1889                           
  1890                           	psect	text480
  1891  0243                     __ptext480:	
  1892 ;; =============== function _clrSampeTime ends ============
  1893                           
  1894                           
  1895 ;; *************** function _isPermitSampleTime *****************
  1896 ;; Defined at:
  1897 ;;		line 225 in file "C:\dev\AK7030-OTP\common.c"
  1898 ;; Parameters:    Size  Location     Type
  1899 ;;		None
  1900 ;; Auto vars:     Size  Location     Type
  1901 ;;		None
  1902 ;; Return value:  Size  Location     Type
  1903 ;;                  1    wreg      unsigned char 
  1904 ;; Registers used:
  1905 ;;		wreg
  1906 ;; Tracked objects:
  1907 ;;		On entry : 0/0
  1908 ;;		On exit  : 0/0
  1909 ;;		Unchanged: FFFFF/0
  1910 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1911 ;;      Params:         0       0       0       0       0
  1912 ;;      Locals:         0       0       0       0       0
  1913 ;;      Temps:          0       0       0       0       0
  1914 ;;      Totals:         0       0       0       0       0
  1915 ;;Total ram usage:        0 bytes
  1916 ;; Hardware stack levels used:    1
  1917 ;; Hardware stack levels required when called:    2
  1918 ;; This function calls:
  1919 ;;		Nothing
  1920 ;; This function is called by:
  1921 ;;		_main
  1922 ;; This function uses a non-reentrant model
  1923 ;;
  1924  0243                     _isPermitSampleTime:	
  1925                           
  1926                           ;common.c: 226: if(timer.timer10msStopWatch > 10)
  1927                           
  1928                           ; Regs used in _isPermitSampleTime: [wreg]
  1929  0243  300B               	movlw	11
  1930  0244  027A               	subwf	_timer,w
  1931  0245  1803               	btfsc	3,0
  1932                           
  1933                           ;common.c: 227: {
  1934                           ;common.c: 228: return 1;
  1935  0246  3401               	retlw	1
  1936                           
  1937                           ;common.c: 230: else
  1938                           ;common.c: 231: return 0;
  1939  0247  3400               	retlw	0
  1940  0248                     __end_of_isPermitSampleTime:	
  1941                           
  1942                           	psect	text482
  1943  021B                     __ptext482:	
  1944 ;; =============== function _adc_start ends ============
  1945                           
  1946                           
  1947 ;; *************** function _op2_init *****************
  1948 ;; Defined at:
  1949 ;;		line 45 in file "C:\dev\AK7030-OTP\periph.c"
  1950 ;; Parameters:    Size  Location     Type
  1951 ;;		None
  1952 ;; Auto vars:     Size  Location     Type
  1953 ;;		None
  1954 ;; Return value:  Size  Location     Type
  1955 ;;		None               void
  1956 ;; Registers used:
  1957 ;;		wreg, status,2
  1958 ;; Tracked objects:
  1959 ;;		On entry : 17F/20
  1960 ;;		On exit  : 17F/20
  1961 ;;		Unchanged: FFE80/0
  1962 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1963 ;;      Params:         0       0       0       0       0
  1964 ;;      Locals:         0       0       0       0       0
  1965 ;;      Temps:          0       0       0       0       0
  1966 ;;      Totals:         0       0       0       0       0
  1967 ;;Total ram usage:        0 bytes
  1968 ;; Hardware stack levels used:    1
  1969 ;; Hardware stack levels required when called:    2
  1970 ;; This function calls:
  1971 ;;		Nothing
  1972 ;; This function is called by:
  1973 ;;		_main
  1974 ;; This function uses a non-reentrant model
  1975 ;;
  1976  021B                     _op2_init:	
  1977                           
  1978                           ;periph.c: 52: OP2CON1=0x00;
  1979                           
  1980                           ; Regs used in _op2_init: [wreg+status,2]
  1981  021B  019C               	clrf	28	;volatile
  1982                           
  1983                           ;periph.c: 54: OP2CON2=0xA0;
  1984  021C  30A0               	movlw	160
  1985  021D  009D               	movwf	29	;volatile
  1986                           
  1987                           ;periph.c: 55: OP2CON0=0x80;
  1988  021E  3080               	movlw	128
  1989  021F  009B               	movwf	27	;volatile
  1990                           
  1991                           ;periph.c: 58: TRISA7=0;
  1992  0220  1385               	bcf	5,7
  1993                           
  1994                           ;periph.c: 59: TRISB6=1;
  1995  0221  1706               	bsf	6,6
  1996                           
  1997                           ;periph.c: 60: TRISB7 = 1;
  1998  0222  1786               	bsf	6,7
  1999  0223  0008               	return
  2000  0224                     __end_of_op2_init:	
  2001                           
  2002                           	psect	text483
  2003  01F1                     __ptext483:	
  2004 ;; =============== function _op2_init ends ============
  2005                           
  2006                           
  2007 ;; *************** function _op1_init *****************
  2008 ;; Defined at:
  2009 ;;		line 26 in file "C:\dev\AK7030-OTP\periph.c"
  2010 ;; Parameters:    Size  Location     Type
  2011 ;;		None
  2012 ;; Auto vars:     Size  Location     Type
  2013 ;;		None
  2014 ;; Return value:  Size  Location     Type
  2015 ;;		None               void
  2016 ;; Registers used:
  2017 ;;		wreg
  2018 ;; Tracked objects:
  2019 ;;		On entry : 17F/20
  2020 ;;		On exit  : 17F/20
  2021 ;;		Unchanged: FFE80/0
  2022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2023 ;;      Params:         0       0       0       0       0
  2024 ;;      Locals:         0       0       0       0       0
  2025 ;;      Temps:          0       0       0       0       0
  2026 ;;      Totals:         0       0       0       0       0
  2027 ;;Total ram usage:        0 bytes
  2028 ;; Hardware stack levels used:    1
  2029 ;; Hardware stack levels required when called:    2
  2030 ;; This function calls:
  2031 ;;		Nothing
  2032 ;; This function is called by:
  2033 ;;		_main
  2034 ;; This function uses a non-reentrant model
  2035 ;;
  2036  01F1                     _op1_init:	
  2037                           
  2038                           ;periph.c: 33: OP1CON1=0x02;
  2039                           
  2040                           ; Regs used in _op1_init: [wreg]
  2041  01F1  3002               	movlw	2
  2042  01F2  1283               	bcf	3,5	;RP0=0, select bank0
  2043  01F3  009C               	movwf	28	;volatile
  2044                           
  2045                           ;periph.c: 34: OP1CON2=0xA0;
  2046  01F4  30A0               	movlw	160
  2047  01F5  009D               	movwf	29	;volatile
  2048                           
  2049                           ;periph.c: 35: OP1CON0=0x80;
  2050  01F6  3080               	movlw	128
  2051  01F7  009B               	movwf	27	;volatile
  2052                           
  2053                           ;periph.c: 38: TRISB3=1;
  2054  01F8  1683               	bsf	3,5	;RP0=1, select bank1
  2055  01F9  1586               	bsf	6,3
  2056                           
  2057                           ;periph.c: 39: TRISB4=1;
  2058  01FA  1606               	bsf	6,4
  2059                           
  2060                           ;periph.c: 40: TRISB5=0;
  2061  01FB  1286               	bcf	6,5
  2062  01FC  0008               	return
  2063  01FD                     __end_of_op1_init:	
  2064                           
  2065                           	psect	text484
  2066  0248                     __ptext484:	
  2067 ;; =============== function _op1_init ends ============
  2068                           
  2069                           
  2070 ;; *************** function _dac_init *****************
  2071 ;; Defined at:
  2072 ;;		line 14 in file "C:\dev\AK7030-OTP\periph.c"
  2073 ;; Parameters:    Size  Location     Type
  2074 ;;		None
  2075 ;; Auto vars:     Size  Location     Type
  2076 ;;		None
  2077 ;; Return value:  Size  Location     Type
  2078 ;;		None               void
  2079 ;; Registers used:
  2080 ;;		wreg
  2081 ;; Tracked objects:
  2082 ;;		On entry : 17F/20
  2083 ;;		On exit  : 17F/20
  2084 ;;		Unchanged: FFE80/0
  2085 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2086 ;;      Params:         0       0       0       0       0
  2087 ;;      Locals:         0       0       0       0       0
  2088 ;;      Temps:          0       0       0       0       0
  2089 ;;      Totals:         0       0       0       0       0
  2090 ;;Total ram usage:        0 bytes
  2091 ;; Hardware stack levels used:    1
  2092 ;; Hardware stack levels required when called:    2
  2093 ;; This function calls:
  2094 ;;		Nothing
  2095 ;; This function is called by:
  2096 ;;		_main
  2097 ;; This function uses a non-reentrant model
  2098 ;;
  2099  0248                     _dac_init:	
  2100                           
  2101                           ;periph.c: 15: DACCON|=2;
  2102                           
  2103                           ; Regs used in _dac_init: [wreg]
  2104  0248  1487               	bsf	7,1	;volatile
  2105                           
  2106                           ;periph.c: 17: DACR0=0x19;
  2107  0249  3019               	movlw	25
  2108  024A  0088               	movwf	8	;volatile
  2109                           
  2110                           ;periph.c: 18: DACCON|=(1)<<2;
  2111  024B  1507               	bsf	7,2	;volatile
  2112  024C  0008               	return
  2113  024D                     __end_of_dac_init:	
  2114                           
  2115                           	psect	text485
  2116  01CD                     __ptext485:	
  2117 ;; =============== function _dac_init ends ============
  2118                           
  2119                           
  2120 ;; *************** function _adc_test_init *****************
  2121 ;; Defined at:
  2122 ;;		line 85 in file "C:\dev\AK7030-OTP\periph.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;  channel         1    wreg     unsigned char 
  2125 ;;  ref             1    0[BANK0 ] unsigned char 
  2126 ;; Auto vars:     Size  Location     Type
  2127 ;;  channel         1    2[BANK0 ] unsigned char 
  2128 ;; Return value:  Size  Location     Type
  2129 ;;		None               void
  2130 ;; Registers used:
  2131 ;;		wreg, status,2, status,0
  2132 ;; Tracked objects:
  2133 ;;		On entry : 17F/0
  2134 ;;		On exit  : 17F/20
  2135 ;;		Unchanged: FFE80/0
  2136 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2137 ;;      Params:         0       1       0       0       0
  2138 ;;      Locals:         0       1       0       0       0
  2139 ;;      Temps:          0       1       0       0       0
  2140 ;;      Totals:         0       3       0       0       0
  2141 ;;Total ram usage:        3 bytes
  2142 ;; Hardware stack levels used:    1
  2143 ;; Hardware stack levels required when called:    2
  2144 ;; This function calls:
  2145 ;;		Nothing
  2146 ;; This function is called by:
  2147 ;;		_main
  2148 ;; This function uses a non-reentrant model
  2149 ;;
  2150  01CD                     _adc_test_init:	
  2151                           
  2152                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2153                           ;adc_test_init@channel stored from wreg
  2154  01CD  00C1               	movwf	adc_test_init@channel
  2155                           
  2156                           ;periph.c: 86: ADCON0|=channel<<2;
  2157  01CE  00C0               	movwf	??_adc_test_init
  2158  01CF  1003               	clrc
  2159  01D0  0DC0               	rlf	??_adc_test_init,f
  2160  01D1  1003               	clrc
  2161  01D2  0D40               	rlf	??_adc_test_init,w
  2162  01D3  049F               	iorwf	31,f	;volatile
  2163                           
  2164                           ;periph.c: 87: ADCON1|=ref<<6;
  2165  01D4  083F               	movf	adc_test_init@ref,w
  2166  01D5  00C0               	movwf	??_adc_test_init
  2167  01D6  0CC0               	rrf	??_adc_test_init,f
  2168  01D7  0CC0               	rrf	??_adc_test_init,f
  2169  01D8  0C40               	rrf	??_adc_test_init,w
  2170  01D9  39C0               	andlw	192
  2171  01DA  1683               	bsf	3,5	;RP0=1, select bank1
  2172  01DB  049F               	iorwf	31,f	;volatile
  2173                           
  2174                           ;periph.c: 88: ADON=1;
  2175  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2176  01DD  141F               	bsf	31,0
  2177                           
  2178                           ;periph.c: 89: ADIE=1;
  2179  01DE  1683               	bsf	3,5	;RP0=1, select bank1
  2180  01DF  150D               	bsf	13,2
  2181  01E0  0008               	return
  2182  01E1                     __end_of_adc_test_init:	
  2183                           
  2184                           	psect	text486
  2185  0251                     __ptext486:	
  2186 ;; =============== function _adc_test_init ends ============
  2187                           
  2188                           
  2189 ;; *************** function _timer1_interrupt_config *****************
  2190 ;; Defined at:
  2191 ;;		line 56 in file "C:\dev\AK7030-OTP\common.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;		None               void
  2198 ;; Registers used:
  2199 ;;		None
  2200 ;; Tracked objects:
  2201 ;;		On entry : 17F/20
  2202 ;;		On exit  : 17F/20
  2203 ;;		Unchanged: FFE80/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2205 ;;      Params:         0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0
  2208 ;;      Totals:         0       0       0       0       0
  2209 ;;Total ram usage:        0 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    2
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_main
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218  0251                     _timer1_interrupt_config:	
  2219                           
  2220                           ;common.c: 57: GIE = 1;
  2221                           
  2222                           ; Regs used in _timer1_interrupt_config: []
  2223  0251  178B               	bsf	11,7
  2224                           
  2225                           ;common.c: 58: PEIE = 1;
  2226  0252  170B               	bsf	11,6
  2227  0253  0008               	return
  2228  0254                     __end_of_timer1_interrupt_config:	
  2229                           
  2230                           	psect	text487
  2231  0208                     __ptext487:	
  2232 ;; =============== function _timer1_interrupt_config ends ============
  2233                           
  2234                           
  2235 ;; *************** function _timer1_config *****************
  2236 ;; Defined at:
  2237 ;;		line 44 in file "C:\dev\AK7030-OTP\common.c"
  2238 ;; Parameters:    Size  Location     Type
  2239 ;;		None
  2240 ;; Auto vars:     Size  Location     Type
  2241 ;;		None
  2242 ;; Return value:  Size  Location     Type
  2243 ;;		None               void
  2244 ;; Registers used:
  2245 ;;		wreg
  2246 ;; Tracked objects:
  2247 ;;		On entry : 17F/40
  2248 ;;		On exit  : 17F/20
  2249 ;;		Unchanged: FFE80/0
  2250 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2251 ;;      Params:         0       0       0       0       0
  2252 ;;      Locals:         0       0       0       0       0
  2253 ;;      Temps:          0       0       0       0       0
  2254 ;;      Totals:         0       0       0       0       0
  2255 ;;Total ram usage:        0 bytes
  2256 ;; Hardware stack levels used:    1
  2257 ;; Hardware stack levels required when called:    2
  2258 ;; This function calls:
  2259 ;;		Nothing
  2260 ;; This function is called by:
  2261 ;;		_main
  2262 ;; This function uses a non-reentrant model
  2263 ;;
  2264  0208                     _timer1_config:	
  2265                           
  2266                           ;common.c: 46: TMR1H=0xCF;
  2267                           
  2268                           ; Regs used in _timer1_config: [wreg]
  2269  0208  30CF               	movlw	207
  2270  0209  1303               	bcf	3,6	;RP1=0, select bank0
  2271  020A  008F               	movwf	15	;volatile
  2272                           
  2273                           ;common.c: 47: TMR1L=0x2C;
  2274  020B  302C               	movlw	44
  2275  020C  008E               	movwf	14	;volatile
  2276                           
  2277                           ;common.c: 48: T1CON=0xE1;
  2278  020D  30E1               	movlw	225
  2279  020E  0090               	movwf	16	;volatile
  2280                           
  2281                           ;common.c: 49: TMR1IE=1;
  2282  020F  1683               	bsf	3,5	;RP0=1, select bank1
  2283  0210  140C               	bsf	12,0
  2284  0211  0008               	return
  2285  0212                     __end_of_timer1_config:	
  2286                           
  2287                           	psect	text488
  2288  022C                     __ptext488:	
  2289 ;; =============== function _timer1_config ends ============
  2290                           
  2291                           
  2292 ;; *************** function _clock_config *****************
  2293 ;; Defined at:
  2294 ;;		line 36 in file "C:\dev\AK7030-OTP\common.c"
  2295 ;; Parameters:    Size  Location     Type
  2296 ;;		None
  2297 ;; Auto vars:     Size  Location     Type
  2298 ;;		None
  2299 ;; Return value:  Size  Location     Type
  2300 ;;		None               void
  2301 ;; Registers used:
  2302 ;;		wreg, status,2
  2303 ;; Tracked objects:
  2304 ;;		On entry : 17F/20
  2305 ;;		On exit  : 17F/40
  2306 ;;		Unchanged: FFE80/0
  2307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2308 ;;      Params:         0       0       0       0       0
  2309 ;;      Locals:         0       0       0       0       0
  2310 ;;      Temps:          0       0       0       0       0
  2311 ;;      Totals:         0       0       0       0       0
  2312 ;;Total ram usage:        0 bytes
  2313 ;; Hardware stack levels used:    1
  2314 ;; Hardware stack levels required when called:    2
  2315 ;; This function calls:
  2316 ;;		Nothing
  2317 ;; This function is called by:
  2318 ;;		_main
  2319 ;; This function uses a non-reentrant model
  2320 ;;
  2321  022C                     _clock_config:	
  2322                           
  2323                           ;common.c: 38: CLKPR = 0x80;
  2324                           
  2325                           ; Regs used in _clock_config: [wreg+status,2]
  2326  022C  3080               	movlw	128
  2327  022D  1283               	bcf	3,5	;RP0=0, select bank2
  2328  022E  1703               	bsf	3,6	;RP1=1, select bank2
  2329  022F  0088               	movwf	8	;volatile
  2330                           
  2331                           ;common.c: 39: CLKPR = 0x00;
  2332  0230  0188               	clrf	8	;volatile
  2333  0231                     l1387:	
  2334                           ;common.c: 40: while(CLKPCE);
  2335                           
  2336  0231  1F88               	btfss	8,7
  2337  0232  0008               	return
  2338  0233  2A31               	goto	l1387
  2339  0234                     __end_of_clock_config:	
  2340                           
  2341                           	psect	text489
  2342  016A                     __ptext489:	
  2343 ;; =============== function _clock_config ends ============
  2344                           
  2345                           
  2346 ;; *************** function _ISR *****************
  2347 ;; Defined at:
  2348 ;;		line 240 in file "C:\dev\AK7030-OTP\common.c"
  2349 ;; Parameters:    Size  Location     Type
  2350 ;;		None
  2351 ;; Auto vars:     Size  Location     Type
  2352 ;;		None
  2353 ;; Return value:  Size  Location     Type
  2354 ;;		None               void
  2355 ;; Registers used:
  2356 ;;		wreg, status,2, status,0, pclath, cstack
  2357 ;; Tracked objects:
  2358 ;;		On entry : 0/0
  2359 ;;		On exit  : 40/0
  2360 ;;		Unchanged: FFF9F/0
  2361 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2362 ;;      Params:         0       0       0       0       0
  2363 ;;      Locals:         0       0       0       0       0
  2364 ;;      Temps:          2       0       0       0       0
  2365 ;;      Totals:         2       0       0       0       0
  2366 ;;Total ram usage:        2 bytes
  2367 ;; Hardware stack levels used:    1
  2368 ;; Hardware stack levels required when called:    1
  2369 ;; This function calls:
  2370 ;;		i1_setAD_ConvertFlag
  2371 ;;		_adc_get
  2372 ;; This function is called by:
  2373 ;;		Interrupt level 1
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376  016A                     _ISR:	
  2377                           
  2378                           ;common.c: 241: static unsigned char ucTimer1sCnt = 0;
  2379                           ;common.c: 243: if(TMR1IF == 1)
  2380  016A  1283               	bcf	3,5	;RP0=0, select bank0
  2381  016B  1303               	bcf	3,6	;RP1=0, select bank0
  2382  016C  1C0C               	btfss	12,0
  2383  016D  298A               	goto	i1l2977
  2384  016E  3064               	movlw	100
  2385                           
  2386                           ;common.c: 244: {
  2387                           ;common.c: 245: TMR1IF = 0 ;
  2388  016F  100C               	bcf	12,0
  2389                           
  2390                           ;common.c: 246: timer.timer10msStopWatch++;
  2391  0170  0AFA               	incf	_timer,f
  2392                           
  2393                           ;common.c: 247: ucTimer1sCnt++;
  2394  0171  0AF8               	incf	ISR@ucTimer1sCnt,f
  2395                           
  2396                           ;common.c: 249: if(ucTimer1sCnt >= 100)
  2397  0172  0278               	subwf	ISR@ucTimer1sCnt,w
  2398  0173  1C03               	skipc
  2399  0174  298A               	goto	i1l2977
  2400                           
  2401                           ;common.c: 250: {
  2402                           ;common.c: 251: ucTimer1sCnt = 0;
  2403  0175  01F8               	clrf	ISR@ucTimer1sCnt
  2404                           
  2405                           ;common.c: 252: if(uiBigTimer > 0)
  2406  0176  0877               	movf	_uiBigTimer+1,w
  2407  0177  0476               	iorwf	_uiBigTimer,w
  2408  0178  1903               	skipnz
  2409  0179  2980               	goto	i1l1469
  2410                           
  2411                           ;common.c: 253: uiBigTimer--;
  2412  017A  3001               	movlw	1
  2413  017B  02F6               	subwf	_uiBigTimer,f
  2414  017C  3000               	movlw	0
  2415  017D  1C03               	skipc
  2416  017E  03F7               	decf	_uiBigTimer+1,f
  2417  017F  02F7               	subwf	_uiBigTimer+1,f
  2418  0180                     i1l1469:	
  2419                           
  2420                           ;common.c: 255: if(uiSmallTimer)
  2421  0180  0835               	movf	_uiSmallTimer+1,w
  2422  0181  0434               	iorwf	_uiSmallTimer,w
  2423  0182  1903               	skipnz
  2424  0183  298A               	goto	i1l2977
  2425                           
  2426                           ;common.c: 256: uiSmallTimer--;
  2427  0184  3001               	movlw	1
  2428  0185  02B4               	subwf	_uiSmallTimer,f
  2429  0186  3000               	movlw	0
  2430  0187  1C03               	skipc
  2431  0188  03B5               	decf	_uiSmallTimer+1,f
  2432  0189  02B5               	subwf	_uiSmallTimer+1,f
  2433  018A                     i1l2977:	
  2434                           
  2435                           ;common.c: 257: }
  2436                           ;common.c: 258: }
  2437                           ;common.c: 260: if(ADIF)
  2438  018A  1D0D               	btfss	13,2
  2439  018B  29A4               	goto	i1l1474
  2440  018C  3001               	movlw	1
  2441                           
  2442                           ;common.c: 261: {
  2443                           ;common.c: 262: ADIF=0;
  2444  018D  110D               	bcf	13,2
  2445                           
  2446                           ;common.c: 263: setAD_ConvertFlag(1);
  2447  018E  21B6  118A         	fcall	i1_setAD_ConvertFlag
  2448                           
  2449                           ;common.c: 264: adc_original_value = adc_get();
  2450  0190  21AB  118A         	fcall	_adc_get
  2451  0192  0871               	movf	?_adc_get+1,w
  2452  0193  1283               	bcf	3,5	;RP0=0, select bank0
  2453  0194  00AF               	movwf	_adc_original_value+1
  2454  0195  0870               	movf	?_adc_get,w
  2455  0196  00AE               	movwf	_adc_original_value
  2456                           
  2457                           ;common.c: 265: if(sampleChannelSelect == 12)
  2458  0197  0844               	movf	_sampleChannelSelect,w
  2459  0198  3A0C               	xorlw	12
  2460  0199  1D03               	skipz
  2461  019A  299E               	goto	i1l2989
  2462                           
  2463                           ;common.c: 266: adc_original_CH12_value = adc_get();
  2464  019B  21AB  118A         	fcall	_adc_get
  2465  019D  29A4               	goto	i1l1474
  2466  019E                     i1l2989:	
  2467                           
  2468                           ;common.c: 267: else
  2469                           ;common.c: 268: adc_original_CH13_value = adc_get();
  2470  019E  21AB               	fcall	_adc_get
  2471  019F  0871               	movf	?_adc_get+1,w
  2472  01A0  1283               	bcf	3,5	;RP0=0, select bank0
  2473  01A1  00AD               	movwf	_adc_original_CH13_value+1
  2474  01A2  0870               	movf	?_adc_get,w
  2475  01A3  00AC               	movwf	_adc_original_CH13_value
  2476  01A4                     i1l1474:	
  2477  01A4  0875               	movf	??_ISR+1,w
  2478  01A5  008A               	movwf	10
  2479  01A6  0E74               	swapf	??_ISR^(0+-128),w
  2480  01A7  0083               	movwf	3
  2481  01A8  0EFE               	swapf	126,f
  2482  01A9  0E7E               	swapf	126,w
  2483  01AA  0009               	retfie
  2484  01AB                     __end_of_ISR:	
  2485  01AB                     __ptext491:	
  2486 ;; =============== function i1_setAD_ConvertFlag ends ============
  2487                           
  2488                           
  2489 ;; *************** function _adc_get *****************
  2490 ;; Defined at:
  2491 ;;		line 104 in file "C:\dev\AK7030-OTP\periph.c"
  2492 ;; Parameters:    Size  Location     Type
  2493 ;;		None
  2494 ;; Auto vars:     Size  Location     Type
  2495 ;;  val             2    2[COMMON] unsigned int 
  2496 ;; Return value:  Size  Location     Type
  2497 ;;                  2    0[COMMON] unsigned int 
  2498 ;; Registers used:
  2499 ;;		wreg
  2500 ;; Tracked objects:
  2501 ;;		On entry : 60/0
  2502 ;;		On exit  : 60/20
  2503 ;;		Unchanged: FFF9F/0
  2504 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2505 ;;      Params:         2       0       0       0       0
  2506 ;;      Locals:         2       0       0       0       0
  2507 ;;      Temps:          0       0       0       0       0
  2508 ;;      Totals:         4       0       0       0       0
  2509 ;;Total ram usage:        4 bytes
  2510 ;; Hardware stack levels used:    1
  2511 ;; This function calls:
  2512 ;;		Nothing
  2513 ;; This function is called by:
  2514 ;;		_ISR
  2515 ;; This function uses a non-reentrant model
  2516 ;;
  2517  01AB                     _adc_get:	
  2518                           
  2519                           ;periph.c: 105: unsigned int val;
  2520                           ;periph.c: 106: val = (ADRESH<<8) | ADRESL;
  2521                           
  2522                           ; Regs used in _adc_get: [wreg]
  2523  01AB  081E               	movf	30,w	;volatile
  2524  01AC  00F3               	movwf	adc_get@val+1
  2525  01AD  01F2               	clrf	adc_get@val
  2526  01AE  1683               	bsf	3,5	;RP0=1, select bank1
  2527  01AF  081E               	movf	30,w	;volatile
  2528  01B0  04F2               	iorwf	adc_get@val,f
  2529                           
  2530                           ;periph.c: 107: return val;
  2531  01B1  0873               	movf	adc_get@val+1,w
  2532  01B2  00F1               	movwf	?_adc_get+1
  2533  01B3  0872               	movf	adc_get@val,w
  2534  01B4  00F0               	movwf	?_adc_get
  2535  01B5  0008               	return
  2536  01B6                     __end_of_adc_get:	
  2537  01B6                     __ptext490:	
  2538 ;; =============== function _ISR ends ============
  2539                           
  2540                           
  2541 ;; *************** function i1_setAD_ConvertFlag *****************
  2542 ;; Defined at:
  2543 ;;		line 70 in file "C:\dev\AK7030-OTP\common.c"
  2544 ;; Parameters:    Size  Location     Type
  2545 ;;  setAD_Conver    1    wreg     unsigned char 
  2546 ;; Auto vars:     Size  Location     Type
  2547 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2548 ;; Return value:  Size  Location     Type
  2549 ;;		None               void
  2550 ;; Registers used:
  2551 ;;		wreg
  2552 ;; Tracked objects:
  2553 ;;		On entry : 60/0
  2554 ;;		On exit  : 60/0
  2555 ;;		Unchanged: FFF9F/0
  2556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2557 ;;      Params:         0       0       0       0       0
  2558 ;;      Locals:         1       0       0       0       0
  2559 ;;      Temps:          0       0       0       0       0
  2560 ;;      Totals:         1       0       0       0       0
  2561 ;;Total ram usage:        1 bytes
  2562 ;; Hardware stack levels used:    1
  2563 ;; This function calls:
  2564 ;;		Nothing
  2565 ;; This function is called by:
  2566 ;;		_ISR
  2567 ;; This function uses a non-reentrant model
  2568 ;;
  2569  01B6                     i1_setAD_ConvertFlag:	
  2570                           
  2571                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2572                           ;i1setAD_ConvertFlag@flag stored from wreg
  2573  01B6  00F0               	movwf	i1setAD_ConvertFlag@flag
  2574                           
  2575                           ;common.c: 71: adc_convert_flag = flag;
  2576  01B7  00F9               	movwf	_adc_convert_flag
  2577  01B8  0008               	return
  2578  01B9                     __end_ofi1_setAD_ConvertFlag:	
  2579                           
  2580                           	psect	intentry
  2581  0004                     __pintentry:	
  2582                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2583                           
  2584  0004                     interrupt_function:	
  2585  007E                     saved_w	set	btemp
  2586  0004  00FE               	movwf	btemp
  2587  0005  0E03               	swapf	3,w
  2588  0006  00F4               	movwf	??_ISR
  2589  0007  080A               	movf	10,w
  2590  0008  00F5               	movwf	??_ISR+1
  2591  0009  118A  296A         	ljmp	_ISR
  2592                           
  2593                           	psect	text492
  2594  0000                     __ptext492:	
  2595 ;; =============== function _adc_get ends ============
  2596                           
  2597  007E                     btemp	set	126	;btemp
  2598  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Dec 09 15:15:08 2018

                     ??_clock_config 003F                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 003F             ?_timer1_interrupt_config 0070  
                                l710 00B4                                  l711 00BD  
                                l717 00C8                                  l671 003B  
                                l666 00EE                                  l668 0036  
                                l685 0052                                  l677 0046  
                                l679 0047                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PA2 002A                                  _PA3 002B  
                                _PB2 0032                                  u505 0125  
                                u515 0138                                  _ISR 016A  
                                fsr0 0004                                  indf 0000  
                      _startBigTimer 01FD                                 S3227 01B9  
                        main@ampStep 0037                                 ?_ISR 0070  
                 __size_of_AD_Sample 0058                                 l2102 0000  
                               l2113 0000                                 l2105 0000  
                               l3001 0000                                 l1402 0000  
                               l1411 0000                                 l3011 0143  
                               l1420 0130                                 l1405 0000  
                               l3013 0000                                 l3005 011E  
                               l3101 0000                                 l2119 0000  
                               l3111 0000                                 l3103 0000  
                               l1441 0000                                 l3033 014E  
                               l3017 0000                                 l3113 0081  
                               l3035 0000                                 l3043 0000  
                               l3131 0091                                 l3107 006A  
                               l3051 0000                                 l1444 0000  
                               l3037 0000                                 l3045 0000  
                               l3141 0099                                 l3133 0092  
                               l3125 0087                                 l3117 0000  
                               l3061 0000                                 l3053 0000  
                               l1390 0000                                 l1462 0000  
                               l1438 0000                                 l3039 0000  
                               l3151 00AC                                 l3119 0000  
                               l3071 0038                                 l3063 00D3  
                               l3055 0000                                 l3047 0000  
                               l1393 0000                                 l3161 00C2  
                               l3153 0000                                 l3137 0000  
                               l3065 0000                                 l3057 0000  
                               l3049 0000                                 l1387 0231  
                               l2099 0000                                 l3171 00CD  
                               l3075 003F                                 l3059 0000  
                               l1396 0000                                 l3077 0040  
                               l3069 0000                                 l1399 0000  
                               l3159 00C1                                 l3087 004B  
                               l3169 00CC                                 l3097 0054  
                               l3089 004C                                 l3099 005E  
                               l2901 0100                                 l2903 0000  
                               l2921 0000                                 l2915 0000  
                               l2923 0000                                 l2861 0000  
                               l2917 0000                                 l2925 0000  
                               l2863 0000                                 l2871 0000  
                               l2927 0000                                 l2951 0000  
                               l2865 0000                                 l2873 0000  
                               l2881 0000                                 l2859 0000  
                               l2867 0000                                 l2875 0000  
                               l2883 0000                                 l2891 0000  
                               l2939 0000                                 l2955 0000  
                               l2869 0000                                 l2877 0000  
                               l2885 0000                                 l2893 0000  
                               l2957 0000                                 l2879 0000  
                               l2887 0000                                 l2895 0000  
                               l2897 0000                                 l2889 0000  
                               l2899 0000                                 l2997 0000  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _PEIE 005E  
               ??_getAdOriginalValue 0041               ??_isFinishedSmallTimer 003F  
                               _main 000D                    ??_startSmallTimer 003F  
                               btemp 007E                                 start 000B  
            ?_getAdOriginalCh13Value 003F                                ??_ISR 0074  
         __end_of_isPermitSampleTime 0248                  _sampleChannelSelect 0044  
                              ?_main 0070                                _DACR0 0088  
                              _CLKPR 0108                                _T1CON 0010  
                    __end_of_adc_get 01B6                                _TMR1H 000F  
                              _TMR1L 000E                       ?_startBigTimer 0070  
              setAD_ConvertFlag@flag 003F                        main@tDA_timer 0038  
                              _timer 007A                                pclath 000A  
                              status 0003                                wtemp0 007E  
     __end_of_getAdOriginalCh13Value 0243                 __end_of_clrSampeTime 0256  
         __end_of_isFinishedBigTimer 023E                         __end_of_main 00EF  
             __size_of_adc_test_init 0014                    __end_of_AD_Sample 015B  
               _setDAC0_ChannelValue 024D            main@ucInstalledBatteryCnt 003E  
                             ??_main 0044                               _ADCON0 001F  
                             _ADCON1 009F                 __end_of_clock_config 0234  
                             _DACCON 0087                               _ADRESH 001E  
                             _ADRESL 009E                               _CLKPCE 0847  
                             i1l2122 0000                               i1l1402 0000  
                             i1l1474 01A4                               i1l1469 0180  
                             i1l2961 0000                               i1l2971 0000  
                             i1l2981 0000                               i1l2965 0000  
                             i1l2991 0000                               i1l2983 0000  
                             i1l2967 0000                               i1l2985 0000  
                             i1l2977 018A                               i1l2995 0000  
                             i1l2989 019E                     __end_of_dac_init 024D  
                             _TMR1IE 0460                               _TMR1IF 0060  
                  _getAD_ConvertFlag 00F9                    _setAD_ConvertFlag 00FB  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISB5 0435  
                             _TRISA7 042F                               _TRISB6 0436  
                             _TRISB7 0437                   ?_getAD_ConvertFlag 0070  
                 ?_setAD_ConvertFlag 0070                     __end_of_op1_init 01FD  
                   __end_of_op2_init 0224               main@ucConfirmTimerZptS 003B  
                          ??_adc_get 0072                  ??_getAD_ConvertFlag 003F  
                ??_setAD_ConvertFlag 003F                ?_setDAC0_ChannelValue 0070  
                             clrloop 0225                      ??_startBigTimer 003F  
                             saved_w 007E          ?_process_AD_Converter_Value 0070  
                      _adc_test_init 01CD            __end_of_getAD_ConvertFlag 00FB  
          __end_of_setAD_ConvertFlag 0100                   __size_of_adc_start 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
                    _startSmallTimer 0212              _adc_original_CH13_value 002C  
              __end_of_timer1_config 0212                       ?_adc_test_init 003F  
   __size_of_timer1_interrupt_config 0003                __size_of_clrSampeTime 0002  
                         __pbssBANK0 0020         __size_ofi1_setAD_ConvertFlag 0003  
                         adc_get@val 0072                           __pmaintext 000D  
             ??_setDAC0_ChannelValue 003F                           __pintentry 0004  
                          ?_dac_init 0070                __size_of_clock_config 0008  
                            _OP1CON0 001B                              _OP1CON1 001C  
                            _OP1CON2 001D                              _OP2CON0 009B  
                            _OP2CON1 009C                              _OP2CON2 009D  
                       _clrSampeTime 0254                    __end_of_adc_start 0103  
                          ?_op1_init 0070                            ?_op2_init 0070  
                 _isPermitSampleTime 0243               _buffer_Sample_AD_Value 0020  
                 _adc_original_value 002E           __size_of_getAD_ConvertFlag 0002  
         __size_of_setAD_ConvertFlag 0005          __size_of_getAdOriginalValue 0005  
                ?_isPermitSampleTime 0070        __size_of_isFinishedSmallTimer 0005  
                         _uiBigTimer 0076                         _clock_config 022C  
                            _adc_get 01AB              __end_of_startSmallTimer 021B  
                _multiFilterMaxValue 0030                  _multiFilterMinValue 0032  
               ??_isPermitSampleTime 003F                   _isFinishedBigTimer 0239  
                         ??_dac_init 003F                            _AD_Sample 0103  
                       __size_of_ISR 0041                      ??_adc_test_init 0040  
                         ??_op1_init 003F                           ??_op2_init 003F  
                ?_isFinishedBigTimer 0070                 end_of_initialization 01EE  
               ??_isFinishedBigTimer 003F                           ?_AD_Sample 0070  
                   _adc_convert_flag 0079              _timer1_interrupt_config 0251  
                     AD_Sample@index 0043                           main@ucInit 003D  
                   ?_startSmallTimer 0070                  i1_setAD_ConvertFlag 01B6  
              __end_of_startBigTimer 0208                  start_initialization 01E1  
                        __end_of_ISR 01AB             ??_getAdOriginalCh13Value 0041  
               ?i1_setAD_ConvertFlag 0070                main@ucCheckBatteryCnt 0039  
                        __pdataBANK0 0044                          ??_AD_Sample 0041  
          ??_timer1_interrupt_config 003F                          __pbssCOMMON 0076  
                  __size_of_dac_init 0005                        __pcstackBANK0 003F  
                          _adc_start 0100                    __size_of_op1_init 000C  
                  __size_of_op2_init 0009                ??i1_setAD_ConvertFlag 0070  
             __size_of_timer1_config 000A                            __ptext470 015B  
                          __ptext471 00FB                            __ptext480 0243  
                          __ptext472 00F9                            __ptext481 0100  
                          __ptext473 0234                            __ptext490 01B6  
                          __ptext482 021B                            __ptext474 0239  
                          __ptext491 01AB                            __ptext483 01F1  
                          __ptext475 0212                            __ptext492 0000  
                          __ptext484 0248                            __ptext476 01FD  
                          __ptext468 00EF                            __ptext485 01CD  
                          __ptext477 024D                            __ptext469 0103  
                          __ptext486 0251                            __ptext478 023E  
                          __ptext487 0208                            __ptext479 0254  
                          __ptext488 022C                            __ptext489 016A  
                           ?_adc_get 0070        __size_of_setDAC0_ChannelValue 0004  
       __end_of_isFinishedSmallTimer 0239                            __pswtext1 01B9  
                    ISR@ucTimer1sCnt 0078           __end_of_getAdOriginalValue 0160  
                         ?_adc_start 0070      __size_of_getAdOriginalCh13Value 0005  
                  interrupt_function 0004      __end_of_timer1_interrupt_config 0254  
               adc_test_init@channel 0041          __size_of_isPermitSampleTime 0005  
                       _uiSmallTimer 0034                __end_of_adc_test_init 01E1  
                      _timer1_config 0208         ??_process_AD_Converter_Value 0044  
               main@ucConfirmTimer1S 003A          __size_of_isFinishedBigTimer 0005  
             _getAdOriginalCh13Value 023E                     __size_of_adc_get 000B  
__size_of_process_AD_Converter_Value 000A                             _dac_init 0248  
                     ?_timer1_config 0070                             _op1_init 01F1  
                           _op2_init 021B                          ??_adc_start 003F  
                      __size_of_main 00E2                    main@ucConfrimeCnt 003C  
               _isFinishedSmallTimer 0234                             clear_ram 0224  
        setDAC0_ChannelValue@ucValue 003F                        ?_clrSampeTime 0070  
                        _sampleTimes 0036             __size_of_startSmallTimer 0009  
                           intlevel1 0000                ?_isFinishedSmallTimer 0070  
             __size_of_startBigTimer 000B                        ?_clock_config 0070  
            i1setAD_ConvertFlag@flag 0070                       ??_clrSampeTime 003F  
                    ??_timer1_config 003F          __end_ofi1_setAD_ConvertFlag 01B9  
 __end_of_process_AD_Converter_Value 00F9           _process_AD_Converter_Value 00EF  
       __end_of_setDAC0_ChannelValue 0251                     adc_test_init@ref 003F  
                 _getAdOriginalValue 015B  
