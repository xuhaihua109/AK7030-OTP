

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Jun 04 11:37:19 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	swtext2,local,class=CONST,delta=2
    16                           	psect	swtext3,local,class=CONST,delta=2
    17                           	psect	text414,local,class=CODE,delta=2
    18                           	psect	text419,local,class=CODE,delta=2
    19                           	psect	text420,local,class=CODE,delta=2
    20                           	psect	text421,local,class=CODE,delta=2
    21                           	psect	text422,local,class=CODE,delta=2
    22                           	psect	text424,local,class=CODE,delta=2
    23                           	psect	text425,local,class=CODE,delta=2
    24                           	psect	text426,local,class=CODE,delta=2
    25                           	psect	text428,local,class=CODE,delta=2
    26                           	psect	text429,local,class=CODE,delta=2
    27                           	psect	text430,local,class=CODE,delta=2
    28                           	psect	text431,local,class=CODE,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text434,local,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  000A                     	;#
    34                           
    35                           	psect	config
    36  2000  2FFF               	dw	12287	;#
    37  2001  3FDE               	dw	16350	;#
    38  2002  3FF8               	dw	16376	;#
    39                           
    40                           	psect	idataBANK0
    41  0000                     __pidataBANK0:	
    42  001F                     _ADCON0	set	31
    43  001E                     _ADRESH	set	30
    44  001B                     _OP1CON0	set	27
    45  001C                     _OP1CON1	set	28
    46  001D                     _OP1CON2	set	29
    47  0010                     _T1CON	set	16
    48  000F                     _TMR1H	set	15
    49  000E                     _TMR1L	set	14
    50  006A                     _ADIF	set	106
    51  00F8                     _ADON	set	248
    52  005F                     _GIE	set	95
    53  00F9                     _GO	set	249
    54  0028                     _PA0	set	40
    55  0029                     _PA1	set	41
    56  002A                     _PA2	set	42
    57  002B                     _PA3	set	43
    58  002E                     _PA6	set	46
    59  002F                     _PA7	set	47
    60  0030                     _PB0	set	48
    61  0031                     _PB1	set	49
    62  005E                     _PEIE	set	94
    63  0060                     _TMR1IF	set	96
    64  009F                     _ADCON1	set	159
    65  009E                     _ADRESL	set	158
    66  0087                     _DACCON	set	135
    67  0088                     _DACR0	set	136
    68  009B                     _OP2CON0	set	155
    69  009C                     _OP2CON1	set	156
    70  009D                     _OP2CON2	set	157
    71  046A                     _ADIE	set	1130
    72  0460                     _TMR1IE	set	1120
    73  0428                     _TRISA0	set	1064
    74  0429                     _TRISA1	set	1065
    75  042A                     _TRISA2	set	1066
    76  042B                     _TRISA3	set	1067
    77  042E                     _TRISA6	set	1070
    78  042F                     _TRISA7	set	1071
    79  0430                     _TRISB0	set	1072
    80  0431                     _TRISB1	set	1073
    81  0432                     _TRISB2	set	1074
    82  0433                     _TRISB3	set	1075
    83  0434                     _TRISB4	set	1076
    84  0435                     _TRISB5	set	1077
    85  0437                     _TRISB7	set	1079
    86  0108                     _CLKPR	set	264
    87  0847                     _CLKPCE	set	2119
    88  0C46                     _PBOD6	set	3142
    89                           
    90                           	psect	cinit
    91  02FF                     start_initialization:	
    92  02FF  3020               	movlw	low __pbssBANK0
    93                           
    94                           ; Clear objects allocated to COMMON
    95  0300  01F6               	clrf	__pbssCOMMON& (0+127)
    96  0301  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    97  0302  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    98  0303  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
    99  0304  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   100                           
   101                           ; Clear objects allocated to BANK0
   102  0305  1383               	bcf	3,7	;select IRP bank0
   103  0306  0084               	movwf	4
   104  0307  3049               	movlw	low (__pbssBANK0+41)
   105  0308  118A  234C         	fcall	clear_ram
   106                           
   107                           ;initializer for _sampleChannelSelect
   108  030A  300E               	movlw	14
   109  030B  00CE               	movwf	__pdataBANK0& (0+127)
   110  030C                     end_of_initialization:	
   111                           ;End of C runtime variable initialization code
   112                           
   113  030C  0183               	clrf	3
   114  030D  118A  280D         	ljmp	_main	;jump to C main() function
   115                           
   116                           	psect	bssCOMMON
   117  0076                     __pbssCOMMON:	
   118  0076                     _uiBigTimer:	
   119  0076                     	ds	2
   120  0078                     ISR@ucTimer1sCnt:	
   121  0078                     	ds	1
   122  0079                     _adc_convert_flag:	
   123  0079                     	ds	1
   124  007A                     _timer:	
   125  007A                     	ds	1
   126                           
   127                           	psect	bssBANK0
   128  0020                     __pbssBANK0:	
   129  0020                     _buffer_Sample_AD_Value:	
   130  0020                     	ds	12
   131  002C                     _adc_original_value:	
   132  002C                     	ds	2
   133  002E                     _multiFilterMaxValue:	
   134  002E                     	ds	2
   135  0030                     _multiFilterMinValue:	
   136  0030                     	ds	2
   137  0032                     _multiFilterSumValue:	
   138  0032                     	ds	2
   139  0034                     _sampleCH14Value:	
   140  0034                     	ds	2
   141  0036                     _sampleCH4Value:	
   142  0036                     	ds	2
   143  0038                     _uiSmallTimer:	
   144  0038                     	ds	2
   145  003A                     main@ucTimerCount:	
   146  003A                     	ds	2
   147  003C                     _sampleTimes:	
   148  003C                     	ds	1
   149  003D                     main@AD_sample_process_step:	
   150  003D                     	ds	1
   151  003E                     main@ucChannel4Type:	
   152  003E                     	ds	1
   153  003F                     main@ucLoaderStep:	
   154  003F                     	ds	1
   155  0040                     main@ucLoaderStep1:	
   156  0040                     	ds	1
   157  0041                     main@ucLoaderStep2:	
   158  0041                     	ds	1
   159  0042                     main@ucLoaderStep3:	
   160  0042                     	ds	1
   161  0043                     main@ucLoaderStep4:	
   162  0043                     	ds	1
   163  0044                     main@ucTimerDelay:	
   164  0044                     	ds	1
   165  0045                     main@ucTimerDelay1:	
   166  0045                     	ds	1
   167  0046                     main@ucTimerDelay2:	
   168  0046                     	ds	1
   169  0047                     main@ucTimerDelay3:	
   170  0047                     	ds	1
   171  0048                     main@ucTimerDelay4:	
   172  0048                     	ds	1
   173                           
   174                           	psect	dataBANK0
   175  004E                     __pdataBANK0:	
   176  004E                     _sampleChannelSelect:	
   177  004E                     	ds	1
   178                           
   179                           	psect	clrtext
   180  034C                     clear_ram:	
   181                           ;	Called with FSR containing the base address, and
   182                           ;	W with the last address+1
   183                           
   184  034C  0064               	clrwdt	;clear the watchdog before getting into this loop
   185  034D                     clrloop:	
   186  034D  0180               	clrf	0	;clear RAM location pointed to by FSR
   187  034E  0A84               	incf	4,f	;increment pointer
   188  034F  0604               	xorwf	4,w	;XOR with final address
   189  0350  1903               	btfsc	3,2	;have we reached the end yet?
   190  0351  3400               	retlw	0	;all done for this memory range, return
   191  0352  0604               	xorwf	4,w	;XOR again to restore value
   192  0353  2B4D               	goto	clrloop	;do the next byte
   193                           
   194                           	psect	cstackCOMMON
   195  0070                     __pcstackCOMMON:	
   196  0070                     ?_clock_config:	
   197  0070                     ?_timer1_config:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_timer1_interrupt_config:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ?_dac_init:	
   204                           ; 0 bytes @ 0x0
   205                           
   206  0070                     ?_op1_init:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_op2_init:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_adc_start:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?_clrSampeTime:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_process_AD_Converter_Value:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_AD_Sample:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_main:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_setAD_ConvertFlag:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?_ISR:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?i1_setAD_ConvertFlag:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ??i1_setAD_ConvertFlag:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ?_isPermitSampleTime:	
   240                           ; 0 bytes @ 0x0
   241                           
   242  0070                     ?_getAD_ConvertFlag:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     ?_adc_get:	
   246                           ; 1 bytes @ 0x0
   247                           
   248  0070                     i1setAD_ConvertFlag@flag:	
   249                           ; 2 bytes @ 0x0
   250                           
   251                           
   252                           ; 1 bytes @ 0x0
   253  0070                     	ds	2
   254  0072                     ??_adc_get:	
   255  0072                     adc_get@val:	
   256                           ; 0 bytes @ 0x2
   257                           
   258                           
   259                           ; 2 bytes @ 0x2
   260  0072                     	ds	2
   261  0074                     ??_ISR:	
   262                           
   263                           ; 0 bytes @ 0x4
   264  0074                     	ds	2
   265                           
   266                           	psect	cstackBANK0
   267  0049                     __pcstackBANK0:	
   268  0049                     ??_clock_config:	
   269  0049                     ??_timer1_config:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0049                     ??_timer1_interrupt_config:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0049                     ?_adc_test_init:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0049                     ??_dac_init:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0049                     ??_op1_init:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0049                     ??_op2_init:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0049                     ??_adc_start:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0049                     ??_isPermitSampleTime:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0049                     ??_clrSampeTime:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0049                     ??_getAD_ConvertFlag:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0049                     ??_setAD_ConvertFlag:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0049                     ?_getAdCh14Value:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  0049                     ?_getAdCh4Value:	
   306                           ; 2 bytes @ 0x0
   307                           
   308  0049                     ?_getAdOriginalValue:	
   309                           ; 2 bytes @ 0x0
   310                           
   311  0049                     setAD_ConvertFlag@flag:	
   312                           ; 2 bytes @ 0x0
   313                           
   314  0049                     adc_test_init@ref:	
   315                           ; 1 bytes @ 0x0
   316                           
   317                           
   318                           ; 1 bytes @ 0x0
   319  0049                     	ds	1
   320  004A                     ??_adc_test_init:	
   321                           
   322                           ; 0 bytes @ 0x1
   323  004A                     	ds	1
   324  004B                     ??_getAdCh14Value:	
   325  004B                     ??_getAdCh4Value:	
   326                           ; 0 bytes @ 0x2
   327                           
   328  004B                     ??_AD_Sample:	
   329                           ; 0 bytes @ 0x2
   330                           
   331  004B                     ??_getAdOriginalValue:	
   332                           ; 0 bytes @ 0x2
   333                           
   334  004B                     adc_test_init@channel:	
   335                           ; 0 bytes @ 0x2
   336                           
   337                           
   338                           ; 1 bytes @ 0x2
   339  004B                     	ds	2
   340  004D                     AD_Sample@index:	
   341                           
   342                           ; 1 bytes @ 0x4
   343  004D                     	ds	1
   344  004E                     ??_process_AD_Converter_Value:	
   345  004E                     ??_main:	
   346                           ; 0 bytes @ 0x5
   347                           
   348                           
   349                           	psect	maintext
   350  000D                     __pmaintext:	
   351                           ; 0 bytes @ 0x5
   352 ;;Data sizes: Strings 0, constant 0, data 1, bss 46, persistent 0 stack 0
   353 ;;Auto spaces:   Size  Autos    Used
   354 ;; COMMON          14      6      11
   355 ;; BANK0           80      5      47
   356 ;; BANK1           80      0       0
   357 ;; BANK3           96      0       0
   358 ;; BANK2           96      0       0
   359 ;;
   360 ;; Pointer list with targets:
   361 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   362 ;;
   363 ;; ?_getAdCh14Value	unsigned int  size(1) Largest target is 0
   364 ;;
   365 ;; ?_getAdCh4Value	unsigned int  size(1) Largest target is 0
   366 ;;
   367 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   368 ;;
   369 ;;
   370 ;; Critical Paths under _main in COMMON
   371 ;;
   372 ;;   None.
   373 ;;
   374 ;; Critical Paths under _ISR in COMMON
   375 ;;
   376 ;;   _ISR->_adc_get
   377 ;;
   378 ;; Critical Paths under _main in BANK0
   379 ;;
   380 ;;   _process_AD_Converter_Value->_AD_Sample
   381 ;;   _AD_Sample->_getAdOriginalValue
   382 ;;
   383 ;; Critical Paths under _ISR in BANK0
   384 ;;
   385 ;;   None.
   386 ;;
   387 ;; Critical Paths under _main in BANK1
   388 ;;
   389 ;;   None.
   390 ;;
   391 ;; Critical Paths under _ISR in BANK1
   392 ;;
   393 ;;   None.
   394 ;;
   395 ;; Critical Paths under _main in BANK3
   396 ;;
   397 ;;   None.
   398 ;;
   399 ;; Critical Paths under _ISR in BANK3
   400 ;;
   401 ;;   None.
   402 ;;
   403 ;; Critical Paths under _main in BANK2
   404 ;;
   405 ;;   None.
   406 ;;
   407 ;; Critical Paths under _ISR in BANK2
   408 ;;
   409 ;;   None.
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   412 ;;
   413 ;;
   414 ;;Call Graph Tables:
   415 ;;
   416 ;; ---------------------------------------------------------------------------------
   417 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   418 ;; ---------------------------------------------------------------------------------
   419 ;; (0) _main                                                 0     0      0     178
   420 ;;                       _clock_config
   421 ;;                      _timer1_config
   422 ;;            _timer1_interrupt_config
   423 ;;                      _adc_test_init
   424 ;;                           _dac_init
   425 ;;                           _op1_init
   426 ;;                           _op2_init
   427 ;;                          _adc_start
   428 ;;                 _isPermitSampleTime
   429 ;;                       _clrSampeTime
   430 ;;         _process_AD_Converter_Value
   431 ;;                     _getAdCh14Value
   432 ;;                      _getAdCh4Value
   433 ;; ---------------------------------------------------------------------------------
   434 ;; (1) _process_AD_Converter_Value                           0     0      0     134
   435 ;;                  _getAD_ConvertFlag
   436 ;;                  _setAD_ConvertFlag
   437 ;;                          _AD_Sample
   438 ;;                      _adc_test_init
   439 ;;                          _adc_start
   440 ;; ---------------------------------------------------------------------------------
   441 ;; (2) _AD_Sample                                            3     3      0      68
   442 ;;                                              2 BANK0      3     3      0
   443 ;;                 _getAdOriginalValue
   444 ;; ---------------------------------------------------------------------------------
   445 ;; (3) _getAdOriginalValue                                   2     0      2       0
   446 ;;                                              0 BANK0      2     0      2
   447 ;; ---------------------------------------------------------------------------------
   448 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   449 ;;                                              0 BANK0      1     1      0
   450 ;; ---------------------------------------------------------------------------------
   451 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   452 ;; ---------------------------------------------------------------------------------
   453 ;; (1) _getAdCh4Value                                        2     0      2       0
   454 ;;                                              0 BANK0      2     0      2
   455 ;; ---------------------------------------------------------------------------------
   456 ;; (1) _getAdCh14Value                                       2     0      2       0
   457 ;;                                              0 BANK0      2     0      2
   458 ;; ---------------------------------------------------------------------------------
   459 ;; (1) _clrSampeTime                                         0     0      0       0
   460 ;; ---------------------------------------------------------------------------------
   461 ;; (1) _isPermitSampleTime                                   0     0      0       0
   462 ;; ---------------------------------------------------------------------------------
   463 ;; (2) _adc_start                                            0     0      0       0
   464 ;; ---------------------------------------------------------------------------------
   465 ;; (1) _op2_init                                             0     0      0       0
   466 ;; ---------------------------------------------------------------------------------
   467 ;; (1) _op1_init                                             0     0      0       0
   468 ;; ---------------------------------------------------------------------------------
   469 ;; (1) _dac_init                                             0     0      0       0
   470 ;; ---------------------------------------------------------------------------------
   471 ;; (2) _adc_test_init                                        3     2      1      44
   472 ;;                                              0 BANK0      3     2      1
   473 ;; ---------------------------------------------------------------------------------
   474 ;; (1) _timer1_interrupt_config                              0     0      0       0
   475 ;; ---------------------------------------------------------------------------------
   476 ;; (1) _timer1_config                                        0     0      0       0
   477 ;; ---------------------------------------------------------------------------------
   478 ;; (1) _clock_config                                         0     0      0       0
   479 ;; ---------------------------------------------------------------------------------
   480 ;; Estimated maximum stack depth 3
   481 ;; ---------------------------------------------------------------------------------
   482 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   483 ;; ---------------------------------------------------------------------------------
   484 ;; (4) _ISR                                                  2     2      0      97
   485 ;;                                              4 COMMON     2     2      0
   486 ;;                i1_setAD_ConvertFlag
   487 ;;                            _adc_get
   488 ;; ---------------------------------------------------------------------------------
   489 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   490 ;;                                              0 COMMON     1     1      0
   491 ;; ---------------------------------------------------------------------------------
   492 ;; (5) _adc_get                                              4     2      2      24
   493 ;;                                              0 COMMON     4     2      2
   494 ;; ---------------------------------------------------------------------------------
   495 ;; Estimated maximum stack depth 5
   496 ;; ---------------------------------------------------------------------------------
   497 ;; Call Graph Graphs:
   498 ;; _main (ROOT)
   499 ;;   _clock_config
   500 ;;   _timer1_config
   501 ;;   _timer1_interrupt_config
   502 ;;   _adc_test_init
   503 ;;   _dac_init
   504 ;;   _op1_init
   505 ;;   _op2_init
   506 ;;   _adc_start
   507 ;;   _isPermitSampleTime
   508 ;;   _clrSampeTime
   509 ;;   _process_AD_Converter_Value
   510 ;;     _getAD_ConvertFlag
   511 ;;     _setAD_ConvertFlag
   512 ;;     _AD_Sample
   513 ;;       _getAdOriginalValue
   514 ;;     _adc_test_init
   515 ;;     _adc_start
   516 ;;   _getAdCh14Value
   517 ;;   _getAdCh4Value
   518 ;;
   519 ;; _ISR (ROOT)
   520 ;;   i1_setAD_ConvertFlag
   521 ;;   _adc_get
   522 ;;
   523 ;; Address spaces:
   524 ;;Name               Size   Autos  Total    Cost      Usage
   525 ;;BANK3               60      0       0      10        0.0%
   526 ;;BITBANK3            60      0       0       9        0.0%
   527 ;;SFR3                 0      0       0       4        0.0%
   528 ;;BITSFR3              0      0       0       4        0.0%
   529 ;;BANK2               60      0       0      12        0.0%
   530 ;;BITBANK2            60      0       0      11        0.0%
   531 ;;SFR2                 0      0       0       5        0.0%
   532 ;;BITSFR2              0      0       0       5        0.0%
   533 ;;SFR1                 0      0       0       2        0.0%
   534 ;;BITSFR1              0      0       0       2        0.0%
   535 ;;BANK1               50      0       0       8        0.0%
   536 ;;BITBANK1            50      0       0       7        0.0%
   537 ;;CODE                 0      0       0       0        0.0%
   538 ;;DATA                 0      0      41       6        0.0%
   539 ;;ABS                  0      0      3A       3        0.0%
   540 ;;NULL                 0      0       0       0        0.0%
   541 ;;STACK                0      0       7       2        0.0%
   542 ;;BANK0               50      5      2F       5       58.8%
   543 ;;BITBANK0            50      0       0       4        0.0%
   544 ;;SFR0                 0      0       0       1        0.0%
   545 ;;BITSFR0              0      0       0       1        0.0%
   546 ;;COMMON               E      6       B       1       78.6%
   547 ;;BITCOMMON            E      0       0       0        0.0%
   548                           
   549                           
   550 ;; *************** function _main *****************
   551 ;; Defined at:
   552 ;;		line 84 in file "C:\190604\AK7030-OTP\main.c"
   553 ;; Parameters:    Size  Location     Type
   554 ;;		None
   555 ;; Auto vars:     Size  Location     Type
   556 ;;		None
   557 ;; Return value:  Size  Location     Type
   558 ;;		None               void
   559 ;; Registers used:
   560 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   561 ;; Tracked objects:
   562 ;;		On entry : 17F/0
   563 ;;		On exit  : 60/0
   564 ;;		Unchanged: FFE00/0
   565 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   566 ;;      Params:         0       0       0       0       0
   567 ;;      Locals:         0       0       0       0       0
   568 ;;      Temps:          0       0       0       0       0
   569 ;;      Totals:         0       0       0       0       0
   570 ;;Total ram usage:        0 bytes
   571 ;; Hardware stack levels required when called:    5
   572 ;; This function calls:
   573 ;;		_clock_config
   574 ;;		_timer1_config
   575 ;;		_timer1_interrupt_config
   576 ;;		_adc_test_init
   577 ;;		_dac_init
   578 ;;		_op1_init
   579 ;;		_op2_init
   580 ;;		_adc_start
   581 ;;		_isPermitSampleTime
   582 ;;		_clrSampeTime
   583 ;;		_process_AD_Converter_Value
   584 ;;		_getAdCh14Value
   585 ;;		_getAdCh4Value
   586 ;; This function is called by:
   587 ;;		Startup code after reset
   588 ;; This function uses a non-reentrant model
   589 ;;
   590  000D                     _main:	
   591                           
   592                           ;main.c: 85: enum step
   593                           ;main.c: 86: {
   594                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   595                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   596                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   597                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   598                           ;main.c: 91: SET_PA2_VALUE,
   599                           ;main.c: 92: ADC1_VALUE_MEET_CONDITION,
   600                           ;main.c: 93: PROCESS_AD_VALUE,
   601                           ;main.c: 94: WAIT_SET_TIME_FINISHED,
   602                           ;main.c: 95: SET_TIME_BE_FINISHED,
   603                           ;main.c: 96: CHECKING_PULL_OUT_BATTERY,
   604                           ;main.c: 97: CHECKING_INSTALLED_BATTERY,
   605                           ;main.c: 98: };
   606                           ;main.c: 100: enum workTimerType
   607                           ;main.c: 101: {
   608                           
   609                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   610  000D  1683               	bsf	3,5	;RP0=1, select bank1
   611  000E  1005               	bcf	5,0
   612                           
   613                           ;main.c: 119: TRISA1 = 0;
   614  000F  1085               	bcf	5,1
   615                           
   616                           ;main.c: 120: TRISA2 = 0;
   617  0010  1105               	bcf	5,2
   618                           
   619                           ;main.c: 121: TRISA3 = 0;
   620  0011  1185               	bcf	5,3
   621                           
   622                           ;main.c: 122: TRISB0 = 0;
   623  0012  1006               	bcf	6,0
   624                           
   625                           ;main.c: 123: TRISB1 = 0;
   626  0013  1086               	bcf	6,1
   627                           
   628                           ;main.c: 124: TRISA6 = 0;
   629  0014  1305               	bcf	5,6
   630                           
   631                           ;main.c: 125: TRISA7 = 0;
   632  0015  1385               	bcf	5,7
   633                           
   634                           ;main.c: 127: PBOD6 = 1;
   635  0016  1703               	bsf	3,6	;RP1=1, select bank3
   636  0017  1708               	bsf	8,6
   637                           
   638                           ;main.c: 129: PA0 = 0;
   639  0018  1283               	bcf	3,5	;RP0=0, select bank0
   640  0019  1303               	bcf	3,6	;RP1=0, select bank0
   641  001A  1005               	bcf	5,0
   642                           
   643                           ;main.c: 130: PA1 = 0;
   644  001B  1085               	bcf	5,1
   645                           
   646                           ;main.c: 131: PA2 = 0;
   647  001C  1105               	bcf	5,2
   648                           
   649                           ;main.c: 132: PA3 = 1;
   650  001D  1585               	bsf	5,3
   651                           
   652                           ;main.c: 133: PB0 = 0;
   653  001E  1006               	bcf	6,0
   654                           
   655                           ;main.c: 134: PB1 = 0;
   656  001F  1086               	bcf	6,1
   657                           
   658                           ;main.c: 135: PA6 = 0;
   659  0020  1305               	bcf	5,6
   660                           
   661                           ;main.c: 136: PA7 = 0;
   662  0021  1385               	bcf	5,7
   663                           
   664                           ;main.c: 138: TRISB2 = 1;
   665  0022  1683               	bsf	3,5	;RP0=1, select bank1
   666  0023  1506               	bsf	6,2
   667                           
   668                           ;main.c: 140: TRISB7 = 1;
   669  0024  1786               	bsf	6,7
   670                           
   671                           ;main.c: 141: TRISB4 = 1;
   672  0025  1606               	bsf	6,4
   673                           
   674                           ;main.c: 143: clock_config();
   675  0026  118A  235C  118A   	fcall	_clock_config
   676                           
   677                           ;main.c: 144: timer1_config();
   678  0029  118A  2342  118A   	fcall	_timer1_config
   679                           
   680                           ;main.c: 145: timer1_interrupt_config();
   681  002C  118A  2378  118A   	fcall	_timer1_interrupt_config
   682                           
   683                           ;main.c: 147: adc_test_init(14,3);
   684  002F  3003               	movlw	3
   685  0030  1283               	bcf	3,5	;RP0=0, select bank0
   686  0031  00C9               	movwf	?_adc_test_init
   687  0032  300E               	movlw	14
   688  0033  118A  227B  118A   	fcall	_adc_test_init
   689                           
   690                           ;main.c: 149: dac_init();
   691  0036  118A  2373  118A   	fcall	_dac_init
   692                           
   693                           ;main.c: 150: op1_init();
   694  0039  118A  2337  118A   	fcall	_op1_init
   695                           
   696                           ;main.c: 151: op2_init();
   697  003C  118A  2354  118A   	fcall	_op2_init
   698                           
   699                           ;main.c: 154: adc_start();
   700  003F  118A  2290  118A   	fcall	_adc_start
   701  0042                     l3487:	
   702  0042  0064               	clrwdt	;#
   703                           
   704                           ;main.c: 168: if(isPermitSampleTime())
   705  0043  118A  236E  118A   	fcall	_isPermitSampleTime
   706  0046  3A00               	xorlw	0
   707  0047  1903               	skipnz
   708  0048  2842               	goto	l3487
   709                           
   710                           ;main.c: 169: {
   711                           ;main.c: 170: clrSampeTime();
   712  0049  118A  237B  118A   	fcall	_clrSampeTime
   713                           
   714                           ;main.c: 171: process_AD_Converter_Value();
   715  004C  118A  21D1  118A   	fcall	_process_AD_Converter_Value
   716                           
   717                           ;main.c: 173: switch(AD_sample_process_step)
   718  004F  29C0               	goto	l3803
   719  0050                     l3495:	
   720                           
   721                           ;main.c: 176: {
   722                           ;main.c: 177: static unsigned ucTimerCount = 0;
   723                           ;main.c: 178: if(getAdCh14Value() > 1951)
   724  0050  118A  2369  118A   	fcall	_getAdCh14Value
   725  0053  3007               	movlw	7
   726  0054  024A               	subwf	?_getAdCh14Value+1,w
   727  0055  30A0               	movlw	160
   728  0056  1903               	skipnz
   729  0057  0249               	subwf	?_getAdCh14Value,w
   730  0058  1C03               	skipc
   731  0059  285E               	goto	l3499
   732                           
   733                           ;main.c: 179: {
   734                           ;main.c: 180: ucTimerCount++;
   735  005A  0ABA               	incf	main@ucTimerCount,f
   736  005B  1903               	skipnz
   737  005C  0ABB               	incf	main@ucTimerCount+1,f
   738                           
   739                           ;main.c: 181: }
   740  005D  2860               	goto	l3501
   741  005E                     l3499:	
   742                           
   743                           ;main.c: 182: else
   744                           ;main.c: 183: ucTimerCount = 0;
   745  005E  01BA               	clrf	main@ucTimerCount
   746  005F  01BB               	clrf	main@ucTimerCount+1
   747  0060                     l3501:	
   748                           
   749                           ;main.c: 185: if(ucTimerCount >= 10)
   750  0060  3000               	movlw	0
   751  0061  023B               	subwf	main@ucTimerCount+1,w
   752  0062  300A               	movlw	10
   753  0063  1903               	skipnz
   754  0064  023A               	subwf	main@ucTimerCount,w
   755  0065  1C03               	skipc
   756  0066  2842               	goto	l3487
   757  0067                     l3503:	
   758                           
   759                           ;main.c: 186: AD_sample_process_step++;
   760  0067  0ABD               	incf	main@AD_sample_process_step,f
   761  0068  2842               	goto	l3487
   762  0069                     l687:	
   763                           ;main.c: 189: }
   764                           ;main.c: 191: case 1:
   765                           
   766                           
   767                           ;main.c: 192: {
   768                           ;main.c: 194: PA6 = 1;
   769  0069  1705               	bsf	5,6
   770  006A  2867               	goto	l3503
   771  006B                     l3507:	
   772                           
   773                           ;main.c: 201: {
   774                           ;main.c: 203: if(getAdCh4Value() < 1911)
   775  006B  118A  2364  118A   	fcall	_getAdCh4Value
   776  006E  3007               	movlw	7
   777  006F  024A               	subwf	?_getAdCh4Value+1,w
   778  0070  3077               	movlw	119
   779  0071  1903               	skipnz
   780  0072  0249               	subwf	?_getAdCh4Value,w
   781  0073  1803               	skipnc
   782  0074  2877               	goto	l3511
   783                           
   784                           ;main.c: 204: {
   785                           ;main.c: 205: ucChannel4Type = 0;
   786  0075  01BE               	clrf	main@ucChannel4Type
   787                           
   788                           ;main.c: 207: }
   789  0076  2867               	goto	l3503
   790  0077                     l3511:	
   791                           
   792                           ;main.c: 208: else if(getAdCh4Value() < 2067)
   793  0077  118A  2364  118A   	fcall	_getAdCh4Value
   794  007A  3008               	movlw	8
   795  007B  024A               	subwf	?_getAdCh4Value+1,w
   796  007C  3013               	movlw	19
   797  007D  1903               	skipnz
   798  007E  0249               	subwf	?_getAdCh4Value,w
   799  007F  1803               	skipnc
   800  0080  2884               	goto	l3515
   801                           
   802                           ;main.c: 209: {
   803                           ;main.c: 210: ucChannel4Type = 1;
   804  0081  01BE               	clrf	main@ucChannel4Type
   805  0082  0ABE               	incf	main@ucChannel4Type,f
   806                           
   807                           ;main.c: 211: }
   808  0083  2867               	goto	l3503
   809  0084                     l3515:	
   810                           
   811                           ;main.c: 212: else if(getAdCh4Value() < 2204)
   812  0084  118A  2364  118A   	fcall	_getAdCh4Value
   813  0087  3008               	movlw	8
   814  0088  024A               	subwf	?_getAdCh4Value+1,w
   815  0089  309C               	movlw	156
   816  008A  1903               	skipnz
   817  008B  0249               	subwf	?_getAdCh4Value,w
   818  008C  1803               	skipnc
   819  008D  2890               	goto	l3519
   820                           
   821                           ;main.c: 213: {
   822                           ;main.c: 214: ucChannel4Type = 2;
   823  008E  3002               	movlw	2
   824  008F  289D               	goto	L2
   825  0090                     l3519:	
   826                           ;main.c: 215: }
   827                           
   828                           
   829                           ;main.c: 216: else if(getAdCh4Value() < 2340)
   830  0090  118A  2364  118A   	fcall	_getAdCh4Value
   831  0093  3009               	movlw	9
   832  0094  024A               	subwf	?_getAdCh4Value+1,w
   833  0095  3024               	movlw	36
   834  0096  1903               	skipnz
   835  0097  0249               	subwf	?_getAdCh4Value,w
   836  0098  1803               	skipnc
   837  0099  289C               	goto	l3523
   838                           
   839                           ;main.c: 217: {
   840                           ;main.c: 218: ucChannel4Type = 3;
   841  009A  3003               	movlw	3
   842  009B  289D               	goto	L2
   843  009C                     l3523:	
   844                           ;main.c: 219: }
   845                           
   846                           
   847                           ;main.c: 220: else
   848                           ;main.c: 221: {
   849                           ;main.c: 222: ucChannel4Type = 4;
   850  009C  3004               	movlw	4
   851  009D                     L2:	
   852  009D  00BE               	movwf	main@ucChannel4Type
   853  009E  2867               	goto	l3503
   854  009F                     l705:	
   855                           ;main.c: 240: {
   856                           ;main.c: 241: case 0:
   857                           
   858                           
   859                           ;main.c: 242: {
   860                           ;main.c: 243: PA2 = 1;
   861  009F  1505               	bsf	5,2
   862  00A0                     l3527:	
   863                           
   864                           ;main.c: 244: ucLoaderStep++;
   865  00A0  0ABF               	incf	main@ucLoaderStep,f
   866                           
   867                           ;main.c: 245: break;
   868  00A1  2842               	goto	l3487
   869  00A2                     l3529:	
   870                           
   871                           ;main.c: 249: {
   872                           ;main.c: 250: if(ucTimerDelay >= 5)
   873  00A2  3005               	movlw	5
   874  00A3  0244               	subwf	main@ucTimerDelay,w
   875  00A4  1C03               	skipc
   876  00A5  28A9               	goto	l3537
   877                           
   878                           ;main.c: 251: {
   879                           ;main.c: 252: PA1 = 1;
   880  00A6  1485               	bsf	5,1
   881  00A7                     l3533:	
   882                           
   883                           ;main.c: 253: ucTimerDelay = 0;
   884  00A7  01C4               	clrf	main@ucTimerDelay
   885  00A8  28A0               	goto	l3527
   886  00A9                     l3537:	
   887                           
   888                           ;main.c: 256: else
   889                           ;main.c: 257: ucTimerDelay++;
   890  00A9  0AC4               	incf	main@ucTimerDelay,f
   891  00AA  2842               	goto	l3487
   892  00AB                     l3539:	
   893                           
   894                           ;main.c: 262: {
   895                           ;main.c: 263: if(ucTimerDelay >= 5)
   896  00AB  3005               	movlw	5
   897  00AC  0244               	subwf	main@ucTimerDelay,w
   898  00AD  1C03               	skipc
   899  00AE  28A9               	goto	l3537
   900                           
   901                           ;main.c: 264: {
   902                           ;main.c: 265: PA0= 1;
   903  00AF  1405               	bsf	5,0
   904  00B0  28A7               	goto	l3533
   905  00B1                     l3549:	
   906                           
   907                           ;main.c: 277: {
   908                           ;main.c: 278: if(ucTimerDelay >= 5)
   909  00B1  3005               	movlw	5
   910  00B2  0244               	subwf	main@ucTimerDelay,w
   911  00B3  1C03               	skipc
   912  00B4  28A9               	goto	l3537
   913                           
   914                           ;main.c: 279: {
   915                           ;main.c: 280: PB0 = 1;
   916  00B5  1406               	bsf	6,0
   917  00B6  28A7               	goto	l3533
   918  00B7                     l3559:	
   919                           
   920                           ;main.c: 290: {
   921                           ;main.c: 291: if(ucTimerDelay >= 5)
   922  00B7  3005               	movlw	5
   923  00B8  0244               	subwf	main@ucTimerDelay,w
   924  00B9  1C03               	skipc
   925  00BA  28A9               	goto	l3537
   926                           
   927                           ;main.c: 292: {
   928                           ;main.c: 293: PB1 = 1;
   929  00BB  1486               	bsf	6,1
   930  00BC  28A7               	goto	l3533
   931  00BD                     l3569:	
   932                           
   933                           ;main.c: 303: {
   934                           ;main.c: 304: if(ucTimerDelay >= 5)
   935  00BD  3005               	movlw	5
   936  00BE  0244               	subwf	main@ucTimerDelay,w
   937  00BF  1C03               	skipc
   938  00C0  28A9               	goto	l3537
   939                           
   940                           ;main.c: 305: {
   941                           ;main.c: 306: PA2 = 0;
   942  00C1  1105               	bcf	5,2
   943                           
   944                           ;main.c: 307: PA1 = 0;
   945  00C2  1085               	bcf	5,1
   946                           
   947                           ;main.c: 308: PA0 = 0;
   948  00C3  1005               	bcf	5,0
   949                           
   950                           ;main.c: 309: PB0 = 0;
   951  00C4  1006               	bcf	6,0
   952                           
   953                           ;main.c: 310: PB1 = 0;
   954  00C5  1086               	bcf	6,1
   955  00C6  28A7               	goto	l3533
   956  00C7                     l3579:	
   957                           
   958                           ;main.c: 320: {
   959                           ;main.c: 321: if(ucTimerDelay >= 5)
   960  00C7  3005               	movlw	5
   961  00C8  0244               	subwf	main@ucTimerDelay,w
   962  00C9  1C03               	skipc
   963  00CA  28A9               	goto	l3537
   964  00CB  3002               	movlw	2
   965                           
   966                           ;main.c: 322: {
   967                           ;main.c: 323: ucTimerDelay = 0;
   968  00CC  01C4               	clrf	main@ucTimerDelay
   969                           
   970                           ;main.c: 324: AD_sample_process_step = 2;
   971  00CD  00BD               	movwf	main@AD_sample_process_step
   972                           
   973                           ;main.c: 325: ucLoaderStep = 0;
   974  00CE  01BF               	clrf	main@ucLoaderStep
   975                           
   976                           ;main.c: 326: }
   977  00CF  2842               	goto	l3487
   978  00D0                     l3591:	
   979  00D0  083F               	movf	main@ucLoaderStep,w
   980                           
   981                           ; Switch size 1, requested type "space"
   982                           ; Number of cases is 7, Range of values is 0 to 6
   983                           ; switch strategies available:
   984                           ; Name         Instructions Cycles
   985                           ; direct_byte           21     7 (fixed)
   986                           ; simple_byte           22    12 (average)
   987                           ; jumptable            260     6 (fixed)
   988                           ; rangetable            11     6 (fixed)
   989                           ; spacedrange           20     9 (fixed)
   990                           ; locatedrange           7     3 (fixed)
   991                           ;	Chosen strategy is direct_byte
   992  00D1  0084               	movwf	4
   993  00D2  3007               	movlw	7
   994  00D3  0204               	subwf	4,w
   995  00D4  1803               	skipnc
   996  00D5  2842               	goto	l3487
   997  00D6  3003               	movlw	high S3985
   998  00D7  008A               	movwf	10
   999  00D8  1003               	clrc
  1000  00D9  0D04               	rlf	4,w
  1001  00DA  3E0F               	addlw	low S3985
  1002  00DB  0082               	movwf	2
  1003  00DC                     l733:	
  1004                           ;main.c: 345: {
  1005                           ;main.c: 346: case 0:
  1006                           
  1007                           
  1008                           ;main.c: 347: {
  1009                           ;main.c: 348: PA2 = 1;
  1010  00DC  1505               	bsf	5,2
  1011  00DD                     l3593:	
  1012                           
  1013                           ;main.c: 349: ucLoaderStep1++;
  1014  00DD  0AC0               	incf	main@ucLoaderStep1,f
  1015                           
  1016                           ;main.c: 350: break;
  1017  00DE  2842               	goto	l3487
  1018  00DF                     l3595:	
  1019                           
  1020                           ;main.c: 354: {
  1021                           ;main.c: 355: if(ucTimerDelay1 >= 5)
  1022  00DF  3005               	movlw	5
  1023  00E0  0245               	subwf	main@ucTimerDelay1,w
  1024  00E1  1C03               	skipc
  1025  00E2  28E6               	goto	l3603
  1026                           
  1027                           ;main.c: 356: {
  1028                           ;main.c: 357: PA1 = 1;
  1029  00E3  1485               	bsf	5,1
  1030  00E4                     l3599:	
  1031                           
  1032                           ;main.c: 358: ucTimerDelay1 = 0;
  1033  00E4  01C5               	clrf	main@ucTimerDelay1
  1034  00E5  28DD               	goto	l3593
  1035  00E6                     l3603:	
  1036                           
  1037                           ;main.c: 361: else
  1038                           ;main.c: 362: ucTimerDelay1++;
  1039  00E6  0AC5               	incf	main@ucTimerDelay1,f
  1040  00E7  2842               	goto	l3487
  1041  00E8                     l3605:	
  1042                           
  1043                           ;main.c: 367: {
  1044                           ;main.c: 368: if(ucTimerDelay1 >= 5)
  1045  00E8  3005               	movlw	5
  1046  00E9  0245               	subwf	main@ucTimerDelay1,w
  1047  00EA  1C03               	skipc
  1048  00EB  28E6               	goto	l3603
  1049                           
  1050                           ;main.c: 369: {
  1051                           ;main.c: 370: PA0 = 1;
  1052  00EC  1405               	bsf	5,0
  1053  00ED  28E4               	goto	l3599
  1054  00EE                     l3615:	
  1055                           
  1056                           ;main.c: 380: {
  1057                           ;main.c: 381: if(ucTimerDelay1 >= 5)
  1058  00EE  3005               	movlw	5
  1059  00EF  0245               	subwf	main@ucTimerDelay1,w
  1060  00F0  1C03               	skipc
  1061  00F1  28E6               	goto	l3603
  1062                           
  1063                           ;main.c: 382: {
  1064                           ;main.c: 383: PB0 = 1;
  1065  00F2  1406               	bsf	6,0
  1066  00F3  28E4               	goto	l3599
  1067  00F4                     l3625:	
  1068                           
  1069                           ;main.c: 393: {
  1070                           ;main.c: 394: if(ucTimerDelay1 >= 5)
  1071  00F4  3005               	movlw	5
  1072  00F5  0245               	subwf	main@ucTimerDelay1,w
  1073  00F6  1C03               	skipc
  1074  00F7  28E6               	goto	l3603
  1075                           
  1076                           ;main.c: 395: {
  1077                           ;main.c: 396: PB1 = 1;
  1078  00F8  1486               	bsf	6,1
  1079  00F9  28E4               	goto	l3599
  1080  00FA                     l3635:	
  1081                           
  1082                           ;main.c: 406: {
  1083                           ;main.c: 407: if(ucTimerDelay1 >= 5)
  1084  00FA  3005               	movlw	5
  1085  00FB  0245               	subwf	main@ucTimerDelay1,w
  1086  00FC  1C03               	skipc
  1087  00FD  28E6               	goto	l3603
  1088                           
  1089                           ;main.c: 408: {
  1090                           ;main.c: 409: PA1 = 0;
  1091  00FE  1085               	bcf	5,1
  1092                           
  1093                           ;main.c: 410: PA0 = 0;
  1094  00FF  1005               	bcf	5,0
  1095                           
  1096                           ;main.c: 411: PB0 = 0;
  1097  0100  1006               	bcf	6,0
  1098                           
  1099                           ;main.c: 412: PB1 = 0;
  1100  0101  1086               	bcf	6,1
  1101  0102  28E4               	goto	l3599
  1102  0103                     l3645:	
  1103                           
  1104                           ;main.c: 422: {
  1105                           ;main.c: 423: if(ucTimerDelay1 >= 5)
  1106  0103  3005               	movlw	5
  1107  0104  0245               	subwf	main@ucTimerDelay1,w
  1108  0105  1C03               	skipc
  1109  0106  28E6               	goto	l3603
  1110  0107  3002               	movlw	2
  1111                           
  1112                           ;main.c: 424: {
  1113                           ;main.c: 425: ucTimerDelay1 = 0;
  1114  0108  01C5               	clrf	main@ucTimerDelay1
  1115                           
  1116                           ;main.c: 426: AD_sample_process_step = 2;
  1117  0109  00BD               	movwf	main@AD_sample_process_step
  1118                           
  1119                           ;main.c: 427: ucLoaderStep1 = 0;
  1120  010A  01C0               	clrf	main@ucLoaderStep1
  1121                           
  1122                           ;main.c: 428: }
  1123  010B  2842               	goto	l3487
  1124  010C                     l3657:	
  1125  010C  0840               	movf	main@ucLoaderStep1,w
  1126                           
  1127                           ; Switch size 1, requested type "space"
  1128                           ; Number of cases is 7, Range of values is 0 to 6
  1129                           ; switch strategies available:
  1130                           ; Name         Instructions Cycles
  1131                           ; direct_byte           21     7 (fixed)
  1132                           ; simple_byte           22    12 (average)
  1133                           ; jumptable            260     6 (fixed)
  1134                           ; rangetable            11     6 (fixed)
  1135                           ; spacedrange           20     9 (fixed)
  1136                           ; locatedrange           7     3 (fixed)
  1137                           ;	Chosen strategy is direct_byte
  1138  010D  0084               	movwf	4
  1139  010E  3007               	movlw	7
  1140  010F  0204               	subwf	4,w
  1141  0110  1803               	skipnc
  1142  0111  2842               	goto	l3487
  1143  0112  3003               	movlw	high S3987
  1144  0113  008A               	movwf	10
  1145  0114  1003               	clrc
  1146  0115  0D04               	rlf	4,w
  1147  0116  3E1D               	addlw	low S3987
  1148  0117  0082               	movwf	2
  1149  0118                     l760:	
  1150                           ;main.c: 448: {
  1151                           ;main.c: 449: case 0:
  1152                           
  1153                           
  1154                           ;main.c: 450: {
  1155                           ;main.c: 451: PA2 = 1;
  1156  0118  1505               	bsf	5,2
  1157                           
  1158                           ;main.c: 452: PA1 = 1;
  1159  0119  1485               	bsf	5,1
  1160  011A                     l3659:	
  1161                           
  1162                           ;main.c: 453: ucLoaderStep2++;
  1163  011A  0AC1               	incf	main@ucLoaderStep2,f
  1164                           
  1165                           ;main.c: 454: break;
  1166  011B  2842               	goto	l3487
  1167  011C                     l3661:	
  1168                           
  1169                           ;main.c: 458: {
  1170                           ;main.c: 459: if(ucTimerDelay2 >= 5)
  1171  011C  3005               	movlw	5
  1172  011D  0246               	subwf	main@ucTimerDelay2,w
  1173  011E  1C03               	skipc
  1174  011F  2923               	goto	l3669
  1175                           
  1176                           ;main.c: 460: {
  1177                           ;main.c: 461: PA0 = 1;
  1178  0120  1405               	bsf	5,0
  1179  0121                     l3665:	
  1180                           
  1181                           ;main.c: 462: ucTimerDelay2 = 0;
  1182  0121  01C6               	clrf	main@ucTimerDelay2
  1183  0122  291A               	goto	l3659
  1184  0123                     l3669:	
  1185                           
  1186                           ;main.c: 465: else
  1187                           ;main.c: 466: ucTimerDelay2++;
  1188  0123  0AC6               	incf	main@ucTimerDelay2,f
  1189  0124  2842               	goto	l3487
  1190  0125                     l3671:	
  1191                           
  1192                           ;main.c: 471: {
  1193                           ;main.c: 472: if(ucTimerDelay2 >= 5)
  1194  0125  3005               	movlw	5
  1195  0126  0246               	subwf	main@ucTimerDelay2,w
  1196  0127  1C03               	skipc
  1197  0128  2923               	goto	l3669
  1198                           
  1199                           ;main.c: 473: {
  1200                           ;main.c: 474: PB0 = 1;
  1201  0129  1406               	bsf	6,0
  1202  012A  2921               	goto	l3665
  1203  012B                     l3681:	
  1204                           
  1205                           ;main.c: 484: {
  1206                           ;main.c: 485: if(ucTimerDelay2 >= 5)
  1207  012B  3005               	movlw	5
  1208  012C  0246               	subwf	main@ucTimerDelay2,w
  1209  012D  1C03               	skipc
  1210  012E  2923               	goto	l3669
  1211                           
  1212                           ;main.c: 486: {
  1213                           ;main.c: 487: PB1 = 1;
  1214  012F  1486               	bsf	6,1
  1215  0130  2921               	goto	l3665
  1216  0131                     l3691:	
  1217                           
  1218                           ;main.c: 497: {
  1219                           ;main.c: 498: if(ucTimerDelay2 >= 5)
  1220  0131  3005               	movlw	5
  1221  0132  0246               	subwf	main@ucTimerDelay2,w
  1222  0133  1C03               	skipc
  1223  0134  2923               	goto	l3669
  1224                           
  1225                           ;main.c: 499: {
  1226                           ;main.c: 501: PA0 = 0;
  1227  0135  1005               	bcf	5,0
  1228                           
  1229                           ;main.c: 502: PB0 = 0;
  1230  0136  1006               	bcf	6,0
  1231                           
  1232                           ;main.c: 503: PB1 = 0;
  1233  0137  1086               	bcf	6,1
  1234  0138  2921               	goto	l3665
  1235  0139                     l3701:	
  1236                           
  1237                           ;main.c: 513: {
  1238                           ;main.c: 514: if(ucTimerDelay2 >= 5)
  1239  0139  3005               	movlw	5
  1240  013A  0246               	subwf	main@ucTimerDelay2,w
  1241  013B  1C03               	skipc
  1242  013C  2923               	goto	l3669
  1243  013D  3002               	movlw	2
  1244                           
  1245                           ;main.c: 515: {
  1246                           ;main.c: 516: ucTimerDelay2 = 0;
  1247  013E  01C6               	clrf	main@ucTimerDelay2
  1248                           
  1249                           ;main.c: 517: AD_sample_process_step = 2;
  1250  013F  00BD               	movwf	main@AD_sample_process_step
  1251                           
  1252                           ;main.c: 518: ucLoaderStep2 = 0;
  1253  0140  01C1               	clrf	main@ucLoaderStep2
  1254                           
  1255                           ;main.c: 519: }
  1256  0141  2842               	goto	l3487
  1257  0142                     l3713:	
  1258  0142  0841               	movf	main@ucLoaderStep2,w
  1259                           
  1260                           ; Switch size 1, requested type "space"
  1261                           ; Number of cases is 6, Range of values is 0 to 5
  1262                           ; switch strategies available:
  1263                           ; Name         Instructions Cycles
  1264                           ; direct_byte           19     7 (fixed)
  1265                           ; simple_byte           19    10 (average)
  1266                           ; jumptable            260     6 (fixed)
  1267                           ; rangetable            10     6 (fixed)
  1268                           ; spacedrange           18     9 (fixed)
  1269                           ; locatedrange           6     3 (fixed)
  1270                           ;	Chosen strategy is direct_byte
  1271  0143  0084               	movwf	4
  1272  0144  3006               	movlw	6
  1273  0145  0204               	subwf	4,w
  1274  0146  1803               	skipnc
  1275  0147  2842               	goto	l3487
  1276  0148  3003               	movlw	high S3989
  1277  0149  008A               	movwf	10
  1278  014A  1003               	clrc
  1279  014B  0D04               	rlf	4,w
  1280  014C  3E2B               	addlw	low S3989
  1281  014D  0082               	movwf	2
  1282  014E                     l784:	
  1283                           ;main.c: 539: {
  1284                           ;main.c: 540: case 0:
  1285                           
  1286                           
  1287                           ;main.c: 541: {
  1288                           ;main.c: 542: PA2 = 1;
  1289  014E  1505               	bsf	5,2
  1290                           
  1291                           ;main.c: 543: PA1 = 1;
  1292  014F  1485               	bsf	5,1
  1293                           
  1294                           ;main.c: 544: PA0 = 1;
  1295  0150  1405               	bsf	5,0
  1296  0151                     l3715:	
  1297                           
  1298                           ;main.c: 545: ucLoaderStep3++;
  1299  0151  0AC2               	incf	main@ucLoaderStep3,f
  1300                           
  1301                           ;main.c: 546: break;
  1302  0152  2842               	goto	l3487
  1303  0153                     l3717:	
  1304                           
  1305                           ;main.c: 550: {
  1306                           ;main.c: 551: if(ucTimerDelay3 >= 5)
  1307  0153  3005               	movlw	5
  1308  0154  0247               	subwf	main@ucTimerDelay3,w
  1309  0155  1C03               	skipc
  1310  0156  295A               	goto	l3725
  1311                           
  1312                           ;main.c: 552: {
  1313                           ;main.c: 553: PB0 = 1;
  1314  0157  1406               	bsf	6,0
  1315  0158                     l3721:	
  1316                           
  1317                           ;main.c: 554: ucTimerDelay3 = 0;
  1318  0158  01C7               	clrf	main@ucTimerDelay3
  1319  0159  2951               	goto	l3715
  1320  015A                     l3725:	
  1321                           
  1322                           ;main.c: 557: else
  1323                           ;main.c: 558: ucTimerDelay3++;
  1324  015A  0AC7               	incf	main@ucTimerDelay3,f
  1325  015B  2842               	goto	l3487
  1326  015C                     l3727:	
  1327                           
  1328                           ;main.c: 563: {
  1329                           ;main.c: 564: if(ucTimerDelay3 >= 5)
  1330  015C  3005               	movlw	5
  1331  015D  0247               	subwf	main@ucTimerDelay3,w
  1332  015E  1C03               	skipc
  1333  015F  295A               	goto	l3725
  1334                           
  1335                           ;main.c: 565: {
  1336                           ;main.c: 566: PB1 = 1;
  1337  0160  1486               	bsf	6,1
  1338  0161  2958               	goto	l3721
  1339  0162                     l3737:	
  1340                           
  1341                           ;main.c: 577: {
  1342                           ;main.c: 578: if(ucTimerDelay3 >= 5)
  1343  0162  3005               	movlw	5
  1344  0163  0247               	subwf	main@ucTimerDelay3,w
  1345  0164  1C03               	skipc
  1346  0165  295A               	goto	l3725
  1347                           
  1348                           ;main.c: 579: {
  1349                           ;main.c: 581: PB0 = 0;
  1350  0166  1006               	bcf	6,0
  1351                           
  1352                           ;main.c: 582: PB1 = 0;
  1353  0167  1086               	bcf	6,1
  1354  0168  2958               	goto	l3721
  1355  0169                     l3747:	
  1356                           
  1357                           ;main.c: 592: {
  1358                           ;main.c: 593: if(ucTimerDelay3 >= 5)
  1359  0169  3005               	movlw	5
  1360  016A  0247               	subwf	main@ucTimerDelay3,w
  1361  016B  1C03               	skipc
  1362  016C  295A               	goto	l3725
  1363  016D  3002               	movlw	2
  1364                           
  1365                           ;main.c: 594: {
  1366                           ;main.c: 595: ucTimerDelay3 = 0;
  1367  016E  01C7               	clrf	main@ucTimerDelay3
  1368                           
  1369                           ;main.c: 596: AD_sample_process_step = 2;
  1370  016F  00BD               	movwf	main@AD_sample_process_step
  1371                           
  1372                           ;main.c: 597: ucLoaderStep3 = 0;
  1373  0170  01C2               	clrf	main@ucLoaderStep3
  1374                           
  1375                           ;main.c: 598: }
  1376  0171  2842               	goto	l3487
  1377  0172                     l3759:	
  1378  0172  0842               	movf	main@ucLoaderStep3,w
  1379                           
  1380                           ; Switch size 1, requested type "space"
  1381                           ; Number of cases is 5, Range of values is 0 to 4
  1382                           ; switch strategies available:
  1383                           ; Name         Instructions Cycles
  1384                           ; simple_byte           16     9 (average)
  1385                           ; direct_byte           17     7 (fixed)
  1386                           ; jumptable            260     6 (fixed)
  1387                           ; rangetable             9     6 (fixed)
  1388                           ; spacedrange           16     9 (fixed)
  1389                           ; locatedrange           5     3 (fixed)
  1390                           ;	Chosen strategy is simple_byte
  1391  0173  3A00               	xorlw	0	; case 0
  1392  0174  1903               	skipnz
  1393  0175  294E               	goto	l784
  1394  0176  3A01               	xorlw	1	; case 1
  1395  0177  1903               	skipnz
  1396  0178  2953               	goto	l3717
  1397  0179  3A03               	xorlw	3	; case 2
  1398  017A  1903               	skipnz
  1399  017B  295C               	goto	l3727
  1400  017C  3A01               	xorlw	1	; case 3
  1401  017D  1903               	skipnz
  1402  017E  2962               	goto	l3737
  1403  017F  3A07               	xorlw	7	; case 4
  1404  0180  1903               	skipnz
  1405  0181  2969               	goto	l3747
  1406  0182  29D0               	goto	l678
  1407  0183                     l805:	
  1408                           ;main.c: 618: {
  1409                           ;main.c: 619: case 0:
  1410                           
  1411                           
  1412                           ;main.c: 620: {
  1413                           ;main.c: 621: PA2 = 1;
  1414  0183  1505               	bsf	5,2
  1415                           
  1416                           ;main.c: 622: PA1 = 1;
  1417  0184  1485               	bsf	5,1
  1418                           
  1419                           ;main.c: 623: PA0 = 1;
  1420  0185  1405               	bsf	5,0
  1421                           
  1422                           ;main.c: 624: PB0 = 1;
  1423  0186  1406               	bsf	6,0
  1424  0187                     l3761:	
  1425                           
  1426                           ;main.c: 625: ucLoaderStep4++;
  1427  0187  0AC3               	incf	main@ucLoaderStep4,f
  1428                           
  1429                           ;main.c: 626: break;
  1430  0188  2842               	goto	l3487
  1431  0189                     l3763:	
  1432                           
  1433                           ;main.c: 630: {
  1434                           ;main.c: 631: if(ucTimerDelay4 >= 5)
  1435  0189  3005               	movlw	5
  1436  018A  0248               	subwf	main@ucTimerDelay4,w
  1437  018B  1C03               	skipc
  1438  018C  2990               	goto	l3771
  1439                           
  1440                           ;main.c: 632: {
  1441                           ;main.c: 633: PB1 = 1;
  1442  018D  1486               	bsf	6,1
  1443  018E                     l3767:	
  1444                           
  1445                           ;main.c: 634: ucTimerDelay4 = 0;
  1446  018E  01C8               	clrf	main@ucTimerDelay4
  1447  018F  2987               	goto	l3761
  1448  0190                     l3771:	
  1449                           
  1450                           ;main.c: 637: else
  1451                           ;main.c: 638: ucTimerDelay4++;
  1452  0190  0AC8               	incf	main@ucTimerDelay4,f
  1453  0191  2842               	goto	l3487
  1454  0192                     l3773:	
  1455                           
  1456                           ;main.c: 643: {
  1457                           ;main.c: 644: if(ucTimerDelay4 >= 5)
  1458  0192  3005               	movlw	5
  1459  0193  0248               	subwf	main@ucTimerDelay4,w
  1460  0194  1C03               	skipc
  1461  0195  2990               	goto	l3771
  1462                           
  1463                           ;main.c: 645: {
  1464                           ;main.c: 646: PB1 = 0;
  1465  0196  1086               	bcf	6,1
  1466  0197  298E               	goto	l3767
  1467  0198                     l3783:	
  1468                           
  1469                           ;main.c: 656: {
  1470                           ;main.c: 657: if(ucTimerDelay4 >= 5)
  1471  0198  3005               	movlw	5
  1472  0199  0248               	subwf	main@ucTimerDelay4,w
  1473  019A  1C03               	skipc
  1474  019B  2990               	goto	l3771
  1475  019C  3002               	movlw	2
  1476                           
  1477                           ;main.c: 658: {
  1478                           ;main.c: 659: ucTimerDelay4 = 0;
  1479  019D  01C8               	clrf	main@ucTimerDelay4
  1480                           
  1481                           ;main.c: 660: AD_sample_process_step = 2;
  1482  019E  00BD               	movwf	main@AD_sample_process_step
  1483                           
  1484                           ;main.c: 661: ucLoaderStep4 = 0;
  1485  019F  01C3               	clrf	main@ucLoaderStep4
  1486                           
  1487                           ;main.c: 662: }
  1488  01A0  2842               	goto	l3487
  1489  01A1                     l3795:	
  1490  01A1  0843               	movf	main@ucLoaderStep4,w
  1491                           
  1492                           ; Switch size 1, requested type "space"
  1493                           ; Number of cases is 4, Range of values is 0 to 3
  1494                           ; switch strategies available:
  1495                           ; Name         Instructions Cycles
  1496                           ; simple_byte           13     7 (average)
  1497                           ; direct_byte           15     7 (fixed)
  1498                           ; jumptable            260     6 (fixed)
  1499                           ; rangetable             8     6 (fixed)
  1500                           ; spacedrange           14     9 (fixed)
  1501                           ; locatedrange           4     3 (fixed)
  1502                           ;	Chosen strategy is simple_byte
  1503  01A2  3A00               	xorlw	0	; case 0
  1504  01A3  1903               	skipnz
  1505  01A4  2983               	goto	l805
  1506  01A5  3A01               	xorlw	1	; case 1
  1507  01A6  1903               	skipnz
  1508  01A7  2989               	goto	l3763
  1509  01A8  3A03               	xorlw	3	; case 2
  1510  01A9  1903               	skipnz
  1511  01AA  2992               	goto	l3773
  1512  01AB  3A01               	xorlw	1	; case 3
  1513  01AC  1903               	skipnz
  1514  01AD  2998               	goto	l3783
  1515  01AE  29D0               	goto	l678
  1516  01AF                     l3799:	
  1517  01AF  083E               	movf	main@ucChannel4Type,w
  1518                           
  1519                           ; Switch size 1, requested type "space"
  1520                           ; Number of cases is 5, Range of values is 0 to 4
  1521                           ; switch strategies available:
  1522                           ; Name         Instructions Cycles
  1523                           ; simple_byte           16     9 (average)
  1524                           ; direct_byte           17     7 (fixed)
  1525                           ; jumptable            260     6 (fixed)
  1526                           ; rangetable             9     6 (fixed)
  1527                           ; spacedrange           16     9 (fixed)
  1528                           ; locatedrange           5     3 (fixed)
  1529                           ;	Chosen strategy is simple_byte
  1530  01B0  3A00               	xorlw	0	; case 0
  1531  01B1  1903               	skipnz
  1532  01B2  28D0               	goto	l3591
  1533  01B3  3A01               	xorlw	1	; case 1
  1534  01B4  1903               	skipnz
  1535  01B5  290C               	goto	l3657
  1536  01B6  3A03               	xorlw	3	; case 2
  1537  01B7  1903               	skipnz
  1538  01B8  2942               	goto	l3713
  1539  01B9  3A01               	xorlw	1	; case 3
  1540  01BA  1903               	skipnz
  1541  01BB  2972               	goto	l3759
  1542  01BC  3A07               	xorlw	7	; case 4
  1543  01BD  1903               	skipnz
  1544  01BE  29A1               	goto	l3795
  1545  01BF  29D0               	goto	l678
  1546  01C0                     l3803:	
  1547  01C0  1283               	bcf	3,5	;RP0=0, select bank0
  1548  01C1  1303               	bcf	3,6	;RP1=0, select bank0
  1549  01C2  083D               	movf	main@AD_sample_process_step,w
  1550                           
  1551                           ; Switch size 1, requested type "space"
  1552                           ; Number of cases is 4, Range of values is 0 to 3
  1553                           ; switch strategies available:
  1554                           ; Name         Instructions Cycles
  1555                           ; simple_byte           13     7 (average)
  1556                           ; direct_byte           15     7 (fixed)
  1557                           ; jumptable            260     6 (fixed)
  1558                           ; rangetable             8     6 (fixed)
  1559                           ; spacedrange           14     9 (fixed)
  1560                           ; locatedrange           4     3 (fixed)
  1561                           ;	Chosen strategy is simple_byte
  1562  01C3  3A00               	xorlw	0	; case 0
  1563  01C4  1903               	skipnz
  1564  01C5  2850               	goto	l3495
  1565  01C6  3A01               	xorlw	1	; case 1
  1566  01C7  1903               	skipnz
  1567  01C8  2869               	goto	l687
  1568  01C9  3A03               	xorlw	3	; case 2
  1569  01CA  1903               	skipnz
  1570  01CB  286B               	goto	l3507
  1571  01CC  3A01               	xorlw	1	; case 3
  1572  01CD  1903               	skipnz
  1573  01CE  29AF               	goto	l3799
  1574  01CF  29D0               	goto	l678
  1575  01D0                     l678:	
  1576  01D0  2842               	goto	l3487
  1577  01D1                     __end_of_main:	
  1578                           
  1579                           	psect	swtext1
  1580  030F                     __pswtext1:	
  1581  030F                     S3985:	
  1582  030F  118A  289F         	ljmp	l705
  1583  0311  118A  28A2         	ljmp	l3529
  1584  0313  118A  28AB         	ljmp	l3539
  1585  0315  118A  28B1         	ljmp	l3549
  1586  0317  118A  28B7         	ljmp	l3559
  1587  0319  118A  28BD         	ljmp	l3569
  1588  031B  118A  28C7         	ljmp	l3579
  1589                           
  1590                           	psect	swtext2
  1591  031D                     __pswtext2:	
  1592  031D                     S3987:	
  1593  031D  118A  28DC         	ljmp	l733
  1594  031F  118A  28DF         	ljmp	l3595
  1595  0321  118A  28E8         	ljmp	l3605
  1596  0323  118A  28EE         	ljmp	l3615
  1597  0325  118A  28F4         	ljmp	l3625
  1598  0327  118A  28FA         	ljmp	l3635
  1599  0329  118A  2903         	ljmp	l3645
  1600                           
  1601                           	psect	swtext3
  1602  032B                     __pswtext3:	
  1603  032B                     S3989:	
  1604  032B  118A  2918         	ljmp	l760
  1605  032D  118A  291C         	ljmp	l3661
  1606  032F  118A  2925         	ljmp	l3671
  1607  0331  118A  292B         	ljmp	l3681
  1608  0333  118A  2931         	ljmp	l3691
  1609  0335  118A  2939         	ljmp	l3701
  1610                           
  1611                           	psect	text414
  1612  01D1                     __ptext414:	
  1613 ;; =============== function _main ends ============
  1614                           
  1615                           
  1616 ;; *************** function _process_AD_Converter_Value *****************
  1617 ;; Defined at:
  1618 ;;		line 100 in file "C:\190604\AK7030-OTP\common.c"
  1619 ;; Parameters:    Size  Location     Type
  1620 ;;		None
  1621 ;; Auto vars:     Size  Location     Type
  1622 ;;		None
  1623 ;; Return value:  Size  Location     Type
  1624 ;;		None               void
  1625 ;; Registers used:
  1626 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1627 ;; Tracked objects:
  1628 ;;		On entry : 0/0
  1629 ;;		On exit  : 0/0
  1630 ;;		Unchanged: FFE9F/0
  1631 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1632 ;;      Params:         0       0       0       0       0
  1633 ;;      Locals:         0       0       0       0       0
  1634 ;;      Temps:          0       0       0       0       0
  1635 ;;      Totals:         0       0       0       0       0
  1636 ;;Total ram usage:        0 bytes
  1637 ;; Hardware stack levels used:    1
  1638 ;; Hardware stack levels required when called:    4
  1639 ;; This function calls:
  1640 ;;		_getAD_ConvertFlag
  1641 ;;		_setAD_ConvertFlag
  1642 ;;		_AD_Sample
  1643 ;;		_adc_test_init
  1644 ;;		_adc_start
  1645 ;; This function is called by:
  1646 ;;		_main
  1647 ;; This function uses a non-reentrant model
  1648 ;;
  1649  01D1                     _process_AD_Converter_Value:	
  1650                           
  1651                           ;common.c: 65: return adc_convert_flag;
  1652                           
  1653                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1654                           
  1655                           ;common.c: 101: if(getAD_ConvertFlag())
  1656                           
  1657                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1658  01D1  0879               	movf	_adc_convert_flag,w
  1659  01D2  3A00               	xorlw	0
  1660  01D3  1903               	skipnz
  1661  01D4  0008               	return
  1662                           
  1663                           ;common.c: 102: {
  1664                           ;common.c: 103: setAD_ConvertFlag(0);
  1665  01D5  3000               	movlw	0
  1666  01D6  21E8  118A         	fcall	_setAD_ConvertFlag
  1667                           
  1668                           ;common.c: 104: AD_Sample();
  1669  01D8  21ED  118A         	fcall	_AD_Sample
  1670                           
  1671                           ;common.c: 105: if(4 == sampleChannelSelect)
  1672  01DA  084E               	movf	_sampleChannelSelect,w
  1673  01DB  3A04               	xorlw	4
  1674                           
  1675                           ;common.c: 106: adc_test_init(4,3);
  1676  01DC  3003               	movlw	3
  1677  01DD  00C9               	movwf	?_adc_test_init
  1678  01DE  1D03               	skipz
  1679  01DF  29E2               	goto	L4
  1680  01E0  3004               	movlw	4
  1681  01E1  29E3               	goto	L3
  1682  01E2                     L4:	
  1683                           ;common.c: 107: else
  1684                           ;common.c: 108: adc_test_init(14,3);
  1685                           
  1686  01E2  300E               	movlw	14
  1687  01E3                     L3:	
  1688  01E3  227B  118A         	fcall	_adc_test_init
  1689                           
  1690                           ;common.c: 110: adc_start();
  1691  01E5  2A90               	ljmp	l3333
  1692  01E6                     __end_of_process_AD_Converter_Value:	
  1693  01E6                     __ptext418:	
  1694 ;; =============== function _setAD_ConvertFlag ends ============
  1695                           
  1696                           
  1697 ;; *************** function _getAD_ConvertFlag *****************
  1698 ;; Defined at:
  1699 ;;		line 64 in file "C:\190604\AK7030-OTP\common.c"
  1700 ;; Parameters:    Size  Location     Type
  1701 ;;		None
  1702 ;; Auto vars:     Size  Location     Type
  1703 ;;		None
  1704 ;; Return value:  Size  Location     Type
  1705 ;;                  1    wreg      unsigned char 
  1706 ;; Registers used:
  1707 ;;		wreg
  1708 ;; Tracked objects:
  1709 ;;		On entry : 0/0
  1710 ;;		On exit  : 0/0
  1711 ;;		Unchanged: FFFFF/0
  1712 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1713 ;;      Params:         0       0       0       0       0
  1714 ;;      Locals:         0       0       0       0       0
  1715 ;;      Temps:          0       0       0       0       0
  1716 ;;      Totals:         0       0       0       0       0
  1717 ;;Total ram usage:        0 bytes
  1718 ;; Hardware stack levels used:    1
  1719 ;; Hardware stack levels required when called:    2
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_process_AD_Converter_Value
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726  01E6                     _getAD_ConvertFlag:	
  1727                           
  1728                           ;common.c: 65: return adc_convert_flag;
  1729                           
  1730                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1731  01E6  0879               	movf	_adc_convert_flag,w
  1732  01E7  0008               	return
  1733  01E8                     __end_of_getAD_ConvertFlag:	
  1734  01E8                     __ptext417:	
  1735 ;; =============== function _getAdOriginalValue ends ============
  1736                           
  1737                           
  1738 ;; *************** function _setAD_ConvertFlag *****************
  1739 ;; Defined at:
  1740 ;;		line 70 in file "C:\190604\AK7030-OTP\common.c"
  1741 ;; Parameters:    Size  Location     Type
  1742 ;;  flag            1    wreg     unsigned char 
  1743 ;; Auto vars:     Size  Location     Type
  1744 ;;  flag            1    0[BANK0 ] unsigned char 
  1745 ;; Return value:  Size  Location     Type
  1746 ;;		None               void
  1747 ;; Registers used:
  1748 ;;		wreg
  1749 ;; Tracked objects:
  1750 ;;		On entry : 0/0
  1751 ;;		On exit  : 60/0
  1752 ;;		Unchanged: FFF9F/0
  1753 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1754 ;;      Params:         0       0       0       0       0
  1755 ;;      Locals:         0       1       0       0       0
  1756 ;;      Temps:          0       0       0       0       0
  1757 ;;      Totals:         0       1       0       0       0
  1758 ;;Total ram usage:        1 bytes
  1759 ;; Hardware stack levels used:    1
  1760 ;; Hardware stack levels required when called:    2
  1761 ;; This function calls:
  1762 ;;		Nothing
  1763 ;; This function is called by:
  1764 ;;		_process_AD_Converter_Value
  1765 ;; This function uses a non-reentrant model
  1766 ;;
  1767  01E8                     _setAD_ConvertFlag:	
  1768                           
  1769                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1770                           ;setAD_ConvertFlag@flag stored from wreg
  1771  01E8  1283               	bcf	3,5	;RP0=0, select bank0
  1772  01E9  1303               	bcf	3,6	;RP1=0, select bank0
  1773  01EA  00C9               	movwf	setAD_ConvertFlag@flag
  1774                           
  1775                           ;common.c: 71: adc_convert_flag = flag;
  1776  01EB  00F9               	movwf	_adc_convert_flag
  1777  01EC  0008               	return
  1778  01ED                     __end_of_setAD_ConvertFlag:	
  1779  01ED                     __ptext415:	
  1780 ;; =============== function _process_AD_Converter_Value ends ============
  1781                           
  1782                           
  1783 ;; *************** function _AD_Sample *****************
  1784 ;; Defined at:
  1785 ;;		line 124 in file "C:\190604\AK7030-OTP\common.c"
  1786 ;; Parameters:    Size  Location     Type
  1787 ;;		None
  1788 ;; Auto vars:     Size  Location     Type
  1789 ;;  index           1    4[BANK0 ] unsigned char 
  1790 ;; Return value:  Size  Location     Type
  1791 ;;		None               void
  1792 ;; Registers used:
  1793 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1794 ;; Tracked objects:
  1795 ;;		On entry : 60/0
  1796 ;;		On exit  : 60/0
  1797 ;;		Unchanged: FFE9F/0
  1798 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1799 ;;      Params:         0       0       0       0       0
  1800 ;;      Locals:         0       1       0       0       0
  1801 ;;      Temps:          0       2       0       0       0
  1802 ;;      Totals:         0       3       0       0       0
  1803 ;;Total ram usage:        3 bytes
  1804 ;; Hardware stack levels used:    1
  1805 ;; Hardware stack levels required when called:    3
  1806 ;; This function calls:
  1807 ;;		_getAdOriginalValue
  1808 ;; This function is called by:
  1809 ;;		_process_AD_Converter_Value
  1810 ;; This function uses a non-reentrant model
  1811 ;;
  1812  01ED                     _AD_Sample:	
  1813                           
  1814                           ;common.c: 125: if(sampleTimes < 6)
  1815                           
  1816                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1817  01ED  3006               	movlw	6
  1818  01EE  023C               	subwf	_sampleTimes,w
  1819  01EF  1803               	skipnc
  1820  01F0  0008               	return
  1821                           
  1822                           ;common.c: 126: {
  1823                           ;common.c: 128: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1824  01F1  2276  118A         	fcall	_getAdOriginalValue
  1825  01F3  1003               	clrc
  1826  01F4  0D3C               	rlf	_sampleTimes,w
  1827  01F5  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1828  01F6  0084               	movwf	4
  1829  01F7  0849               	movf	?_getAdOriginalValue,w
  1830  01F8  1383               	bcf	3,7	;select IRP bank0
  1831  01F9  0080               	movwf	0
  1832  01FA  0A84               	incf	4,f
  1833  01FB  084A               	movf	?_getAdOriginalValue+1,w
  1834  01FC  0080               	movwf	0
  1835                           
  1836                           ;common.c: 130: if(sampleTimes == 0)
  1837  01FD  08BC               	movf	_sampleTimes,f
  1838  01FE  1D03               	skipz
  1839  01FF  2A08               	goto	l3411
  1840                           
  1841                           ;common.c: 131: {
  1842                           ;common.c: 132: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1843  0200  0821               	movf	_buffer_Sample_AD_Value+1,w
  1844  0201  00AF               	movwf	_multiFilterMaxValue+1
  1845  0202  0820               	movf	_buffer_Sample_AD_Value,w
  1846  0203  00AE               	movwf	_multiFilterMaxValue
  1847                           
  1848                           ;common.c: 133: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1849  0204  0821               	movf	_buffer_Sample_AD_Value+1,w
  1850  0205  00B1               	movwf	_multiFilterMinValue+1
  1851  0206  0820               	movf	_buffer_Sample_AD_Value,w
  1852  0207  00B0               	movwf	_multiFilterMinValue
  1853  0208                     l3411:	
  1854                           
  1855                           ;common.c: 134: }
  1856                           ;common.c: 136: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1857  0208  22A1  118A         	fcall	PL3	;call to abstracted procedure
  1858  020A  022F               	subwf	_multiFilterMaxValue+1,w
  1859  020B  1D03               	skipz
  1860  020C  2A0F               	goto	u585
  1861  020D  084B               	movf	??_AD_Sample,w
  1862  020E  022E               	subwf	_multiFilterMaxValue,w
  1863  020F                     u585:	
  1864  020F  1803               	skipnc
  1865  0210  2A1A               	goto	l1528
  1866                           
  1867                           ;common.c: 137: {
  1868                           ;common.c: 138: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1869  0211  1003               	clrc
  1870  0212  0D3C               	rlf	_sampleTimes,w
  1871  0213  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1872  0214  0084               	movwf	4
  1873  0215  0800               	movf	0,w
  1874  0216  00AE               	movwf	_multiFilterMaxValue
  1875  0217  0A84               	incf	4,f
  1876  0218  0800               	movf	0,w
  1877  0219  00AF               	movwf	_multiFilterMaxValue+1
  1878  021A                     l1528:	
  1879                           
  1880                           ;common.c: 139: }
  1881                           ;common.c: 140: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1882  021A  22A1  118A         	fcall	PL3	;call to abstracted procedure
  1883  021C  0831               	movf	_multiFilterMinValue+1,w
  1884  021D  024C               	subwf	??_AD_Sample+1,w
  1885  021E  1D03               	skipz
  1886  021F  2A22               	goto	u595
  1887  0220  0830               	movf	_multiFilterMinValue,w
  1888  0221  024B               	subwf	??_AD_Sample,w
  1889  0222                     u595:	
  1890  0222  1803               	skipnc
  1891  0223  2A2D               	goto	l1529
  1892                           
  1893                           ;common.c: 141: {
  1894                           ;common.c: 142: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1895  0224  1003               	clrc
  1896  0225  0D3C               	rlf	_sampleTimes,w
  1897  0226  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1898  0227  0084               	movwf	4
  1899  0228  0800               	movf	0,w
  1900  0229  00B0               	movwf	_multiFilterMinValue
  1901  022A  0A84               	incf	4,f
  1902  022B  0800               	movf	0,w
  1903  022C  00B1               	movwf	_multiFilterMinValue+1
  1904  022D                     l1529:	
  1905                           
  1906                           ;common.c: 143: }
  1907                           ;common.c: 145: multiFilterSumValue = multiFilterSumValue + buffer_Sample_AD_Value[sampl
      +                          eTimes];
  1908  022D  22A1  118A         	fcall	PL3	;call to abstracted procedure
  1909  022F  084B               	movf	??_AD_Sample,w
  1910  0230  07B2               	addwf	_multiFilterSumValue,f
  1911  0231  1803               	skipnc
  1912  0232  0AB3               	incf	_multiFilterSumValue+1,f
  1913  0233  084C               	movf	??_AD_Sample+1,w
  1914  0234  07B3               	addwf	_multiFilterSumValue+1,f
  1915  0235  3006               	movlw	6
  1916                           
  1917                           ;common.c: 147: sampleTimes++;
  1918  0236  0ABC               	incf	_sampleTimes,f
  1919                           
  1920                           ;common.c: 149: if(sampleTimes >= 6)
  1921  0237  023C               	subwf	_sampleTimes,w
  1922  0238  1C03               	skipc
  1923  0239  0008               	return
  1924                           
  1925                           ;common.c: 150: {
  1926                           ;common.c: 151: sampleTimes = 0;
  1927  023A  01BC               	clrf	_sampleTimes
  1928                           
  1929                           ;common.c: 153: if(sampleChannelSelect == 14)
  1930  023B  084E               	movf	_sampleChannelSelect,w
  1931  023C  3A0E               	xorlw	14
  1932  023D  1D03               	skipz
  1933  023E  2A48               	goto	l3431
  1934                           
  1935                           ;common.c: 154: {
  1936                           ;common.c: 156: sampleCH14Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1937  023F  0830               	movf	_multiFilterMinValue,w
  1938  0240  2293  118A         	fcall	PL2	;call to abstracted procedure
  1939  0242  22AB  118A         	fcall	PL4	;call to abstracted procedure
  1940  0244  3004               	movlw	4
  1941  0245  22B5  118A         	fcall	PL5	;call to abstracted procedure
  1942                           
  1943                           ;common.c: 157: sampleChannelSelect = 4;
  1944  0247  2A67               	goto	L5
  1945  0248                     l3431:	
  1946                           ;common.c: 158: }
  1947                           
  1948                           
  1949                           ;common.c: 159: else if(sampleChannelSelect == 4)
  1950  0248  084E               	movf	_sampleChannelSelect,w
  1951  0249  3A04               	xorlw	4
  1952  024A  1D03               	skipz
  1953  024B  2A5F               	goto	l3439
  1954                           
  1955                           ;common.c: 160: {
  1956                           ;common.c: 161: sampleCH4Value = ((multiFilterSumValue - multiFilterMaxValue - multiFilt
      +                          erMinValue))>> 2;
  1957  024C  0830               	movf	_multiFilterMinValue,w
  1958  024D  2293  118A         	fcall	PL2	;call to abstracted procedure
  1959  024F  00B6               	movwf	_sampleCH4Value
  1960  0250  084C               	movf	??_AD_Sample+1,w
  1961  0251  00B7               	movwf	_sampleCH4Value+1
  1962  0252  0832               	movf	_multiFilterSumValue,w
  1963  0253  07B6               	addwf	_sampleCH4Value,f
  1964  0254  1803               	skipnc
  1965  0255  0AB7               	incf	_sampleCH4Value+1,f
  1966  0256  0833               	movf	_multiFilterSumValue+1,w
  1967  0257  07B7               	addwf	_sampleCH4Value+1,f
  1968  0258  1003               	clrc
  1969  0259  0CB7               	rrf	_sampleCH4Value+1,f
  1970  025A  0CB6               	rrf	_sampleCH4Value,f
  1971  025B  1003               	clrc
  1972  025C  0CB7               	rrf	_sampleCH4Value+1,f
  1973  025D  0CB6               	rrf	_sampleCH4Value,f
  1974                           
  1975                           ;common.c: 163: }
  1976  025E  2A66               	goto	l3437
  1977  025F                     l3439:	
  1978                           
  1979                           ;common.c: 164: else
  1980                           ;common.c: 165: {
  1981                           ;common.c: 166: sampleCH14Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1982  025F  0830               	movf	_multiFilterMinValue,w
  1983  0260  2293  118A         	fcall	PL2	;call to abstracted procedure
  1984  0262  22AB  118A         	fcall	PL4	;call to abstracted procedure
  1985  0264  22B5  118A         	fcall	PL5	;call to abstracted procedure
  1986  0266                     l3437:	
  1987                           
  1988                           ;common.c: 162: sampleChannelSelect = 14;
  1989  0266  300E               	movlw	14
  1990  0267                     L5:	
  1991  0267  00CE               	movwf	_sampleChannelSelect
  1992                           
  1993                           ;common.c: 168: }
  1994                           ;common.c: 170: for(unsigned char index = 0; index < 6;index++)
  1995  0268  01CD               	clrf	AD_Sample@index
  1996  0269                     l3451:	
  1997                           
  1998                           ;common.c: 171: buffer_Sample_AD_Value[index] = 0;
  1999  0269  1003               	clrc
  2000  026A  0D4D               	rlf	AD_Sample@index,w
  2001  026B  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  2002  026C  0084               	movwf	4
  2003  026D  3006               	movlw	6
  2004  026E  0180               	clrf	0
  2005  026F  0A84               	incf	4,f
  2006  0270  0180               	clrf	0
  2007  0271  0ACD               	incf	AD_Sample@index,f
  2008  0272  024D               	subwf	AD_Sample@index,w
  2009  0273  1803               	btfsc	3,0
  2010  0274  0008               	return
  2011  0275  2A69               	goto	l3451
  2012  0276                     __end_of_AD_Sample:	
  2013  0276                     __ptext416:	
  2014 ;; =============== function _AD_Sample ends ============
  2015                           
  2016                           
  2017 ;; *************** function _getAdOriginalValue *****************
  2018 ;; Defined at:
  2019 ;;		line 76 in file "C:\190604\AK7030-OTP\common.c"
  2020 ;; Parameters:    Size  Location     Type
  2021 ;;		None
  2022 ;; Auto vars:     Size  Location     Type
  2023 ;;		None
  2024 ;; Return value:  Size  Location     Type
  2025 ;;                  2    0[BANK0 ] unsigned int 
  2026 ;; Registers used:
  2027 ;;		wreg
  2028 ;; Tracked objects:
  2029 ;;		On entry : 60/0
  2030 ;;		On exit  : 60/0
  2031 ;;		Unchanged: FFF9F/0
  2032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2033 ;;      Params:         0       2       0       0       0
  2034 ;;      Locals:         0       0       0       0       0
  2035 ;;      Temps:          0       0       0       0       0
  2036 ;;      Totals:         0       2       0       0       0
  2037 ;;Total ram usage:        2 bytes
  2038 ;; Hardware stack levels used:    1
  2039 ;; Hardware stack levels required when called:    2
  2040 ;; This function calls:
  2041 ;;		Nothing
  2042 ;; This function is called by:
  2043 ;;		_AD_Sample
  2044 ;; This function uses a non-reentrant model
  2045 ;;
  2046  0276                     _getAdOriginalValue:	
  2047                           
  2048                           ;common.c: 77: return adc_original_value;
  2049                           
  2050                           ; Regs used in _getAdOriginalValue: [wreg]
  2051  0276  082D               	movf	_adc_original_value+1,w
  2052  0277  00CA               	movwf	?_getAdOriginalValue+1
  2053  0278  082C               	movf	_adc_original_value,w
  2054  0279  00C9               	movwf	?_getAdOriginalValue
  2055  027A  0008               	return
  2056  027B                     __end_of_getAdOriginalValue:	
  2057  027B                     __ptext427:	
  2058 ;; =============== function _dac_init ends ============
  2059                           
  2060                           
  2061 ;; *************** function _adc_test_init *****************
  2062 ;; Defined at:
  2063 ;;		line 85 in file "C:\190604\AK7030-OTP\periph.c"
  2064 ;; Parameters:    Size  Location     Type
  2065 ;;  channel         1    wreg     unsigned char 
  2066 ;;  ref             1    0[BANK0 ] unsigned char 
  2067 ;; Auto vars:     Size  Location     Type
  2068 ;;  channel         1    2[BANK0 ] unsigned char 
  2069 ;; Return value:  Size  Location     Type
  2070 ;;		None               void
  2071 ;; Registers used:
  2072 ;;		wreg, status,2, status,0
  2073 ;; Tracked objects:
  2074 ;;		On entry : 60/0
  2075 ;;		On exit  : 60/20
  2076 ;;		Unchanged: FFF9F/0
  2077 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2078 ;;      Params:         0       1       0       0       0
  2079 ;;      Locals:         0       1       0       0       0
  2080 ;;      Temps:          0       1       0       0       0
  2081 ;;      Totals:         0       3       0       0       0
  2082 ;;Total ram usage:        3 bytes
  2083 ;; Hardware stack levels used:    1
  2084 ;; Hardware stack levels required when called:    2
  2085 ;; This function calls:
  2086 ;;		Nothing
  2087 ;; This function is called by:
  2088 ;;		_main
  2089 ;;		_process_AD_Converter_Value
  2090 ;; This function uses a non-reentrant model
  2091 ;;
  2092  027B                     _adc_test_init:	
  2093                           
  2094                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2095                           ;adc_test_init@channel stored from wreg
  2096  027B  00CB               	movwf	adc_test_init@channel
  2097                           
  2098                           ;periph.c: 86: ADCON0 = 0x00;
  2099  027C  019F               	clrf	31	;volatile
  2100                           
  2101                           ;periph.c: 87: ADCON0|=channel<<2;
  2102  027D  00CA               	movwf	??_adc_test_init
  2103  027E  1003               	clrc
  2104  027F  0DCA               	rlf	??_adc_test_init,f
  2105  0280  1003               	clrc
  2106  0281  0D4A               	rlf	??_adc_test_init,w
  2107  0282  049F               	iorwf	31,f	;volatile
  2108                           
  2109                           ;periph.c: 88: ADCON1|=ref<<6;
  2110  0283  0849               	movf	adc_test_init@ref,w
  2111  0284  00CA               	movwf	??_adc_test_init
  2112  0285  0CCA               	rrf	??_adc_test_init,f
  2113  0286  0CCA               	rrf	??_adc_test_init,f
  2114  0287  0C4A               	rrf	??_adc_test_init,w
  2115  0288  39C0               	andlw	192
  2116  0289  1683               	bsf	3,5	;RP0=1, select bank1
  2117  028A  049F               	iorwf	31,f	;volatile
  2118                           
  2119                           ;periph.c: 89: ADON=1;
  2120  028B  1283               	bcf	3,5	;RP0=0, select bank0
  2121  028C  141F               	bsf	31,0
  2122                           
  2123                           ;periph.c: 90: ADIE=1;
  2124  028D  1683               	bsf	3,5	;RP0=1, select bank1
  2125  028E  150D               	bsf	13,2
  2126  028F  0008               	return
  2127  0290                     __end_of_adc_test_init:	
  2128  0290                     __ptext423:	
  2129 ;; =============== function _isPermitSampleTime ends ============
  2130                           
  2131                           
  2132 ;; *************** function _adc_start *****************
  2133 ;; Defined at:
  2134 ;;		line 100 in file "C:\190604\AK7030-OTP\periph.c"
  2135 ;; Parameters:    Size  Location     Type
  2136 ;;		None
  2137 ;; Auto vars:     Size  Location     Type
  2138 ;;		None
  2139 ;; Return value:  Size  Location     Type
  2140 ;;		None               void
  2141 ;; Registers used:
  2142 ;;		None
  2143 ;; Tracked objects:
  2144 ;;		On entry : 60/20
  2145 ;;		On exit  : 60/0
  2146 ;;		Unchanged: FFF9F/0
  2147 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2148 ;;      Params:         0       0       0       0       0
  2149 ;;      Locals:         0       0       0       0       0
  2150 ;;      Temps:          0       0       0       0       0
  2151 ;;      Totals:         0       0       0       0       0
  2152 ;;Total ram usage:        0 bytes
  2153 ;; Hardware stack levels used:    1
  2154 ;; Hardware stack levels required when called:    2
  2155 ;; This function calls:
  2156 ;;		Nothing
  2157 ;; This function is called by:
  2158 ;;		_main
  2159 ;;		_process_AD_Converter_Value
  2160 ;; This function uses a non-reentrant model
  2161 ;;
  2162  0290                     _adc_start:	
  2163  0290                     l3333:	
  2164                           ; Regs used in _adc_start: []
  2165                           
  2166                           
  2167                           ;periph.c: 101: GO=1;
  2168  0290  1283               	bcf	3,5	;RP0=0, select bank0
  2169  0291  149F               	bsf	31,1
  2170  0292  0008               	return
  2171  0293                     __end_of_adc_start:	
  2172  0293                     PL2:	
  2173  0293  072E               	addwf	_multiFilterMaxValue,w
  2174  0294  00CB               	movwf	??_AD_Sample
  2175  0295  0831               	movf	_multiFilterMinValue+1,w
  2176  0296  1803               	skipnc
  2177  0297  0A31               	incf	_multiFilterMinValue+1,w
  2178  0298  072F               	addwf	_multiFilterMaxValue+1,w
  2179  0299  00CC               	movwf	??_AD_Sample+1
  2180  029A  09CB               	comf	??_AD_Sample,f
  2181  029B  09CC               	comf	??_AD_Sample+1,f
  2182  029C  0ACB               	incf	??_AD_Sample,f
  2183  029D  1903               	skipnz
  2184  029E  0ACC               	incf	??_AD_Sample+1,f
  2185  029F  084B               	movf	??_AD_Sample,w
  2186  02A0  0008               	return
  2187  02A1                     PL3:	
  2188  02A1  1003               	clrc
  2189  02A2  0D3C               	rlf	_sampleTimes,w
  2190  02A3  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  2191  02A4  0084               	movwf	4
  2192  02A5  0800               	movf	0,w
  2193  02A6  00CB               	movwf	??_AD_Sample
  2194  02A7  0A84               	incf	4,f
  2195  02A8  0800               	movf	0,w
  2196  02A9  00CC               	movwf	??_AD_Sample+1
  2197  02AA  0008               	return
  2198  02AB                     PL4:	
  2199  02AB  00B4               	movwf	_sampleCH14Value
  2200  02AC  084C               	movf	??_AD_Sample+1,w
  2201  02AD  00B5               	movwf	_sampleCH14Value+1
  2202  02AE  0832               	movf	_multiFilterSumValue,w
  2203  02AF  07B4               	addwf	_sampleCH14Value,f
  2204  02B0  1803               	skipnc
  2205  02B1  0AB5               	incf	_sampleCH14Value+1,f
  2206  02B2  0833               	movf	_multiFilterSumValue+1,w
  2207  02B3  07B5               	addwf	_sampleCH14Value+1,f
  2208  02B4  0008               	return
  2209  02B5                     PL5:	
  2210  02B5  1003               	clrc
  2211  02B6  0CB5               	rrf	_sampleCH14Value+1,f
  2212  02B7  0CB4               	rrf	_sampleCH14Value,f
  2213  02B8  1003               	clrc
  2214  02B9  0CB5               	rrf	_sampleCH14Value+1,f
  2215  02BA  0CB4               	rrf	_sampleCH14Value,f
  2216  02BB  0008               	return
  2217                           
  2218                           	psect	text419
  2219  0364                     __ptext419:	
  2220 ;; =============== function _getAD_ConvertFlag ends ============
  2221                           
  2222                           
  2223 ;; *************** function _getAdCh4Value *****************
  2224 ;; Defined at:
  2225 ;;		line 180 in file "C:\190604\AK7030-OTP\common.c"
  2226 ;; Parameters:    Size  Location     Type
  2227 ;;		None
  2228 ;; Auto vars:     Size  Location     Type
  2229 ;;		None
  2230 ;; Return value:  Size  Location     Type
  2231 ;;                  2    0[BANK0 ] unsigned int 
  2232 ;; Registers used:
  2233 ;;		wreg
  2234 ;; Tracked objects:
  2235 ;;		On entry : 60/0
  2236 ;;		On exit  : 60/0
  2237 ;;		Unchanged: FFF9F/0
  2238 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2239 ;;      Params:         0       2       0       0       0
  2240 ;;      Locals:         0       0       0       0       0
  2241 ;;      Temps:          0       0       0       0       0
  2242 ;;      Totals:         0       2       0       0       0
  2243 ;;Total ram usage:        2 bytes
  2244 ;; Hardware stack levels used:    1
  2245 ;; Hardware stack levels required when called:    2
  2246 ;; This function calls:
  2247 ;;		Nothing
  2248 ;; This function is called by:
  2249 ;;		_main
  2250 ;; This function uses a non-reentrant model
  2251 ;;
  2252  0364                     _getAdCh4Value:	
  2253                           
  2254                           ;common.c: 181: return sampleCH4Value;
  2255                           
  2256                           ; Regs used in _getAdCh4Value: [wreg]
  2257  0364  0837               	movf	_sampleCH4Value+1,w
  2258  0365  00CA               	movwf	?_getAdCh4Value+1
  2259  0366  0836               	movf	_sampleCH4Value,w
  2260  0367  00C9               	movwf	?_getAdCh4Value
  2261  0368  0008               	return
  2262  0369                     __end_of_getAdCh4Value:	
  2263                           
  2264                           	psect	text420
  2265  0369                     __ptext420:	
  2266 ;; =============== function _getAdCh4Value ends ============
  2267                           
  2268                           
  2269 ;; *************** function _getAdCh14Value *****************
  2270 ;; Defined at:
  2271 ;;		line 186 in file "C:\190604\AK7030-OTP\common.c"
  2272 ;; Parameters:    Size  Location     Type
  2273 ;;		None
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;		None
  2276 ;; Return value:  Size  Location     Type
  2277 ;;                  2    0[BANK0 ] unsigned int 
  2278 ;; Registers used:
  2279 ;;		wreg
  2280 ;; Tracked objects:
  2281 ;;		On entry : 60/0
  2282 ;;		On exit  : 60/0
  2283 ;;		Unchanged: FFF9F/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         0       2       0       0       0
  2286 ;;      Locals:         0       0       0       0       0
  2287 ;;      Temps:          0       0       0       0       0
  2288 ;;      Totals:         0       2       0       0       0
  2289 ;;Total ram usage:        2 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    2
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;; This function uses a non-reentrant model
  2297 ;;
  2298  0369                     _getAdCh14Value:	
  2299                           
  2300                           ;common.c: 187: return sampleCH14Value;
  2301                           
  2302                           ; Regs used in _getAdCh14Value: [wreg]
  2303  0369  0835               	movf	_sampleCH14Value+1,w
  2304  036A  00CA               	movwf	?_getAdCh14Value+1
  2305  036B  0834               	movf	_sampleCH14Value,w
  2306  036C  00C9               	movwf	?_getAdCh14Value
  2307  036D  0008               	return
  2308  036E                     __end_of_getAdCh14Value:	
  2309                           
  2310                           	psect	text421
  2311  037B                     __ptext421:	
  2312 ;; =============== function _getAdCh14Value ends ============
  2313                           
  2314                           
  2315 ;; *************** function _clrSampeTime *****************
  2316 ;; Defined at:
  2317 ;;		line 254 in file "C:\190604\AK7030-OTP\common.c"
  2318 ;; Parameters:    Size  Location     Type
  2319 ;;		None
  2320 ;; Auto vars:     Size  Location     Type
  2321 ;;		None
  2322 ;; Return value:  Size  Location     Type
  2323 ;;		None               void
  2324 ;; Registers used:
  2325 ;;		status,2
  2326 ;; Tracked objects:
  2327 ;;		On entry : 0/0
  2328 ;;		On exit  : 0/0
  2329 ;;		Unchanged: FFFFF/0
  2330 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2331 ;;      Params:         0       0       0       0       0
  2332 ;;      Locals:         0       0       0       0       0
  2333 ;;      Temps:          0       0       0       0       0
  2334 ;;      Totals:         0       0       0       0       0
  2335 ;;Total ram usage:        0 bytes
  2336 ;; Hardware stack levels used:    1
  2337 ;; Hardware stack levels required when called:    2
  2338 ;; This function calls:
  2339 ;;		Nothing
  2340 ;; This function is called by:
  2341 ;;		_main
  2342 ;; This function uses a non-reentrant model
  2343 ;;
  2344  037B                     _clrSampeTime:	
  2345                           
  2346                           ;common.c: 255: timer.timer10msStopWatch = 0;
  2347                           
  2348                           ; Regs used in _clrSampeTime: [status,2]
  2349  037B  01FA               	clrf	_timer
  2350  037C  0008               	return
  2351  037D                     __end_of_clrSampeTime:	
  2352                           
  2353                           	psect	text422
  2354  036E                     __ptext422:	
  2355 ;; =============== function _clrSampeTime ends ============
  2356                           
  2357                           
  2358 ;; *************** function _isPermitSampleTime *****************
  2359 ;; Defined at:
  2360 ;;		line 244 in file "C:\190604\AK7030-OTP\common.c"
  2361 ;; Parameters:    Size  Location     Type
  2362 ;;		None
  2363 ;; Auto vars:     Size  Location     Type
  2364 ;;		None
  2365 ;; Return value:  Size  Location     Type
  2366 ;;                  1    wreg      unsigned char 
  2367 ;; Registers used:
  2368 ;;		wreg
  2369 ;; Tracked objects:
  2370 ;;		On entry : 0/0
  2371 ;;		On exit  : 0/0
  2372 ;;		Unchanged: FFFFF/0
  2373 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2374 ;;      Params:         0       0       0       0       0
  2375 ;;      Locals:         0       0       0       0       0
  2376 ;;      Temps:          0       0       0       0       0
  2377 ;;      Totals:         0       0       0       0       0
  2378 ;;Total ram usage:        0 bytes
  2379 ;; Hardware stack levels used:    1
  2380 ;; Hardware stack levels required when called:    2
  2381 ;; This function calls:
  2382 ;;		Nothing
  2383 ;; This function is called by:
  2384 ;;		_main
  2385 ;; This function uses a non-reentrant model
  2386 ;;
  2387  036E                     _isPermitSampleTime:	
  2388                           
  2389                           ;common.c: 245: if(timer.timer10msStopWatch >= 10)
  2390                           
  2391                           ; Regs used in _isPermitSampleTime: [wreg]
  2392  036E  300A               	movlw	10
  2393  036F  027A               	subwf	_timer,w
  2394  0370  1803               	btfsc	3,0
  2395                           
  2396                           ;common.c: 246: {
  2397                           ;common.c: 247: return 1;
  2398  0371  3401               	retlw	1
  2399                           
  2400                           ;common.c: 249: else
  2401                           ;common.c: 250: return 0;
  2402  0372  3400               	retlw	0
  2403  0373                     __end_of_isPermitSampleTime:	
  2404                           
  2405                           	psect	text424
  2406  0354                     __ptext424:	
  2407 ;; =============== function _adc_start ends ============
  2408                           
  2409                           
  2410 ;; *************** function _op2_init *****************
  2411 ;; Defined at:
  2412 ;;		line 45 in file "C:\190604\AK7030-OTP\periph.c"
  2413 ;; Parameters:    Size  Location     Type
  2414 ;;		None
  2415 ;; Auto vars:     Size  Location     Type
  2416 ;;		None
  2417 ;; Return value:  Size  Location     Type
  2418 ;;		None               void
  2419 ;; Registers used:
  2420 ;;		wreg
  2421 ;; Tracked objects:
  2422 ;;		On entry : 17F/20
  2423 ;;		On exit  : 17F/20
  2424 ;;		Unchanged: FFE80/0
  2425 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2426 ;;      Params:         0       0       0       0       0
  2427 ;;      Locals:         0       0       0       0       0
  2428 ;;      Temps:          0       0       0       0       0
  2429 ;;      Totals:         0       0       0       0       0
  2430 ;;Total ram usage:        0 bytes
  2431 ;; Hardware stack levels used:    1
  2432 ;; Hardware stack levels required when called:    2
  2433 ;; This function calls:
  2434 ;;		Nothing
  2435 ;; This function is called by:
  2436 ;;		_main
  2437 ;; This function uses a non-reentrant model
  2438 ;;
  2439  0354                     _op2_init:	
  2440                           
  2441                           ;periph.c: 52: OP2CON1=0x10;
  2442                           
  2443                           ; Regs used in _op2_init: [wreg]
  2444  0354  3010               	movlw	16
  2445  0355  009C               	movwf	28	;volatile
  2446                           
  2447                           ;periph.c: 54: OP2CON2=0x10;
  2448  0356  009D               	movwf	29	;volatile
  2449                           
  2450                           ;periph.c: 55: OP2CON0=0x80;
  2451  0357  3080               	movlw	128
  2452  0358  009B               	movwf	27	;volatile
  2453                           
  2454                           ;periph.c: 58: TRISA7=0;
  2455  0359  1385               	bcf	5,7
  2456                           
  2457                           ;periph.c: 60: TRISB7 = 1;
  2458  035A  1786               	bsf	6,7
  2459  035B  0008               	return
  2460  035C                     __end_of_op2_init:	
  2461                           
  2462                           	psect	text425
  2463  0337                     __ptext425:	
  2464 ;; =============== function _op2_init ends ============
  2465                           
  2466                           
  2467 ;; *************** function _op1_init *****************
  2468 ;; Defined at:
  2469 ;;		line 26 in file "C:\190604\AK7030-OTP\periph.c"
  2470 ;; Parameters:    Size  Location     Type
  2471 ;;		None
  2472 ;; Auto vars:     Size  Location     Type
  2473 ;;		None
  2474 ;; Return value:  Size  Location     Type
  2475 ;;		None               void
  2476 ;; Registers used:
  2477 ;;		wreg
  2478 ;; Tracked objects:
  2479 ;;		On entry : 17F/20
  2480 ;;		On exit  : 17F/20
  2481 ;;		Unchanged: FFE80/0
  2482 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2483 ;;      Params:         0       0       0       0       0
  2484 ;;      Locals:         0       0       0       0       0
  2485 ;;      Temps:          0       0       0       0       0
  2486 ;;      Totals:         0       0       0       0       0
  2487 ;;Total ram usage:        0 bytes
  2488 ;; Hardware stack levels used:    1
  2489 ;; Hardware stack levels required when called:    2
  2490 ;; This function calls:
  2491 ;;		Nothing
  2492 ;; This function is called by:
  2493 ;;		_main
  2494 ;; This function uses a non-reentrant model
  2495 ;;
  2496  0337                     _op1_init:	
  2497                           
  2498                           ;periph.c: 33: OP1CON1=0x02;
  2499                           
  2500                           ; Regs used in _op1_init: [wreg]
  2501  0337  3002               	movlw	2
  2502  0338  1283               	bcf	3,5	;RP0=0, select bank0
  2503  0339  009C               	movwf	28	;volatile
  2504                           
  2505                           ;periph.c: 34: OP1CON2=0xA0;
  2506  033A  30A0               	movlw	160
  2507  033B  009D               	movwf	29	;volatile
  2508                           
  2509                           ;periph.c: 35: OP1CON0=0x80;
  2510  033C  3080               	movlw	128
  2511  033D  009B               	movwf	27	;volatile
  2512                           
  2513                           ;periph.c: 38: TRISB3=1;
  2514  033E  1683               	bsf	3,5	;RP0=1, select bank1
  2515  033F  1586               	bsf	6,3
  2516                           
  2517                           ;periph.c: 40: TRISB5=0;
  2518  0340  1286               	bcf	6,5
  2519  0341  0008               	return
  2520  0342                     __end_of_op1_init:	
  2521                           
  2522                           	psect	text426
  2523  0373                     __ptext426:	
  2524 ;; =============== function _op1_init ends ============
  2525                           
  2526                           
  2527 ;; *************** function _dac_init *****************
  2528 ;; Defined at:
  2529 ;;		line 14 in file "C:\190604\AK7030-OTP\periph.c"
  2530 ;; Parameters:    Size  Location     Type
  2531 ;;		None
  2532 ;; Auto vars:     Size  Location     Type
  2533 ;;		None
  2534 ;; Return value:  Size  Location     Type
  2535 ;;		None               void
  2536 ;; Registers used:
  2537 ;;		wreg
  2538 ;; Tracked objects:
  2539 ;;		On entry : 17F/20
  2540 ;;		On exit  : 17F/20
  2541 ;;		Unchanged: FFE80/0
  2542 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2543 ;;      Params:         0       0       0       0       0
  2544 ;;      Locals:         0       0       0       0       0
  2545 ;;      Temps:          0       0       0       0       0
  2546 ;;      Totals:         0       0       0       0       0
  2547 ;;Total ram usage:        0 bytes
  2548 ;; Hardware stack levels used:    1
  2549 ;; Hardware stack levels required when called:    2
  2550 ;; This function calls:
  2551 ;;		Nothing
  2552 ;; This function is called by:
  2553 ;;		_main
  2554 ;; This function uses a non-reentrant model
  2555 ;;
  2556  0373                     _dac_init:	
  2557                           
  2558                           ;periph.c: 15: DACCON|=1;
  2559                           
  2560                           ; Regs used in _dac_init: [wreg]
  2561  0373  1407               	bsf	7,0	;volatile
  2562                           
  2563                           ;periph.c: 17: DACR0=0x0F;
  2564  0374  300F               	movlw	15
  2565  0375  0088               	movwf	8	;volatile
  2566                           
  2567                           ;periph.c: 18: DACCON|=(1)<<2;
  2568  0376  1507               	bsf	7,2	;volatile
  2569  0377  0008               	return
  2570  0378                     __end_of_dac_init:	
  2571                           
  2572                           	psect	text428
  2573  0378                     __ptext428:	
  2574 ;; =============== function _adc_test_init ends ============
  2575                           
  2576                           
  2577 ;; *************** function _timer1_interrupt_config *****************
  2578 ;; Defined at:
  2579 ;;		line 56 in file "C:\190604\AK7030-OTP\common.c"
  2580 ;; Parameters:    Size  Location     Type
  2581 ;;		None
  2582 ;; Auto vars:     Size  Location     Type
  2583 ;;		None
  2584 ;; Return value:  Size  Location     Type
  2585 ;;		None               void
  2586 ;; Registers used:
  2587 ;;		None
  2588 ;; Tracked objects:
  2589 ;;		On entry : 17F/20
  2590 ;;		On exit  : 17F/20
  2591 ;;		Unchanged: FFE80/0
  2592 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2593 ;;      Params:         0       0       0       0       0
  2594 ;;      Locals:         0       0       0       0       0
  2595 ;;      Temps:          0       0       0       0       0
  2596 ;;      Totals:         0       0       0       0       0
  2597 ;;Total ram usage:        0 bytes
  2598 ;; Hardware stack levels used:    1
  2599 ;; Hardware stack levels required when called:    2
  2600 ;; This function calls:
  2601 ;;		Nothing
  2602 ;; This function is called by:
  2603 ;;		_main
  2604 ;; This function uses a non-reentrant model
  2605 ;;
  2606  0378                     _timer1_interrupt_config:	
  2607                           
  2608                           ;common.c: 57: GIE = 1;
  2609                           
  2610                           ; Regs used in _timer1_interrupt_config: []
  2611  0378  178B               	bsf	11,7
  2612                           
  2613                           ;common.c: 58: PEIE = 1;
  2614  0379  170B               	bsf	11,6
  2615  037A  0008               	return
  2616  037B                     __end_of_timer1_interrupt_config:	
  2617                           
  2618                           	psect	text429
  2619  0342                     __ptext429:	
  2620 ;; =============== function _timer1_interrupt_config ends ============
  2621                           
  2622                           
  2623 ;; *************** function _timer1_config *****************
  2624 ;; Defined at:
  2625 ;;		line 44 in file "C:\190604\AK7030-OTP\common.c"
  2626 ;; Parameters:    Size  Location     Type
  2627 ;;		None
  2628 ;; Auto vars:     Size  Location     Type
  2629 ;;		None
  2630 ;; Return value:  Size  Location     Type
  2631 ;;		None               void
  2632 ;; Registers used:
  2633 ;;		wreg
  2634 ;; Tracked objects:
  2635 ;;		On entry : 17F/40
  2636 ;;		On exit  : 17F/20
  2637 ;;		Unchanged: FFE80/0
  2638 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2639 ;;      Params:         0       0       0       0       0
  2640 ;;      Locals:         0       0       0       0       0
  2641 ;;      Temps:          0       0       0       0       0
  2642 ;;      Totals:         0       0       0       0       0
  2643 ;;Total ram usage:        0 bytes
  2644 ;; Hardware stack levels used:    1
  2645 ;; Hardware stack levels required when called:    2
  2646 ;; This function calls:
  2647 ;;		Nothing
  2648 ;; This function is called by:
  2649 ;;		_main
  2650 ;; This function uses a non-reentrant model
  2651 ;;
  2652  0342                     _timer1_config:	
  2653                           
  2654                           ;common.c: 46: TMR1H=0xCF;
  2655                           
  2656                           ; Regs used in _timer1_config: [wreg]
  2657  0342  30CF               	movlw	207
  2658  0343  1303               	bcf	3,6	;RP1=0, select bank0
  2659  0344  008F               	movwf	15	;volatile
  2660                           
  2661                           ;common.c: 47: TMR1L=0x2C;
  2662  0345  302C               	movlw	44
  2663  0346  008E               	movwf	14	;volatile
  2664                           
  2665                           ;common.c: 48: T1CON=0xE1;
  2666  0347  30E1               	movlw	225
  2667  0348  0090               	movwf	16	;volatile
  2668                           
  2669                           ;common.c: 49: TMR1IE=1;
  2670  0349  1683               	bsf	3,5	;RP0=1, select bank1
  2671  034A  140C               	bsf	12,0
  2672  034B  0008               	return
  2673  034C                     __end_of_timer1_config:	
  2674                           
  2675                           	psect	text430
  2676  035C                     __ptext430:	
  2677 ;; =============== function _timer1_config ends ============
  2678                           
  2679                           
  2680 ;; *************** function _clock_config *****************
  2681 ;; Defined at:
  2682 ;;		line 36 in file "C:\190604\AK7030-OTP\common.c"
  2683 ;; Parameters:    Size  Location     Type
  2684 ;;		None
  2685 ;; Auto vars:     Size  Location     Type
  2686 ;;		None
  2687 ;; Return value:  Size  Location     Type
  2688 ;;		None               void
  2689 ;; Registers used:
  2690 ;;		wreg, status,2
  2691 ;; Tracked objects:
  2692 ;;		On entry : 17F/20
  2693 ;;		On exit  : 17F/40
  2694 ;;		Unchanged: FFE80/0
  2695 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2696 ;;      Params:         0       0       0       0       0
  2697 ;;      Locals:         0       0       0       0       0
  2698 ;;      Temps:          0       0       0       0       0
  2699 ;;      Totals:         0       0       0       0       0
  2700 ;;Total ram usage:        0 bytes
  2701 ;; Hardware stack levels used:    1
  2702 ;; Hardware stack levels required when called:    2
  2703 ;; This function calls:
  2704 ;;		Nothing
  2705 ;; This function is called by:
  2706 ;;		_main
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709  035C                     _clock_config:	
  2710                           
  2711                           ;common.c: 38: CLKPR = 0x80;
  2712                           
  2713                           ; Regs used in _clock_config: [wreg+status,2]
  2714  035C  3080               	movlw	128
  2715  035D  1283               	bcf	3,5	;RP0=0, select bank2
  2716  035E  1703               	bsf	3,6	;RP1=1, select bank2
  2717  035F  0088               	movwf	8	;volatile
  2718                           
  2719                           ;common.c: 39: CLKPR = 0x00;
  2720  0360  0188               	clrf	8	;volatile
  2721  0361                     l1490:	
  2722                           ;common.c: 40: while(CLKPCE);
  2723                           
  2724  0361  1F88               	btfss	8,7
  2725  0362  0008               	return
  2726  0363  2B61               	goto	l1490
  2727  0364                     __end_of_clock_config:	
  2728                           
  2729                           	psect	text431
  2730  02BC                     __ptext431:	
  2731 ;; =============== function _clock_config ends ============
  2732                           
  2733                           
  2734 ;; *************** function _ISR *****************
  2735 ;; Defined at:
  2736 ;;		line 259 in file "C:\190604\AK7030-OTP\common.c"
  2737 ;; Parameters:    Size  Location     Type
  2738 ;;		None
  2739 ;; Auto vars:     Size  Location     Type
  2740 ;;		None
  2741 ;; Return value:  Size  Location     Type
  2742 ;;		None               void
  2743 ;; Registers used:
  2744 ;;		wreg, status,2, status,0, pclath, cstack
  2745 ;; Tracked objects:
  2746 ;;		On entry : 0/0
  2747 ;;		On exit  : 40/0
  2748 ;;		Unchanged: FFF9F/0
  2749 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2750 ;;      Params:         0       0       0       0       0
  2751 ;;      Locals:         0       0       0       0       0
  2752 ;;      Temps:          2       0       0       0       0
  2753 ;;      Totals:         2       0       0       0       0
  2754 ;;Total ram usage:        2 bytes
  2755 ;; Hardware stack levels used:    1
  2756 ;; Hardware stack levels required when called:    1
  2757 ;; This function calls:
  2758 ;;		i1_setAD_ConvertFlag
  2759 ;;		_adc_get
  2760 ;; This function is called by:
  2761 ;;		Interrupt level 1
  2762 ;; This function uses a non-reentrant model
  2763 ;;
  2764  02BC                     _ISR:	
  2765                           
  2766                           ;common.c: 260: static unsigned char ucTimer1sCnt = 0;
  2767                           ;common.c: 262: if(TMR1IF == 1)
  2768  02BC  1283               	bcf	3,5	;RP0=0, select bank0
  2769  02BD  1303               	bcf	3,6	;RP1=0, select bank0
  2770  02BE  1C0C               	btfss	12,0
  2771  02BF  2ADC               	goto	i1l3383
  2772  02C0  3064               	movlw	100
  2773                           
  2774                           ;common.c: 263: {
  2775                           ;common.c: 264: TMR1IF = 0 ;
  2776  02C1  100C               	bcf	12,0
  2777                           
  2778                           ;common.c: 265: timer.timer10msStopWatch++;
  2779  02C2  0AFA               	incf	_timer,f
  2780                           
  2781                           ;common.c: 266: ucTimer1sCnt++;
  2782  02C3  0AF8               	incf	ISR@ucTimer1sCnt,f
  2783                           
  2784                           ;common.c: 268: if(ucTimer1sCnt >= 100)
  2785  02C4  0278               	subwf	ISR@ucTimer1sCnt,w
  2786  02C5  1C03               	skipc
  2787  02C6  2ADC               	goto	i1l3383
  2788                           
  2789                           ;common.c: 269: {
  2790                           ;common.c: 270: ucTimer1sCnt = 0;
  2791  02C7  01F8               	clrf	ISR@ucTimer1sCnt
  2792                           
  2793                           ;common.c: 271: if(uiBigTimer > 0)
  2794  02C8  0877               	movf	_uiBigTimer+1,w
  2795  02C9  0476               	iorwf	_uiBigTimer,w
  2796  02CA  1903               	skipnz
  2797  02CB  2AD2               	goto	i1l1583
  2798                           
  2799                           ;common.c: 272: uiBigTimer--;
  2800  02CC  3001               	movlw	1
  2801  02CD  02F6               	subwf	_uiBigTimer,f
  2802  02CE  3000               	movlw	0
  2803  02CF  1C03               	skipc
  2804  02D0  03F7               	decf	_uiBigTimer+1,f
  2805  02D1  02F7               	subwf	_uiBigTimer+1,f
  2806  02D2                     i1l1583:	
  2807                           
  2808                           ;common.c: 274: if(uiSmallTimer)
  2809  02D2  0839               	movf	_uiSmallTimer+1,w
  2810  02D3  0438               	iorwf	_uiSmallTimer,w
  2811  02D4  1903               	skipnz
  2812  02D5  2ADC               	goto	i1l3383
  2813                           
  2814                           ;common.c: 275: uiSmallTimer--;
  2815  02D6  3001               	movlw	1
  2816  02D7  02B8               	subwf	_uiSmallTimer,f
  2817  02D8  3000               	movlw	0
  2818  02D9  1C03               	skipc
  2819  02DA  03B9               	decf	_uiSmallTimer+1,f
  2820  02DB  02B9               	subwf	_uiSmallTimer+1,f
  2821  02DC                     i1l3383:	
  2822                           
  2823                           ;common.c: 276: }
  2824                           ;common.c: 277: }
  2825                           ;common.c: 279: if(ADIF)
  2826  02DC  1D0D               	btfss	13,2
  2827  02DD  2AEA               	goto	i1l1588
  2828  02DE  3001               	movlw	1
  2829                           
  2830                           ;common.c: 280: {
  2831                           ;common.c: 281: ADIF=0;
  2832  02DF  110D               	bcf	13,2
  2833                           
  2834                           ;common.c: 282: setAD_ConvertFlag(1);
  2835  02E0  22FC  118A         	fcall	i1_setAD_ConvertFlag
  2836                           
  2837                           ;common.c: 283: adc_original_value = adc_get();
  2838  02E2  22F1  118A         	fcall	_adc_get
  2839  02E4  0871               	movf	?_adc_get+1,w
  2840  02E5  1283               	bcf	3,5	;RP0=0, select bank0
  2841  02E6  00AD               	movwf	_adc_original_value+1
  2842  02E7  0870               	movf	?_adc_get,w
  2843  02E8  00AC               	movwf	_adc_original_value
  2844                           
  2845                           ;common.c: 285: adc_original_CH4_value = adc_get();
  2846  02E9  22F1               	fcall	_adc_get
  2847  02EA                     i1l1588:	
  2848  02EA  0875               	movf	??_ISR+1,w
  2849  02EB  008A               	movwf	10
  2850  02EC  0E74               	swapf	??_ISR^(0+-128),w
  2851  02ED  0083               	movwf	3
  2852  02EE  0EFE               	swapf	126,f
  2853  02EF  0E7E               	swapf	126,w
  2854  02F0  0009               	retfie
  2855  02F1                     __end_of_ISR:	
  2856  02F1                     __ptext433:	
  2857 ;; =============== function i1_setAD_ConvertFlag ends ============
  2858                           
  2859                           
  2860 ;; *************** function _adc_get *****************
  2861 ;; Defined at:
  2862 ;;		line 105 in file "C:\190604\AK7030-OTP\periph.c"
  2863 ;; Parameters:    Size  Location     Type
  2864 ;;		None
  2865 ;; Auto vars:     Size  Location     Type
  2866 ;;  val             2    2[COMMON] unsigned int 
  2867 ;; Return value:  Size  Location     Type
  2868 ;;                  2    0[COMMON] unsigned int 
  2869 ;; Registers used:
  2870 ;;		wreg
  2871 ;; Tracked objects:
  2872 ;;		On entry : 60/0
  2873 ;;		On exit  : 60/20
  2874 ;;		Unchanged: FFF9F/0
  2875 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2876 ;;      Params:         2       0       0       0       0
  2877 ;;      Locals:         2       0       0       0       0
  2878 ;;      Temps:          0       0       0       0       0
  2879 ;;      Totals:         4       0       0       0       0
  2880 ;;Total ram usage:        4 bytes
  2881 ;; Hardware stack levels used:    1
  2882 ;; This function calls:
  2883 ;;		Nothing
  2884 ;; This function is called by:
  2885 ;;		_ISR
  2886 ;; This function uses a non-reentrant model
  2887 ;;
  2888  02F1                     _adc_get:	
  2889                           
  2890                           ;periph.c: 106: unsigned int val;
  2891                           ;periph.c: 107: val = (ADRESH<<8) | ADRESL;
  2892                           
  2893                           ; Regs used in _adc_get: [wreg]
  2894  02F1  081E               	movf	30,w	;volatile
  2895  02F2  00F3               	movwf	adc_get@val+1
  2896  02F3  01F2               	clrf	adc_get@val
  2897  02F4  1683               	bsf	3,5	;RP0=1, select bank1
  2898  02F5  081E               	movf	30,w	;volatile
  2899  02F6  04F2               	iorwf	adc_get@val,f
  2900                           
  2901                           ;periph.c: 108: return val;
  2902  02F7  0873               	movf	adc_get@val+1,w
  2903  02F8  00F1               	movwf	?_adc_get+1
  2904  02F9  0872               	movf	adc_get@val,w
  2905  02FA  00F0               	movwf	?_adc_get
  2906  02FB  0008               	return
  2907  02FC                     __end_of_adc_get:	
  2908  02FC                     __ptext432:	
  2909 ;; =============== function _ISR ends ============
  2910                           
  2911                           
  2912 ;; *************** function i1_setAD_ConvertFlag *****************
  2913 ;; Defined at:
  2914 ;;		line 70 in file "C:\190604\AK7030-OTP\common.c"
  2915 ;; Parameters:    Size  Location     Type
  2916 ;;  setAD_Conver    1    wreg     unsigned char 
  2917 ;; Auto vars:     Size  Location     Type
  2918 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2919 ;; Return value:  Size  Location     Type
  2920 ;;		None               void
  2921 ;; Registers used:
  2922 ;;		wreg
  2923 ;; Tracked objects:
  2924 ;;		On entry : 60/0
  2925 ;;		On exit  : 60/0
  2926 ;;		Unchanged: FFF9F/0
  2927 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2928 ;;      Params:         0       0       0       0       0
  2929 ;;      Locals:         1       0       0       0       0
  2930 ;;      Temps:          0       0       0       0       0
  2931 ;;      Totals:         1       0       0       0       0
  2932 ;;Total ram usage:        1 bytes
  2933 ;; Hardware stack levels used:    1
  2934 ;; This function calls:
  2935 ;;		Nothing
  2936 ;; This function is called by:
  2937 ;;		_ISR
  2938 ;; This function uses a non-reentrant model
  2939 ;;
  2940  02FC                     i1_setAD_ConvertFlag:	
  2941                           
  2942                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2943                           ;i1setAD_ConvertFlag@flag stored from wreg
  2944  02FC  00F0               	movwf	i1setAD_ConvertFlag@flag
  2945                           
  2946                           ;common.c: 71: adc_convert_flag = flag;
  2947  02FD  00F9               	movwf	_adc_convert_flag
  2948  02FE  0008               	return
  2949  02FF                     __end_ofi1_setAD_ConvertFlag:	
  2950                           
  2951                           	psect	intentry
  2952  0004                     __pintentry:	
  2953                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2954                           
  2955  0004                     interrupt_function:	
  2956  007E                     saved_w	set	btemp
  2957  0004  00FE               	movwf	btemp
  2958  0005  0E03               	swapf	3,w
  2959  0006  00F4               	movwf	??_ISR
  2960  0007  080A               	movf	10,w
  2961  0008  00F5               	movwf	??_ISR+1
  2962  0009  118A  2ABC         	ljmp	_ISR
  2963                           
  2964                           	psect	text434
  2965  0000                     __ptext434:	
  2966 ;; =============== function _adc_get ends ============
  2967                           
  2968  007E                     btemp	set	126	;btemp
  2969  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Jun 04 11:37:19 2019

                     ??_clock_config 0049                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 0049             ?_timer1_interrupt_config 0070  
                                l705 009F                                  l805 0183  
                                l733 00DC                                  l760 0118  
                                l678 01D0                                  l687 0069  
                                l784 014E                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PB0 0030                                  _PA2 002A  
                                _PB1 0031                                  _PA3 002B  
                                _PA6 002E                                  _PA7 002F  
                                _ISR 02BC                                  u585 020F  
                                u595 0222                       _getAdCh14Value 0369  
                                fsr0 0004                                  indf 0000  
                               S3985 030F                                 S3987 031D  
                               S3989 032B                                 ?_ISR 0070  
                 __size_of_AD_Sample 0089                                 l2220 0000  
                               l1502 0000                                 l2231 0000  
                               l2223 0000                                 l2217 0000  
                               l1505 0000                                 l1540 0000  
                               l1508 0000                                 l3301 0000  
                               l2237 0000                                 l3303 0000  
                               l3311 0000                                 l1543 0000  
                               l1528 021A                                 l3313 0000  
                               l3305 0000                                 l3321 0000  
                               l1529 022D                                 l1490 0361  
                               l3307 0000                                 l3315 0000  
                               l3323 0000                                 l3331 0000  
                               l3411 0208                                 l3403 0000  
                               l1493 0000                                 l3309 0000  
                               l3317 0000                                 l3325 0000  
                               l3333 0290                                 l3501 0060  
                               l3319 0000                                 l3327 0000  
                               l3335 0000                                 l3431 0248  
                               l3423 0000                                 l3407 0000  
                               l3511 0077                                 l3503 0067  
                               l1496 0000                                 l1576 0000  
                               l3329 0000                                 l3353 0000  
                               l3361 0000                                 l3441 0000  
                               l3417 0000                                 l1499 0000  
                               l3347 0000                                 l3363 0000  
                               l3451 0269                                 l3435 0000  
                               l3427 0000                                 l3419 0000  
                               l3603 00E6                                 l3523 009C  
                               l3515 0084                                 l3507 006B  
                               l3349 0000                                 l3357 0000  
                               l3453 0000                                 l3437 0266  
                               l3429 0000                                 l3461 0000  
                               l3701 0139                                 l3605 00E8  
                               l3533 00A7                                 l3295 0000  
                               l3455 0000                                 l3439 025F  
                               l3463 0000                                 l3615 00EE  
                               l3527 00A0                                 l3519 0090  
                               l3471 0000                                 l3297 0000  
                               l3457 0000                                 l3721 0158  
                               l3713 0142                                 l3705 0000  
                               l3625 00F4                                 l3537 00A9  
                               l3529 00A2                                 l3481 0000  
                               l3473 0000                                 l3299 0000  
                               l3715 0151                                 l3707 0000  
                               l3651 0000                                 l3635 00FA  
                               l3539 00AB                                 l3803 01C0  
                               l3483 0000                                 l3475 0000  
                               l3725 015A                                 l3717 0153  
                               l3661 011C                                 l3645 0103  
                               l3549 00B1                                 l3493 0000  
                               l3485 0000                                 l3477 0000  
                               l3751 0000                                 l3727 015C  
                               l3671 0125                                 l3591 00D0  
                               l3583 0000                                 l3559 00B7  
                               l3495 0050                                 l3487 0042  
                               l3479 0000                                 l3761 0187  
                               l3753 0000                                 l3737 0162  
                               l3681 012B                                 l3665 0121  
                               l3657 010C                                 l3649 0000  
                               l3593 00DD                                 l3585 0000  
                               l3569 00BD                                 l3489 0000  
                               l3771 0190                                 l3763 0189  
                               l3747 0169                                 l3691 0131  
                               l3659 011A                                 l3595 00DF  
                               l3579 00C7                                 l3499 005E  
                               l3773 0192                                 l3669 0123  
                               l3783 0198                                 l3767 018E  
                               l3759 0172                                 l3599 00E4  
                               l3795 01A1                                 l3787 0000  
                               l3789 0000                                 l3799 01AF  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _PEIE 005E  
               ??_getAdOriginalValue 004B                                 _main 000D  
              __end_of_getAdCh4Value 0369                                 btemp 007E  
                               start 000B                    main@ucTimerDelay1 0045  
                  main@ucTimerDelay2 0046                    main@ucTimerDelay3 0047  
                  main@ucTimerDelay4 0048                                ??_ISR 0074  
         __end_of_isPermitSampleTime 0373               __end_of_getAdCh14Value 036E  
                _sampleChannelSelect 004E                                ?_main 0070  
                              _DACR0 0088                                _CLKPR 0108  
                              _T1CON 0010                      __end_of_adc_get 02FC  
                              _PBOD6 0C46                                _TMR1H 000F  
                              _TMR1L 000E                       _sampleCH4Value 0036  
              setAD_ConvertFlag@flag 0049                                _timer 007A  
                              pclath 000A                                status 0003  
                              wtemp0 007E                 __end_of_clrSampeTime 037D  
                       __end_of_main 01D1               __size_of_adc_test_init 0015  
                  __end_of_AD_Sample 0276                      ?_getAdCh14Value 0049  
                             ??_main 004E                      _sampleCH14Value 0034  
                             _ADCON0 001F                               _ADCON1 009F  
               __end_of_clock_config 0364                               _DACCON 0087  
                             _ADRESH 001E                               _ADRESL 009E  
                             _CLKPCE 0847                               i1l2240 0000  
                             i1l1505 0000                               i1l3401 0000  
                             i1l1583 02D2                               i1l3371 0000  
                             i1l1588 02EA                               i1l3373 0000  
                             i1l3383 02DC                               i1l3367 0000  
                             i1l3393 0000                               i1l3377 0000  
                             i1l3387 0000                               i1l3397 0000  
                             i1l3389 0000                     __end_of_dac_init 0378  
                             _TMR1IE 0460                               _TMR1IF 0060  
                  _getAD_ConvertFlag 01E6                    _setAD_ConvertFlag 01E8  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISA6 042E  
                             _TRISB5 0435                               _TRISA7 042F  
                             _TRISB7 0437                   ?_getAD_ConvertFlag 0070  
                 ?_setAD_ConvertFlag 0070                     __end_of_op1_init 0342  
                   __end_of_op2_init 035C                            ??_adc_get 0072  
                ??_getAD_ConvertFlag 0049                  ??_setAD_ConvertFlag 0049  
                             clrloop 034D                               saved_w 007E  
        ?_process_AD_Converter_Value 0070                        _adc_test_init 027B  
          __end_of_getAD_ConvertFlag 01E8            __end_of_setAD_ConvertFlag 01ED  
                 __size_of_adc_start 0003                       __pcstackCOMMON 0070  
                       __pidataBANK0 0000                __end_of_timer1_config 034C  
                     ?_adc_test_init 0049     __size_of_timer1_interrupt_config 0003  
              __size_of_clrSampeTime 0002                           __pbssBANK0 0020  
       __size_ofi1_setAD_ConvertFlag 0003                           adc_get@val 0072  
                         __pmaintext 000D                           __pintentry 0004  
                          ?_dac_init 0070                __size_of_clock_config 0008  
                            _OP1CON0 001B                              _OP1CON1 001C  
                            _OP1CON2 001D                              _OP2CON0 009B  
                            _OP2CON1 009C                              _OP2CON2 009D  
                       _clrSampeTime 037B                    __end_of_adc_start 0293  
                          ?_op1_init 0070                            ?_op2_init 0070  
                 _isPermitSampleTime 036E               _buffer_Sample_AD_Value 0020  
                 _adc_original_value 002C           __size_of_getAD_ConvertFlag 0002  
         __size_of_setAD_ConvertFlag 0005          __size_of_getAdOriginalValue 0005  
                ?_isPermitSampleTime 0070                           _uiBigTimer 0076  
                   ??_getAdCh14Value 004B                         _clock_config 035C  
                            _adc_get 02F1                  _multiFilterMaxValue 002E  
                _multiFilterMinValue 0030                 ??_isPermitSampleTime 0049  
                         ??_dac_init 0049                            _AD_Sample 01ED  
                       __size_of_ISR 0035               __size_of_getAdCh4Value 0005  
                    ??_adc_test_init 004A                           ??_op1_init 0049  
                         ??_op2_init 0049                  _multiFilterSumValue 0032  
               end_of_initialization 030C                     main@ucLoaderStep 003F  
                         ?_AD_Sample 0070                   main@ucChannel4Type 003E  
                   _adc_convert_flag 0079              _timer1_interrupt_config 0378  
                     AD_Sample@index 004D                        _getAdCh4Value 0364  
                   main@ucTimerDelay 0044                     main@ucTimerCount 003A  
                i1_setAD_ConvertFlag 02FC                  start_initialization 02FF  
                        __end_of_ISR 02F1                 ?i1_setAD_ConvertFlag 0070  
                     ?_getAdCh4Value 0049           main@AD_sample_process_step 003D  
                        __pdataBANK0 004E                          ??_AD_Sample 004B  
          ??_timer1_interrupt_config 0049                          __pbssCOMMON 0076  
                  __size_of_dac_init 0005                        __pcstackBANK0 0049  
                          _adc_start 0290                    __size_of_op1_init 000B  
                  __size_of_op2_init 0008                ??i1_setAD_ConvertFlag 0070  
             __size_of_timer1_config 000A                            __ptext420 0369  
                          __ptext421 037B                            __ptext430 035C  
                          __ptext422 036E                            __ptext414 01D1  
                          __ptext431 02BC                            __ptext423 0290  
                          __ptext415 01ED                            __ptext432 02FC  
                          __ptext424 0354                            __ptext416 0276  
                          __ptext433 02F1                            __ptext425 0337  
                          __ptext417 01E8                            __ptext434 0000  
                          __ptext426 0373                            __ptext418 01E6  
                          __ptext427 027B                            __ptext419 0364  
                          __ptext428 0378                            __ptext429 0342  
                           ?_adc_get 0070                            __pswtext1 030F  
                          __pswtext2 031D                            __pswtext3 032B  
                    ISR@ucTimer1sCnt 0078           __end_of_getAdOriginalValue 027B  
                         ?_adc_start 0070                      ??_getAdCh4Value 004B  
                  interrupt_function 0004      __end_of_timer1_interrupt_config 037B  
               adc_test_init@channel 004B          __size_of_isPermitSampleTime 0005  
                       _uiSmallTimer 0038                __end_of_adc_test_init 0290  
                      _timer1_config 0342         ??_process_AD_Converter_Value 004E  
                   __size_of_adc_get 000B  __size_of_process_AD_Converter_Value 0015  
                           _dac_init 0373              __size_of_getAdCh14Value 0005  
                     ?_timer1_config 0070                             _op1_init 0337  
                           _op2_init 0354                          ??_adc_start 0049  
                      __size_of_main 01C4                             clear_ram 034C  
                      ?_clrSampeTime 0070                          _sampleTimes 003C  
                           intlevel1 0000                    main@ucLoaderStep1 0040  
                  main@ucLoaderStep2 0041                    main@ucLoaderStep3 0042  
                  main@ucLoaderStep4 0043                        ?_clock_config 0070  
            i1setAD_ConvertFlag@flag 0070                       ??_clrSampeTime 0049  
                    ??_timer1_config 0049          __end_ofi1_setAD_ConvertFlag 02FF  
 __end_of_process_AD_Converter_Value 01E6           _process_AD_Converter_Value 01D1  
                   adc_test_init@ref 0049                   _getAdOriginalValue 0276  
