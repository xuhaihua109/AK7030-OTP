

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Jun 02 08:34:34 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	swtext2,local,class=CONST,delta=2
    16                           	psect	swtext3,local,class=CONST,delta=2
    17                           	psect	text414,local,class=CODE,delta=2
    18                           	psect	text419,local,class=CODE,delta=2
    19                           	psect	text420,local,class=CODE,delta=2
    20                           	psect	text421,local,class=CODE,delta=2
    21                           	psect	text422,local,class=CODE,delta=2
    22                           	psect	text424,local,class=CODE,delta=2
    23                           	psect	text425,local,class=CODE,delta=2
    24                           	psect	text426,local,class=CODE,delta=2
    25                           	psect	text428,local,class=CODE,delta=2
    26                           	psect	text429,local,class=CODE,delta=2
    27                           	psect	text430,local,class=CODE,delta=2
    28                           	psect	text431,local,class=CODE,delta=2
    29                           	psect	intentry,global,class=CODE,delta=2
    30                           	psect	text434,local,class=CODE,delta=2
    31                           	psect	pa_nodes,global,class=CODE,delta=2
    32                           	dabs	1,0x7E,2
    33  000A                     	;#
    34                           
    35                           	psect	config
    36  2000  2FFF               	dw	12287	;#
    37  2001  3FDE               	dw	16350	;#
    38  2002  3FF8               	dw	16376	;#
    39                           
    40                           	psect	idataBANK0
    41  0000                     __pidataBANK0:	
    42  001F                     _ADCON0	set	31
    43  001E                     _ADRESH	set	30
    44  001B                     _OP1CON0	set	27
    45  001C                     _OP1CON1	set	28
    46  001D                     _OP1CON2	set	29
    47  0010                     _T1CON	set	16
    48  000F                     _TMR1H	set	15
    49  000E                     _TMR1L	set	14
    50  006A                     _ADIF	set	106
    51  00F8                     _ADON	set	248
    52  005F                     _GIE	set	95
    53  00F9                     _GO	set	249
    54  0028                     _PA0	set	40
    55  0029                     _PA1	set	41
    56  002A                     _PA2	set	42
    57  002E                     _PA6	set	46
    58  0030                     _PB0	set	48
    59  0031                     _PB1	set	49
    60  005E                     _PEIE	set	94
    61  0060                     _TMR1IF	set	96
    62  009F                     _ADCON1	set	159
    63  009E                     _ADRESL	set	158
    64  0087                     _DACCON	set	135
    65  0088                     _DACR0	set	136
    66  009B                     _OP2CON0	set	155
    67  009C                     _OP2CON1	set	156
    68  009D                     _OP2CON2	set	157
    69  046A                     _ADIE	set	1130
    70  0460                     _TMR1IE	set	1120
    71  0428                     _TRISA0	set	1064
    72  0429                     _TRISA1	set	1065
    73  042A                     _TRISA2	set	1066
    74  042B                     _TRISA3	set	1067
    75  042E                     _TRISA6	set	1070
    76  042F                     _TRISA7	set	1071
    77  0431                     _TRISB1	set	1073
    78  0432                     _TRISB2	set	1074
    79  0433                     _TRISB3	set	1075
    80  0434                     _TRISB4	set	1076
    81  0435                     _TRISB5	set	1077
    82  0436                     _TRISB6	set	1078
    83  0437                     _TRISB7	set	1079
    84  0108                     _CLKPR	set	264
    85  0847                     _CLKPCE	set	2119
    86                           
    87                           	psect	cinit
    88  02F3                     start_initialization:	
    89  02F3  3020               	movlw	low __pbssBANK0
    90                           
    91                           ; Clear objects allocated to COMMON
    92  02F4  01F6               	clrf	__pbssCOMMON& (0+127)
    93  02F5  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    94  02F6  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    95  02F7  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
    96  02F8  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
    97                           
    98                           ; Clear objects allocated to BANK0
    99  02F9  1383               	bcf	3,7	;select IRP bank0
   100  02FA  0084               	movwf	4
   101  02FB  3049               	movlw	low (__pbssBANK0+41)
   102  02FC  118A  234B         	fcall	clear_ram
   103                           
   104                           ;initializer for _sampleChannelSelect
   105  02FE  300E               	movlw	14
   106  02FF  00CE               	movwf	__pdataBANK0& (0+127)
   107  0300                     end_of_initialization:	
   108                           ;End of C runtime variable initialization code
   109                           
   110  0300  0183               	clrf	3
   111  0301  118A  280D         	ljmp	_main	;jump to C main() function
   112                           
   113                           	psect	bssCOMMON
   114  0076                     __pbssCOMMON:	
   115  0076                     _uiBigTimer:	
   116  0076                     	ds	2
   117  0078                     ISR@ucTimer1sCnt:	
   118  0078                     	ds	1
   119  0079                     _adc_convert_flag:	
   120  0079                     	ds	1
   121  007A                     _timer:	
   122  007A                     	ds	1
   123                           
   124                           	psect	bssBANK0
   125  0020                     __pbssBANK0:	
   126  0020                     _buffer_Sample_AD_Value:	
   127  0020                     	ds	12
   128  002C                     _adc_original_value:	
   129  002C                     	ds	2
   130  002E                     _multiFilterMaxValue:	
   131  002E                     	ds	2
   132  0030                     _multiFilterMinValue:	
   133  0030                     	ds	2
   134  0032                     _multiFilterSumValue:	
   135  0032                     	ds	2
   136  0034                     _sampleCH14Value:	
   137  0034                     	ds	2
   138  0036                     _sampleCH4Value:	
   139  0036                     	ds	2
   140  0038                     _uiSmallTimer:	
   141  0038                     	ds	2
   142  003A                     main@ucTimerCount:	
   143  003A                     	ds	2
   144  003C                     _sampleTimes:	
   145  003C                     	ds	1
   146  003D                     main@AD_sample_process_step:	
   147  003D                     	ds	1
   148  003E                     main@ucChannel4Type:	
   149  003E                     	ds	1
   150  003F                     main@ucLoaderStep:	
   151  003F                     	ds	1
   152  0040                     main@ucLoaderStep1:	
   153  0040                     	ds	1
   154  0041                     main@ucLoaderStep2:	
   155  0041                     	ds	1
   156  0042                     main@ucLoaderStep3:	
   157  0042                     	ds	1
   158  0043                     main@ucLoaderStep4:	
   159  0043                     	ds	1
   160  0044                     main@ucTimerDelay:	
   161  0044                     	ds	1
   162  0045                     main@ucTimerDelay1:	
   163  0045                     	ds	1
   164  0046                     main@ucTimerDelay2:	
   165  0046                     	ds	1
   166  0047                     main@ucTimerDelay3:	
   167  0047                     	ds	1
   168  0048                     main@ucTimerDelay4:	
   169  0048                     	ds	1
   170                           
   171                           	psect	dataBANK0
   172  004E                     __pdataBANK0:	
   173  004E                     _sampleChannelSelect:	
   174  004E                     	ds	1
   175                           
   176                           	psect	clrtext
   177  034B                     clear_ram:	
   178                           ;	Called with FSR containing the base address, and
   179                           ;	W with the last address+1
   180                           
   181  034B  0064               	clrwdt	;clear the watchdog before getting into this loop
   182  034C                     clrloop:	
   183  034C  0180               	clrf	0	;clear RAM location pointed to by FSR
   184  034D  0A84               	incf	4,f	;increment pointer
   185  034E  0604               	xorwf	4,w	;XOR with final address
   186  034F  1903               	btfsc	3,2	;have we reached the end yet?
   187  0350  3400               	retlw	0	;all done for this memory range, return
   188  0351  0604               	xorwf	4,w	;XOR again to restore value
   189  0352  2B4C               	goto	clrloop	;do the next byte
   190                           
   191                           	psect	cstackCOMMON
   192  0070                     __pcstackCOMMON:	
   193  0070                     ?_clock_config:	
   194  0070                     ?_timer1_config:	
   195                           ; 0 bytes @ 0x0
   196                           
   197  0070                     ?_timer1_interrupt_config:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_dac_init:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ?_op1_init:	
   204                           ; 0 bytes @ 0x0
   205                           
   206  0070                     ?_op2_init:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_adc_start:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_clrSampeTime:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?_process_AD_Converter_Value:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_AD_Sample:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_main:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_setAD_ConvertFlag:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_ISR:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?i1_setAD_ConvertFlag:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ??i1_setAD_ConvertFlag:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_isPermitSampleTime:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ?_getAD_ConvertFlag:	
   240                           ; 1 bytes @ 0x0
   241                           
   242  0070                     ?_adc_get:	
   243                           ; 1 bytes @ 0x0
   244                           
   245  0070                     i1setAD_ConvertFlag@flag:	
   246                           ; 2 bytes @ 0x0
   247                           
   248                           
   249                           ; 1 bytes @ 0x0
   250  0070                     	ds	2
   251  0072                     ??_adc_get:	
   252  0072                     adc_get@val:	
   253                           ; 0 bytes @ 0x2
   254                           
   255                           
   256                           ; 2 bytes @ 0x2
   257  0072                     	ds	2
   258  0074                     ??_ISR:	
   259                           
   260                           ; 0 bytes @ 0x4
   261  0074                     	ds	2
   262                           
   263                           	psect	cstackBANK0
   264  0049                     __pcstackBANK0:	
   265  0049                     ??_clock_config:	
   266  0049                     ??_timer1_config:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0049                     ??_timer1_interrupt_config:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0049                     ?_adc_test_init:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0049                     ??_dac_init:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0049                     ??_op1_init:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0049                     ??_op2_init:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0049                     ??_adc_start:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0049                     ??_isPermitSampleTime:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0049                     ??_clrSampeTime:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0049                     ??_getAD_ConvertFlag:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0049                     ??_setAD_ConvertFlag:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0049                     ?_getAdCh14Value:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0049                     ?_getAdCh4Value:	
   303                           ; 2 bytes @ 0x0
   304                           
   305  0049                     ?_getAdOriginalValue:	
   306                           ; 2 bytes @ 0x0
   307                           
   308  0049                     setAD_ConvertFlag@flag:	
   309                           ; 2 bytes @ 0x0
   310                           
   311  0049                     adc_test_init@ref:	
   312                           ; 1 bytes @ 0x0
   313                           
   314                           
   315                           ; 1 bytes @ 0x0
   316  0049                     	ds	1
   317  004A                     ??_adc_test_init:	
   318                           
   319                           ; 0 bytes @ 0x1
   320  004A                     	ds	1
   321  004B                     ??_getAdCh14Value:	
   322  004B                     ??_getAdCh4Value:	
   323                           ; 0 bytes @ 0x2
   324                           
   325  004B                     ??_AD_Sample:	
   326                           ; 0 bytes @ 0x2
   327                           
   328  004B                     ??_getAdOriginalValue:	
   329                           ; 0 bytes @ 0x2
   330                           
   331  004B                     adc_test_init@channel:	
   332                           ; 0 bytes @ 0x2
   333                           
   334                           
   335                           ; 1 bytes @ 0x2
   336  004B                     	ds	2
   337  004D                     AD_Sample@index:	
   338                           
   339                           ; 1 bytes @ 0x4
   340  004D                     	ds	1
   341  004E                     ??_process_AD_Converter_Value:	
   342  004E                     ??_main:	
   343                           ; 0 bytes @ 0x5
   344                           
   345                           
   346                           	psect	maintext
   347  000D                     __pmaintext:	
   348                           ; 0 bytes @ 0x5
   349 ;;Data sizes: Strings 0, constant 0, data 1, bss 46, persistent 0 stack 0
   350 ;;Auto spaces:   Size  Autos    Used
   351 ;; COMMON          14      6      11
   352 ;; BANK0           80      5      47
   353 ;; BANK1           80      0       0
   354 ;; BANK3           96      0       0
   355 ;; BANK2           96      0       0
   356 ;;
   357 ;; Pointer list with targets:
   358 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   359 ;;
   360 ;; ?_getAdCh14Value	unsigned int  size(1) Largest target is 0
   361 ;;
   362 ;; ?_getAdCh4Value	unsigned int  size(1) Largest target is 0
   363 ;;
   364 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   365 ;;
   366 ;;
   367 ;; Critical Paths under _main in COMMON
   368 ;;
   369 ;;   None.
   370 ;;
   371 ;; Critical Paths under _ISR in COMMON
   372 ;;
   373 ;;   _ISR->_adc_get
   374 ;;
   375 ;; Critical Paths under _main in BANK0
   376 ;;
   377 ;;   _process_AD_Converter_Value->_AD_Sample
   378 ;;   _AD_Sample->_getAdOriginalValue
   379 ;;
   380 ;; Critical Paths under _ISR in BANK0
   381 ;;
   382 ;;   None.
   383 ;;
   384 ;; Critical Paths under _main in BANK1
   385 ;;
   386 ;;   None.
   387 ;;
   388 ;; Critical Paths under _ISR in BANK1
   389 ;;
   390 ;;   None.
   391 ;;
   392 ;; Critical Paths under _main in BANK3
   393 ;;
   394 ;;   None.
   395 ;;
   396 ;; Critical Paths under _ISR in BANK3
   397 ;;
   398 ;;   None.
   399 ;;
   400 ;; Critical Paths under _main in BANK2
   401 ;;
   402 ;;   None.
   403 ;;
   404 ;; Critical Paths under _ISR in BANK2
   405 ;;
   406 ;;   None.
   407 ;;
   408 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   409 ;;
   410 ;;
   411 ;;Call Graph Tables:
   412 ;;
   413 ;; ---------------------------------------------------------------------------------
   414 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   415 ;; ---------------------------------------------------------------------------------
   416 ;; (0) _main                                                 0     0      0     178
   417 ;;                       _clock_config
   418 ;;                      _timer1_config
   419 ;;            _timer1_interrupt_config
   420 ;;                      _adc_test_init
   421 ;;                           _dac_init
   422 ;;                           _op1_init
   423 ;;                           _op2_init
   424 ;;                          _adc_start
   425 ;;                 _isPermitSampleTime
   426 ;;                       _clrSampeTime
   427 ;;         _process_AD_Converter_Value
   428 ;;                     _getAdCh14Value
   429 ;;                      _getAdCh4Value
   430 ;; ---------------------------------------------------------------------------------
   431 ;; (1) _process_AD_Converter_Value                           0     0      0     134
   432 ;;                  _getAD_ConvertFlag
   433 ;;                  _setAD_ConvertFlag
   434 ;;                          _AD_Sample
   435 ;;                      _adc_test_init
   436 ;;                          _adc_start
   437 ;; ---------------------------------------------------------------------------------
   438 ;; (2) _AD_Sample                                            3     3      0      68
   439 ;;                                              2 BANK0      3     3      0
   440 ;;                 _getAdOriginalValue
   441 ;; ---------------------------------------------------------------------------------
   442 ;; (3) _getAdOriginalValue                                   2     0      2       0
   443 ;;                                              0 BANK0      2     0      2
   444 ;; ---------------------------------------------------------------------------------
   445 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   446 ;;                                              0 BANK0      1     1      0
   447 ;; ---------------------------------------------------------------------------------
   448 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   449 ;; ---------------------------------------------------------------------------------
   450 ;; (1) _getAdCh4Value                                        2     0      2       0
   451 ;;                                              0 BANK0      2     0      2
   452 ;; ---------------------------------------------------------------------------------
   453 ;; (1) _getAdCh14Value                                       2     0      2       0
   454 ;;                                              0 BANK0      2     0      2
   455 ;; ---------------------------------------------------------------------------------
   456 ;; (1) _clrSampeTime                                         0     0      0       0
   457 ;; ---------------------------------------------------------------------------------
   458 ;; (1) _isPermitSampleTime                                   0     0      0       0
   459 ;; ---------------------------------------------------------------------------------
   460 ;; (2) _adc_start                                            0     0      0       0
   461 ;; ---------------------------------------------------------------------------------
   462 ;; (1) _op2_init                                             0     0      0       0
   463 ;; ---------------------------------------------------------------------------------
   464 ;; (1) _op1_init                                             0     0      0       0
   465 ;; ---------------------------------------------------------------------------------
   466 ;; (1) _dac_init                                             0     0      0       0
   467 ;; ---------------------------------------------------------------------------------
   468 ;; (2) _adc_test_init                                        3     2      1      44
   469 ;;                                              0 BANK0      3     2      1
   470 ;; ---------------------------------------------------------------------------------
   471 ;; (1) _timer1_interrupt_config                              0     0      0       0
   472 ;; ---------------------------------------------------------------------------------
   473 ;; (1) _timer1_config                                        0     0      0       0
   474 ;; ---------------------------------------------------------------------------------
   475 ;; (1) _clock_config                                         0     0      0       0
   476 ;; ---------------------------------------------------------------------------------
   477 ;; Estimated maximum stack depth 3
   478 ;; ---------------------------------------------------------------------------------
   479 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   480 ;; ---------------------------------------------------------------------------------
   481 ;; (4) _ISR                                                  2     2      0      97
   482 ;;                                              4 COMMON     2     2      0
   483 ;;                i1_setAD_ConvertFlag
   484 ;;                            _adc_get
   485 ;; ---------------------------------------------------------------------------------
   486 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   487 ;;                                              0 COMMON     1     1      0
   488 ;; ---------------------------------------------------------------------------------
   489 ;; (5) _adc_get                                              4     2      2      24
   490 ;;                                              0 COMMON     4     2      2
   491 ;; ---------------------------------------------------------------------------------
   492 ;; Estimated maximum stack depth 5
   493 ;; ---------------------------------------------------------------------------------
   494 ;; Call Graph Graphs:
   495 ;; _main (ROOT)
   496 ;;   _clock_config
   497 ;;   _timer1_config
   498 ;;   _timer1_interrupt_config
   499 ;;   _adc_test_init
   500 ;;   _dac_init
   501 ;;   _op1_init
   502 ;;   _op2_init
   503 ;;   _adc_start
   504 ;;   _isPermitSampleTime
   505 ;;   _clrSampeTime
   506 ;;   _process_AD_Converter_Value
   507 ;;     _getAD_ConvertFlag
   508 ;;     _setAD_ConvertFlag
   509 ;;     _AD_Sample
   510 ;;       _getAdOriginalValue
   511 ;;     _adc_test_init
   512 ;;     _adc_start
   513 ;;   _getAdCh14Value
   514 ;;   _getAdCh4Value
   515 ;;
   516 ;; _ISR (ROOT)
   517 ;;   i1_setAD_ConvertFlag
   518 ;;   _adc_get
   519 ;;
   520 ;; Address spaces:
   521 ;;Name               Size   Autos  Total    Cost      Usage
   522 ;;BANK3               60      0       0      10        0.0%
   523 ;;BITBANK3            60      0       0       9        0.0%
   524 ;;SFR3                 0      0       0       4        0.0%
   525 ;;BITSFR3              0      0       0       4        0.0%
   526 ;;BANK2               60      0       0      12        0.0%
   527 ;;BITBANK2            60      0       0      11        0.0%
   528 ;;SFR2                 0      0       0       5        0.0%
   529 ;;BITSFR2              0      0       0       5        0.0%
   530 ;;SFR1                 0      0       0       2        0.0%
   531 ;;BITSFR1              0      0       0       2        0.0%
   532 ;;BANK1               50      0       0       8        0.0%
   533 ;;BITBANK1            50      0       0       7        0.0%
   534 ;;CODE                 0      0       0       0        0.0%
   535 ;;DATA                 0      0      41       6        0.0%
   536 ;;ABS                  0      0      3A       3        0.0%
   537 ;;NULL                 0      0       0       0        0.0%
   538 ;;STACK                0      0       7       2        0.0%
   539 ;;BANK0               50      5      2F       5       58.8%
   540 ;;BITBANK0            50      0       0       4        0.0%
   541 ;;SFR0                 0      0       0       1        0.0%
   542 ;;BITSFR0              0      0       0       1        0.0%
   543 ;;COMMON               E      6       B       1       78.6%
   544 ;;BITCOMMON            E      0       0       0        0.0%
   545                           
   546                           
   547 ;; *************** function _main *****************
   548 ;; Defined at:
   549 ;;		line 84 in file "C:\test__190531\AK7030-OTP\main.c"
   550 ;; Parameters:    Size  Location     Type
   551 ;;		None
   552 ;; Auto vars:     Size  Location     Type
   553 ;;		None
   554 ;; Return value:  Size  Location     Type
   555 ;;		None               void
   556 ;; Registers used:
   557 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   558 ;; Tracked objects:
   559 ;;		On entry : 17F/0
   560 ;;		On exit  : 60/0
   561 ;;		Unchanged: FFE00/0
   562 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   563 ;;      Params:         0       0       0       0       0
   564 ;;      Locals:         0       0       0       0       0
   565 ;;      Temps:          0       0       0       0       0
   566 ;;      Totals:         0       0       0       0       0
   567 ;;Total ram usage:        0 bytes
   568 ;; Hardware stack levels required when called:    5
   569 ;; This function calls:
   570 ;;		_clock_config
   571 ;;		_timer1_config
   572 ;;		_timer1_interrupt_config
   573 ;;		_adc_test_init
   574 ;;		_dac_init
   575 ;;		_op1_init
   576 ;;		_op2_init
   577 ;;		_adc_start
   578 ;;		_isPermitSampleTime
   579 ;;		_clrSampeTime
   580 ;;		_process_AD_Converter_Value
   581 ;;		_getAdCh14Value
   582 ;;		_getAdCh4Value
   583 ;; This function is called by:
   584 ;;		Startup code after reset
   585 ;; This function uses a non-reentrant model
   586 ;;
   587  000D                     _main:	
   588                           
   589                           ;main.c: 85: enum step
   590                           ;main.c: 86: {
   591                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   592                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   593                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   594                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   595                           ;main.c: 91: SET_PA2_VALUE,
   596                           ;main.c: 92: ADC1_VALUE_MEET_CONDITION,
   597                           ;main.c: 93: PROCESS_AD_VALUE,
   598                           ;main.c: 94: WAIT_SET_TIME_FINISHED,
   599                           ;main.c: 95: SET_TIME_BE_FINISHED,
   600                           ;main.c: 96: CHECKING_PULL_OUT_BATTERY,
   601                           ;main.c: 97: CHECKING_INSTALLED_BATTERY,
   602                           ;main.c: 98: };
   603                           ;main.c: 100: enum workTimerType
   604                           ;main.c: 101: {
   605                           
   606                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   607  000D  1683               	bsf	3,5	;RP0=1, select bank1
   608  000E  1005               	bcf	5,0
   609                           
   610                           ;main.c: 119: TRISA1 = 0;
   611  000F  1085               	bcf	5,1
   612                           
   613                           ;main.c: 120: TRISA3 = 0;
   614  0010  1185               	bcf	5,3
   615                           
   616                           ;main.c: 121: TRISA2 = 0;
   617  0011  1105               	bcf	5,2
   618                           
   619                           ;main.c: 122: TRISA6 = 0;
   620  0012  1305               	bcf	5,6
   621                           
   622                           ;main.c: 123: PA2 = 1;
   623  0013  1283               	bcf	3,5	;RP0=0, select bank0
   624  0014  1505               	bsf	5,2
   625                           
   626                           ;main.c: 124: PA0 = 1;
   627  0015  1405               	bsf	5,0
   628                           
   629                           ;main.c: 126: TRISB2 = 1;
   630  0016  1683               	bsf	3,5	;RP0=1, select bank1
   631  0017  1506               	bsf	6,2
   632                           
   633                           ;main.c: 128: TRISB1 = 1;
   634  0018  1486               	bsf	6,1
   635                           
   636                           ;main.c: 129: TRISB4 = 1;
   637  0019  1606               	bsf	6,4
   638                           
   639                           ;main.c: 131: clock_config();
   640  001A  118A  2353  118A   	fcall	_clock_config
   641                           
   642                           ;main.c: 132: timer1_config();
   643  001D  118A  2341  118A   	fcall	_timer1_config
   644                           
   645                           ;main.c: 133: timer1_interrupt_config();
   646  0020  118A  236F  118A   	fcall	_timer1_interrupt_config
   647                           
   648                           ;main.c: 135: adc_test_init(14,3);
   649  0023  3003               	movlw	3
   650  0024  1283               	bcf	3,5	;RP0=0, select bank0
   651  0025  00C9               	movwf	?_adc_test_init
   652  0026  300E               	movlw	14
   653  0027  118A  226F  118A   	fcall	_adc_test_init
   654                           
   655                           ;main.c: 137: dac_init();
   656  002A  118A  236A  118A   	fcall	_dac_init
   657                           
   658                           ;main.c: 138: op1_init();
   659  002D  118A  232B  118A   	fcall	_op1_init
   660                           
   661                           ;main.c: 139: op2_init();
   662  0030  118A  2337  118A   	fcall	_op2_init
   663                           
   664                           ;main.c: 142: adc_start();
   665  0033  118A  2284  118A   	fcall	_adc_start
   666  0036                     l3489:	
   667  0036  0064               	clrwdt	;#
   668                           
   669                           ;main.c: 156: if(isPermitSampleTime())
   670  0037  118A  2365  118A   	fcall	_isPermitSampleTime
   671  003A  3A00               	xorlw	0
   672  003B  1903               	skipnz
   673  003C  2836               	goto	l3489
   674                           
   675                           ;main.c: 157: {
   676                           ;main.c: 158: clrSampeTime();
   677  003D  118A  2372  118A   	fcall	_clrSampeTime
   678                           
   679                           ;main.c: 159: process_AD_Converter_Value();
   680  0040  118A  21C5  118A   	fcall	_process_AD_Converter_Value
   681                           
   682                           ;main.c: 161: switch(AD_sample_process_step)
   683  0043  29B4               	goto	l3805
   684  0044                     l3497:	
   685                           
   686                           ;main.c: 164: {
   687                           ;main.c: 165: static unsigned ucTimerCount = 0;
   688                           ;main.c: 166: if(getAdCh14Value() > 1951)
   689  0044  118A  2360  118A   	fcall	_getAdCh14Value
   690  0047  3007               	movlw	7
   691  0048  024A               	subwf	?_getAdCh14Value+1,w
   692  0049  30A0               	movlw	160
   693  004A  1903               	skipnz
   694  004B  0249               	subwf	?_getAdCh14Value,w
   695  004C  1C03               	skipc
   696  004D  2852               	goto	l3501
   697                           
   698                           ;main.c: 167: {
   699                           ;main.c: 168: ucTimerCount++;
   700  004E  0ABA               	incf	main@ucTimerCount,f
   701  004F  1903               	skipnz
   702  0050  0ABB               	incf	main@ucTimerCount+1,f
   703                           
   704                           ;main.c: 169: }
   705  0051  2854               	goto	l3503
   706  0052                     l3501:	
   707                           
   708                           ;main.c: 170: else
   709                           ;main.c: 171: ucTimerCount = 0;
   710  0052  01BA               	clrf	main@ucTimerCount
   711  0053  01BB               	clrf	main@ucTimerCount+1
   712  0054                     l3503:	
   713                           
   714                           ;main.c: 173: if(ucTimerCount >= 10)
   715  0054  3000               	movlw	0
   716  0055  023B               	subwf	main@ucTimerCount+1,w
   717  0056  300A               	movlw	10
   718  0057  1903               	skipnz
   719  0058  023A               	subwf	main@ucTimerCount,w
   720  0059  1C03               	skipc
   721  005A  2836               	goto	l3489
   722  005B                     l3505:	
   723                           
   724                           ;main.c: 174: AD_sample_process_step++;
   725  005B  0ABD               	incf	main@AD_sample_process_step,f
   726  005C  2836               	goto	l3489
   727  005D                     l685:	
   728                           ;main.c: 177: }
   729                           ;main.c: 179: case 1:
   730                           
   731                           
   732                           ;main.c: 180: {
   733                           ;main.c: 182: PA6 = 1;
   734  005D  1705               	bsf	5,6
   735  005E  285B               	goto	l3505
   736  005F                     l3509:	
   737                           
   738                           ;main.c: 189: {
   739                           ;main.c: 191: if(getAdCh4Value() < 1911)
   740  005F  118A  235B  118A   	fcall	_getAdCh4Value
   741  0062  3007               	movlw	7
   742  0063  024A               	subwf	?_getAdCh4Value+1,w
   743  0064  3077               	movlw	119
   744  0065  1903               	skipnz
   745  0066  0249               	subwf	?_getAdCh4Value,w
   746  0067  1803               	skipnc
   747  0068  286B               	goto	l3513
   748                           
   749                           ;main.c: 192: {
   750                           ;main.c: 193: ucChannel4Type = 0;
   751  0069  01BE               	clrf	main@ucChannel4Type
   752                           
   753                           ;main.c: 195: }
   754  006A  285B               	goto	l3505
   755  006B                     l3513:	
   756                           
   757                           ;main.c: 196: else if(getAdCh4Value() < 2067)
   758  006B  118A  235B  118A   	fcall	_getAdCh4Value
   759  006E  3008               	movlw	8
   760  006F  024A               	subwf	?_getAdCh4Value+1,w
   761  0070  3013               	movlw	19
   762  0071  1903               	skipnz
   763  0072  0249               	subwf	?_getAdCh4Value,w
   764  0073  1803               	skipnc
   765  0074  2878               	goto	l3517
   766                           
   767                           ;main.c: 197: {
   768                           ;main.c: 198: ucChannel4Type = 1;
   769  0075  01BE               	clrf	main@ucChannel4Type
   770  0076  0ABE               	incf	main@ucChannel4Type,f
   771                           
   772                           ;main.c: 199: }
   773  0077  285B               	goto	l3505
   774  0078                     l3517:	
   775                           
   776                           ;main.c: 200: else if(getAdCh4Value() < 2204)
   777  0078  118A  235B  118A   	fcall	_getAdCh4Value
   778  007B  3008               	movlw	8
   779  007C  024A               	subwf	?_getAdCh4Value+1,w
   780  007D  309C               	movlw	156
   781  007E  1903               	skipnz
   782  007F  0249               	subwf	?_getAdCh4Value,w
   783  0080  1803               	skipnc
   784  0081  2884               	goto	l3521
   785                           
   786                           ;main.c: 201: {
   787                           ;main.c: 202: ucChannel4Type = 2;
   788  0082  3002               	movlw	2
   789  0083  2891               	goto	L2
   790  0084                     l3521:	
   791                           ;main.c: 203: }
   792                           
   793                           
   794                           ;main.c: 204: else if(getAdCh4Value() < 2340)
   795  0084  118A  235B  118A   	fcall	_getAdCh4Value
   796  0087  3009               	movlw	9
   797  0088  024A               	subwf	?_getAdCh4Value+1,w
   798  0089  3024               	movlw	36
   799  008A  1903               	skipnz
   800  008B  0249               	subwf	?_getAdCh4Value,w
   801  008C  1803               	skipnc
   802  008D  2890               	goto	l3525
   803                           
   804                           ;main.c: 205: {
   805                           ;main.c: 206: ucChannel4Type = 3;
   806  008E  3003               	movlw	3
   807  008F  2891               	goto	L2
   808  0090                     l3525:	
   809                           ;main.c: 207: }
   810                           
   811                           
   812                           ;main.c: 208: else
   813                           ;main.c: 209: {
   814                           ;main.c: 210: ucChannel4Type = 4;
   815  0090  3004               	movlw	4
   816  0091                     L2:	
   817  0091  00BE               	movwf	main@ucChannel4Type
   818  0092  285B               	goto	l3505
   819  0093                     l703:	
   820                           ;main.c: 228: {
   821                           ;main.c: 229: case 0:
   822                           
   823                           
   824                           ;main.c: 230: {
   825                           ;main.c: 231: PA2 = 1;
   826  0093  1505               	bsf	5,2
   827  0094                     l3529:	
   828                           
   829                           ;main.c: 232: ucLoaderStep++;
   830  0094  0ABF               	incf	main@ucLoaderStep,f
   831                           
   832                           ;main.c: 233: break;
   833  0095  2836               	goto	l3489
   834  0096                     l3531:	
   835                           
   836                           ;main.c: 237: {
   837                           ;main.c: 238: if(ucTimerDelay >= 5)
   838  0096  3005               	movlw	5
   839  0097  0244               	subwf	main@ucTimerDelay,w
   840  0098  1C03               	skipc
   841  0099  289D               	goto	l3539
   842                           
   843                           ;main.c: 239: {
   844                           ;main.c: 240: PA1 = 1;
   845  009A  1485               	bsf	5,1
   846  009B                     l3535:	
   847                           
   848                           ;main.c: 241: ucTimerDelay = 0;
   849  009B  01C4               	clrf	main@ucTimerDelay
   850  009C  2894               	goto	l3529
   851  009D                     l3539:	
   852                           
   853                           ;main.c: 244: else
   854                           ;main.c: 245: ucTimerDelay++;
   855  009D  0AC4               	incf	main@ucTimerDelay,f
   856  009E  2836               	goto	l3489
   857  009F                     l3541:	
   858                           
   859                           ;main.c: 250: {
   860                           ;main.c: 251: if(ucTimerDelay >= 5)
   861  009F  3005               	movlw	5
   862  00A0  0244               	subwf	main@ucTimerDelay,w
   863  00A1  1C03               	skipc
   864  00A2  289D               	goto	l3539
   865                           
   866                           ;main.c: 252: {
   867                           ;main.c: 253: PA0= 1;
   868  00A3  1405               	bsf	5,0
   869  00A4  289B               	goto	l3535
   870  00A5                     l3551:	
   871                           
   872                           ;main.c: 265: {
   873                           ;main.c: 266: if(ucTimerDelay >= 5)
   874  00A5  3005               	movlw	5
   875  00A6  0244               	subwf	main@ucTimerDelay,w
   876  00A7  1C03               	skipc
   877  00A8  289D               	goto	l3539
   878                           
   879                           ;main.c: 267: {
   880                           ;main.c: 268: PB0 = 1;
   881  00A9  1406               	bsf	6,0
   882  00AA  289B               	goto	l3535
   883  00AB                     l3561:	
   884                           
   885                           ;main.c: 278: {
   886                           ;main.c: 279: if(ucTimerDelay >= 5)
   887  00AB  3005               	movlw	5
   888  00AC  0244               	subwf	main@ucTimerDelay,w
   889  00AD  1C03               	skipc
   890  00AE  289D               	goto	l3539
   891                           
   892                           ;main.c: 280: {
   893                           ;main.c: 281: PB1 = 1;
   894  00AF  1486               	bsf	6,1
   895  00B0  289B               	goto	l3535
   896  00B1                     l3571:	
   897                           
   898                           ;main.c: 291: {
   899                           ;main.c: 292: if(ucTimerDelay >= 5)
   900  00B1  3005               	movlw	5
   901  00B2  0244               	subwf	main@ucTimerDelay,w
   902  00B3  1C03               	skipc
   903  00B4  289D               	goto	l3539
   904                           
   905                           ;main.c: 293: {
   906                           ;main.c: 294: PA2 = 0;
   907  00B5  1105               	bcf	5,2
   908                           
   909                           ;main.c: 295: PA1 = 0;
   910  00B6  1085               	bcf	5,1
   911                           
   912                           ;main.c: 296: PA0 = 0;
   913  00B7  1005               	bcf	5,0
   914                           
   915                           ;main.c: 297: PB0 = 0;
   916  00B8  1006               	bcf	6,0
   917                           
   918                           ;main.c: 298: PB1 = 0;
   919  00B9  1086               	bcf	6,1
   920  00BA  289B               	goto	l3535
   921  00BB                     l3581:	
   922                           
   923                           ;main.c: 308: {
   924                           ;main.c: 309: if(ucTimerDelay >= 5)
   925  00BB  3005               	movlw	5
   926  00BC  0244               	subwf	main@ucTimerDelay,w
   927  00BD  1C03               	skipc
   928  00BE  289D               	goto	l3539
   929  00BF  3002               	movlw	2
   930                           
   931                           ;main.c: 310: {
   932                           ;main.c: 311: ucTimerDelay = 0;
   933  00C0  01C4               	clrf	main@ucTimerDelay
   934                           
   935                           ;main.c: 312: AD_sample_process_step = 2;
   936  00C1  00BD               	movwf	main@AD_sample_process_step
   937                           
   938                           ;main.c: 313: ucLoaderStep = 0;
   939  00C2  01BF               	clrf	main@ucLoaderStep
   940                           
   941                           ;main.c: 314: }
   942  00C3  2836               	goto	l3489
   943  00C4                     l3593:	
   944  00C4  083F               	movf	main@ucLoaderStep,w
   945                           
   946                           ; Switch size 1, requested type "space"
   947                           ; Number of cases is 7, Range of values is 0 to 6
   948                           ; switch strategies available:
   949                           ; Name         Instructions Cycles
   950                           ; direct_byte           21     7 (fixed)
   951                           ; simple_byte           22    12 (average)
   952                           ; jumptable            260     6 (fixed)
   953                           ; rangetable            11     6 (fixed)
   954                           ; spacedrange           20     9 (fixed)
   955                           ; locatedrange           7     3 (fixed)
   956                           ;	Chosen strategy is direct_byte
   957  00C5  0084               	movwf	4
   958  00C6  3007               	movlw	7
   959  00C7  0204               	subwf	4,w
   960  00C8  1803               	skipnc
   961  00C9  2836               	goto	l3489
   962  00CA  3003               	movlw	high S3987
   963  00CB  008A               	movwf	10
   964  00CC  1003               	clrc
   965  00CD  0D04               	rlf	4,w
   966  00CE  3E03               	addlw	low S3987
   967  00CF  0082               	movwf	2
   968  00D0                     l731:	
   969                           ;main.c: 333: {
   970                           ;main.c: 334: case 0:
   971                           
   972                           
   973                           ;main.c: 335: {
   974                           ;main.c: 336: PA2 = 1;
   975  00D0  1505               	bsf	5,2
   976  00D1                     l3595:	
   977                           
   978                           ;main.c: 337: ucLoaderStep1++;
   979  00D1  0AC0               	incf	main@ucLoaderStep1,f
   980                           
   981                           ;main.c: 338: break;
   982  00D2  2836               	goto	l3489
   983  00D3                     l3597:	
   984                           
   985                           ;main.c: 342: {
   986                           ;main.c: 343: if(ucTimerDelay1 >= 5)
   987  00D3  3005               	movlw	5
   988  00D4  0245               	subwf	main@ucTimerDelay1,w
   989  00D5  1C03               	skipc
   990  00D6  28DA               	goto	l3605
   991                           
   992                           ;main.c: 344: {
   993                           ;main.c: 345: PA1 = 1;
   994  00D7  1485               	bsf	5,1
   995  00D8                     l3601:	
   996                           
   997                           ;main.c: 346: ucTimerDelay1 = 0;
   998  00D8  01C5               	clrf	main@ucTimerDelay1
   999  00D9  28D1               	goto	l3595
  1000  00DA                     l3605:	
  1001                           
  1002                           ;main.c: 349: else
  1003                           ;main.c: 350: ucTimerDelay1++;
  1004  00DA  0AC5               	incf	main@ucTimerDelay1,f
  1005  00DB  2836               	goto	l3489
  1006  00DC                     l3607:	
  1007                           
  1008                           ;main.c: 355: {
  1009                           ;main.c: 356: if(ucTimerDelay1 >= 5)
  1010  00DC  3005               	movlw	5
  1011  00DD  0245               	subwf	main@ucTimerDelay1,w
  1012  00DE  1C03               	skipc
  1013  00DF  28DA               	goto	l3605
  1014                           
  1015                           ;main.c: 357: {
  1016                           ;main.c: 358: PA0 = 1;
  1017  00E0  1405               	bsf	5,0
  1018  00E1  28D8               	goto	l3601
  1019  00E2                     l3617:	
  1020                           
  1021                           ;main.c: 368: {
  1022                           ;main.c: 369: if(ucTimerDelay1 >= 5)
  1023  00E2  3005               	movlw	5
  1024  00E3  0245               	subwf	main@ucTimerDelay1,w
  1025  00E4  1C03               	skipc
  1026  00E5  28DA               	goto	l3605
  1027                           
  1028                           ;main.c: 370: {
  1029                           ;main.c: 371: PB0 = 1;
  1030  00E6  1406               	bsf	6,0
  1031  00E7  28D8               	goto	l3601
  1032  00E8                     l3627:	
  1033                           
  1034                           ;main.c: 381: {
  1035                           ;main.c: 382: if(ucTimerDelay1 >= 5)
  1036  00E8  3005               	movlw	5
  1037  00E9  0245               	subwf	main@ucTimerDelay1,w
  1038  00EA  1C03               	skipc
  1039  00EB  28DA               	goto	l3605
  1040                           
  1041                           ;main.c: 383: {
  1042                           ;main.c: 384: PB1 = 1;
  1043  00EC  1486               	bsf	6,1
  1044  00ED  28D8               	goto	l3601
  1045  00EE                     l3637:	
  1046                           
  1047                           ;main.c: 394: {
  1048                           ;main.c: 395: if(ucTimerDelay1 >= 5)
  1049  00EE  3005               	movlw	5
  1050  00EF  0245               	subwf	main@ucTimerDelay1,w
  1051  00F0  1C03               	skipc
  1052  00F1  28DA               	goto	l3605
  1053                           
  1054                           ;main.c: 396: {
  1055                           ;main.c: 397: PA1 = 0;
  1056  00F2  1085               	bcf	5,1
  1057                           
  1058                           ;main.c: 398: PA0 = 0;
  1059  00F3  1005               	bcf	5,0
  1060                           
  1061                           ;main.c: 399: PB0 = 0;
  1062  00F4  1006               	bcf	6,0
  1063                           
  1064                           ;main.c: 400: PB1 = 0;
  1065  00F5  1086               	bcf	6,1
  1066  00F6  28D8               	goto	l3601
  1067  00F7                     l3647:	
  1068                           
  1069                           ;main.c: 410: {
  1070                           ;main.c: 411: if(ucTimerDelay1 >= 5)
  1071  00F7  3005               	movlw	5
  1072  00F8  0245               	subwf	main@ucTimerDelay1,w
  1073  00F9  1C03               	skipc
  1074  00FA  28DA               	goto	l3605
  1075  00FB  3002               	movlw	2
  1076                           
  1077                           ;main.c: 412: {
  1078                           ;main.c: 413: ucTimerDelay1 = 0;
  1079  00FC  01C5               	clrf	main@ucTimerDelay1
  1080                           
  1081                           ;main.c: 414: AD_sample_process_step = 2;
  1082  00FD  00BD               	movwf	main@AD_sample_process_step
  1083                           
  1084                           ;main.c: 415: ucLoaderStep1 = 0;
  1085  00FE  01C0               	clrf	main@ucLoaderStep1
  1086                           
  1087                           ;main.c: 416: }
  1088  00FF  2836               	goto	l3489
  1089  0100                     l3659:	
  1090  0100  0840               	movf	main@ucLoaderStep1,w
  1091                           
  1092                           ; Switch size 1, requested type "space"
  1093                           ; Number of cases is 7, Range of values is 0 to 6
  1094                           ; switch strategies available:
  1095                           ; Name         Instructions Cycles
  1096                           ; direct_byte           21     7 (fixed)
  1097                           ; simple_byte           22    12 (average)
  1098                           ; jumptable            260     6 (fixed)
  1099                           ; rangetable            11     6 (fixed)
  1100                           ; spacedrange           20     9 (fixed)
  1101                           ; locatedrange           7     3 (fixed)
  1102                           ;	Chosen strategy is direct_byte
  1103  0101  0084               	movwf	4
  1104  0102  3007               	movlw	7
  1105  0103  0204               	subwf	4,w
  1106  0104  1803               	skipnc
  1107  0105  2836               	goto	l3489
  1108  0106  3003               	movlw	high S3989
  1109  0107  008A               	movwf	10
  1110  0108  1003               	clrc
  1111  0109  0D04               	rlf	4,w
  1112  010A  3E11               	addlw	low S3989
  1113  010B  0082               	movwf	2
  1114  010C                     l758:	
  1115                           ;main.c: 436: {
  1116                           ;main.c: 437: case 0:
  1117                           
  1118                           
  1119                           ;main.c: 438: {
  1120                           ;main.c: 439: PA2 = 1;
  1121  010C  1505               	bsf	5,2
  1122                           
  1123                           ;main.c: 440: PA1 = 1;
  1124  010D  1485               	bsf	5,1
  1125  010E                     l3661:	
  1126                           
  1127                           ;main.c: 441: ucLoaderStep2++;
  1128  010E  0AC1               	incf	main@ucLoaderStep2,f
  1129                           
  1130                           ;main.c: 442: break;
  1131  010F  2836               	goto	l3489
  1132  0110                     l3663:	
  1133                           
  1134                           ;main.c: 446: {
  1135                           ;main.c: 447: if(ucTimerDelay2 >= 5)
  1136  0110  3005               	movlw	5
  1137  0111  0246               	subwf	main@ucTimerDelay2,w
  1138  0112  1C03               	skipc
  1139  0113  2917               	goto	l3671
  1140                           
  1141                           ;main.c: 448: {
  1142                           ;main.c: 449: PA0 = 1;
  1143  0114  1405               	bsf	5,0
  1144  0115                     l3667:	
  1145                           
  1146                           ;main.c: 450: ucTimerDelay2 = 0;
  1147  0115  01C6               	clrf	main@ucTimerDelay2
  1148  0116  290E               	goto	l3661
  1149  0117                     l3671:	
  1150                           
  1151                           ;main.c: 453: else
  1152                           ;main.c: 454: ucTimerDelay2++;
  1153  0117  0AC6               	incf	main@ucTimerDelay2,f
  1154  0118  2836               	goto	l3489
  1155  0119                     l3673:	
  1156                           
  1157                           ;main.c: 459: {
  1158                           ;main.c: 460: if(ucTimerDelay2 >= 5)
  1159  0119  3005               	movlw	5
  1160  011A  0246               	subwf	main@ucTimerDelay2,w
  1161  011B  1C03               	skipc
  1162  011C  2917               	goto	l3671
  1163                           
  1164                           ;main.c: 461: {
  1165                           ;main.c: 462: PB0 = 1;
  1166  011D  1406               	bsf	6,0
  1167  011E  2915               	goto	l3667
  1168  011F                     l3683:	
  1169                           
  1170                           ;main.c: 472: {
  1171                           ;main.c: 473: if(ucTimerDelay2 >= 5)
  1172  011F  3005               	movlw	5
  1173  0120  0246               	subwf	main@ucTimerDelay2,w
  1174  0121  1C03               	skipc
  1175  0122  2917               	goto	l3671
  1176                           
  1177                           ;main.c: 474: {
  1178                           ;main.c: 475: PB1 = 1;
  1179  0123  1486               	bsf	6,1
  1180  0124  2915               	goto	l3667
  1181  0125                     l3693:	
  1182                           
  1183                           ;main.c: 485: {
  1184                           ;main.c: 486: if(ucTimerDelay2 >= 5)
  1185  0125  3005               	movlw	5
  1186  0126  0246               	subwf	main@ucTimerDelay2,w
  1187  0127  1C03               	skipc
  1188  0128  2917               	goto	l3671
  1189                           
  1190                           ;main.c: 487: {
  1191                           ;main.c: 489: PA0 = 0;
  1192  0129  1005               	bcf	5,0
  1193                           
  1194                           ;main.c: 490: PB0 = 0;
  1195  012A  1006               	bcf	6,0
  1196                           
  1197                           ;main.c: 491: PB1 = 0;
  1198  012B  1086               	bcf	6,1
  1199  012C  2915               	goto	l3667
  1200  012D                     l3703:	
  1201                           
  1202                           ;main.c: 501: {
  1203                           ;main.c: 502: if(ucTimerDelay2 >= 5)
  1204  012D  3005               	movlw	5
  1205  012E  0246               	subwf	main@ucTimerDelay2,w
  1206  012F  1C03               	skipc
  1207  0130  2917               	goto	l3671
  1208  0131  3002               	movlw	2
  1209                           
  1210                           ;main.c: 503: {
  1211                           ;main.c: 504: ucTimerDelay2 = 0;
  1212  0132  01C6               	clrf	main@ucTimerDelay2
  1213                           
  1214                           ;main.c: 505: AD_sample_process_step = 2;
  1215  0133  00BD               	movwf	main@AD_sample_process_step
  1216                           
  1217                           ;main.c: 506: ucLoaderStep2 = 0;
  1218  0134  01C1               	clrf	main@ucLoaderStep2
  1219                           
  1220                           ;main.c: 507: }
  1221  0135  2836               	goto	l3489
  1222  0136                     l3715:	
  1223  0136  0841               	movf	main@ucLoaderStep2,w
  1224                           
  1225                           ; Switch size 1, requested type "space"
  1226                           ; Number of cases is 6, Range of values is 0 to 5
  1227                           ; switch strategies available:
  1228                           ; Name         Instructions Cycles
  1229                           ; direct_byte           19     7 (fixed)
  1230                           ; simple_byte           19    10 (average)
  1231                           ; jumptable            260     6 (fixed)
  1232                           ; rangetable            10     6 (fixed)
  1233                           ; spacedrange           18     9 (fixed)
  1234                           ; locatedrange           6     3 (fixed)
  1235                           ;	Chosen strategy is direct_byte
  1236  0137  0084               	movwf	4
  1237  0138  3006               	movlw	6
  1238  0139  0204               	subwf	4,w
  1239  013A  1803               	skipnc
  1240  013B  2836               	goto	l3489
  1241  013C  3003               	movlw	high S3991
  1242  013D  008A               	movwf	10
  1243  013E  1003               	clrc
  1244  013F  0D04               	rlf	4,w
  1245  0140  3E1F               	addlw	low S3991
  1246  0141  0082               	movwf	2
  1247  0142                     l782:	
  1248                           ;main.c: 527: {
  1249                           ;main.c: 528: case 0:
  1250                           
  1251                           
  1252                           ;main.c: 529: {
  1253                           ;main.c: 530: PA2 = 1;
  1254  0142  1505               	bsf	5,2
  1255                           
  1256                           ;main.c: 531: PA1 = 1;
  1257  0143  1485               	bsf	5,1
  1258                           
  1259                           ;main.c: 532: PA0 = 1;
  1260  0144  1405               	bsf	5,0
  1261  0145                     l3717:	
  1262                           
  1263                           ;main.c: 533: ucLoaderStep3++;
  1264  0145  0AC2               	incf	main@ucLoaderStep3,f
  1265                           
  1266                           ;main.c: 534: break;
  1267  0146  2836               	goto	l3489
  1268  0147                     l3719:	
  1269                           
  1270                           ;main.c: 538: {
  1271                           ;main.c: 539: if(ucTimerDelay3 >= 5)
  1272  0147  3005               	movlw	5
  1273  0148  0247               	subwf	main@ucTimerDelay3,w
  1274  0149  1C03               	skipc
  1275  014A  294E               	goto	l3727
  1276                           
  1277                           ;main.c: 540: {
  1278                           ;main.c: 541: PB0 = 1;
  1279  014B  1406               	bsf	6,0
  1280  014C                     l3723:	
  1281                           
  1282                           ;main.c: 542: ucTimerDelay3 = 0;
  1283  014C  01C7               	clrf	main@ucTimerDelay3
  1284  014D  2945               	goto	l3717
  1285  014E                     l3727:	
  1286                           
  1287                           ;main.c: 545: else
  1288                           ;main.c: 546: ucTimerDelay3++;
  1289  014E  0AC7               	incf	main@ucTimerDelay3,f
  1290  014F  2836               	goto	l3489
  1291  0150                     l3729:	
  1292                           
  1293                           ;main.c: 551: {
  1294                           ;main.c: 552: if(ucTimerDelay3 >= 5)
  1295  0150  3005               	movlw	5
  1296  0151  0247               	subwf	main@ucTimerDelay3,w
  1297  0152  1C03               	skipc
  1298  0153  294E               	goto	l3727
  1299                           
  1300                           ;main.c: 553: {
  1301                           ;main.c: 554: PB1 = 1;
  1302  0154  1486               	bsf	6,1
  1303  0155  294C               	goto	l3723
  1304  0156                     l3739:	
  1305                           
  1306                           ;main.c: 565: {
  1307                           ;main.c: 566: if(ucTimerDelay3 >= 5)
  1308  0156  3005               	movlw	5
  1309  0157  0247               	subwf	main@ucTimerDelay3,w
  1310  0158  1C03               	skipc
  1311  0159  294E               	goto	l3727
  1312                           
  1313                           ;main.c: 567: {
  1314                           ;main.c: 569: PB0 = 0;
  1315  015A  1006               	bcf	6,0
  1316                           
  1317                           ;main.c: 570: PB1 = 0;
  1318  015B  1086               	bcf	6,1
  1319  015C  294C               	goto	l3723
  1320  015D                     l3749:	
  1321                           
  1322                           ;main.c: 580: {
  1323                           ;main.c: 581: if(ucTimerDelay3 >= 5)
  1324  015D  3005               	movlw	5
  1325  015E  0247               	subwf	main@ucTimerDelay3,w
  1326  015F  1C03               	skipc
  1327  0160  294E               	goto	l3727
  1328  0161  3002               	movlw	2
  1329                           
  1330                           ;main.c: 582: {
  1331                           ;main.c: 583: ucTimerDelay3 = 0;
  1332  0162  01C7               	clrf	main@ucTimerDelay3
  1333                           
  1334                           ;main.c: 584: AD_sample_process_step = 2;
  1335  0163  00BD               	movwf	main@AD_sample_process_step
  1336                           
  1337                           ;main.c: 585: ucLoaderStep3 = 0;
  1338  0164  01C2               	clrf	main@ucLoaderStep3
  1339                           
  1340                           ;main.c: 586: }
  1341  0165  2836               	goto	l3489
  1342  0166                     l3761:	
  1343  0166  0842               	movf	main@ucLoaderStep3,w
  1344                           
  1345                           ; Switch size 1, requested type "space"
  1346                           ; Number of cases is 5, Range of values is 0 to 4
  1347                           ; switch strategies available:
  1348                           ; Name         Instructions Cycles
  1349                           ; simple_byte           16     9 (average)
  1350                           ; direct_byte           17     7 (fixed)
  1351                           ; jumptable            260     6 (fixed)
  1352                           ; rangetable             9     6 (fixed)
  1353                           ; spacedrange           16     9 (fixed)
  1354                           ; locatedrange           5     3 (fixed)
  1355                           ;	Chosen strategy is simple_byte
  1356  0167  3A00               	xorlw	0	; case 0
  1357  0168  1903               	skipnz
  1358  0169  2942               	goto	l782
  1359  016A  3A01               	xorlw	1	; case 1
  1360  016B  1903               	skipnz
  1361  016C  2947               	goto	l3719
  1362  016D  3A03               	xorlw	3	; case 2
  1363  016E  1903               	skipnz
  1364  016F  2950               	goto	l3729
  1365  0170  3A01               	xorlw	1	; case 3
  1366  0171  1903               	skipnz
  1367  0172  2956               	goto	l3739
  1368  0173  3A07               	xorlw	7	; case 4
  1369  0174  1903               	skipnz
  1370  0175  295D               	goto	l3749
  1371  0176  29C4               	goto	l676
  1372  0177                     l803:	
  1373                           ;main.c: 606: {
  1374                           ;main.c: 607: case 0:
  1375                           
  1376                           
  1377                           ;main.c: 608: {
  1378                           ;main.c: 609: PA2 = 1;
  1379  0177  1505               	bsf	5,2
  1380                           
  1381                           ;main.c: 610: PA1 = 1;
  1382  0178  1485               	bsf	5,1
  1383                           
  1384                           ;main.c: 611: PA0 = 1;
  1385  0179  1405               	bsf	5,0
  1386                           
  1387                           ;main.c: 612: PB0 = 1;
  1388  017A  1406               	bsf	6,0
  1389  017B                     l3763:	
  1390                           
  1391                           ;main.c: 613: ucLoaderStep4++;
  1392  017B  0AC3               	incf	main@ucLoaderStep4,f
  1393                           
  1394                           ;main.c: 614: break;
  1395  017C  2836               	goto	l3489
  1396  017D                     l3765:	
  1397                           
  1398                           ;main.c: 618: {
  1399                           ;main.c: 619: if(ucTimerDelay4 >= 5)
  1400  017D  3005               	movlw	5
  1401  017E  0248               	subwf	main@ucTimerDelay4,w
  1402  017F  1C03               	skipc
  1403  0180  2984               	goto	l3773
  1404                           
  1405                           ;main.c: 620: {
  1406                           ;main.c: 621: PB1 = 1;
  1407  0181  1486               	bsf	6,1
  1408  0182                     l3769:	
  1409                           
  1410                           ;main.c: 622: ucTimerDelay4 = 0;
  1411  0182  01C8               	clrf	main@ucTimerDelay4
  1412  0183  297B               	goto	l3763
  1413  0184                     l3773:	
  1414                           
  1415                           ;main.c: 625: else
  1416                           ;main.c: 626: ucTimerDelay4++;
  1417  0184  0AC8               	incf	main@ucTimerDelay4,f
  1418  0185  2836               	goto	l3489
  1419  0186                     l3775:	
  1420                           
  1421                           ;main.c: 631: {
  1422                           ;main.c: 632: if(ucTimerDelay4 >= 5)
  1423  0186  3005               	movlw	5
  1424  0187  0248               	subwf	main@ucTimerDelay4,w
  1425  0188  1C03               	skipc
  1426  0189  2984               	goto	l3773
  1427                           
  1428                           ;main.c: 633: {
  1429                           ;main.c: 634: PB1 = 0;
  1430  018A  1086               	bcf	6,1
  1431  018B  2982               	goto	l3769
  1432  018C                     l3785:	
  1433                           
  1434                           ;main.c: 644: {
  1435                           ;main.c: 645: if(ucTimerDelay4 >= 5)
  1436  018C  3005               	movlw	5
  1437  018D  0248               	subwf	main@ucTimerDelay4,w
  1438  018E  1C03               	skipc
  1439  018F  2984               	goto	l3773
  1440  0190  3002               	movlw	2
  1441                           
  1442                           ;main.c: 646: {
  1443                           ;main.c: 647: ucTimerDelay4 = 0;
  1444  0191  01C8               	clrf	main@ucTimerDelay4
  1445                           
  1446                           ;main.c: 648: AD_sample_process_step = 2;
  1447  0192  00BD               	movwf	main@AD_sample_process_step
  1448                           
  1449                           ;main.c: 649: ucLoaderStep4 = 0;
  1450  0193  01C3               	clrf	main@ucLoaderStep4
  1451                           
  1452                           ;main.c: 650: }
  1453  0194  2836               	goto	l3489
  1454  0195                     l3797:	
  1455  0195  0843               	movf	main@ucLoaderStep4,w
  1456                           
  1457                           ; Switch size 1, requested type "space"
  1458                           ; Number of cases is 4, Range of values is 0 to 3
  1459                           ; switch strategies available:
  1460                           ; Name         Instructions Cycles
  1461                           ; simple_byte           13     7 (average)
  1462                           ; direct_byte           15     7 (fixed)
  1463                           ; jumptable            260     6 (fixed)
  1464                           ; rangetable             8     6 (fixed)
  1465                           ; spacedrange           14     9 (fixed)
  1466                           ; locatedrange           4     3 (fixed)
  1467                           ;	Chosen strategy is simple_byte
  1468  0196  3A00               	xorlw	0	; case 0
  1469  0197  1903               	skipnz
  1470  0198  2977               	goto	l803
  1471  0199  3A01               	xorlw	1	; case 1
  1472  019A  1903               	skipnz
  1473  019B  297D               	goto	l3765
  1474  019C  3A03               	xorlw	3	; case 2
  1475  019D  1903               	skipnz
  1476  019E  2986               	goto	l3775
  1477  019F  3A01               	xorlw	1	; case 3
  1478  01A0  1903               	skipnz
  1479  01A1  298C               	goto	l3785
  1480  01A2  29C4               	goto	l676
  1481  01A3                     l3801:	
  1482  01A3  083E               	movf	main@ucChannel4Type,w
  1483                           
  1484                           ; Switch size 1, requested type "space"
  1485                           ; Number of cases is 5, Range of values is 0 to 4
  1486                           ; switch strategies available:
  1487                           ; Name         Instructions Cycles
  1488                           ; simple_byte           16     9 (average)
  1489                           ; direct_byte           17     7 (fixed)
  1490                           ; jumptable            260     6 (fixed)
  1491                           ; rangetable             9     6 (fixed)
  1492                           ; spacedrange           16     9 (fixed)
  1493                           ; locatedrange           5     3 (fixed)
  1494                           ;	Chosen strategy is simple_byte
  1495  01A4  3A00               	xorlw	0	; case 0
  1496  01A5  1903               	skipnz
  1497  01A6  28C4               	goto	l3593
  1498  01A7  3A01               	xorlw	1	; case 1
  1499  01A8  1903               	skipnz
  1500  01A9  2900               	goto	l3659
  1501  01AA  3A03               	xorlw	3	; case 2
  1502  01AB  1903               	skipnz
  1503  01AC  2936               	goto	l3715
  1504  01AD  3A01               	xorlw	1	; case 3
  1505  01AE  1903               	skipnz
  1506  01AF  2966               	goto	l3761
  1507  01B0  3A07               	xorlw	7	; case 4
  1508  01B1  1903               	skipnz
  1509  01B2  2995               	goto	l3797
  1510  01B3  29C4               	goto	l676
  1511  01B4                     l3805:	
  1512  01B4  1283               	bcf	3,5	;RP0=0, select bank0
  1513  01B5  1303               	bcf	3,6	;RP1=0, select bank0
  1514  01B6  083D               	movf	main@AD_sample_process_step,w
  1515                           
  1516                           ; Switch size 1, requested type "space"
  1517                           ; Number of cases is 4, Range of values is 0 to 3
  1518                           ; switch strategies available:
  1519                           ; Name         Instructions Cycles
  1520                           ; simple_byte           13     7 (average)
  1521                           ; direct_byte           15     7 (fixed)
  1522                           ; jumptable            260     6 (fixed)
  1523                           ; rangetable             8     6 (fixed)
  1524                           ; spacedrange           14     9 (fixed)
  1525                           ; locatedrange           4     3 (fixed)
  1526                           ;	Chosen strategy is simple_byte
  1527  01B7  3A00               	xorlw	0	; case 0
  1528  01B8  1903               	skipnz
  1529  01B9  2844               	goto	l3497
  1530  01BA  3A01               	xorlw	1	; case 1
  1531  01BB  1903               	skipnz
  1532  01BC  285D               	goto	l685
  1533  01BD  3A03               	xorlw	3	; case 2
  1534  01BE  1903               	skipnz
  1535  01BF  285F               	goto	l3509
  1536  01C0  3A01               	xorlw	1	; case 3
  1537  01C1  1903               	skipnz
  1538  01C2  29A3               	goto	l3801
  1539  01C3  29C4               	goto	l676
  1540  01C4                     l676:	
  1541  01C4  2836               	goto	l3489
  1542  01C5                     __end_of_main:	
  1543                           
  1544                           	psect	swtext1
  1545  0303                     __pswtext1:	
  1546  0303                     S3987:	
  1547  0303  118A  2893         	ljmp	l703
  1548  0305  118A  2896         	ljmp	l3531
  1549  0307  118A  289F         	ljmp	l3541
  1550  0309  118A  28A5         	ljmp	l3551
  1551  030B  118A  28AB         	ljmp	l3561
  1552  030D  118A  28B1         	ljmp	l3571
  1553  030F  118A  28BB         	ljmp	l3581
  1554                           
  1555                           	psect	swtext2
  1556  0311                     __pswtext2:	
  1557  0311                     S3989:	
  1558  0311  118A  28D0         	ljmp	l731
  1559  0313  118A  28D3         	ljmp	l3597
  1560  0315  118A  28DC         	ljmp	l3607
  1561  0317  118A  28E2         	ljmp	l3617
  1562  0319  118A  28E8         	ljmp	l3627
  1563  031B  118A  28EE         	ljmp	l3637
  1564  031D  118A  28F7         	ljmp	l3647
  1565                           
  1566                           	psect	swtext3
  1567  031F                     __pswtext3:	
  1568  031F                     S3991:	
  1569  031F  118A  290C         	ljmp	l758
  1570  0321  118A  2910         	ljmp	l3663
  1571  0323  118A  2919         	ljmp	l3673
  1572  0325  118A  291F         	ljmp	l3683
  1573  0327  118A  2925         	ljmp	l3693
  1574  0329  118A  292D         	ljmp	l3703
  1575                           
  1576                           	psect	text414
  1577  01C5                     __ptext414:	
  1578 ;; =============== function _main ends ============
  1579                           
  1580                           
  1581 ;; *************** function _process_AD_Converter_Value *****************
  1582 ;; Defined at:
  1583 ;;		line 100 in file "C:\test__190531\AK7030-OTP\common.c"
  1584 ;; Parameters:    Size  Location     Type
  1585 ;;		None
  1586 ;; Auto vars:     Size  Location     Type
  1587 ;;		None
  1588 ;; Return value:  Size  Location     Type
  1589 ;;		None               void
  1590 ;; Registers used:
  1591 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1592 ;; Tracked objects:
  1593 ;;		On entry : 0/0
  1594 ;;		On exit  : 0/0
  1595 ;;		Unchanged: FFE9F/0
  1596 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1597 ;;      Params:         0       0       0       0       0
  1598 ;;      Locals:         0       0       0       0       0
  1599 ;;      Temps:          0       0       0       0       0
  1600 ;;      Totals:         0       0       0       0       0
  1601 ;;Total ram usage:        0 bytes
  1602 ;; Hardware stack levels used:    1
  1603 ;; Hardware stack levels required when called:    4
  1604 ;; This function calls:
  1605 ;;		_getAD_ConvertFlag
  1606 ;;		_setAD_ConvertFlag
  1607 ;;		_AD_Sample
  1608 ;;		_adc_test_init
  1609 ;;		_adc_start
  1610 ;; This function is called by:
  1611 ;;		_main
  1612 ;; This function uses a non-reentrant model
  1613 ;;
  1614  01C5                     _process_AD_Converter_Value:	
  1615                           
  1616                           ;common.c: 65: return adc_convert_flag;
  1617                           
  1618                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1619                           
  1620                           ;common.c: 101: if(getAD_ConvertFlag())
  1621                           
  1622                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1623  01C5  0879               	movf	_adc_convert_flag,w
  1624  01C6  3A00               	xorlw	0
  1625  01C7  1903               	skipnz
  1626  01C8  0008               	return
  1627                           
  1628                           ;common.c: 102: {
  1629                           ;common.c: 103: setAD_ConvertFlag(0);
  1630  01C9  3000               	movlw	0
  1631  01CA  21DC  118A         	fcall	_setAD_ConvertFlag
  1632                           
  1633                           ;common.c: 104: AD_Sample();
  1634  01CC  21E1  118A         	fcall	_AD_Sample
  1635                           
  1636                           ;common.c: 105: if(4 == sampleChannelSelect)
  1637  01CE  084E               	movf	_sampleChannelSelect,w
  1638  01CF  3A04               	xorlw	4
  1639                           
  1640                           ;common.c: 106: adc_test_init(4,3);
  1641  01D0  3003               	movlw	3
  1642  01D1  00C9               	movwf	?_adc_test_init
  1643  01D2  1D03               	skipz
  1644  01D3  29D6               	goto	L4
  1645  01D4  3004               	movlw	4
  1646  01D5  29D7               	goto	L3
  1647  01D6                     L4:	
  1648                           ;common.c: 107: else
  1649                           ;common.c: 108: adc_test_init(14,3);
  1650                           
  1651  01D6  300E               	movlw	14
  1652  01D7                     L3:	
  1653  01D7  226F  118A         	fcall	_adc_test_init
  1654                           
  1655                           ;common.c: 110: adc_start();
  1656  01D9  2A84               	ljmp	l3335
  1657  01DA                     __end_of_process_AD_Converter_Value:	
  1658  01DA                     __ptext418:	
  1659 ;; =============== function _setAD_ConvertFlag ends ============
  1660                           
  1661                           
  1662 ;; *************** function _getAD_ConvertFlag *****************
  1663 ;; Defined at:
  1664 ;;		line 64 in file "C:\test__190531\AK7030-OTP\common.c"
  1665 ;; Parameters:    Size  Location     Type
  1666 ;;		None
  1667 ;; Auto vars:     Size  Location     Type
  1668 ;;		None
  1669 ;; Return value:  Size  Location     Type
  1670 ;;                  1    wreg      unsigned char 
  1671 ;; Registers used:
  1672 ;;		wreg
  1673 ;; Tracked objects:
  1674 ;;		On entry : 0/0
  1675 ;;		On exit  : 0/0
  1676 ;;		Unchanged: FFFFF/0
  1677 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1678 ;;      Params:         0       0       0       0       0
  1679 ;;      Locals:         0       0       0       0       0
  1680 ;;      Temps:          0       0       0       0       0
  1681 ;;      Totals:         0       0       0       0       0
  1682 ;;Total ram usage:        0 bytes
  1683 ;; Hardware stack levels used:    1
  1684 ;; Hardware stack levels required when called:    2
  1685 ;; This function calls:
  1686 ;;		Nothing
  1687 ;; This function is called by:
  1688 ;;		_process_AD_Converter_Value
  1689 ;; This function uses a non-reentrant model
  1690 ;;
  1691  01DA                     _getAD_ConvertFlag:	
  1692                           
  1693                           ;common.c: 65: return adc_convert_flag;
  1694                           
  1695                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1696  01DA  0879               	movf	_adc_convert_flag,w
  1697  01DB  0008               	return
  1698  01DC                     __end_of_getAD_ConvertFlag:	
  1699  01DC                     __ptext417:	
  1700 ;; =============== function _getAdOriginalValue ends ============
  1701                           
  1702                           
  1703 ;; *************** function _setAD_ConvertFlag *****************
  1704 ;; Defined at:
  1705 ;;		line 70 in file "C:\test__190531\AK7030-OTP\common.c"
  1706 ;; Parameters:    Size  Location     Type
  1707 ;;  flag            1    wreg     unsigned char 
  1708 ;; Auto vars:     Size  Location     Type
  1709 ;;  flag            1    0[BANK0 ] unsigned char 
  1710 ;; Return value:  Size  Location     Type
  1711 ;;		None               void
  1712 ;; Registers used:
  1713 ;;		wreg
  1714 ;; Tracked objects:
  1715 ;;		On entry : 0/0
  1716 ;;		On exit  : 60/0
  1717 ;;		Unchanged: FFF9F/0
  1718 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1719 ;;      Params:         0       0       0       0       0
  1720 ;;      Locals:         0       1       0       0       0
  1721 ;;      Temps:          0       0       0       0       0
  1722 ;;      Totals:         0       1       0       0       0
  1723 ;;Total ram usage:        1 bytes
  1724 ;; Hardware stack levels used:    1
  1725 ;; Hardware stack levels required when called:    2
  1726 ;; This function calls:
  1727 ;;		Nothing
  1728 ;; This function is called by:
  1729 ;;		_process_AD_Converter_Value
  1730 ;; This function uses a non-reentrant model
  1731 ;;
  1732  01DC                     _setAD_ConvertFlag:	
  1733                           
  1734                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1735                           ;setAD_ConvertFlag@flag stored from wreg
  1736  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  1737  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  1738  01DE  00C9               	movwf	setAD_ConvertFlag@flag
  1739                           
  1740                           ;common.c: 71: adc_convert_flag = flag;
  1741  01DF  00F9               	movwf	_adc_convert_flag
  1742  01E0  0008               	return
  1743  01E1                     __end_of_setAD_ConvertFlag:	
  1744  01E1                     __ptext415:	
  1745 ;; =============== function _process_AD_Converter_Value ends ============
  1746                           
  1747                           
  1748 ;; *************** function _AD_Sample *****************
  1749 ;; Defined at:
  1750 ;;		line 124 in file "C:\test__190531\AK7030-OTP\common.c"
  1751 ;; Parameters:    Size  Location     Type
  1752 ;;		None
  1753 ;; Auto vars:     Size  Location     Type
  1754 ;;  index           1    4[BANK0 ] unsigned char 
  1755 ;; Return value:  Size  Location     Type
  1756 ;;		None               void
  1757 ;; Registers used:
  1758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1759 ;; Tracked objects:
  1760 ;;		On entry : 60/0
  1761 ;;		On exit  : 60/0
  1762 ;;		Unchanged: FFE9F/0
  1763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1764 ;;      Params:         0       0       0       0       0
  1765 ;;      Locals:         0       1       0       0       0
  1766 ;;      Temps:          0       2       0       0       0
  1767 ;;      Totals:         0       3       0       0       0
  1768 ;;Total ram usage:        3 bytes
  1769 ;; Hardware stack levels used:    1
  1770 ;; Hardware stack levels required when called:    3
  1771 ;; This function calls:
  1772 ;;		_getAdOriginalValue
  1773 ;; This function is called by:
  1774 ;;		_process_AD_Converter_Value
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777  01E1                     _AD_Sample:	
  1778                           
  1779                           ;common.c: 125: if(sampleTimes < 6)
  1780                           
  1781                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1782  01E1  3006               	movlw	6
  1783  01E2  023C               	subwf	_sampleTimes,w
  1784  01E3  1803               	skipnc
  1785  01E4  0008               	return
  1786                           
  1787                           ;common.c: 126: {
  1788                           ;common.c: 128: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1789  01E5  226A  118A         	fcall	_getAdOriginalValue
  1790  01E7  1003               	clrc
  1791  01E8  0D3C               	rlf	_sampleTimes,w
  1792  01E9  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1793  01EA  0084               	movwf	4
  1794  01EB  0849               	movf	?_getAdOriginalValue,w
  1795  01EC  1383               	bcf	3,7	;select IRP bank0
  1796  01ED  0080               	movwf	0
  1797  01EE  0A84               	incf	4,f
  1798  01EF  084A               	movf	?_getAdOriginalValue+1,w
  1799  01F0  0080               	movwf	0
  1800                           
  1801                           ;common.c: 130: if(sampleTimes == 0)
  1802  01F1  08BC               	movf	_sampleTimes,f
  1803  01F2  1D03               	skipz
  1804  01F3  29FC               	goto	l3413
  1805                           
  1806                           ;common.c: 131: {
  1807                           ;common.c: 132: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1808  01F4  0821               	movf	_buffer_Sample_AD_Value+1,w
  1809  01F5  00AF               	movwf	_multiFilterMaxValue+1
  1810  01F6  0820               	movf	_buffer_Sample_AD_Value,w
  1811  01F7  00AE               	movwf	_multiFilterMaxValue
  1812                           
  1813                           ;common.c: 133: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1814  01F8  0821               	movf	_buffer_Sample_AD_Value+1,w
  1815  01F9  00B1               	movwf	_multiFilterMinValue+1
  1816  01FA  0820               	movf	_buffer_Sample_AD_Value,w
  1817  01FB  00B0               	movwf	_multiFilterMinValue
  1818  01FC                     l3413:	
  1819                           
  1820                           ;common.c: 134: }
  1821                           ;common.c: 136: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1822  01FC  2295  118A         	fcall	PL3	;call to abstracted procedure
  1823  01FE  022F               	subwf	_multiFilterMaxValue+1,w
  1824  01FF  1D03               	skipz
  1825  0200  2A03               	goto	u585
  1826  0201  084B               	movf	??_AD_Sample,w
  1827  0202  022E               	subwf	_multiFilterMaxValue,w
  1828  0203                     u585:	
  1829  0203  1803               	skipnc
  1830  0204  2A0E               	goto	l1524
  1831                           
  1832                           ;common.c: 137: {
  1833                           ;common.c: 138: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1834  0205  1003               	clrc
  1835  0206  0D3C               	rlf	_sampleTimes,w
  1836  0207  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1837  0208  0084               	movwf	4
  1838  0209  0800               	movf	0,w
  1839  020A  00AE               	movwf	_multiFilterMaxValue
  1840  020B  0A84               	incf	4,f
  1841  020C  0800               	movf	0,w
  1842  020D  00AF               	movwf	_multiFilterMaxValue+1
  1843  020E                     l1524:	
  1844                           
  1845                           ;common.c: 139: }
  1846                           ;common.c: 140: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1847  020E  2295  118A         	fcall	PL3	;call to abstracted procedure
  1848  0210  0831               	movf	_multiFilterMinValue+1,w
  1849  0211  024C               	subwf	??_AD_Sample+1,w
  1850  0212  1D03               	skipz
  1851  0213  2A16               	goto	u595
  1852  0214  0830               	movf	_multiFilterMinValue,w
  1853  0215  024B               	subwf	??_AD_Sample,w
  1854  0216                     u595:	
  1855  0216  1803               	skipnc
  1856  0217  2A21               	goto	l1525
  1857                           
  1858                           ;common.c: 141: {
  1859                           ;common.c: 142: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1860  0218  1003               	clrc
  1861  0219  0D3C               	rlf	_sampleTimes,w
  1862  021A  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1863  021B  0084               	movwf	4
  1864  021C  0800               	movf	0,w
  1865  021D  00B0               	movwf	_multiFilterMinValue
  1866  021E  0A84               	incf	4,f
  1867  021F  0800               	movf	0,w
  1868  0220  00B1               	movwf	_multiFilterMinValue+1
  1869  0221                     l1525:	
  1870                           
  1871                           ;common.c: 143: }
  1872                           ;common.c: 145: multiFilterSumValue = multiFilterSumValue + buffer_Sample_AD_Value[sampl
      +                          eTimes];
  1873  0221  2295  118A         	fcall	PL3	;call to abstracted procedure
  1874  0223  084B               	movf	??_AD_Sample,w
  1875  0224  07B2               	addwf	_multiFilterSumValue,f
  1876  0225  1803               	skipnc
  1877  0226  0AB3               	incf	_multiFilterSumValue+1,f
  1878  0227  084C               	movf	??_AD_Sample+1,w
  1879  0228  07B3               	addwf	_multiFilterSumValue+1,f
  1880  0229  3006               	movlw	6
  1881                           
  1882                           ;common.c: 147: sampleTimes++;
  1883  022A  0ABC               	incf	_sampleTimes,f
  1884                           
  1885                           ;common.c: 149: if(sampleTimes >= 6)
  1886  022B  023C               	subwf	_sampleTimes,w
  1887  022C  1C03               	skipc
  1888  022D  0008               	return
  1889                           
  1890                           ;common.c: 150: {
  1891                           ;common.c: 151: sampleTimes = 0;
  1892  022E  01BC               	clrf	_sampleTimes
  1893                           
  1894                           ;common.c: 153: if(sampleChannelSelect == 14)
  1895  022F  084E               	movf	_sampleChannelSelect,w
  1896  0230  3A0E               	xorlw	14
  1897  0231  1D03               	skipz
  1898  0232  2A3C               	goto	l3433
  1899                           
  1900                           ;common.c: 154: {
  1901                           ;common.c: 156: sampleCH14Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1902  0233  0830               	movf	_multiFilterMinValue,w
  1903  0234  2287  118A         	fcall	PL2	;call to abstracted procedure
  1904  0236  229F  118A         	fcall	PL4	;call to abstracted procedure
  1905  0238  3004               	movlw	4
  1906  0239  22A9  118A         	fcall	PL5	;call to abstracted procedure
  1907                           
  1908                           ;common.c: 157: sampleChannelSelect = 4;
  1909  023B  2A5B               	goto	L5
  1910  023C                     l3433:	
  1911                           ;common.c: 158: }
  1912                           
  1913                           
  1914                           ;common.c: 159: else if(sampleChannelSelect == 4)
  1915  023C  084E               	movf	_sampleChannelSelect,w
  1916  023D  3A04               	xorlw	4
  1917  023E  1D03               	skipz
  1918  023F  2A53               	goto	l3441
  1919                           
  1920                           ;common.c: 160: {
  1921                           ;common.c: 161: sampleCH4Value = ((multiFilterSumValue - multiFilterMaxValue - multiFilt
      +                          erMinValue))>> 2;
  1922  0240  0830               	movf	_multiFilterMinValue,w
  1923  0241  2287  118A         	fcall	PL2	;call to abstracted procedure
  1924  0243  00B6               	movwf	_sampleCH4Value
  1925  0244  084C               	movf	??_AD_Sample+1,w
  1926  0245  00B7               	movwf	_sampleCH4Value+1
  1927  0246  0832               	movf	_multiFilterSumValue,w
  1928  0247  07B6               	addwf	_sampleCH4Value,f
  1929  0248  1803               	skipnc
  1930  0249  0AB7               	incf	_sampleCH4Value+1,f
  1931  024A  0833               	movf	_multiFilterSumValue+1,w
  1932  024B  07B7               	addwf	_sampleCH4Value+1,f
  1933  024C  1003               	clrc
  1934  024D  0CB7               	rrf	_sampleCH4Value+1,f
  1935  024E  0CB6               	rrf	_sampleCH4Value,f
  1936  024F  1003               	clrc
  1937  0250  0CB7               	rrf	_sampleCH4Value+1,f
  1938  0251  0CB6               	rrf	_sampleCH4Value,f
  1939                           
  1940                           ;common.c: 163: }
  1941  0252  2A5A               	goto	l3439
  1942  0253                     l3441:	
  1943                           
  1944                           ;common.c: 164: else
  1945                           ;common.c: 165: {
  1946                           ;common.c: 166: sampleCH14Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1947  0253  0830               	movf	_multiFilterMinValue,w
  1948  0254  2287  118A         	fcall	PL2	;call to abstracted procedure
  1949  0256  229F  118A         	fcall	PL4	;call to abstracted procedure
  1950  0258  22A9  118A         	fcall	PL5	;call to abstracted procedure
  1951  025A                     l3439:	
  1952                           
  1953                           ;common.c: 162: sampleChannelSelect = 14;
  1954  025A  300E               	movlw	14
  1955  025B                     L5:	
  1956  025B  00CE               	movwf	_sampleChannelSelect
  1957                           
  1958                           ;common.c: 168: }
  1959                           ;common.c: 170: for(unsigned char index = 0; index < 6;index++)
  1960  025C  01CD               	clrf	AD_Sample@index
  1961  025D                     l3453:	
  1962                           
  1963                           ;common.c: 171: buffer_Sample_AD_Value[index] = 0;
  1964  025D  1003               	clrc
  1965  025E  0D4D               	rlf	AD_Sample@index,w
  1966  025F  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1967  0260  0084               	movwf	4
  1968  0261  3006               	movlw	6
  1969  0262  0180               	clrf	0
  1970  0263  0A84               	incf	4,f
  1971  0264  0180               	clrf	0
  1972  0265  0ACD               	incf	AD_Sample@index,f
  1973  0266  024D               	subwf	AD_Sample@index,w
  1974  0267  1803               	btfsc	3,0
  1975  0268  0008               	return
  1976  0269  2A5D               	goto	l3453
  1977  026A                     __end_of_AD_Sample:	
  1978  026A                     __ptext416:	
  1979 ;; =============== function _AD_Sample ends ============
  1980                           
  1981                           
  1982 ;; *************** function _getAdOriginalValue *****************
  1983 ;; Defined at:
  1984 ;;		line 76 in file "C:\test__190531\AK7030-OTP\common.c"
  1985 ;; Parameters:    Size  Location     Type
  1986 ;;		None
  1987 ;; Auto vars:     Size  Location     Type
  1988 ;;		None
  1989 ;; Return value:  Size  Location     Type
  1990 ;;                  2    0[BANK0 ] unsigned int 
  1991 ;; Registers used:
  1992 ;;		wreg
  1993 ;; Tracked objects:
  1994 ;;		On entry : 60/0
  1995 ;;		On exit  : 60/0
  1996 ;;		Unchanged: FFF9F/0
  1997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1998 ;;      Params:         0       2       0       0       0
  1999 ;;      Locals:         0       0       0       0       0
  2000 ;;      Temps:          0       0       0       0       0
  2001 ;;      Totals:         0       2       0       0       0
  2002 ;;Total ram usage:        2 bytes
  2003 ;; Hardware stack levels used:    1
  2004 ;; Hardware stack levels required when called:    2
  2005 ;; This function calls:
  2006 ;;		Nothing
  2007 ;; This function is called by:
  2008 ;;		_AD_Sample
  2009 ;; This function uses a non-reentrant model
  2010 ;;
  2011  026A                     _getAdOriginalValue:	
  2012                           
  2013                           ;common.c: 77: return adc_original_value;
  2014                           
  2015                           ; Regs used in _getAdOriginalValue: [wreg]
  2016  026A  082D               	movf	_adc_original_value+1,w
  2017  026B  00CA               	movwf	?_getAdOriginalValue+1
  2018  026C  082C               	movf	_adc_original_value,w
  2019  026D  00C9               	movwf	?_getAdOriginalValue
  2020  026E  0008               	return
  2021  026F                     __end_of_getAdOriginalValue:	
  2022  026F                     __ptext427:	
  2023 ;; =============== function _dac_init ends ============
  2024                           
  2025                           
  2026 ;; *************** function _adc_test_init *****************
  2027 ;; Defined at:
  2028 ;;		line 85 in file "C:\test__190531\AK7030-OTP\periph.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;  channel         1    wreg     unsigned char 
  2031 ;;  ref             1    0[BANK0 ] unsigned char 
  2032 ;; Auto vars:     Size  Location     Type
  2033 ;;  channel         1    2[BANK0 ] unsigned char 
  2034 ;; Return value:  Size  Location     Type
  2035 ;;		None               void
  2036 ;; Registers used:
  2037 ;;		wreg, status,2, status,0
  2038 ;; Tracked objects:
  2039 ;;		On entry : 60/0
  2040 ;;		On exit  : 60/20
  2041 ;;		Unchanged: FFF9F/0
  2042 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2043 ;;      Params:         0       1       0       0       0
  2044 ;;      Locals:         0       1       0       0       0
  2045 ;;      Temps:          0       1       0       0       0
  2046 ;;      Totals:         0       3       0       0       0
  2047 ;;Total ram usage:        3 bytes
  2048 ;; Hardware stack levels used:    1
  2049 ;; Hardware stack levels required when called:    2
  2050 ;; This function calls:
  2051 ;;		Nothing
  2052 ;; This function is called by:
  2053 ;;		_main
  2054 ;;		_process_AD_Converter_Value
  2055 ;; This function uses a non-reentrant model
  2056 ;;
  2057  026F                     _adc_test_init:	
  2058                           
  2059                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2060                           ;adc_test_init@channel stored from wreg
  2061  026F  00CB               	movwf	adc_test_init@channel
  2062                           
  2063                           ;periph.c: 86: ADCON0 = 0x00;
  2064  0270  019F               	clrf	31	;volatile
  2065                           
  2066                           ;periph.c: 87: ADCON0|=channel<<2;
  2067  0271  00CA               	movwf	??_adc_test_init
  2068  0272  1003               	clrc
  2069  0273  0DCA               	rlf	??_adc_test_init,f
  2070  0274  1003               	clrc
  2071  0275  0D4A               	rlf	??_adc_test_init,w
  2072  0276  049F               	iorwf	31,f	;volatile
  2073                           
  2074                           ;periph.c: 88: ADCON1|=ref<<6;
  2075  0277  0849               	movf	adc_test_init@ref,w
  2076  0278  00CA               	movwf	??_adc_test_init
  2077  0279  0CCA               	rrf	??_adc_test_init,f
  2078  027A  0CCA               	rrf	??_adc_test_init,f
  2079  027B  0C4A               	rrf	??_adc_test_init,w
  2080  027C  39C0               	andlw	192
  2081  027D  1683               	bsf	3,5	;RP0=1, select bank1
  2082  027E  049F               	iorwf	31,f	;volatile
  2083                           
  2084                           ;periph.c: 89: ADON=1;
  2085  027F  1283               	bcf	3,5	;RP0=0, select bank0
  2086  0280  141F               	bsf	31,0
  2087                           
  2088                           ;periph.c: 90: ADIE=1;
  2089  0281  1683               	bsf	3,5	;RP0=1, select bank1
  2090  0282  150D               	bsf	13,2
  2091  0283  0008               	return
  2092  0284                     __end_of_adc_test_init:	
  2093  0284                     __ptext423:	
  2094 ;; =============== function _isPermitSampleTime ends ============
  2095                           
  2096                           
  2097 ;; *************** function _adc_start *****************
  2098 ;; Defined at:
  2099 ;;		line 100 in file "C:\test__190531\AK7030-OTP\periph.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;		None               void
  2106 ;; Registers used:
  2107 ;;		None
  2108 ;; Tracked objects:
  2109 ;;		On entry : 60/20
  2110 ;;		On exit  : 60/0
  2111 ;;		Unchanged: FFF9F/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2113 ;;      Params:         0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0
  2116 ;;      Totals:         0       0       0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    2
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;;		_process_AD_Converter_Value
  2125 ;; This function uses a non-reentrant model
  2126 ;;
  2127  0284                     _adc_start:	
  2128  0284                     l3335:	
  2129                           ; Regs used in _adc_start: []
  2130                           
  2131                           
  2132                           ;periph.c: 101: GO=1;
  2133  0284  1283               	bcf	3,5	;RP0=0, select bank0
  2134  0285  149F               	bsf	31,1
  2135  0286  0008               	return
  2136  0287                     __end_of_adc_start:	
  2137  0287                     PL2:	
  2138  0287  072E               	addwf	_multiFilterMaxValue,w
  2139  0288  00CB               	movwf	??_AD_Sample
  2140  0289  0831               	movf	_multiFilterMinValue+1,w
  2141  028A  1803               	skipnc
  2142  028B  0A31               	incf	_multiFilterMinValue+1,w
  2143  028C  072F               	addwf	_multiFilterMaxValue+1,w
  2144  028D  00CC               	movwf	??_AD_Sample+1
  2145  028E  09CB               	comf	??_AD_Sample,f
  2146  028F  09CC               	comf	??_AD_Sample+1,f
  2147  0290  0ACB               	incf	??_AD_Sample,f
  2148  0291  1903               	skipnz
  2149  0292  0ACC               	incf	??_AD_Sample+1,f
  2150  0293  084B               	movf	??_AD_Sample,w
  2151  0294  0008               	return
  2152  0295                     PL3:	
  2153  0295  1003               	clrc
  2154  0296  0D3C               	rlf	_sampleTimes,w
  2155  0297  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  2156  0298  0084               	movwf	4
  2157  0299  0800               	movf	0,w
  2158  029A  00CB               	movwf	??_AD_Sample
  2159  029B  0A84               	incf	4,f
  2160  029C  0800               	movf	0,w
  2161  029D  00CC               	movwf	??_AD_Sample+1
  2162  029E  0008               	return
  2163  029F                     PL4:	
  2164  029F  00B4               	movwf	_sampleCH14Value
  2165  02A0  084C               	movf	??_AD_Sample+1,w
  2166  02A1  00B5               	movwf	_sampleCH14Value+1
  2167  02A2  0832               	movf	_multiFilterSumValue,w
  2168  02A3  07B4               	addwf	_sampleCH14Value,f
  2169  02A4  1803               	skipnc
  2170  02A5  0AB5               	incf	_sampleCH14Value+1,f
  2171  02A6  0833               	movf	_multiFilterSumValue+1,w
  2172  02A7  07B5               	addwf	_sampleCH14Value+1,f
  2173  02A8  0008               	return
  2174  02A9                     PL5:	
  2175  02A9  1003               	clrc
  2176  02AA  0CB5               	rrf	_sampleCH14Value+1,f
  2177  02AB  0CB4               	rrf	_sampleCH14Value,f
  2178  02AC  1003               	clrc
  2179  02AD  0CB5               	rrf	_sampleCH14Value+1,f
  2180  02AE  0CB4               	rrf	_sampleCH14Value,f
  2181  02AF  0008               	return
  2182                           
  2183                           	psect	text419
  2184  035B                     __ptext419:	
  2185 ;; =============== function _getAD_ConvertFlag ends ============
  2186                           
  2187                           
  2188 ;; *************** function _getAdCh4Value *****************
  2189 ;; Defined at:
  2190 ;;		line 180 in file "C:\test__190531\AK7030-OTP\common.c"
  2191 ;; Parameters:    Size  Location     Type
  2192 ;;		None
  2193 ;; Auto vars:     Size  Location     Type
  2194 ;;		None
  2195 ;; Return value:  Size  Location     Type
  2196 ;;                  2    0[BANK0 ] unsigned int 
  2197 ;; Registers used:
  2198 ;;		wreg
  2199 ;; Tracked objects:
  2200 ;;		On entry : 60/0
  2201 ;;		On exit  : 60/0
  2202 ;;		Unchanged: FFF9F/0
  2203 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2204 ;;      Params:         0       2       0       0       0
  2205 ;;      Locals:         0       0       0       0       0
  2206 ;;      Temps:          0       0       0       0       0
  2207 ;;      Totals:         0       2       0       0       0
  2208 ;;Total ram usage:        2 bytes
  2209 ;; Hardware stack levels used:    1
  2210 ;; Hardware stack levels required when called:    2
  2211 ;; This function calls:
  2212 ;;		Nothing
  2213 ;; This function is called by:
  2214 ;;		_main
  2215 ;; This function uses a non-reentrant model
  2216 ;;
  2217  035B                     _getAdCh4Value:	
  2218                           
  2219                           ;common.c: 181: return sampleCH4Value;
  2220                           
  2221                           ; Regs used in _getAdCh4Value: [wreg]
  2222  035B  0837               	movf	_sampleCH4Value+1,w
  2223  035C  00CA               	movwf	?_getAdCh4Value+1
  2224  035D  0836               	movf	_sampleCH4Value,w
  2225  035E  00C9               	movwf	?_getAdCh4Value
  2226  035F  0008               	return
  2227  0360                     __end_of_getAdCh4Value:	
  2228                           
  2229                           	psect	text420
  2230  0360                     __ptext420:	
  2231 ;; =============== function _getAdCh4Value ends ============
  2232                           
  2233                           
  2234 ;; *************** function _getAdCh14Value *****************
  2235 ;; Defined at:
  2236 ;;		line 186 in file "C:\test__190531\AK7030-OTP\common.c"
  2237 ;; Parameters:    Size  Location     Type
  2238 ;;		None
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;		None
  2241 ;; Return value:  Size  Location     Type
  2242 ;;                  2    0[BANK0 ] unsigned int 
  2243 ;; Registers used:
  2244 ;;		wreg
  2245 ;; Tracked objects:
  2246 ;;		On entry : 60/0
  2247 ;;		On exit  : 60/0
  2248 ;;		Unchanged: FFF9F/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         0       2       0       0       0
  2251 ;;      Locals:         0       0       0       0       0
  2252 ;;      Temps:          0       0       0       0       0
  2253 ;;      Totals:         0       2       0       0       0
  2254 ;;Total ram usage:        2 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    2
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263  0360                     _getAdCh14Value:	
  2264                           
  2265                           ;common.c: 187: return sampleCH14Value;
  2266                           
  2267                           ; Regs used in _getAdCh14Value: [wreg]
  2268  0360  0835               	movf	_sampleCH14Value+1,w
  2269  0361  00CA               	movwf	?_getAdCh14Value+1
  2270  0362  0834               	movf	_sampleCH14Value,w
  2271  0363  00C9               	movwf	?_getAdCh14Value
  2272  0364  0008               	return
  2273  0365                     __end_of_getAdCh14Value:	
  2274                           
  2275                           	psect	text421
  2276  0372                     __ptext421:	
  2277 ;; =============== function _getAdCh14Value ends ============
  2278                           
  2279                           
  2280 ;; *************** function _clrSampeTime *****************
  2281 ;; Defined at:
  2282 ;;		line 254 in file "C:\test__190531\AK7030-OTP\common.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		status,2
  2291 ;; Tracked objects:
  2292 ;;		On entry : 0/0
  2293 ;;		On exit  : 0/0
  2294 ;;		Unchanged: FFFFF/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0
  2299 ;;      Totals:         0       0       0       0       0
  2300 ;;Total ram usage:        0 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309  0372                     _clrSampeTime:	
  2310                           
  2311                           ;common.c: 255: timer.timer10msStopWatch = 0;
  2312                           
  2313                           ; Regs used in _clrSampeTime: [status,2]
  2314  0372  01FA               	clrf	_timer
  2315  0373  0008               	return
  2316  0374                     __end_of_clrSampeTime:	
  2317                           
  2318                           	psect	text422
  2319  0365                     __ptext422:	
  2320 ;; =============== function _clrSampeTime ends ============
  2321                           
  2322                           
  2323 ;; *************** function _isPermitSampleTime *****************
  2324 ;; Defined at:
  2325 ;;		line 244 in file "C:\test__190531\AK7030-OTP\common.c"
  2326 ;; Parameters:    Size  Location     Type
  2327 ;;		None
  2328 ;; Auto vars:     Size  Location     Type
  2329 ;;		None
  2330 ;; Return value:  Size  Location     Type
  2331 ;;                  1    wreg      unsigned char 
  2332 ;; Registers used:
  2333 ;;		wreg
  2334 ;; Tracked objects:
  2335 ;;		On entry : 0/0
  2336 ;;		On exit  : 0/0
  2337 ;;		Unchanged: FFFFF/0
  2338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2339 ;;      Params:         0       0       0       0       0
  2340 ;;      Locals:         0       0       0       0       0
  2341 ;;      Temps:          0       0       0       0       0
  2342 ;;      Totals:         0       0       0       0       0
  2343 ;;Total ram usage:        0 bytes
  2344 ;; Hardware stack levels used:    1
  2345 ;; Hardware stack levels required when called:    2
  2346 ;; This function calls:
  2347 ;;		Nothing
  2348 ;; This function is called by:
  2349 ;;		_main
  2350 ;; This function uses a non-reentrant model
  2351 ;;
  2352  0365                     _isPermitSampleTime:	
  2353                           
  2354                           ;common.c: 245: if(timer.timer10msStopWatch > 10)
  2355                           
  2356                           ; Regs used in _isPermitSampleTime: [wreg]
  2357  0365  300B               	movlw	11
  2358  0366  027A               	subwf	_timer,w
  2359  0367  1803               	btfsc	3,0
  2360                           
  2361                           ;common.c: 246: {
  2362                           ;common.c: 247: return 1;
  2363  0368  3401               	retlw	1
  2364                           
  2365                           ;common.c: 249: else
  2366                           ;common.c: 250: return 0;
  2367  0369  3400               	retlw	0
  2368  036A                     __end_of_isPermitSampleTime:	
  2369                           
  2370                           	psect	text424
  2371  0337                     __ptext424:	
  2372 ;; =============== function _adc_start ends ============
  2373                           
  2374                           
  2375 ;; *************** function _op2_init *****************
  2376 ;; Defined at:
  2377 ;;		line 45 in file "C:\test__190531\AK7030-OTP\periph.c"
  2378 ;; Parameters:    Size  Location     Type
  2379 ;;		None
  2380 ;; Auto vars:     Size  Location     Type
  2381 ;;		None
  2382 ;; Return value:  Size  Location     Type
  2383 ;;		None               void
  2384 ;; Registers used:
  2385 ;;		wreg
  2386 ;; Tracked objects:
  2387 ;;		On entry : 17F/20
  2388 ;;		On exit  : 17F/20
  2389 ;;		Unchanged: FFE80/0
  2390 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2391 ;;      Params:         0       0       0       0       0
  2392 ;;      Locals:         0       0       0       0       0
  2393 ;;      Temps:          0       0       0       0       0
  2394 ;;      Totals:         0       0       0       0       0
  2395 ;;Total ram usage:        0 bytes
  2396 ;; Hardware stack levels used:    1
  2397 ;; Hardware stack levels required when called:    2
  2398 ;; This function calls:
  2399 ;;		Nothing
  2400 ;; This function is called by:
  2401 ;;		_main
  2402 ;; This function uses a non-reentrant model
  2403 ;;
  2404  0337                     _op2_init:	
  2405                           
  2406                           ;periph.c: 52: OP2CON1=0x10;
  2407                           
  2408                           ; Regs used in _op2_init: [wreg]
  2409  0337  3010               	movlw	16
  2410  0338  009C               	movwf	28	;volatile
  2411                           
  2412                           ;periph.c: 54: OP2CON2=0x90;
  2413  0339  3090               	movlw	144
  2414  033A  009D               	movwf	29	;volatile
  2415                           
  2416                           ;periph.c: 55: OP2CON0=0x80;
  2417  033B  3080               	movlw	128
  2418  033C  009B               	movwf	27	;volatile
  2419                           
  2420                           ;periph.c: 58: TRISA7=0;
  2421  033D  1385               	bcf	5,7
  2422                           
  2423                           ;periph.c: 59: TRISB6=1;
  2424  033E  1706               	bsf	6,6
  2425                           
  2426                           ;periph.c: 60: TRISB7 = 1;
  2427  033F  1786               	bsf	6,7
  2428  0340  0008               	return
  2429  0341                     __end_of_op2_init:	
  2430                           
  2431                           	psect	text425
  2432  032B                     __ptext425:	
  2433 ;; =============== function _op2_init ends ============
  2434                           
  2435                           
  2436 ;; *************** function _op1_init *****************
  2437 ;; Defined at:
  2438 ;;		line 26 in file "C:\test__190531\AK7030-OTP\periph.c"
  2439 ;; Parameters:    Size  Location     Type
  2440 ;;		None
  2441 ;; Auto vars:     Size  Location     Type
  2442 ;;		None
  2443 ;; Return value:  Size  Location     Type
  2444 ;;		None               void
  2445 ;; Registers used:
  2446 ;;		wreg
  2447 ;; Tracked objects:
  2448 ;;		On entry : 17F/20
  2449 ;;		On exit  : 17F/20
  2450 ;;		Unchanged: FFE80/0
  2451 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2452 ;;      Params:         0       0       0       0       0
  2453 ;;      Locals:         0       0       0       0       0
  2454 ;;      Temps:          0       0       0       0       0
  2455 ;;      Totals:         0       0       0       0       0
  2456 ;;Total ram usage:        0 bytes
  2457 ;; Hardware stack levels used:    1
  2458 ;; Hardware stack levels required when called:    2
  2459 ;; This function calls:
  2460 ;;		Nothing
  2461 ;; This function is called by:
  2462 ;;		_main
  2463 ;; This function uses a non-reentrant model
  2464 ;;
  2465  032B                     _op1_init:	
  2466                           
  2467                           ;periph.c: 33: OP1CON1=0x02;
  2468                           
  2469                           ; Regs used in _op1_init: [wreg]
  2470  032B  3002               	movlw	2
  2471  032C  1283               	bcf	3,5	;RP0=0, select bank0
  2472  032D  009C               	movwf	28	;volatile
  2473                           
  2474                           ;periph.c: 34: OP1CON2=0xA0;
  2475  032E  30A0               	movlw	160
  2476  032F  009D               	movwf	29	;volatile
  2477                           
  2478                           ;periph.c: 35: OP1CON0=0x80;
  2479  0330  3080               	movlw	128
  2480  0331  009B               	movwf	27	;volatile
  2481                           
  2482                           ;periph.c: 38: TRISB3=1;
  2483  0332  1683               	bsf	3,5	;RP0=1, select bank1
  2484  0333  1586               	bsf	6,3
  2485                           
  2486                           ;periph.c: 39: TRISB4=1;
  2487  0334  1606               	bsf	6,4
  2488                           
  2489                           ;periph.c: 40: TRISB5=0;
  2490  0335  1286               	bcf	6,5
  2491  0336  0008               	return
  2492  0337                     __end_of_op1_init:	
  2493                           
  2494                           	psect	text426
  2495  036A                     __ptext426:	
  2496 ;; =============== function _op1_init ends ============
  2497                           
  2498                           
  2499 ;; *************** function _dac_init *****************
  2500 ;; Defined at:
  2501 ;;		line 14 in file "C:\test__190531\AK7030-OTP\periph.c"
  2502 ;; Parameters:    Size  Location     Type
  2503 ;;		None
  2504 ;; Auto vars:     Size  Location     Type
  2505 ;;		None
  2506 ;; Return value:  Size  Location     Type
  2507 ;;		None               void
  2508 ;; Registers used:
  2509 ;;		wreg
  2510 ;; Tracked objects:
  2511 ;;		On entry : 17F/20
  2512 ;;		On exit  : 17F/20
  2513 ;;		Unchanged: FFE80/0
  2514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2515 ;;      Params:         0       0       0       0       0
  2516 ;;      Locals:         0       0       0       0       0
  2517 ;;      Temps:          0       0       0       0       0
  2518 ;;      Totals:         0       0       0       0       0
  2519 ;;Total ram usage:        0 bytes
  2520 ;; Hardware stack levels used:    1
  2521 ;; Hardware stack levels required when called:    2
  2522 ;; This function calls:
  2523 ;;		Nothing
  2524 ;; This function is called by:
  2525 ;;		_main
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528  036A                     _dac_init:	
  2529                           
  2530                           ;periph.c: 15: DACCON|=1;
  2531                           
  2532                           ; Regs used in _dac_init: [wreg]
  2533  036A  1407               	bsf	7,0	;volatile
  2534                           
  2535                           ;periph.c: 17: DACR0=0x0F;
  2536  036B  300F               	movlw	15
  2537  036C  0088               	movwf	8	;volatile
  2538                           
  2539                           ;periph.c: 18: DACCON|=(1)<<2;
  2540  036D  1507               	bsf	7,2	;volatile
  2541  036E  0008               	return
  2542  036F                     __end_of_dac_init:	
  2543                           
  2544                           	psect	text428
  2545  036F                     __ptext428:	
  2546 ;; =============== function _adc_test_init ends ============
  2547                           
  2548                           
  2549 ;; *************** function _timer1_interrupt_config *****************
  2550 ;; Defined at:
  2551 ;;		line 56 in file "C:\test__190531\AK7030-OTP\common.c"
  2552 ;; Parameters:    Size  Location     Type
  2553 ;;		None
  2554 ;; Auto vars:     Size  Location     Type
  2555 ;;		None
  2556 ;; Return value:  Size  Location     Type
  2557 ;;		None               void
  2558 ;; Registers used:
  2559 ;;		None
  2560 ;; Tracked objects:
  2561 ;;		On entry : 17F/20
  2562 ;;		On exit  : 17F/20
  2563 ;;		Unchanged: FFE80/0
  2564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2565 ;;      Params:         0       0       0       0       0
  2566 ;;      Locals:         0       0       0       0       0
  2567 ;;      Temps:          0       0       0       0       0
  2568 ;;      Totals:         0       0       0       0       0
  2569 ;;Total ram usage:        0 bytes
  2570 ;; Hardware stack levels used:    1
  2571 ;; Hardware stack levels required when called:    2
  2572 ;; This function calls:
  2573 ;;		Nothing
  2574 ;; This function is called by:
  2575 ;;		_main
  2576 ;; This function uses a non-reentrant model
  2577 ;;
  2578  036F                     _timer1_interrupt_config:	
  2579                           
  2580                           ;common.c: 57: GIE = 1;
  2581                           
  2582                           ; Regs used in _timer1_interrupt_config: []
  2583  036F  178B               	bsf	11,7
  2584                           
  2585                           ;common.c: 58: PEIE = 1;
  2586  0370  170B               	bsf	11,6
  2587  0371  0008               	return
  2588  0372                     __end_of_timer1_interrupt_config:	
  2589                           
  2590                           	psect	text429
  2591  0341                     __ptext429:	
  2592 ;; =============== function _timer1_interrupt_config ends ============
  2593                           
  2594                           
  2595 ;; *************** function _timer1_config *****************
  2596 ;; Defined at:
  2597 ;;		line 44 in file "C:\test__190531\AK7030-OTP\common.c"
  2598 ;; Parameters:    Size  Location     Type
  2599 ;;		None
  2600 ;; Auto vars:     Size  Location     Type
  2601 ;;		None
  2602 ;; Return value:  Size  Location     Type
  2603 ;;		None               void
  2604 ;; Registers used:
  2605 ;;		wreg
  2606 ;; Tracked objects:
  2607 ;;		On entry : 17F/40
  2608 ;;		On exit  : 17F/20
  2609 ;;		Unchanged: FFE80/0
  2610 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2611 ;;      Params:         0       0       0       0       0
  2612 ;;      Locals:         0       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0
  2614 ;;      Totals:         0       0       0       0       0
  2615 ;;Total ram usage:        0 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; Hardware stack levels required when called:    2
  2618 ;; This function calls:
  2619 ;;		Nothing
  2620 ;; This function is called by:
  2621 ;;		_main
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624  0341                     _timer1_config:	
  2625                           
  2626                           ;common.c: 46: TMR1H=0xCF;
  2627                           
  2628                           ; Regs used in _timer1_config: [wreg]
  2629  0341  30CF               	movlw	207
  2630  0342  1303               	bcf	3,6	;RP1=0, select bank0
  2631  0343  008F               	movwf	15	;volatile
  2632                           
  2633                           ;common.c: 47: TMR1L=0x2C;
  2634  0344  302C               	movlw	44
  2635  0345  008E               	movwf	14	;volatile
  2636                           
  2637                           ;common.c: 48: T1CON=0xE1;
  2638  0346  30E1               	movlw	225
  2639  0347  0090               	movwf	16	;volatile
  2640                           
  2641                           ;common.c: 49: TMR1IE=1;
  2642  0348  1683               	bsf	3,5	;RP0=1, select bank1
  2643  0349  140C               	bsf	12,0
  2644  034A  0008               	return
  2645  034B                     __end_of_timer1_config:	
  2646                           
  2647                           	psect	text430
  2648  0353                     __ptext430:	
  2649 ;; =============== function _timer1_config ends ============
  2650                           
  2651                           
  2652 ;; *************** function _clock_config *****************
  2653 ;; Defined at:
  2654 ;;		line 36 in file "C:\test__190531\AK7030-OTP\common.c"
  2655 ;; Parameters:    Size  Location     Type
  2656 ;;		None
  2657 ;; Auto vars:     Size  Location     Type
  2658 ;;		None
  2659 ;; Return value:  Size  Location     Type
  2660 ;;		None               void
  2661 ;; Registers used:
  2662 ;;		wreg, status,2
  2663 ;; Tracked objects:
  2664 ;;		On entry : 17F/20
  2665 ;;		On exit  : 17F/40
  2666 ;;		Unchanged: FFE80/0
  2667 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2668 ;;      Params:         0       0       0       0       0
  2669 ;;      Locals:         0       0       0       0       0
  2670 ;;      Temps:          0       0       0       0       0
  2671 ;;      Totals:         0       0       0       0       0
  2672 ;;Total ram usage:        0 bytes
  2673 ;; Hardware stack levels used:    1
  2674 ;; Hardware stack levels required when called:    2
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_main
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681  0353                     _clock_config:	
  2682                           
  2683                           ;common.c: 38: CLKPR = 0x80;
  2684                           
  2685                           ; Regs used in _clock_config: [wreg+status,2]
  2686  0353  3080               	movlw	128
  2687  0354  1283               	bcf	3,5	;RP0=0, select bank2
  2688  0355  1703               	bsf	3,6	;RP1=1, select bank2
  2689  0356  0088               	movwf	8	;volatile
  2690                           
  2691                           ;common.c: 39: CLKPR = 0x00;
  2692  0357  0188               	clrf	8	;volatile
  2693  0358                     l1486:	
  2694                           ;common.c: 40: while(CLKPCE);
  2695                           
  2696  0358  1F88               	btfss	8,7
  2697  0359  0008               	return
  2698  035A  2B58               	goto	l1486
  2699  035B                     __end_of_clock_config:	
  2700                           
  2701                           	psect	text431
  2702  02B0                     __ptext431:	
  2703 ;; =============== function _clock_config ends ============
  2704                           
  2705                           
  2706 ;; *************** function _ISR *****************
  2707 ;; Defined at:
  2708 ;;		line 259 in file "C:\test__190531\AK7030-OTP\common.c"
  2709 ;; Parameters:    Size  Location     Type
  2710 ;;		None
  2711 ;; Auto vars:     Size  Location     Type
  2712 ;;		None
  2713 ;; Return value:  Size  Location     Type
  2714 ;;		None               void
  2715 ;; Registers used:
  2716 ;;		wreg, status,2, status,0, pclath, cstack
  2717 ;; Tracked objects:
  2718 ;;		On entry : 0/0
  2719 ;;		On exit  : 40/0
  2720 ;;		Unchanged: FFF9F/0
  2721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2722 ;;      Params:         0       0       0       0       0
  2723 ;;      Locals:         0       0       0       0       0
  2724 ;;      Temps:          2       0       0       0       0
  2725 ;;      Totals:         2       0       0       0       0
  2726 ;;Total ram usage:        2 bytes
  2727 ;; Hardware stack levels used:    1
  2728 ;; Hardware stack levels required when called:    1
  2729 ;; This function calls:
  2730 ;;		i1_setAD_ConvertFlag
  2731 ;;		_adc_get
  2732 ;; This function is called by:
  2733 ;;		Interrupt level 1
  2734 ;; This function uses a non-reentrant model
  2735 ;;
  2736  02B0                     _ISR:	
  2737                           
  2738                           ;common.c: 260: static unsigned char ucTimer1sCnt = 0;
  2739                           ;common.c: 262: if(TMR1IF == 1)
  2740  02B0  1283               	bcf	3,5	;RP0=0, select bank0
  2741  02B1  1303               	bcf	3,6	;RP1=0, select bank0
  2742  02B2  1C0C               	btfss	12,0
  2743  02B3  2AD0               	goto	i1l3385
  2744  02B4  3064               	movlw	100
  2745                           
  2746                           ;common.c: 263: {
  2747                           ;common.c: 264: TMR1IF = 0 ;
  2748  02B5  100C               	bcf	12,0
  2749                           
  2750                           ;common.c: 265: timer.timer10msStopWatch++;
  2751  02B6  0AFA               	incf	_timer,f
  2752                           
  2753                           ;common.c: 266: ucTimer1sCnt++;
  2754  02B7  0AF8               	incf	ISR@ucTimer1sCnt,f
  2755                           
  2756                           ;common.c: 268: if(ucTimer1sCnt >= 100)
  2757  02B8  0278               	subwf	ISR@ucTimer1sCnt,w
  2758  02B9  1C03               	skipc
  2759  02BA  2AD0               	goto	i1l3385
  2760                           
  2761                           ;common.c: 269: {
  2762                           ;common.c: 270: ucTimer1sCnt = 0;
  2763  02BB  01F8               	clrf	ISR@ucTimer1sCnt
  2764                           
  2765                           ;common.c: 271: if(uiBigTimer > 0)
  2766  02BC  0877               	movf	_uiBigTimer+1,w
  2767  02BD  0476               	iorwf	_uiBigTimer,w
  2768  02BE  1903               	skipnz
  2769  02BF  2AC6               	goto	i1l1579
  2770                           
  2771                           ;common.c: 272: uiBigTimer--;
  2772  02C0  3001               	movlw	1
  2773  02C1  02F6               	subwf	_uiBigTimer,f
  2774  02C2  3000               	movlw	0
  2775  02C3  1C03               	skipc
  2776  02C4  03F7               	decf	_uiBigTimer+1,f
  2777  02C5  02F7               	subwf	_uiBigTimer+1,f
  2778  02C6                     i1l1579:	
  2779                           
  2780                           ;common.c: 274: if(uiSmallTimer)
  2781  02C6  0839               	movf	_uiSmallTimer+1,w
  2782  02C7  0438               	iorwf	_uiSmallTimer,w
  2783  02C8  1903               	skipnz
  2784  02C9  2AD0               	goto	i1l3385
  2785                           
  2786                           ;common.c: 275: uiSmallTimer--;
  2787  02CA  3001               	movlw	1
  2788  02CB  02B8               	subwf	_uiSmallTimer,f
  2789  02CC  3000               	movlw	0
  2790  02CD  1C03               	skipc
  2791  02CE  03B9               	decf	_uiSmallTimer+1,f
  2792  02CF  02B9               	subwf	_uiSmallTimer+1,f
  2793  02D0                     i1l3385:	
  2794                           
  2795                           ;common.c: 276: }
  2796                           ;common.c: 277: }
  2797                           ;common.c: 279: if(ADIF)
  2798  02D0  1D0D               	btfss	13,2
  2799  02D1  2ADE               	goto	i1l1584
  2800  02D2  3001               	movlw	1
  2801                           
  2802                           ;common.c: 280: {
  2803                           ;common.c: 281: ADIF=0;
  2804  02D3  110D               	bcf	13,2
  2805                           
  2806                           ;common.c: 282: setAD_ConvertFlag(1);
  2807  02D4  22F0  118A         	fcall	i1_setAD_ConvertFlag
  2808                           
  2809                           ;common.c: 283: adc_original_value = adc_get();
  2810  02D6  22E5  118A         	fcall	_adc_get
  2811  02D8  0871               	movf	?_adc_get+1,w
  2812  02D9  1283               	bcf	3,5	;RP0=0, select bank0
  2813  02DA  00AD               	movwf	_adc_original_value+1
  2814  02DB  0870               	movf	?_adc_get,w
  2815  02DC  00AC               	movwf	_adc_original_value
  2816                           
  2817                           ;common.c: 285: adc_original_CH4_value = adc_get();
  2818  02DD  22E5               	fcall	_adc_get
  2819  02DE                     i1l1584:	
  2820  02DE  0875               	movf	??_ISR+1,w
  2821  02DF  008A               	movwf	10
  2822  02E0  0E74               	swapf	??_ISR^(0+-128),w
  2823  02E1  0083               	movwf	3
  2824  02E2  0EFE               	swapf	126,f
  2825  02E3  0E7E               	swapf	126,w
  2826  02E4  0009               	retfie
  2827  02E5                     __end_of_ISR:	
  2828  02E5                     __ptext433:	
  2829 ;; =============== function i1_setAD_ConvertFlag ends ============
  2830                           
  2831                           
  2832 ;; *************** function _adc_get *****************
  2833 ;; Defined at:
  2834 ;;		line 105 in file "C:\test__190531\AK7030-OTP\periph.c"
  2835 ;; Parameters:    Size  Location     Type
  2836 ;;		None
  2837 ;; Auto vars:     Size  Location     Type
  2838 ;;  val             2    2[COMMON] unsigned int 
  2839 ;; Return value:  Size  Location     Type
  2840 ;;                  2    0[COMMON] unsigned int 
  2841 ;; Registers used:
  2842 ;;		wreg
  2843 ;; Tracked objects:
  2844 ;;		On entry : 60/0
  2845 ;;		On exit  : 60/20
  2846 ;;		Unchanged: FFF9F/0
  2847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2848 ;;      Params:         2       0       0       0       0
  2849 ;;      Locals:         2       0       0       0       0
  2850 ;;      Temps:          0       0       0       0       0
  2851 ;;      Totals:         4       0       0       0       0
  2852 ;;Total ram usage:        4 bytes
  2853 ;; Hardware stack levels used:    1
  2854 ;; This function calls:
  2855 ;;		Nothing
  2856 ;; This function is called by:
  2857 ;;		_ISR
  2858 ;; This function uses a non-reentrant model
  2859 ;;
  2860  02E5                     _adc_get:	
  2861                           
  2862                           ;periph.c: 106: unsigned int val;
  2863                           ;periph.c: 107: val = (ADRESH<<8) | ADRESL;
  2864                           
  2865                           ; Regs used in _adc_get: [wreg]
  2866  02E5  081E               	movf	30,w	;volatile
  2867  02E6  00F3               	movwf	adc_get@val+1
  2868  02E7  01F2               	clrf	adc_get@val
  2869  02E8  1683               	bsf	3,5	;RP0=1, select bank1
  2870  02E9  081E               	movf	30,w	;volatile
  2871  02EA  04F2               	iorwf	adc_get@val,f
  2872                           
  2873                           ;periph.c: 108: return val;
  2874  02EB  0873               	movf	adc_get@val+1,w
  2875  02EC  00F1               	movwf	?_adc_get+1
  2876  02ED  0872               	movf	adc_get@val,w
  2877  02EE  00F0               	movwf	?_adc_get
  2878  02EF  0008               	return
  2879  02F0                     __end_of_adc_get:	
  2880  02F0                     __ptext432:	
  2881 ;; =============== function _ISR ends ============
  2882                           
  2883                           
  2884 ;; *************** function i1_setAD_ConvertFlag *****************
  2885 ;; Defined at:
  2886 ;;		line 70 in file "C:\test__190531\AK7030-OTP\common.c"
  2887 ;; Parameters:    Size  Location     Type
  2888 ;;  setAD_Conver    1    wreg     unsigned char 
  2889 ;; Auto vars:     Size  Location     Type
  2890 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2891 ;; Return value:  Size  Location     Type
  2892 ;;		None               void
  2893 ;; Registers used:
  2894 ;;		wreg
  2895 ;; Tracked objects:
  2896 ;;		On entry : 60/0
  2897 ;;		On exit  : 60/0
  2898 ;;		Unchanged: FFF9F/0
  2899 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2900 ;;      Params:         0       0       0       0       0
  2901 ;;      Locals:         1       0       0       0       0
  2902 ;;      Temps:          0       0       0       0       0
  2903 ;;      Totals:         1       0       0       0       0
  2904 ;;Total ram usage:        1 bytes
  2905 ;; Hardware stack levels used:    1
  2906 ;; This function calls:
  2907 ;;		Nothing
  2908 ;; This function is called by:
  2909 ;;		_ISR
  2910 ;; This function uses a non-reentrant model
  2911 ;;
  2912  02F0                     i1_setAD_ConvertFlag:	
  2913                           
  2914                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2915                           ;i1setAD_ConvertFlag@flag stored from wreg
  2916  02F0  00F0               	movwf	i1setAD_ConvertFlag@flag
  2917                           
  2918                           ;common.c: 71: adc_convert_flag = flag;
  2919  02F1  00F9               	movwf	_adc_convert_flag
  2920  02F2  0008               	return
  2921  02F3                     __end_ofi1_setAD_ConvertFlag:	
  2922                           
  2923                           	psect	intentry
  2924  0004                     __pintentry:	
  2925                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2926                           
  2927  0004                     interrupt_function:	
  2928  007E                     saved_w	set	btemp
  2929  0004  00FE               	movwf	btemp
  2930  0005  0E03               	swapf	3,w
  2931  0006  00F4               	movwf	??_ISR
  2932  0007  080A               	movf	10,w
  2933  0008  00F5               	movwf	??_ISR+1
  2934  0009  118A  2AB0         	ljmp	_ISR
  2935                           
  2936                           	psect	text434
  2937  0000                     __ptext434:	
  2938 ;; =============== function _adc_get ends ============
  2939                           
  2940  007E                     btemp	set	126	;btemp
  2941  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Jun 02 08:34:34 2019

                     ??_clock_config 0049                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 0049             ?_timer1_interrupt_config 0070  
                                l703 0093                                  l803 0177  
                                l731 00D0                                  l676 01C4  
                                l685 005D                                  l782 0142  
                                l758 010C                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PB0 0030                                  _PA2 002A  
                                _PB1 0031                                  _PA6 002E  
                                _ISR 02B0                                  u585 0203  
                                u595 0216                       _getAdCh14Value 0360  
                                fsr0 0004                                  indf 0000  
                               S3991 031F                                 S3987 0303  
                               S3989 0311                                 ?_ISR 0070  
                 __size_of_AD_Sample 0089                                 l2211 0000  
                               l1501 0000                                 l2214 0000  
                               l2231 0000                                 l1504 0000  
                               l2225 0000                                 l2217 0000  
                               l1524 020E                                 l3301 0000  
                               l1525 0221                                 l3311 0000  
                               l3303 0000                                 l1536 0000  
                               l3305 0000                                 l3313 0000  
                               l3321 0000                                 l3307 0000  
                               l3315 0000                                 l3323 0000  
                               l3331 0000                                 l1539 0000  
                               l1492 0000                                 l1572 0000  
                               l3309 0000                                 l3317 0000  
                               l3325 0000                                 l3333 0000  
                               l3421 0000                                 l3413 01FC  
                               l3405 0000                                 l3501 0052  
                               l1486 0358                                 l1495 0000  
                               l3319 0000                                 l3327 0000  
                               l3335 0284                                 l3351 0000  
                               l3431 0000                                 l3503 0054  
                               l1489 0000                                 l3329 0000  
                               l3337 0000                                 l3441 0253  
                               l3433 023C                                 l3425 0000  
                               l3409 0000                                 l3601 00D8  
                               l3521 0084                                 l3513 006B  
                               l3505 005B                                 l1498 0000  
                               l3355 0000                                 l3363 0000  
                               l3443 0000                                 l3419 0000  
                               l3531 0096                                 l3293 0000  
                               l3349 0000                                 l3365 0000  
                               l3453 025D                                 l3437 0000  
                               l3429 0000                                 l3605 00DA  
                               l3541 009F                                 l3525 0090  
                               l3517 0078                                 l3509 005F  
                               l3295 0000                                 l3359 0000  
                               l3455 0000                                 l3439 025A  
                               l3463 0000                                 l3703 012D  
                               l3607 00DC                                 l3551 00A5  
                               l3535 009B                                 l3297 0000  
                               l3457 0000                                 l3465 0000  
                               l3801 01A3                                 l3617 00E2  
                               l3561 00AB                                 l3529 0094  
                               l3481 0000                                 l3473 0000  
                               l3299 0000                                 l3459 0000  
                               l3723 014C                                 l3715 0136  
                               l3707 0000                                 l3651 0000  
                               l3627 00E8                                 l3571 00B1  
                               l3539 009D                                 l3491 0000  
                               l3483 0000                                 l3475 0000  
                               l3717 0145                                 l3709 0000  
                               l3661 010E                                 l3653 0000  
                               l3637 00EE                                 l3581 00BB  
                               l3805 01B4                                 l3485 0000  
                               l3477 0000                                 l3727 014E  
                               l3719 0147                                 l3671 0117  
                               l3663 0110                                 l3647 00F7  
                               l3495 0000                                 l3487 0000  
                               l3479 0000                                 l3761 0166  
                               l3753 0000                                 l3729 0150  
                               l3673 0119                                 l3593 00C4  
                               l3585 0000                                 l3497 0044  
                               l3489 0036                                 l3763 017B  
                               l3755 0000                                 l3739 0156  
                               l3683 011F                                 l3667 0115  
                               l3659 0100                                 l3595 00D1  
                               l3587 0000                                 l3773 0184  
                               l3765 017D                                 l3749 015D  
                               l3693 0125                                 l3597 00D3  
                               l3791 0000                                 l3775 0186  
                               l3785 018C                                 l3769 0182  
                               l3797 0195                                 l3789 0000  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _PEIE 005E  
               ??_getAdOriginalValue 004B                                 _main 000D  
              __end_of_getAdCh4Value 0360                                 btemp 007E  
                               start 000B                    main@ucTimerDelay1 0045  
                  main@ucTimerDelay2 0046                    main@ucTimerDelay3 0047  
                  main@ucTimerDelay4 0048                                ??_ISR 0074  
         __end_of_isPermitSampleTime 036A               __end_of_getAdCh14Value 0365  
                _sampleChannelSelect 004E                                ?_main 0070  
                              _DACR0 0088                                _CLKPR 0108  
                              _T1CON 0010                      __end_of_adc_get 02F0  
                              _TMR1H 000F                                _TMR1L 000E  
                     _sampleCH4Value 0036                setAD_ConvertFlag@flag 0049  
                              _timer 007A                                pclath 000A  
                              status 0003                                wtemp0 007E  
               __end_of_clrSampeTime 0374                         __end_of_main 01C5  
             __size_of_adc_test_init 0015                    __end_of_AD_Sample 026A  
                    ?_getAdCh14Value 0049                               ??_main 004E  
                    _sampleCH14Value 0034                               _ADCON0 001F  
                             _ADCON1 009F                 __end_of_clock_config 035B  
                             _DACCON 0087                               _ADRESH 001E  
                             _ADRESL 009E                               _CLKPCE 0847  
                             i1l1501 0000                               i1l2234 0000  
                             i1l3403 0000                               i1l1584 02DE  
                             i1l1579 02C6                               i1l3373 0000  
                             i1l3391 0000                               i1l3375 0000  
                             i1l3385 02D0                               i1l3369 0000  
                             i1l3395 0000                               i1l3379 0000  
                             i1l3389 0000                               i1l3399 0000  
                   __end_of_dac_init 036F                               _TMR1IE 0460  
                             _TMR1IF 0060                    _getAD_ConvertFlag 01DA  
                  _setAD_ConvertFlag 01DC                               _TRISA0 0428  
                             _TRISA1 0429                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISA6 042E  
                             _TRISB5 0435                               _TRISA7 042F  
                             _TRISB6 0436                               _TRISB7 0437  
                 ?_getAD_ConvertFlag 0070                   ?_setAD_ConvertFlag 0070  
                   __end_of_op1_init 0337                     __end_of_op2_init 0341  
                          ??_adc_get 0072                  ??_getAD_ConvertFlag 0049  
                ??_setAD_ConvertFlag 0049                               clrloop 034C  
                             saved_w 007E          ?_process_AD_Converter_Value 0070  
                      _adc_test_init 026F            __end_of_getAD_ConvertFlag 01DC  
          __end_of_setAD_ConvertFlag 01E1                   __size_of_adc_start 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
              __end_of_timer1_config 034B                       ?_adc_test_init 0049  
   __size_of_timer1_interrupt_config 0003                __size_of_clrSampeTime 0002  
                         __pbssBANK0 0020         __size_ofi1_setAD_ConvertFlag 0003  
                         adc_get@val 0072                           __pmaintext 000D  
                         __pintentry 0004                            ?_dac_init 0070  
              __size_of_clock_config 0008                              _OP1CON0 001B  
                            _OP1CON1 001C                              _OP1CON2 001D  
                            _OP2CON0 009B                              _OP2CON1 009C  
                            _OP2CON2 009D                         _clrSampeTime 0372  
                  __end_of_adc_start 0287                            ?_op1_init 0070  
                          ?_op2_init 0070                   _isPermitSampleTime 0365  
             _buffer_Sample_AD_Value 0020                   _adc_original_value 002C  
         __size_of_getAD_ConvertFlag 0002           __size_of_setAD_ConvertFlag 0005  
        __size_of_getAdOriginalValue 0005                  ?_isPermitSampleTime 0070  
                         _uiBigTimer 0076                     ??_getAdCh14Value 004B  
                       _clock_config 0353                              _adc_get 02E5  
                _multiFilterMaxValue 002E                  _multiFilterMinValue 0030  
               ??_isPermitSampleTime 0049                           ??_dac_init 0049  
                          _AD_Sample 01E1                         __size_of_ISR 0035  
             __size_of_getAdCh4Value 0005                      ??_adc_test_init 004A  
                         ??_op1_init 0049                           ??_op2_init 0049  
                _multiFilterSumValue 0032                 end_of_initialization 0300  
                   main@ucLoaderStep 003F                           ?_AD_Sample 0070  
                 main@ucChannel4Type 003E                     _adc_convert_flag 0079  
            _timer1_interrupt_config 036F                       AD_Sample@index 004D  
                      _getAdCh4Value 035B                     main@ucTimerDelay 0044  
                   main@ucTimerCount 003A                  i1_setAD_ConvertFlag 02F0  
                start_initialization 02F3                          __end_of_ISR 02E5  
               ?i1_setAD_ConvertFlag 0070                       ?_getAdCh4Value 0049  
         main@AD_sample_process_step 003D                          __pdataBANK0 004E  
                        ??_AD_Sample 004B            ??_timer1_interrupt_config 0049  
                        __pbssCOMMON 0076                    __size_of_dac_init 0005  
                      __pcstackBANK0 0049                            _adc_start 0284  
                  __size_of_op1_init 000C                    __size_of_op2_init 000A  
              ??i1_setAD_ConvertFlag 0070               __size_of_timer1_config 000A  
                          __ptext420 0360                            __ptext421 0372  
                          __ptext430 0353                            __ptext422 0365  
                          __ptext414 01C5                            __ptext431 02B0  
                          __ptext423 0284                            __ptext415 01E1  
                          __ptext432 02F0                            __ptext424 0337  
                          __ptext416 026A                            __ptext433 02E5  
                          __ptext425 032B                            __ptext417 01DC  
                          __ptext434 0000                            __ptext426 036A  
                          __ptext418 01DA                            __ptext427 026F  
                          __ptext419 035B                            __ptext428 036F  
                          __ptext429 0341                             ?_adc_get 0070  
                          __pswtext1 0303                            __pswtext2 0311  
                          __pswtext3 031F                      ISR@ucTimer1sCnt 0078  
         __end_of_getAdOriginalValue 026F                           ?_adc_start 0070  
                    ??_getAdCh4Value 004B                    interrupt_function 0004  
    __end_of_timer1_interrupt_config 0372                 adc_test_init@channel 004B  
        __size_of_isPermitSampleTime 0005                         _uiSmallTimer 0038  
              __end_of_adc_test_init 0284                        _timer1_config 0341  
       ??_process_AD_Converter_Value 004E                     __size_of_adc_get 000B  
__size_of_process_AD_Converter_Value 0015                             _dac_init 036A  
            __size_of_getAdCh14Value 0005                       ?_timer1_config 0070  
                           _op1_init 032B                             _op2_init 0337  
                        ??_adc_start 0049                        __size_of_main 01B8  
                           clear_ram 034B                        ?_clrSampeTime 0070  
                        _sampleTimes 003C                             intlevel1 0000  
                  main@ucLoaderStep1 0040                    main@ucLoaderStep2 0041  
                  main@ucLoaderStep3 0042                    main@ucLoaderStep4 0043  
                      ?_clock_config 0070              i1setAD_ConvertFlag@flag 0070  
                     ??_clrSampeTime 0049                      ??_timer1_config 0049  
        __end_ofi1_setAD_ConvertFlag 02F3   __end_of_process_AD_Converter_Value 01DA  
         _process_AD_Converter_Value 01C5                     adc_test_init@ref 0049  
                 _getAdOriginalValue 026A  
