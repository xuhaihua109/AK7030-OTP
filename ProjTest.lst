

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Wed Dec 26 16:08:34 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text493,local,class=CODE,delta=2
    16                           	psect	text498,local,class=CODE,delta=2
    17                           	psect	text499,local,class=CODE,delta=2
    18                           	psect	text500,local,class=CODE,delta=2
    19                           	psect	text501,local,class=CODE,delta=2
    20                           	psect	text502,local,class=CODE,delta=2
    21                           	psect	text503,local,class=CODE,delta=2
    22                           	psect	text504,local,class=CODE,delta=2
    23                           	psect	text505,local,class=CODE,delta=2
    24                           	psect	text506,local,class=CODE,delta=2
    25                           	psect	text507,local,class=CODE,delta=2
    26                           	psect	text509,local,class=CODE,delta=2
    27                           	psect	text510,local,class=CODE,delta=2
    28                           	psect	text511,local,class=CODE,delta=2
    29                           	psect	text512,local,class=CODE,delta=2
    30                           	psect	text513,local,class=CODE,delta=2
    31                           	psect	text514,local,class=CODE,delta=2
    32                           	psect	text515,local,class=CODE,delta=2
    33                           	psect	text516,local,class=CODE,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text519,local,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  000A                     	;#
    39                           
    40                           	psect	config
    41  2000  2FFF               	dw	12287	;#
    42  2001  3FDE               	dw	16350	;#
    43  2002  3FF8               	dw	16376	;#
    44                           
    45                           	psect	idataBANK0
    46  0000                     __pidataBANK0:	
    47  001F                     _ADCON0	set	31
    48  001E                     _ADRESH	set	30
    49  001B                     _OP1CON0	set	27
    50  001C                     _OP1CON1	set	28
    51  001D                     _OP1CON2	set	29
    52  0010                     _T1CON	set	16
    53  000F                     _TMR1H	set	15
    54  000E                     _TMR1L	set	14
    55  006A                     _ADIF	set	106
    56  00F8                     _ADON	set	248
    57  005F                     _GIE	set	95
    58  00F9                     _GO	set	249
    59  0028                     _PA0	set	40
    60  0029                     _PA1	set	41
    61  002A                     _PA2	set	42
    62  002B                     _PA3	set	43
    63  0032                     _PB2	set	50
    64  005E                     _PEIE	set	94
    65  0060                     _TMR1IF	set	96
    66  009F                     _ADCON1	set	159
    67  009E                     _ADRESL	set	158
    68  0087                     _DACCON	set	135
    69  0088                     _DACR0	set	136
    70  009B                     _OP2CON0	set	155
    71  009C                     _OP2CON1	set	156
    72  009D                     _OP2CON2	set	157
    73  046A                     _ADIE	set	1130
    74  0460                     _TMR1IE	set	1120
    75  0428                     _TRISA0	set	1064
    76  0429                     _TRISA1	set	1065
    77  042A                     _TRISA2	set	1066
    78  042B                     _TRISA3	set	1067
    79  042F                     _TRISA7	set	1071
    80  0430                     _TRISB0	set	1072
    81  0431                     _TRISB1	set	1073
    82  0432                     _TRISB2	set	1074
    83  0433                     _TRISB3	set	1075
    84  0434                     _TRISB4	set	1076
    85  0435                     _TRISB5	set	1077
    86  0436                     _TRISB6	set	1078
    87  0437                     _TRISB7	set	1079
    88  0108                     _CLKPR	set	264
    89  0847                     _CLKPCE	set	2119
    90                           
    91                           	psect	cinit
    92  0253                     start_initialization:	
    93  0253  3020               	movlw	low __pbssBANK0
    94                           
    95                           ; Clear objects allocated to COMMON
    96  0254  01F6               	clrf	__pbssCOMMON& (0+127)
    97  0255  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    98  0256  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    99  0257  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   100  0258  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   101                           
   102                           ; Clear objects allocated to BANK0
   103  0259  1383               	bcf	3,7	;select IRP bank0
   104  025A  0084               	movwf	4
   105  025B  3042               	movlw	low (__pbssBANK0+34)
   106  025C  118A  2282         	fcall	clear_ram
   107                           
   108                           ;initializer for _sampleChannelSelect
   109  025E  300D               	movlw	13
   110  025F  00C7               	movwf	__pdataBANK0& (0+127)
   111  0260                     end_of_initialization:	
   112                           ;End of C runtime variable initialization code
   113                           
   114  0260  0183               	clrf	3
   115  0261  118A  280D         	ljmp	_main	;jump to C main() function
   116                           
   117                           	psect	bssCOMMON
   118  0076                     __pbssCOMMON:	
   119  0076                     _uiBigTimer:	
   120  0076                     	ds	2
   121  0078                     ISR@ucTimer1sCnt:	
   122  0078                     	ds	1
   123  0079                     _adc_convert_flag:	
   124  0079                     	ds	1
   125  007A                     _timer:	
   126  007A                     	ds	1
   127                           
   128                           	psect	bssBANK0
   129  0020                     __pbssBANK0:	
   130  0020                     _buffer_Sample_AD_Value:	
   131  0020                     	ds	12
   132  002C                     _adc_original_CH13_value:	
   133  002C                     	ds	2
   134  002E                     _adc_original_value:	
   135  002E                     	ds	2
   136  0030                     _multiFilterMaxValue:	
   137  0030                     	ds	2
   138  0032                     _multiFilterMinValue:	
   139  0032                     	ds	2
   140  0034                     _uiSmallTimer:	
   141  0034                     	ds	2
   142  0036                     _sampleTimes:	
   143  0036                     	ds	1
   144  0037                     main@ampStep:	
   145  0037                     	ds	1
   146  0038                     main@bigTimerOutputStep:	
   147  0038                     	ds	1
   148  0039                     main@smallTimerOutputStep:	
   149  0039                     	ds	1
   150  003A                     main@tDA_timer:	
   151  003A                     	ds	1
   152  003B                     main@ucBigTimerActionFlag:	
   153  003B                     	ds	1
   154  003C                     main@ucCheckBatteryCnt:	
   155  003C                     	ds	1
   156  003D                     main@ucConfirmTimer1S:	
   157  003D                     	ds	1
   158  003E                     main@ucConfirmTimerZptS:	
   159  003E                     	ds	1
   160  003F                     main@ucInit:	
   161  003F                     	ds	1
   162  0040                     main@ucInstalledBatteryCnt:	
   163  0040                     	ds	1
   164  0041                     main@ucWaitTime1S:	
   165  0041                     	ds	1
   166                           
   167                           	psect	dataBANK0
   168  0047                     __pdataBANK0:	
   169  0047                     _sampleChannelSelect:	
   170  0047                     	ds	1
   171                           
   172                           	psect	clrtext
   173  0282                     clear_ram:	
   174                           ;	Called with FSR containing the base address, and
   175                           ;	W with the last address+1
   176                           
   177  0282  0064               	clrwdt	;clear the watchdog before getting into this loop
   178  0283                     clrloop:	
   179  0283  0180               	clrf	0	;clear RAM location pointed to by FSR
   180  0284  0A84               	incf	4,f	;increment pointer
   181  0285  0604               	xorwf	4,w	;XOR with final address
   182  0286  1903               	btfsc	3,2	;have we reached the end yet?
   183  0287  3400               	retlw	0	;all done for this memory range, return
   184  0288  0604               	xorwf	4,w	;XOR again to restore value
   185  0289  2A83               	goto	clrloop	;do the next byte
   186                           
   187                           	psect	cstackCOMMON
   188  0070                     __pcstackCOMMON:	
   189  0070                     ?_clock_config:	
   190  0070                     ?_timer1_config:	
   191                           ; 0 bytes @ 0x0
   192                           
   193  0070                     ?_timer1_interrupt_config:	
   194                           ; 0 bytes @ 0x0
   195                           
   196  0070                     ?_dac_init:	
   197                           ; 0 bytes @ 0x0
   198                           
   199  0070                     ?_op1_init:	
   200                           ; 0 bytes @ 0x0
   201                           
   202  0070                     ?_op2_init:	
   203                           ; 0 bytes @ 0x0
   204                           
   205  0070                     ?_adc_start:	
   206                           ; 0 bytes @ 0x0
   207                           
   208  0070                     ?_clrSampeTime:	
   209                           ; 0 bytes @ 0x0
   210                           
   211  0070                     ?_process_AD_Converter_Value:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0070                     ?_clearBigTimer:	
   215                           ; 0 bytes @ 0x0
   216                           
   217  0070                     ?_clearSmallTimer:	
   218                           ; 0 bytes @ 0x0
   219                           
   220  0070                     ?_startBigTimer:	
   221                           ; 0 bytes @ 0x0
   222                           
   223  0070                     ?_setDAC0_ChannelValue:	
   224                           ; 0 bytes @ 0x0
   225                           
   226  0070                     ?_startSmallTimer:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ?_AD_Sample:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?_main:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ?_setAD_ConvertFlag:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_ISR:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?i1_setAD_ConvertFlag:	
   242                           ; 0 bytes @ 0x0
   243                           
   244  0070                     ??i1_setAD_ConvertFlag:	
   245                           ; 0 bytes @ 0x0
   246                           
   247  0070                     ?_isPermitSampleTime:	
   248                           ; 0 bytes @ 0x0
   249                           
   250  0070                     ?_isFinishedBigTimer:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     ?_isFinishedSmallTimer:	
   254                           ; 1 bytes @ 0x0
   255                           
   256  0070                     ?_getAD_ConvertFlag:	
   257                           ; 1 bytes @ 0x0
   258                           
   259  0070                     ?_adc_get:	
   260                           ; 1 bytes @ 0x0
   261                           
   262  0070                     i1setAD_ConvertFlag@flag:	
   263                           ; 2 bytes @ 0x0
   264                           
   265                           
   266                           ; 1 bytes @ 0x0
   267  0070                     	ds	2
   268  0072                     ??_adc_get:	
   269  0072                     adc_get@val:	
   270                           ; 0 bytes @ 0x2
   271                           
   272                           
   273                           ; 2 bytes @ 0x2
   274  0072                     	ds	2
   275  0074                     ??_ISR:	
   276                           
   277                           ; 0 bytes @ 0x4
   278  0074                     	ds	2
   279                           
   280                           	psect	cstackBANK0
   281  0042                     __pcstackBANK0:	
   282  0042                     ??_clock_config:	
   283  0042                     ??_timer1_config:	
   284                           ; 0 bytes @ 0x0
   285                           
   286  0042                     ??_timer1_interrupt_config:	
   287                           ; 0 bytes @ 0x0
   288                           
   289  0042                     ?_adc_test_init:	
   290                           ; 0 bytes @ 0x0
   291                           
   292  0042                     ??_dac_init:	
   293                           ; 0 bytes @ 0x0
   294                           
   295  0042                     ??_op1_init:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0042                     ??_op2_init:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0042                     ??_adc_start:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0042                     ??_isPermitSampleTime:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0042                     ??_clrSampeTime:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0042                     ??_clearBigTimer:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0042                     ??_clearSmallTimer:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0042                     ??_startBigTimer:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0042                     ??_setDAC0_ChannelValue:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0042                     ??_startSmallTimer:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0042                     ??_isFinishedBigTimer:	
   326                           ; 0 bytes @ 0x0
   327                           
   328  0042                     ??_isFinishedSmallTimer:	
   329                           ; 0 bytes @ 0x0
   330                           
   331  0042                     ??_getAD_ConvertFlag:	
   332                           ; 0 bytes @ 0x0
   333                           
   334  0042                     ??_setAD_ConvertFlag:	
   335                           ; 0 bytes @ 0x0
   336                           
   337  0042                     ?_getAdOriginalCh13Value:	
   338                           ; 0 bytes @ 0x0
   339                           
   340  0042                     ?_getAdOriginalValue:	
   341                           ; 2 bytes @ 0x0
   342                           
   343  0042                     setAD_ConvertFlag@flag:	
   344                           ; 2 bytes @ 0x0
   345                           
   346  0042                     setDAC0_ChannelValue@ucValue:	
   347                           ; 1 bytes @ 0x0
   348                           
   349  0042                     adc_test_init@ref:	
   350                           ; 1 bytes @ 0x0
   351                           
   352                           
   353                           ; 1 bytes @ 0x0
   354  0042                     	ds	1
   355  0043                     ??_adc_test_init:	
   356                           
   357                           ; 0 bytes @ 0x1
   358  0043                     	ds	1
   359  0044                     ??_getAdOriginalCh13Value:	
   360  0044                     ??_AD_Sample:	
   361                           ; 0 bytes @ 0x2
   362                           
   363  0044                     ??_getAdOriginalValue:	
   364                           ; 0 bytes @ 0x2
   365                           
   366  0044                     adc_test_init@channel:	
   367                           ; 0 bytes @ 0x2
   368                           
   369                           
   370                           ; 1 bytes @ 0x2
   371  0044                     	ds	2
   372  0046                     AD_Sample@index:	
   373                           
   374                           ; 1 bytes @ 0x4
   375  0046                     	ds	1
   376  0047                     ??_process_AD_Converter_Value:	
   377  0047                     ??_main:	
   378                           ; 0 bytes @ 0x5
   379                           
   380                           
   381                           	psect	maintext
   382  000D                     __pmaintext:	
   383                           ; 0 bytes @ 0x5
   384 ;;Data sizes: Strings 0, constant 0, data 1, bss 39, persistent 0 stack 0
   385 ;;Auto spaces:   Size  Autos    Used
   386 ;; COMMON          14      6      11
   387 ;; BANK0           80      5      40
   388 ;; BANK1           80      0       0
   389 ;; BANK3           96      0       0
   390 ;; BANK2           96      0       0
   391 ;;
   392 ;; Pointer list with targets:
   393 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   394 ;;
   395 ;; ?_getAdOriginalCh13Value	unsigned int  size(1) Largest target is 0
   396 ;;
   397 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   398 ;;
   399 ;;
   400 ;; Critical Paths under _main in COMMON
   401 ;;
   402 ;;   None.
   403 ;;
   404 ;; Critical Paths under _ISR in COMMON
   405 ;;
   406 ;;   _ISR->_adc_get
   407 ;;
   408 ;; Critical Paths under _main in BANK0
   409 ;;
   410 ;;   _process_AD_Converter_Value->_AD_Sample
   411 ;;   _AD_Sample->_getAdOriginalValue
   412 ;;
   413 ;; Critical Paths under _ISR in BANK0
   414 ;;
   415 ;;   None.
   416 ;;
   417 ;; Critical Paths under _main in BANK1
   418 ;;
   419 ;;   None.
   420 ;;
   421 ;; Critical Paths under _ISR in BANK1
   422 ;;
   423 ;;   None.
   424 ;;
   425 ;; Critical Paths under _main in BANK3
   426 ;;
   427 ;;   None.
   428 ;;
   429 ;; Critical Paths under _ISR in BANK3
   430 ;;
   431 ;;   None.
   432 ;;
   433 ;; Critical Paths under _main in BANK2
   434 ;;
   435 ;;   None.
   436 ;;
   437 ;; Critical Paths under _ISR in BANK2
   438 ;;
   439 ;;   None.
   440 ;;
   441 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   442 ;;
   443 ;;
   444 ;;Call Graph Tables:
   445 ;;
   446 ;; ---------------------------------------------------------------------------------
   447 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   448 ;; ---------------------------------------------------------------------------------
   449 ;; (0) _main                                                 0     0      0     156
   450 ;;                       _clock_config
   451 ;;                      _timer1_config
   452 ;;            _timer1_interrupt_config
   453 ;;                      _adc_test_init
   454 ;;                           _dac_init
   455 ;;                           _op1_init
   456 ;;                           _op2_init
   457 ;;                          _adc_start
   458 ;;                 _isPermitSampleTime
   459 ;;                       _clrSampeTime
   460 ;;         _process_AD_Converter_Value
   461 ;;                      _clearBigTimer
   462 ;;                    _clearSmallTimer
   463 ;;             _getAdOriginalCh13Value
   464 ;;                      _startBigTimer
   465 ;;               _setDAC0_ChannelValue
   466 ;;                    _startSmallTimer
   467 ;;                 _isFinishedBigTimer
   468 ;;               _isFinishedSmallTimer
   469 ;; ---------------------------------------------------------------------------------
   470 ;; (1) _process_AD_Converter_Value                           0     0      0      90
   471 ;;                  _getAD_ConvertFlag
   472 ;;                  _setAD_ConvertFlag
   473 ;;                          _AD_Sample
   474 ;;                          _adc_start
   475 ;; ---------------------------------------------------------------------------------
   476 ;; (2) _AD_Sample                                            3     3      0      68
   477 ;;                                              2 BANK0      3     3      0
   478 ;;                 _getAdOriginalValue
   479 ;; ---------------------------------------------------------------------------------
   480 ;; (3) _getAdOriginalValue                                   2     0      2       0
   481 ;;                                              0 BANK0      2     0      2
   482 ;; ---------------------------------------------------------------------------------
   483 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   484 ;;                                              0 BANK0      1     1      0
   485 ;; ---------------------------------------------------------------------------------
   486 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   487 ;; ---------------------------------------------------------------------------------
   488 ;; (1) _isFinishedSmallTimer                                 0     0      0       0
   489 ;; ---------------------------------------------------------------------------------
   490 ;; (1) _isFinishedBigTimer                                   0     0      0       0
   491 ;; ---------------------------------------------------------------------------------
   492 ;; (1) _startSmallTimer                                      0     0      0       0
   493 ;; ---------------------------------------------------------------------------------
   494 ;; (1) _setDAC0_ChannelValue                                 1     1      0      22
   495 ;;                                              0 BANK0      1     1      0
   496 ;; ---------------------------------------------------------------------------------
   497 ;; (1) _startBigTimer                                        0     0      0       0
   498 ;; ---------------------------------------------------------------------------------
   499 ;; (1) _getAdOriginalCh13Value                               2     0      2       0
   500 ;;                                              0 BANK0      2     0      2
   501 ;; ---------------------------------------------------------------------------------
   502 ;; (1) _clearSmallTimer                                      0     0      0       0
   503 ;; ---------------------------------------------------------------------------------
   504 ;; (1) _clearBigTimer                                        0     0      0       0
   505 ;; ---------------------------------------------------------------------------------
   506 ;; (1) _clrSampeTime                                         0     0      0       0
   507 ;; ---------------------------------------------------------------------------------
   508 ;; (1) _isPermitSampleTime                                   0     0      0       0
   509 ;; ---------------------------------------------------------------------------------
   510 ;; (2) _adc_start                                            0     0      0       0
   511 ;; ---------------------------------------------------------------------------------
   512 ;; (1) _op2_init                                             0     0      0       0
   513 ;; ---------------------------------------------------------------------------------
   514 ;; (1) _op1_init                                             0     0      0       0
   515 ;; ---------------------------------------------------------------------------------
   516 ;; (1) _dac_init                                             0     0      0       0
   517 ;; ---------------------------------------------------------------------------------
   518 ;; (1) _adc_test_init                                        3     2      1      44
   519 ;;                                              0 BANK0      3     2      1
   520 ;; ---------------------------------------------------------------------------------
   521 ;; (1) _timer1_interrupt_config                              0     0      0       0
   522 ;; ---------------------------------------------------------------------------------
   523 ;; (1) _timer1_config                                        0     0      0       0
   524 ;; ---------------------------------------------------------------------------------
   525 ;; (1) _clock_config                                         0     0      0       0
   526 ;; ---------------------------------------------------------------------------------
   527 ;; Estimated maximum stack depth 3
   528 ;; ---------------------------------------------------------------------------------
   529 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   530 ;; ---------------------------------------------------------------------------------
   531 ;; (4) _ISR                                                  2     2      0      97
   532 ;;                                              4 COMMON     2     2      0
   533 ;;                i1_setAD_ConvertFlag
   534 ;;                            _adc_get
   535 ;; ---------------------------------------------------------------------------------
   536 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   537 ;;                                              0 COMMON     1     1      0
   538 ;; ---------------------------------------------------------------------------------
   539 ;; (5) _adc_get                                              4     2      2      24
   540 ;;                                              0 COMMON     4     2      2
   541 ;; ---------------------------------------------------------------------------------
   542 ;; Estimated maximum stack depth 5
   543 ;; ---------------------------------------------------------------------------------
   544 ;; Call Graph Graphs:
   545 ;; _main (ROOT)
   546 ;;   _clock_config
   547 ;;   _timer1_config
   548 ;;   _timer1_interrupt_config
   549 ;;   _adc_test_init
   550 ;;   _dac_init
   551 ;;   _op1_init
   552 ;;   _op2_init
   553 ;;   _adc_start
   554 ;;   _isPermitSampleTime
   555 ;;   _clrSampeTime
   556 ;;   _process_AD_Converter_Value
   557 ;;     _getAD_ConvertFlag
   558 ;;     _setAD_ConvertFlag
   559 ;;     _AD_Sample
   560 ;;       _getAdOriginalValue
   561 ;;     _adc_start
   562 ;;   _clearBigTimer
   563 ;;   _clearSmallTimer
   564 ;;   _getAdOriginalCh13Value
   565 ;;   _startBigTimer
   566 ;;   _setDAC0_ChannelValue
   567 ;;   _startSmallTimer
   568 ;;   _isFinishedBigTimer
   569 ;;   _isFinishedSmallTimer
   570 ;;
   571 ;; _ISR (ROOT)
   572 ;;   i1_setAD_ConvertFlag
   573 ;;   _adc_get
   574 ;;
   575 ;; Address spaces:
   576 ;;Name               Size   Autos  Total    Cost      Usage
   577 ;;BANK3               60      0       0      10        0.0%
   578 ;;BITBANK3            60      0       0       9        0.0%
   579 ;;SFR3                 0      0       0       4        0.0%
   580 ;;BITSFR3              0      0       0       4        0.0%
   581 ;;BANK2               60      0       0      12        0.0%
   582 ;;BITBANK2            60      0       0      11        0.0%
   583 ;;SFR2                 0      0       0       5        0.0%
   584 ;;BITSFR2              0      0       0       5        0.0%
   585 ;;SFR1                 0      0       0       2        0.0%
   586 ;;BITSFR1              0      0       0       2        0.0%
   587 ;;BANK1               50      0       0       8        0.0%
   588 ;;BITBANK1            50      0       0       7        0.0%
   589 ;;CODE                 0      0       0       0        0.0%
   590 ;;DATA                 0      0      3A       6        0.0%
   591 ;;ABS                  0      0      33       3        0.0%
   592 ;;NULL                 0      0       0       0        0.0%
   593 ;;STACK                0      0       7       2        0.0%
   594 ;;BANK0               50      5      28       5       50.0%
   595 ;;BITBANK0            50      0       0       4        0.0%
   596 ;;SFR0                 0      0       0       1        0.0%
   597 ;;BITSFR0              0      0       0       1        0.0%
   598 ;;COMMON               E      6       B       1       78.6%
   599 ;;BITCOMMON            E      0       0       0        0.0%
   600                           
   601                           
   602 ;; *************** function _main *****************
   603 ;; Defined at:
   604 ;;		line 84 in file "C:\sw_dev\AK7030-OTP\main.c"
   605 ;; Parameters:    Size  Location     Type
   606 ;;		None
   607 ;; Auto vars:     Size  Location     Type
   608 ;;		None
   609 ;; Return value:  Size  Location     Type
   610 ;;		None               void
   611 ;; Registers used:
   612 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   613 ;; Tracked objects:
   614 ;;		On entry : 17F/0
   615 ;;		On exit  : 60/0
   616 ;;		Unchanged: FFE00/0
   617 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   618 ;;      Params:         0       0       0       0       0
   619 ;;      Locals:         0       0       0       0       0
   620 ;;      Temps:          0       0       0       0       0
   621 ;;      Totals:         0       0       0       0       0
   622 ;;Total ram usage:        0 bytes
   623 ;; Hardware stack levels required when called:    5
   624 ;; This function calls:
   625 ;;		_clock_config
   626 ;;		_timer1_config
   627 ;;		_timer1_interrupt_config
   628 ;;		_adc_test_init
   629 ;;		_dac_init
   630 ;;		_op1_init
   631 ;;		_op2_init
   632 ;;		_adc_start
   633 ;;		_isPermitSampleTime
   634 ;;		_clrSampeTime
   635 ;;		_process_AD_Converter_Value
   636 ;;		_clearBigTimer
   637 ;;		_clearSmallTimer
   638 ;;		_getAdOriginalCh13Value
   639 ;;		_startBigTimer
   640 ;;		_setDAC0_ChannelValue
   641 ;;		_startSmallTimer
   642 ;;		_isFinishedBigTimer
   643 ;;		_isFinishedSmallTimer
   644 ;; This function is called by:
   645 ;;		Startup code after reset
   646 ;; This function uses a non-reentrant model
   647 ;;
   648  000D                     _main:	
   649                           
   650                           ;main.c: 85: enum step
   651                           ;main.c: 86: {
   652                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   653                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   654                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   655                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   656                           ;main.c: 91: SET_PA2_VALUE,
   657                           ;main.c: 92: PROCESS_AD_VALUE,
   658                           ;main.c: 93: WAIT_SET_TIME_FINISHED,
   659                           ;main.c: 94: SET_TIME_BE_FINISHED,
   660                           ;main.c: 95: CHECKING_PULL_OUT_BATTERY,
   661                           ;main.c: 96: CHECKING_INSTALLED_BATTERY,
   662                           ;main.c: 97: };
   663                           ;main.c: 99: enum workTimerType
   664                           ;main.c: 100: {
   665                           ;main.c: 101: BIG_TIMER_WORK = 0,
   666                           
   667                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   668  000D  1683               	bsf	3,5	;RP0=1, select bank1
   669  000E  1005               	bcf	5,0
   670                           
   671                           ;main.c: 141: TRISA1 = 0;
   672  000F  1085               	bcf	5,1
   673                           
   674                           ;main.c: 142: TRISA3 = 0;
   675  0010  1185               	bcf	5,3
   676                           
   677                           ;main.c: 143: TRISA2 = 0;
   678  0011  1105               	bcf	5,2
   679                           
   680                           ;main.c: 144: PA2 = 1;
   681  0012  1283               	bcf	3,5	;RP0=0, select bank0
   682  0013  1505               	bsf	5,2
   683                           
   684                           ;main.c: 145: PA0 = 1;
   685  0014  1405               	bsf	5,0
   686                           
   687                           ;main.c: 147: TRISB2 = 1;
   688  0015  1683               	bsf	3,5	;RP0=1, select bank1
   689  0016  1506               	bsf	6,2
   690                           
   691                           ;main.c: 149: TRISB1 = 1;
   692  0017  1486               	bsf	6,1
   693                           
   694                           ;main.c: 150: TRISB0 = 1;
   695  0018  1406               	bsf	6,0
   696                           
   697                           ;main.c: 152: clock_config();
   698  0019  118A  228A  118A   	fcall	_clock_config
   699                           
   700                           ;main.c: 153: timer1_config();
   701  001C  118A  226F  118A   	fcall	_timer1_config
   702                           
   703                           ;main.c: 154: timer1_interrupt_config();
   704  001F  118A  22BF  118A   	fcall	_timer1_interrupt_config
   705                           
   706                           ;main.c: 156: adc_test_init(13,3);
   707  0022  3003               	movlw	3
   708  0023  1283               	bcf	3,5	;RP0=0, select bank0
   709  0024  00C2               	movwf	?_adc_test_init
   710  0025  300D               	movlw	13
   711  0026  118A  223F  118A   	fcall	_adc_test_init
   712                           
   713                           ;main.c: 158: dac_init();
   714  0029  118A  22B0  118A   	fcall	_dac_init
   715                           
   716                           ;main.c: 159: op1_init();
   717  002C  118A  2263  118A   	fcall	_op1_init
   718                           
   719                           ;main.c: 160: op2_init();
   720  002F  118A  2279  118A   	fcall	_op2_init
   721                           
   722                           ;main.c: 163: adc_start();
   723  0032  118A  2172  118A   	fcall	_adc_start
   724                           
   725                           ;main.c: 176: switch(ampStep)
   726  0035  2945               	goto	l3228
   727  0036                     l3236:	
   728                           
   729                           ;main.c: 179: {
   730                           ;main.c: 180: ucBigTimerActionFlag = 0;
   731  0036  01BB               	clrf	main@ucBigTimerActionFlag
   732                           
   733                           ;main.c: 181: smallTimerOutputStep = SMALL_TIMER_OUTPUT_FIRST_STEP;
   734  0037  01B9               	clrf	main@smallTimerOutputStep
   735                           
   736                           ;main.c: 182: bigTimerOutputStep = BIG_TIMER_OUTPUT_FIRST_STEP;
   737  0038  01B8               	clrf	main@bigTimerOutputStep
   738                           
   739                           ;main.c: 183: clearBigTimer();
   740  0039  118A  22BC  118A   	fcall	_clearBigTimer
   741                           
   742                           ;main.c: 184: clearSmallTimer();
   743  003C  118A  22B9  118A   	fcall	_clearSmallTimer
   744  003F                     L2:	
   745                           
   746                           ;main.c: 185: if(!PB2)
   747  003F  1906               	btfsc	6,2
   748  0040  2945               	goto	l3228
   749  0041                     l3244:	
   750                           
   751                           ;main.c: 186: ampStep++;
   752  0041  1283               	bcf	3,5	;RP0=0, select bank0
   753  0042  0AB7               	incf	main@ampStep,f
   754  0043  2945               	goto	l3228
   755  0044                     l689:	
   756                           ;main.c: 188: }
   757                           ;main.c: 190: case SENSE_PB2_DURATION_ONE_SECOND:
   758                           
   759                           
   760                           ;main.c: 191: {
   761                           ;main.c: 192: static unsigned char ucConfirmTimer1S = 0;
   762                           ;main.c: 193: if(!PB2)
   763  0044  1906               	btfsc	6,2
   764  0045  2848               	goto	l3248
   765                           
   766                           ;main.c: 194: {
   767                           ;main.c: 195: ucConfirmTimer1S++;
   768  0046  0ABD               	incf	main@ucConfirmTimer1S,f
   769                           
   770                           ;main.c: 196: }
   771  0047  2849               	goto	l3250
   772  0048                     l3248:	
   773                           
   774                           ;main.c: 197: else
   775                           ;main.c: 198: {
   776                           ;main.c: 199: ucConfirmTimer1S = 0;
   777  0048  01BD               	clrf	main@ucConfirmTimer1S
   778  0049                     l3250:	
   779                           
   780                           ;main.c: 200: }
   781                           ;main.c: 202: if(ucConfirmTimer1S >= 10)
   782  0049  300A               	movlw	10
   783  004A  023D               	subwf	main@ucConfirmTimer1S,w
   784  004B  1C03               	skipc
   785  004C  2945               	goto	l3228
   786                           
   787                           ;main.c: 203: {
   788                           ;main.c: 204: ucConfirmTimer1S = 0;
   789  004D  01BD               	clrf	main@ucConfirmTimer1S
   790  004E  2841               	goto	l3244
   791  004F                     l695:	
   792                           ;main.c: 209: }
   793                           ;main.c: 211: case SENSE_PB2_INPUT_VOLTAGE__AGAIN:
   794                           
   795                           
   796                           ;main.c: 212: {
   797                           ;main.c: 213: if(!PB2)
   798  004F  283F               	goto	L2
   799  0050                     l697:	
   800                           ;main.c: 216: }
   801                           ;main.c: 218: case SENSE_PB2_DURATION__SECOND:
   802                           
   803                           
   804                           ;main.c: 219: {
   805                           ;main.c: 220: static unsigned char ucConfirmTimerZptS = 0;
   806                           ;main.c: 221: if(!PB2)
   807  0050  1906               	btfsc	6,2
   808  0051  2854               	goto	l3260
   809                           
   810                           ;main.c: 222: {
   811                           ;main.c: 223: ucConfirmTimerZptS++;
   812  0052  0ABE               	incf	main@ucConfirmTimerZptS,f
   813                           
   814                           ;main.c: 224: }
   815  0053  2855               	goto	l3262
   816  0054                     l3260:	
   817                           
   818                           ;main.c: 225: else
   819                           ;main.c: 226: {
   820                           ;main.c: 227: ucConfirmTimerZptS = 0;
   821  0054  01BE               	clrf	main@ucConfirmTimerZptS
   822  0055                     l3262:	
   823                           
   824                           ;main.c: 228: }
   825                           ;main.c: 230: if(ucConfirmTimerZptS >= 3)
   826  0055  3003               	movlw	3
   827  0056  023E               	subwf	main@ucConfirmTimerZptS,w
   828  0057  1C03               	skipc
   829  0058  2945               	goto	l3228
   830                           
   831                           ;main.c: 231: {
   832                           ;main.c: 232: ucConfirmTimerZptS = 0;
   833  0059  01BE               	clrf	main@ucConfirmTimerZptS
   834  005A  2841               	goto	l3244
   835  005B                     l703:	
   836                           ;main.c: 237: }
   837                           ;main.c: 239: case SET_PA2_VALUE:
   838                           
   839                           
   840                           ;main.c: 240: {
   841                           ;main.c: 241: PA2 = 0;
   842  005B  1105               	bcf	5,2
   843  005C  2841               	goto	l3244
   844  005D                     l3270:	
   845                           
   846                           ;main.c: 247: {
   847                           ;main.c: 248: static unsigned char ucInit = 0;
   848                           ;main.c: 249: if(getAdOriginalCh13Value() > 40)
   849  005D  118A  22A6  118A   	fcall	_getAdOriginalCh13Value
   850  0060  3000               	movlw	0
   851  0061  0243               	subwf	?_getAdOriginalCh13Value+1,w
   852  0062  3029               	movlw	41
   853  0063  1903               	skipnz
   854  0064  0242               	subwf	?_getAdOriginalCh13Value,w
   855  0065  1C03               	skipc
   856  0066  2891               	goto	l3306
   857                           
   858                           ;main.c: 250: {
   859                           ;main.c: 251: ucInit = 1;
   860  0067  01BF               	clrf	main@ucInit
   861  0068  0ABF               	incf	main@ucInit,f
   862                           
   863                           ;main.c: 252: tDA_timer = BIG_TIMER_WORK;
   864  0069  01BA               	clrf	main@tDA_timer
   865                           
   866                           ;main.c: 253: smallTimerOutputStep = SMALL_TIMER_OUTPUT_FIRST_STEP;
   867  006A  01B9               	clrf	main@smallTimerOutputStep
   868                           
   869                           ;main.c: 254: if(!ucBigTimerActionFlag)
   870  006B  08BB               	movf	main@ucBigTimerActionFlag,f
   871  006C  1D03               	skipz
   872  006D  2886               	goto	l3304
   873                           
   874                           ;main.c: 255: {
   875                           ;main.c: 256: startBigTimer();
   876  006E  118A  22A1  118A   	fcall	_startBigTimer
   877                           
   878                           ;main.c: 257: ucBigTimerActionFlag = 1;
   879  0071  01BB               	clrf	main@ucBigTimerActionFlag
   880  0072  0ABB               	incf	main@ucBigTimerActionFlag,f
   881  0073  2886               	goto	l3304
   882  0074                     l3282:	
   883                           
   884                           ;main.c: 263: {
   885                           ;main.c: 264: setDAC0_ChannelValue(25);
   886  0074  3019               	movlw	25
   887  0075                     L1:	
   888  0075  118A  22B5  118A   	fcall	_setDAC0_ChannelValue
   889                           
   890                           ;main.c: 265: bigTimerOutputStep++;
   891  0078  1283               	bcf	3,5	;RP0=0, select bank0
   892  0079  0AB8               	incf	main@bigTimerOutputStep,f
   893                           
   894                           ;main.c: 266: ucWaitTime1S = 0;
   895  007A  01C1               	clrf	main@ucWaitTime1S
   896                           
   897                           ;main.c: 267: break;
   898  007B  28EB               	goto	l3376
   899  007C                     l3288:	
   900  007C  28DB               	goto	l3358
   901  007D                     l3294:	
   902                           ;main.c: 271: {
   903                           ;main.c: 272: setDAC0_ChannelValue(26);
   904                           
   905                           
   906                           ;main.c: 279: {
   907                           ;main.c: 280: setDAC0_ChannelValue(27);
   908  007D  301B               	movlw	27
   909  007E  118A  22B5  118A   	fcall	_setDAC0_ChannelValue
   910                           
   911                           ;main.c: 281: PA0 = 0;
   912  0081  1283               	bcf	3,5	;RP0=0, select bank0
   913  0082  1005               	bcf	5,0
   914                           
   915                           ;main.c: 282: PA1 = 1;
   916  0083  1485               	bsf	5,1
   917  0084                     l3300:	
   918                           
   919                           ;main.c: 283: ampStep++;
   920  0084  0AB7               	incf	main@ampStep,f
   921                           
   922                           ;main.c: 285: break;
   923  0085  28EB               	goto	l3376
   924  0086                     l3304:	
   925  0086  0838               	movf	main@bigTimerOutputStep,w
   926                           
   927                           ; Switch size 1, requested type "space"
   928                           ; Number of cases is 3, Range of values is 0 to 2
   929                           ; switch strategies available:
   930                           ; Name         Instructions Cycles
   931                           ; simple_byte           10     6 (average)
   932                           ; direct_byte           13     7 (fixed)
   933                           ; jumptable            260     6 (fixed)
   934                           ; rangetable             7     6 (fixed)
   935                           ; spacedrange           12     9 (fixed)
   936                           ; locatedrange           3     3 (fixed)
   937                           ;	Chosen strategy is simple_byte
   938  0087  3A00               	xorlw	0	; case 0
   939  0088  1903               	skipnz
   940  0089  2874               	goto	l3282
   941  008A  3A01               	xorlw	1	; case 1
   942  008B  1903               	skipnz
   943  008C  287C               	goto	l3288
   944  008D  3A03               	xorlw	3	; case 2
   945  008E  1903               	skipnz
   946  008F  287D               	goto	l3294
   947  0090  28EB               	goto	l3376
   948  0091                     l3306:	
   949                           
   950                           ;main.c: 293: else if(getAdOriginalCh13Value() <35)
   951  0091  118A  22A6  118A   	fcall	_getAdOriginalCh13Value
   952  0094  3000               	movlw	0
   953  0095  0243               	subwf	?_getAdOriginalCh13Value+1,w
   954  0096  3023               	movlw	35
   955  0097  1903               	skipnz
   956  0098  0242               	subwf	?_getAdOriginalCh13Value,w
   957  0099  1803               	skipnc
   958  009A  28CC               	goto	l3342
   959                           
   960                           ;main.c: 294: {
   961                           ;main.c: 295: ucInit = 1;
   962  009B  01BF               	clrf	main@ucInit
   963  009C  0ABF               	incf	main@ucInit,f
   964                           
   965                           ;main.c: 296: bigTimerOutputStep = BIG_TIMER_OUTPUT_FIRST_STEP;
   966  009D  01B8               	clrf	main@bigTimerOutputStep
   967                           
   968                           ;main.c: 300: ucSetSmallActionFlag = 1;
   969  009E  01BA               	clrf	main@tDA_timer
   970  009F  0ABA               	incf	main@tDA_timer,f
   971                           
   972                           ;main.c: 301: startSmallTimer();
   973  00A0  118A  229C  118A   	fcall	_startSmallTimer
   974                           
   975                           ;main.c: 303: switch(smallTimerOutputStep)
   976  00A3  28BB               	goto	l3340
   977  00A4                     l718:	
   978                           ;main.c: 304: {
   979                           ;main.c: 305: case SMALL_TIMER_OUTPUT_FIRST_STEP:
   980                           
   981                           
   982                           ;main.c: 306: {
   983                           ;main.c: 307: PA3 = 0;
   984  00A4  1185               	bcf	5,3
   985  00A5                     l3316:	
   986                           
   987                           ;main.c: 308: smallTimerOutputStep++;
   988  00A5  1283               	bcf	3,5	;RP0=0, select bank0
   989  00A6  0AB9               	incf	main@smallTimerOutputStep,f
   990                           
   991                           ;main.c: 309: break;
   992  00A7  28EB               	goto	l3376
   993  00A8                     l3320:	
   994                           
   995                           ;main.c: 319: {
   996                           ;main.c: 320: setDAC0_ChannelValue(27);
   997  00A8  301B               	movlw	27
   998  00A9  118A  22B5  118A   	fcall	_setDAC0_ChannelValue
   999  00AC  28A5               	goto	l3316
  1000  00AD                     l3324:	
  1001                           
  1002                           ;main.c: 326: {
  1003                           ;main.c: 327: setDAC0_ChannelValue(26);
  1004  00AD  301A               	movlw	26
  1005  00AE  118A  22B5  118A   	fcall	_setDAC0_ChannelValue
  1006  00B1  28A5               	goto	l3316
  1007  00B2                     l3328:	
  1008                           
  1009                           ;main.c: 333: {
  1010                           ;main.c: 334: setDAC0_ChannelValue(25);
  1011  00B2  3019               	movlw	25
  1012  00B3  118A  22B5  118A   	fcall	_setDAC0_ChannelValue
  1013                           
  1014                           ;main.c: 335: smallTimerOutputStep++;
  1015  00B6  1283               	bcf	3,5	;RP0=0, select bank0
  1016  00B7  0AB9               	incf	main@smallTimerOutputStep,f
  1017                           
  1018                           ;main.c: 336: PA0 = 1;
  1019  00B8  1405               	bsf	5,0
  1020                           
  1021                           ;main.c: 337: PA1 = 0;
  1022  00B9  1085               	bcf	5,1
  1023  00BA  2884               	goto	l3300
  1024  00BB                     l3340:	
  1025  00BB  0839               	movf	main@smallTimerOutputStep,w
  1026                           
  1027                           ; Switch size 1, requested type "space"
  1028                           ; Number of cases is 5, Range of values is 0 to 4
  1029                           ; switch strategies available:
  1030                           ; Name         Instructions Cycles
  1031                           ; simple_byte           16     9 (average)
  1032                           ; direct_byte           17     7 (fixed)
  1033                           ; jumptable            260     6 (fixed)
  1034                           ; rangetable             9     6 (fixed)
  1035                           ; spacedrange           16     9 (fixed)
  1036                           ; locatedrange           5     3 (fixed)
  1037                           ;	Chosen strategy is simple_byte
  1038  00BC  3A00               	xorlw	0	; case 0
  1039  00BD  1903               	skipnz
  1040  00BE  28A4               	goto	l718
  1041  00BF  3A01               	xorlw	1	; case 1
  1042  00C0  1903               	skipnz
  1043  00C1  28A5               	goto	l3316
  1044  00C2  3A03               	xorlw	3	; case 2
  1045  00C3  1903               	skipnz
  1046  00C4  28A8               	goto	l3320
  1047  00C5  3A01               	xorlw	1	; case 3
  1048  00C6  1903               	skipnz
  1049  00C7  28AD               	goto	l3324
  1050  00C8  3A07               	xorlw	7	; case 4
  1051  00C9  1903               	skipnz
  1052  00CA  28B2               	goto	l3328
  1053  00CB  28EB               	goto	l3376
  1054  00CC                     l3342:	
  1055                           
  1056                           ;main.c: 346: else
  1057                           ;main.c: 347: {
  1058                           ;main.c: 348: if(!ucInit)
  1059  00CC  08BF               	movf	main@ucInit,f
  1060  00CD  1D03               	skipz
  1061  00CE  28EB               	goto	l3376
  1062                           
  1063                           ;main.c: 349: {
  1064                           ;main.c: 351: tDA_timer = BIG_TIMER_WORK;
  1065  00CF  01BA               	clrf	main@tDA_timer
  1066                           
  1067                           ;main.c: 352: smallTimerOutputStep = SMALL_TIMER_OUTPUT_FIRST_STEP;
  1068  00D0  01B9               	clrf	main@smallTimerOutputStep
  1069                           
  1070                           ;main.c: 353: if(!ucBigTimerActionFlag)
  1071  00D1  08BB               	movf	main@ucBigTimerActionFlag,f
  1072  00D2  1D03               	skipz
  1073  00D3  28E0               	goto	l3374
  1074                           
  1075                           ;main.c: 354: {
  1076                           ;main.c: 355: startBigTimer();
  1077  00D4  118A  22A1  118A   	fcall	_startBigTimer
  1078                           
  1079                           ;main.c: 356: ucBigTimerActionFlag = 1;
  1080  00D7  01BB               	clrf	main@ucBigTimerActionFlag
  1081  00D8  0ABB               	incf	main@ucBigTimerActionFlag,f
  1082  00D9  28E0               	goto	l3374
  1083  00DA                     l3352:	
  1084  00DA  2874               	goto	l3282
  1085  00DB                     l3358:	
  1086                           ;main.c: 362: {
  1087                           ;main.c: 363: setDAC0_ChannelValue(25);
  1088                           
  1089                           
  1090                           ;main.c: 370: {
  1091                           ;main.c: 371: setDAC0_ChannelValue(26);
  1092  00DB  301A               	movlw	26
  1093  00DC  2875               	goto	L1
  1094  00DD                     l732:	
  1095                           ;main.c: 375: }
  1096                           ;main.c: 377: case BIG_TIMER_OUTPUT_THIRD_STEP:
  1097                           
  1098                           
  1099                           ;main.c: 378: {
  1100                           ;main.c: 379: ucInit = 1;
  1101  00DD  01BF               	clrf	main@ucInit
  1102  00DE  0ABF               	incf	main@ucInit,f
  1103  00DF  287D               	goto	l3294
  1104  00E0                     l3374:	
  1105                           ;main.c: 380: setDAC0_ChannelValue(27);
  1106                           
  1107  00E0  0838               	movf	main@bigTimerOutputStep,w
  1108                           
  1109                           ; Switch size 1, requested type "space"
  1110                           ; Number of cases is 3, Range of values is 0 to 2
  1111                           ; switch strategies available:
  1112                           ; Name         Instructions Cycles
  1113                           ; simple_byte           10     6 (average)
  1114                           ; direct_byte           13     7 (fixed)
  1115                           ; jumptable            260     6 (fixed)
  1116                           ; rangetable             7     6 (fixed)
  1117                           ; spacedrange           12     9 (fixed)
  1118                           ; locatedrange           3     3 (fixed)
  1119                           ;	Chosen strategy is simple_byte
  1120  00E1  3A00               	xorlw	0	; case 0
  1121  00E2  1903               	skipnz
  1122  00E3  28DA               	goto	l3352
  1123  00E4  3A01               	xorlw	1	; case 1
  1124  00E5  1903               	skipnz
  1125  00E6  28DB               	goto	l3358
  1126  00E7  3A03               	xorlw	3	; case 2
  1127  00E8  1903               	skipnz
  1128  00E9  28DD               	goto	l732
  1129  00EA  28EB               	goto	l3376
  1130  00EB                     l3376:	
  1131                           
  1132                           ;main.c: 392: }
  1133                           ;main.c: 393: }
  1134                           ;main.c: 395: if(BIG_TIMER_WORK == tDA_timer)
  1135  00EB  08BA               	movf	main@tDA_timer,f
  1136  00EC  1D03               	skipz
  1137  00ED  28F8               	goto	l734
  1138                           
  1139                           ;main.c: 396: {
  1140                           ;main.c: 397: if(!PA3)
  1141  00EE  1985               	btfsc	5,3
  1142  00EF  2945               	goto	l3228
  1143  00F0  3005               	movlw	5
  1144                           
  1145                           ;main.c: 398: {
  1146                           ;main.c: 399: ucWaitTime1S++;
  1147  00F1  0AC1               	incf	main@ucWaitTime1S,f
  1148                           
  1149                           ;main.c: 400: if(ucWaitTime1S >= 5)
  1150  00F2  0241               	subwf	main@ucWaitTime1S,w
  1151  00F3  1C03               	skipc
  1152  00F4  2945               	goto	l3228
  1153                           
  1154                           ;main.c: 401: {
  1155                           ;main.c: 402: PA3 = 1;
  1156  00F5  1585               	bsf	5,3
  1157  00F6                     l3386:	
  1158                           
  1159                           ;main.c: 403: ucWaitTime1S = 0;
  1160  00F6  01C1               	clrf	main@ucWaitTime1S
  1161  00F7  2945               	goto	l3228
  1162  00F8                     l734:	
  1163                           
  1164                           ;main.c: 407: else
  1165                           ;main.c: 408: {
  1166                           ;main.c: 409: PA3 = 0;
  1167  00F8  1185               	bcf	5,3
  1168  00F9  28F6               	goto	l3386
  1169  00FA                     l3390:	
  1170                           
  1171                           ;main.c: 422: {
  1172                           ;main.c: 423: if(!isFinishedBigTimer())
  1173  00FA  118A  2297  118A   	fcall	_isFinishedBigTimer
  1174  00FD  3800               	iorlw	0
  1175  00FE  1D03               	skipz
  1176  00FF  2841               	goto	l3244
  1177  0100                     l3392:	
  1178                           
  1179                           ;main.c: 424: {
  1180                           ;main.c: 425: ampStep = PROCESS_AD_VALUE;
  1181  0100  3005               	movlw	5
  1182  0101  00B7               	movwf	main@ampStep
  1183                           
  1184                           ;main.c: 426: }
  1185  0102  2945               	goto	l3228
  1186  0103                     l3396:	
  1187                           
  1188                           ;main.c: 435: {
  1189                           ;main.c: 436: if((ucBigTimerActionFlag == 1) && isFinishedBigTimer())
  1190  0103  0B3B               	decfsz	main@ucBigTimerActionFlag,w
  1191  0104  290B               	goto	l3402
  1192  0105  118A  2297  118A   	fcall	_isFinishedBigTimer
  1193  0108  3A00               	xorlw	0
  1194  0109  1D03               	btfss	3,2
  1195  010A  2841               	goto	l3244
  1196  010B                     l3402:	
  1197                           
  1198                           ;main.c: 440: else if(!isFinishedSmallTimer())
  1199  010B  118A  2292  118A   	fcall	_isFinishedSmallTimer
  1200  010E  3800               	iorlw	0
  1201  010F  1D03               	skipz
  1202  0110  2841               	goto	l3244
  1203                           
  1204                           ;main.c: 441: {
  1205                           ;main.c: 442: if(getAdOriginalCh13Value() > 40)
  1206  0111  118A  22A6  118A   	fcall	_getAdOriginalCh13Value
  1207  0114  3000               	movlw	0
  1208  0115  0243               	subwf	?_getAdOriginalCh13Value+1,w
  1209  0116  3029               	movlw	41
  1210  0117  1903               	skipnz
  1211  0118  0242               	subwf	?_getAdOriginalCh13Value,w
  1212  0119  1C03               	skipc
  1213  011A  2945               	goto	l3228
  1214                           
  1215                           ;main.c: 446: ucSetSmallActionFlag = 0;
  1216  011B  01C1               	clrf	main@ucWaitTime1S
  1217  011C  2900               	goto	l3392
  1218  011D                     l3414:	
  1219  011D  083A               	movf	main@tDA_timer,w
  1220                           
  1221                           ; Switch size 1, requested type "space"
  1222                           ; Number of cases is 2, Range of values is 0 to 1
  1223                           ; switch strategies available:
  1224                           ; Name         Instructions Cycles
  1225                           ; simple_byte            7     4 (average)
  1226                           ; direct_byte           11     7 (fixed)
  1227                           ; jumptable            260     6 (fixed)
  1228                           ; rangetable             6     6 (fixed)
  1229                           ; spacedrange           10     9 (fixed)
  1230                           ; locatedrange           2     3 (fixed)
  1231                           ;	Chosen strategy is simple_byte
  1232  011E  3A00               	xorlw	0	; case 0
  1233  011F  1903               	skipnz
  1234  0120  28FA               	goto	l3390
  1235  0121  3A01               	xorlw	1	; case 1
  1236  0122  1903               	skipnz
  1237  0123  2903               	goto	l3396
  1238  0124  2960               	goto	l684
  1239  0125                     l751:	
  1240                           ;main.c: 477: }
  1241                           ;main.c: 479: case SET_TIME_BE_FINISHED:
  1242                           
  1243  0125  3019               	movlw	25
  1244                           
  1245                           ;main.c: 480: {
  1246                           ;main.c: 481: PA2 = 1;
  1247  0126  1505               	bsf	5,2
  1248                           
  1249                           ;main.c: 482: PA0 = 0;
  1250  0127  1005               	bcf	5,0
  1251                           
  1252                           ;main.c: 483: PA1 = 0;
  1253  0128  1085               	bcf	5,1
  1254                           
  1255                           ;main.c: 484: PA3 = 0;
  1256  0129  1185               	bcf	5,3
  1257                           
  1258                           ;main.c: 487: ucSetSmallActionFlag = 0;
  1259  012A  01C1               	clrf	main@ucWaitTime1S
  1260                           
  1261                           ;main.c: 488: setDAC0_ChannelValue(25);
  1262  012B  118A  22B5  118A   	fcall	_setDAC0_ChannelValue
  1263  012E  2841               	goto	l3244
  1264  012F                     l752:	
  1265                           ;main.c: 491: }
  1266                           ;main.c: 493: case CHECKING_PULL_OUT_BATTERY:
  1267                           
  1268                           
  1269                           ;main.c: 494: {
  1270                           ;main.c: 495: static unsigned char ucCheckBatteryCnt = 0;
  1271                           ;main.c: 496: if(PB2)
  1272  012F  1D06               	btfss	6,2
  1273  0130  2933               	goto	l3424
  1274                           
  1275                           ;main.c: 497: ucCheckBatteryCnt++;
  1276  0131  0ABC               	incf	main@ucCheckBatteryCnt,f
  1277  0132  2934               	goto	l3426
  1278  0133                     l3424:	
  1279                           
  1280                           ;main.c: 498: else
  1281                           ;main.c: 499: ucCheckBatteryCnt = 0;
  1282  0133  01BC               	clrf	main@ucCheckBatteryCnt
  1283  0134                     l3426:	
  1284                           
  1285                           ;main.c: 501: if(ucCheckBatteryCnt > 2)
  1286  0134  3003               	movlw	3
  1287  0135  023C               	subwf	main@ucCheckBatteryCnt,w
  1288  0136  1C03               	skipc
  1289  0137  2945               	goto	l3228
  1290                           
  1291                           ;main.c: 502: {
  1292                           ;main.c: 503: ucCheckBatteryCnt = 0;
  1293  0138  01BC               	clrf	main@ucCheckBatteryCnt
  1294  0139  2841               	goto	l3244
  1295  013A                     l758:	
  1296                           ;main.c: 507: }
  1297                           ;main.c: 509: case CHECKING_INSTALLED_BATTERY:
  1298                           
  1299                           
  1300                           ;main.c: 510: {
  1301                           ;main.c: 511: static unsigned char ucInstalledBatteryCnt = 0;
  1302                           ;main.c: 512: if(!PB2)
  1303  013A  1906               	btfsc	6,2
  1304  013B  293E               	goto	l3434
  1305                           
  1306                           ;main.c: 513: ucInstalledBatteryCnt++;
  1307  013C  0AC0               	incf	main@ucInstalledBatteryCnt,f
  1308  013D  293F               	goto	l3436
  1309  013E                     l3434:	
  1310                           
  1311                           ;main.c: 514: else
  1312                           ;main.c: 515: ucInstalledBatteryCnt = 0;
  1313  013E  01C0               	clrf	main@ucInstalledBatteryCnt
  1314  013F                     l3436:	
  1315                           
  1316                           ;main.c: 517: if(ucInstalledBatteryCnt > 10)
  1317  013F  300B               	movlw	11
  1318  0140  0240               	subwf	main@ucInstalledBatteryCnt,w
  1319  0141  1C03               	skipc
  1320  0142  2945               	goto	l3228
  1321                           
  1322                           ;main.c: 518: {
  1323                           ;main.c: 519: ucInstalledBatteryCnt = 0;
  1324  0143  01C0               	clrf	main@ucInstalledBatteryCnt
  1325                           
  1326                           ;main.c: 520: ampStep = SENSE_PB2_INPUT_VOLTAGE;
  1327  0144  01B7               	clrf	main@ampStep
  1328  0145                     l3228:	
  1329  0145  0064               	clrwdt	;#
  1330                           
  1331                           ;main.c: 171: if(isPermitSampleTime())
  1332  0146  118A  22AB  118A   	fcall	_isPermitSampleTime
  1333  0149  3A00               	xorlw	0
  1334  014A  1903               	skipnz
  1335  014B  2945               	goto	l3228
  1336                           
  1337                           ;main.c: 172: {
  1338                           ;main.c: 173: clrSampeTime();
  1339  014C  118A  22C2  118A   	fcall	_clrSampeTime
  1340                           
  1341                           ;main.c: 174: process_AD_Converter_Value();
  1342  014F  118A  2161  118A   	fcall	_process_AD_Converter_Value
  1343  0152  1283               	bcf	3,5	;RP0=0, select bank0
  1344  0153  1303               	bcf	3,6	;RP1=0, select bank0
  1345  0154  0837               	movf	main@ampStep,w
  1346                           
  1347                           ; Switch size 1, requested type "space"
  1348                           ; Number of cases is 10, Range of values is 0 to 9
  1349                           ; switch strategies available:
  1350                           ; Name         Instructions Cycles
  1351                           ; direct_byte           27     7 (fixed)
  1352                           ; simple_byte           31    16 (average)
  1353                           ; jumptable            260     6 (fixed)
  1354                           ; rangetable            14     6 (fixed)
  1355                           ; spacedrange           26     9 (fixed)
  1356                           ; locatedrange          10     3 (fixed)
  1357                           ;	Chosen strategy is direct_byte
  1358  0155  0084               	movwf	4
  1359  0156  300A               	movlw	10
  1360  0157  0204               	subwf	4,w
  1361  0158  1803               	skipnc
  1362  0159  2945               	goto	l3228
  1363  015A  3002               	movlw	high S3492
  1364  015B  008A               	movwf	10
  1365  015C  1003               	clrc
  1366  015D  0D04               	rlf	4,w
  1367  015E  3E2B               	addlw	low S3492
  1368  015F  0082               	movwf	2
  1369  0160                     l684:	
  1370  0160  2945               	goto	l3228
  1371  0161                     __end_of_main:	
  1372                           
  1373                           	psect	swtext1
  1374  022B                     __pswtext1:	
  1375  022B                     S3492:	
  1376  022B  118A  2836         	ljmp	l3236
  1377  022D  118A  2844         	ljmp	l689
  1378  022F  118A  284F         	ljmp	l695
  1379  0231  118A  2850         	ljmp	l697
  1380  0233  118A  285B         	ljmp	l703
  1381  0235  118A  285D         	ljmp	l3270
  1382  0237  118A  291D         	ljmp	l3414
  1383  0239  118A  2925         	ljmp	l751
  1384  023B  118A  292F         	ljmp	l752
  1385  023D  118A  293A         	ljmp	l758
  1386                           
  1387                           	psect	text493
  1388  0161                     __ptext493:	
  1389 ;; =============== function _main ends ============
  1390                           
  1391                           
  1392 ;; *************** function _process_AD_Converter_Value *****************
  1393 ;; Defined at:
  1394 ;;		line 94 in file "C:\sw_dev\AK7030-OTP\common.c"
  1395 ;; Parameters:    Size  Location     Type
  1396 ;;		None
  1397 ;; Auto vars:     Size  Location     Type
  1398 ;;		None
  1399 ;; Return value:  Size  Location     Type
  1400 ;;		None               void
  1401 ;; Registers used:
  1402 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1403 ;; Tracked objects:
  1404 ;;		On entry : 0/0
  1405 ;;		On exit  : 0/0
  1406 ;;		Unchanged: FFE9F/0
  1407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1408 ;;      Params:         0       0       0       0       0
  1409 ;;      Locals:         0       0       0       0       0
  1410 ;;      Temps:          0       0       0       0       0
  1411 ;;      Totals:         0       0       0       0       0
  1412 ;;Total ram usage:        0 bytes
  1413 ;; Hardware stack levels used:    1
  1414 ;; Hardware stack levels required when called:    4
  1415 ;; This function calls:
  1416 ;;		_getAD_ConvertFlag
  1417 ;;		_setAD_ConvertFlag
  1418 ;;		_AD_Sample
  1419 ;;		_adc_start
  1420 ;; This function is called by:
  1421 ;;		_main
  1422 ;; This function uses a non-reentrant model
  1423 ;;
  1424  0161                     _process_AD_Converter_Value:	
  1425                           
  1426                           ;common.c: 65: return adc_convert_flag;
  1427                           
  1428                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1429                           
  1430                           ;common.c: 95: if(getAD_ConvertFlag())
  1431                           
  1432                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1433  0161  0879               	movf	_adc_convert_flag,w
  1434  0162  3A00               	xorlw	0
  1435  0163  1903               	skipnz
  1436  0164  0008               	return
  1437                           
  1438                           ;common.c: 96: {
  1439                           ;common.c: 97: setAD_ConvertFlag(0);
  1440  0165  3000               	movlw	0
  1441  0166  216D  118A         	fcall	_setAD_ConvertFlag
  1442                           
  1443                           ;common.c: 98: AD_Sample();
  1444  0168  2175  118A         	fcall	_AD_Sample
  1445                           
  1446                           ;common.c: 100: adc_start();
  1447  016A  2972               	ljmp	l3062
  1448  016B                     __end_of_process_AD_Converter_Value:	
  1449  016B                     __ptext497:	
  1450 ;; =============== function _setAD_ConvertFlag ends ============
  1451                           
  1452                           
  1453 ;; *************** function _getAD_ConvertFlag *****************
  1454 ;; Defined at:
  1455 ;;		line 64 in file "C:\sw_dev\AK7030-OTP\common.c"
  1456 ;; Parameters:    Size  Location     Type
  1457 ;;		None
  1458 ;; Auto vars:     Size  Location     Type
  1459 ;;		None
  1460 ;; Return value:  Size  Location     Type
  1461 ;;                  1    wreg      unsigned char 
  1462 ;; Registers used:
  1463 ;;		wreg
  1464 ;; Tracked objects:
  1465 ;;		On entry : 0/0
  1466 ;;		On exit  : 0/0
  1467 ;;		Unchanged: FFFFF/0
  1468 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1469 ;;      Params:         0       0       0       0       0
  1470 ;;      Locals:         0       0       0       0       0
  1471 ;;      Temps:          0       0       0       0       0
  1472 ;;      Totals:         0       0       0       0       0
  1473 ;;Total ram usage:        0 bytes
  1474 ;; Hardware stack levels used:    1
  1475 ;; Hardware stack levels required when called:    2
  1476 ;; This function calls:
  1477 ;;		Nothing
  1478 ;; This function is called by:
  1479 ;;		_process_AD_Converter_Value
  1480 ;; This function uses a non-reentrant model
  1481 ;;
  1482  016B                     _getAD_ConvertFlag:	
  1483                           
  1484                           ;common.c: 65: return adc_convert_flag;
  1485                           
  1486                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1487  016B  0879               	movf	_adc_convert_flag,w
  1488  016C  0008               	return
  1489  016D                     __end_of_getAD_ConvertFlag:	
  1490  016D                     __ptext496:	
  1491 ;; =============== function _getAdOriginalValue ends ============
  1492                           
  1493                           
  1494 ;; *************** function _setAD_ConvertFlag *****************
  1495 ;; Defined at:
  1496 ;;		line 70 in file "C:\sw_dev\AK7030-OTP\common.c"
  1497 ;; Parameters:    Size  Location     Type
  1498 ;;  flag            1    wreg     unsigned char 
  1499 ;; Auto vars:     Size  Location     Type
  1500 ;;  flag            1    0[BANK0 ] unsigned char 
  1501 ;; Return value:  Size  Location     Type
  1502 ;;		None               void
  1503 ;; Registers used:
  1504 ;;		wreg
  1505 ;; Tracked objects:
  1506 ;;		On entry : 0/0
  1507 ;;		On exit  : 60/0
  1508 ;;		Unchanged: FFF9F/0
  1509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1510 ;;      Params:         0       0       0       0       0
  1511 ;;      Locals:         0       1       0       0       0
  1512 ;;      Temps:          0       0       0       0       0
  1513 ;;      Totals:         0       1       0       0       0
  1514 ;;Total ram usage:        1 bytes
  1515 ;; Hardware stack levels used:    1
  1516 ;; Hardware stack levels required when called:    2
  1517 ;; This function calls:
  1518 ;;		Nothing
  1519 ;; This function is called by:
  1520 ;;		_process_AD_Converter_Value
  1521 ;; This function uses a non-reentrant model
  1522 ;;
  1523  016D                     _setAD_ConvertFlag:	
  1524                           
  1525                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1526                           ;setAD_ConvertFlag@flag stored from wreg
  1527  016D  1283               	bcf	3,5	;RP0=0, select bank0
  1528  016E  1303               	bcf	3,6	;RP1=0, select bank0
  1529  016F  00C2               	movwf	setAD_ConvertFlag@flag
  1530                           
  1531                           ;common.c: 71: adc_convert_flag = flag;
  1532  0170  00F9               	movwf	_adc_convert_flag
  1533  0171  0008               	return
  1534  0172                     __end_of_setAD_ConvertFlag:	
  1535  0172                     __ptext508:	
  1536 ;; =============== function _isPermitSampleTime ends ============
  1537                           
  1538                           
  1539 ;; *************** function _adc_start *****************
  1540 ;; Defined at:
  1541 ;;		line 99 in file "C:\sw_dev\AK7030-OTP\periph.c"
  1542 ;; Parameters:    Size  Location     Type
  1543 ;;		None
  1544 ;; Auto vars:     Size  Location     Type
  1545 ;;		None
  1546 ;; Return value:  Size  Location     Type
  1547 ;;		None               void
  1548 ;; Registers used:
  1549 ;;		None
  1550 ;; Tracked objects:
  1551 ;;		On entry : 40/20
  1552 ;;		On exit  : 60/0
  1553 ;;		Unchanged: FFF9F/0
  1554 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1555 ;;      Params:         0       0       0       0       0
  1556 ;;      Locals:         0       0       0       0       0
  1557 ;;      Temps:          0       0       0       0       0
  1558 ;;      Totals:         0       0       0       0       0
  1559 ;;Total ram usage:        0 bytes
  1560 ;; Hardware stack levels used:    1
  1561 ;; Hardware stack levels required when called:    2
  1562 ;; This function calls:
  1563 ;;		Nothing
  1564 ;; This function is called by:
  1565 ;;		_main
  1566 ;;		_process_AD_Converter_Value
  1567 ;; This function uses a non-reentrant model
  1568 ;;
  1569  0172                     _adc_start:	
  1570  0172                     l3062:	
  1571                           ; Regs used in _adc_start: []
  1572                           
  1573                           
  1574                           ;periph.c: 100: GO=1;
  1575  0172  1283               	bcf	3,5	;RP0=0, select bank0
  1576  0173  149F               	bsf	31,1
  1577  0174  0008               	return
  1578  0175                     __end_of_adc_start:	
  1579  0175                     __ptext494:	
  1580 ;; =============== function _process_AD_Converter_Value ends ============
  1581                           
  1582                           
  1583 ;; *************** function _AD_Sample *****************
  1584 ;; Defined at:
  1585 ;;		line 114 in file "C:\sw_dev\AK7030-OTP\common.c"
  1586 ;; Parameters:    Size  Location     Type
  1587 ;;		None
  1588 ;; Auto vars:     Size  Location     Type
  1589 ;;  index           1    4[BANK0 ] unsigned char 
  1590 ;; Return value:  Size  Location     Type
  1591 ;;		None               void
  1592 ;; Registers used:
  1593 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1594 ;; Tracked objects:
  1595 ;;		On entry : 60/0
  1596 ;;		On exit  : 60/0
  1597 ;;		Unchanged: FFE9F/0
  1598 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1599 ;;      Params:         0       0       0       0       0
  1600 ;;      Locals:         0       1       0       0       0
  1601 ;;      Temps:          0       2       0       0       0
  1602 ;;      Totals:         0       3       0       0       0
  1603 ;;Total ram usage:        3 bytes
  1604 ;; Hardware stack levels used:    1
  1605 ;; Hardware stack levels required when called:    3
  1606 ;; This function calls:
  1607 ;;		_getAdOriginalValue
  1608 ;; This function is called by:
  1609 ;;		_process_AD_Converter_Value
  1610 ;; This function uses a non-reentrant model
  1611 ;;
  1612  0175                     _AD_Sample:	
  1613                           
  1614                           ;common.c: 115: if(sampleTimes < 6)
  1615                           
  1616                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1617  0175  3006               	movlw	6
  1618  0176  0236               	subwf	_sampleTimes,w
  1619  0177  1803               	skipnc
  1620  0178  0008               	return
  1621                           
  1622                           ;common.c: 116: {
  1623                           ;common.c: 118: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1624  0179  21CD  118A         	fcall	_getAdOriginalValue
  1625  017B  1003               	clrc
  1626  017C  0D36               	rlf	_sampleTimes,w
  1627  017D  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1628  017E  0084               	movwf	4
  1629  017F  0842               	movf	?_getAdOriginalValue,w
  1630  0180  1383               	bcf	3,7	;select IRP bank0
  1631  0181  0080               	movwf	0
  1632  0182  0A84               	incf	4,f
  1633  0183  0843               	movf	?_getAdOriginalValue+1,w
  1634  0184  0080               	movwf	0
  1635                           
  1636                           ;common.c: 120: if(sampleTimes == 0)
  1637  0185  08B6               	movf	_sampleTimes,f
  1638  0186  1D03               	skipz
  1639  0187  2990               	goto	l3170
  1640                           
  1641                           ;common.c: 121: {
  1642                           ;common.c: 122: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1643  0188  0821               	movf	_buffer_Sample_AD_Value+1,w
  1644  0189  00B1               	movwf	_multiFilterMaxValue+1
  1645  018A  0820               	movf	_buffer_Sample_AD_Value,w
  1646  018B  00B0               	movwf	_multiFilterMaxValue
  1647                           
  1648                           ;common.c: 123: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1649  018C  0821               	movf	_buffer_Sample_AD_Value+1,w
  1650  018D  00B3               	movwf	_multiFilterMinValue+1
  1651  018E  0820               	movf	_buffer_Sample_AD_Value,w
  1652  018F  00B2               	movwf	_multiFilterMinValue
  1653  0190                     l3170:	
  1654                           
  1655                           ;common.c: 124: }
  1656                           ;common.c: 126: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1657  0190  21D2  118A         	fcall	PL2	;call to abstracted procedure
  1658  0192  0231               	subwf	_multiFilterMaxValue+1,w
  1659  0193  1D03               	skipz
  1660  0194  2997               	goto	u555
  1661  0195  0844               	movf	??_AD_Sample,w
  1662  0196  0230               	subwf	_multiFilterMaxValue,w
  1663  0197                     u555:	
  1664  0197  1803               	skipnc
  1665  0198  29A2               	goto	l1461
  1666                           
  1667                           ;common.c: 127: {
  1668                           ;common.c: 128: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1669  0199  1003               	clrc
  1670  019A  0D36               	rlf	_sampleTimes,w
  1671  019B  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1672  019C  0084               	movwf	4
  1673  019D  0800               	movf	0,w
  1674  019E  00B0               	movwf	_multiFilterMaxValue
  1675  019F  0A84               	incf	4,f
  1676  01A0  0800               	movf	0,w
  1677  01A1  00B1               	movwf	_multiFilterMaxValue+1
  1678  01A2                     l1461:	
  1679                           
  1680                           ;common.c: 129: }
  1681                           ;common.c: 130: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1682  01A2  21D2  118A         	fcall	PL2	;call to abstracted procedure
  1683  01A4  0833               	movf	_multiFilterMinValue+1,w
  1684  01A5  0245               	subwf	??_AD_Sample+1,w
  1685  01A6  1D03               	skipz
  1686  01A7  29AA               	goto	u565
  1687  01A8  0832               	movf	_multiFilterMinValue,w
  1688  01A9  0244               	subwf	??_AD_Sample,w
  1689  01AA                     u565:	
  1690  01AA  1803               	skipnc
  1691  01AB  29B5               	goto	l3176
  1692                           
  1693                           ;common.c: 131: {
  1694                           ;common.c: 132: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1695  01AC  1003               	clrc
  1696  01AD  0D36               	rlf	_sampleTimes,w
  1697  01AE  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1698  01AF  0084               	movwf	4
  1699  01B0  0800               	movf	0,w
  1700  01B1  00B2               	movwf	_multiFilterMinValue
  1701  01B2  0A84               	incf	4,f
  1702  01B3  0800               	movf	0,w
  1703  01B4  00B3               	movwf	_multiFilterMinValue+1
  1704  01B5                     l3176:	
  1705  01B5  3006               	movlw	6
  1706                           
  1707                           ;common.c: 137: sampleTimes++;
  1708  01B6  0AB6               	incf	_sampleTimes,f
  1709                           
  1710                           ;common.c: 139: if(sampleTimes >= 6)
  1711  01B7  0236               	subwf	_sampleTimes,w
  1712  01B8  1C03               	skipc
  1713  01B9  0008               	return
  1714                           
  1715                           ;common.c: 140: {
  1716                           ;common.c: 141: sampleTimes = 0;
  1717  01BA  01B6               	clrf	_sampleTimes
  1718                           
  1719                           ;common.c: 144: {
  1720                           ;common.c: 146: sampleCH13Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1721  01BB  0847               	movf	_sampleChannelSelect,w
  1722  01BC  3A0D               	xorlw	13
  1723                           
  1724                           ;common.c: 147: sampleChannelSelect = 13;
  1725  01BD  300D               	movlw	13
  1726  01BE  00C7               	movwf	_sampleChannelSelect
  1727                           
  1728                           ;common.c: 158: }
  1729                           ;common.c: 160: for(unsigned char index = 0; index < 6;index++)
  1730                           
  1731                           ;common.c: 148: }
  1732  01BF  01C6               	clrf	AD_Sample@index
  1733  01C0                     l3198:	
  1734                           
  1735                           ;common.c: 161: buffer_Sample_AD_Value[index] = 0;
  1736  01C0  1003               	clrc
  1737  01C1  0D46               	rlf	AD_Sample@index,w
  1738  01C2  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1739  01C3  0084               	movwf	4
  1740  01C4  3006               	movlw	6
  1741  01C5  0180               	clrf	0
  1742  01C6  0A84               	incf	4,f
  1743  01C7  0180               	clrf	0
  1744  01C8  0AC6               	incf	AD_Sample@index,f
  1745  01C9  0246               	subwf	AD_Sample@index,w
  1746  01CA  1803               	btfsc	3,0
  1747  01CB  0008               	return
  1748  01CC  29C0               	goto	l3198
  1749  01CD                     __end_of_AD_Sample:	
  1750  01CD                     __ptext495:	
  1751 ;; =============== function _AD_Sample ends ============
  1752                           
  1753                           
  1754 ;; *************** function _getAdOriginalValue *****************
  1755 ;; Defined at:
  1756 ;;		line 76 in file "C:\sw_dev\AK7030-OTP\common.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;		None
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  2    0[BANK0 ] unsigned int 
  1763 ;; Registers used:
  1764 ;;		wreg
  1765 ;; Tracked objects:
  1766 ;;		On entry : 60/0
  1767 ;;		On exit  : 60/0
  1768 ;;		Unchanged: FFF9F/0
  1769 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1770 ;;      Params:         0       2       0       0       0
  1771 ;;      Locals:         0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0
  1773 ;;      Totals:         0       2       0       0       0
  1774 ;;Total ram usage:        2 bytes
  1775 ;; Hardware stack levels used:    1
  1776 ;; Hardware stack levels required when called:    2
  1777 ;; This function calls:
  1778 ;;		Nothing
  1779 ;; This function is called by:
  1780 ;;		_AD_Sample
  1781 ;; This function uses a non-reentrant model
  1782 ;;
  1783  01CD                     _getAdOriginalValue:	
  1784                           
  1785                           ;common.c: 77: return adc_original_value;
  1786                           
  1787                           ; Regs used in _getAdOriginalValue: [wreg]
  1788  01CD  082F               	movf	_adc_original_value+1,w
  1789  01CE  00C3               	movwf	?_getAdOriginalValue+1
  1790  01CF  082E               	movf	_adc_original_value,w
  1791  01D0  00C2               	movwf	?_getAdOriginalValue
  1792  01D1  0008               	return
  1793  01D2                     __end_of_getAdOriginalValue:	
  1794  01D2                     PL2:	
  1795  01D2  1003               	clrc
  1796  01D3  0D36               	rlf	_sampleTimes,w
  1797  01D4  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1798  01D5  0084               	movwf	4
  1799  01D6  0800               	movf	0,w
  1800  01D7  00C4               	movwf	??_AD_Sample
  1801  01D8  0A84               	incf	4,f
  1802  01D9  0800               	movf	0,w
  1803  01DA  00C5               	movwf	??_AD_Sample+1
  1804  01DB  0008               	return
  1805                           
  1806                           	psect	text498
  1807  0292                     __ptext498:	
  1808 ;; =============== function _getAD_ConvertFlag ends ============
  1809                           
  1810                           
  1811 ;; *************** function _isFinishedSmallTimer *****************
  1812 ;; Defined at:
  1813 ;;		line 226 in file "C:\sw_dev\AK7030-OTP\common.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      unsigned char 
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0
  1822 ;; Tracked objects:
  1823 ;;		On entry : 60/0
  1824 ;;		On exit  : 60/0
  1825 ;;		Unchanged: FFF9F/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1827 ;;      Params:         0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0
  1830 ;;      Totals:         0       0       0       0       0
  1831 ;;Total ram usage:        0 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    2
  1834 ;; This function calls:
  1835 ;;		Nothing
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840  0292                     _isFinishedSmallTimer:	
  1841                           
  1842                           ;common.c: 227: if(uiSmallTimer == 0)
  1843                           
  1844                           ; Regs used in _isFinishedSmallTimer: [wreg+status,2+status,0]
  1845  0292  0835               	movf	_uiSmallTimer+1,w
  1846  0293  0434               	iorwf	_uiSmallTimer,w
  1847  0294  1903               	btfsc	3,2
  1848                           
  1849                           ;common.c: 228: return 1;
  1850  0295  3401               	retlw	1
  1851                           
  1852                           ;common.c: 229: else
  1853                           ;common.c: 230: return 0;
  1854  0296  3400               	retlw	0
  1855  0297                     __end_of_isFinishedSmallTimer:	
  1856                           
  1857                           	psect	text499
  1858  0297                     __ptext499:	
  1859 ;; =============== function _isFinishedSmallTimer ends ============
  1860                           
  1861                           
  1862 ;; *************** function _isFinishedBigTimer *****************
  1863 ;; Defined at:
  1864 ;;		line 218 in file "C:\sw_dev\AK7030-OTP\common.c"
  1865 ;; Parameters:    Size  Location     Type
  1866 ;;		None
  1867 ;; Auto vars:     Size  Location     Type
  1868 ;;		None
  1869 ;; Return value:  Size  Location     Type
  1870 ;;                  1    wreg      unsigned char 
  1871 ;; Registers used:
  1872 ;;		wreg, status,2, status,0
  1873 ;; Tracked objects:
  1874 ;;		On entry : 60/0
  1875 ;;		On exit  : 60/0
  1876 ;;		Unchanged: FFF9F/0
  1877 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1878 ;;      Params:         0       0       0       0       0
  1879 ;;      Locals:         0       0       0       0       0
  1880 ;;      Temps:          0       0       0       0       0
  1881 ;;      Totals:         0       0       0       0       0
  1882 ;;Total ram usage:        0 bytes
  1883 ;; Hardware stack levels used:    1
  1884 ;; Hardware stack levels required when called:    2
  1885 ;; This function calls:
  1886 ;;		Nothing
  1887 ;; This function is called by:
  1888 ;;		_main
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891  0297                     _isFinishedBigTimer:	
  1892                           
  1893                           ;common.c: 219: if(uiBigTimer == 0)
  1894                           
  1895                           ; Regs used in _isFinishedBigTimer: [wreg+status,2+status,0]
  1896  0297  0877               	movf	_uiBigTimer+1,w
  1897  0298  0476               	iorwf	_uiBigTimer,w
  1898  0299  1903               	btfsc	3,2
  1899                           
  1900                           ;common.c: 220: return 1;
  1901  029A  3401               	retlw	1
  1902                           
  1903                           ;common.c: 221: else
  1904                           ;common.c: 222: return 0;
  1905  029B  3400               	retlw	0
  1906  029C                     __end_of_isFinishedBigTimer:	
  1907                           
  1908                           	psect	text500
  1909  029C                     __ptext500:	
  1910 ;; =============== function _isFinishedBigTimer ends ============
  1911                           
  1912                           
  1913 ;; *************** function _startSmallTimer *****************
  1914 ;; Defined at:
  1915 ;;		line 208 in file "C:\sw_dev\AK7030-OTP\common.c"
  1916 ;; Parameters:    Size  Location     Type
  1917 ;;		None
  1918 ;; Auto vars:     Size  Location     Type
  1919 ;;		None
  1920 ;; Return value:  Size  Location     Type
  1921 ;;		None               void
  1922 ;; Registers used:
  1923 ;;		wreg
  1924 ;; Tracked objects:
  1925 ;;		On entry : 60/0
  1926 ;;		On exit  : 60/0
  1927 ;;		Unchanged: FFF9F/0
  1928 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1929 ;;      Params:         0       0       0       0       0
  1930 ;;      Locals:         0       0       0       0       0
  1931 ;;      Temps:          0       0       0       0       0
  1932 ;;      Totals:         0       0       0       0       0
  1933 ;;Total ram usage:        0 bytes
  1934 ;; Hardware stack levels used:    1
  1935 ;; Hardware stack levels required when called:    2
  1936 ;; This function calls:
  1937 ;;		Nothing
  1938 ;; This function is called by:
  1939 ;;		_main
  1940 ;; This function uses a non-reentrant model
  1941 ;;
  1942  029C                     _startSmallTimer:	
  1943                           
  1944                           ;common.c: 209: uiSmallTimer = 10800;
  1945                           
  1946                           ; Regs used in _startSmallTimer: [wreg]
  1947  029C  3030               	movlw	48
  1948  029D  00B4               	movwf	_uiSmallTimer
  1949  029E  302A               	movlw	42
  1950  029F  00B5               	movwf	_uiSmallTimer+1
  1951  02A0  0008               	return
  1952  02A1                     __end_of_startSmallTimer:	
  1953                           
  1954                           	psect	text501
  1955  02B5                     __ptext501:	
  1956 ;; =============== function _startSmallTimer ends ============
  1957                           
  1958                           
  1959 ;; *************** function _setDAC0_ChannelValue *****************
  1960 ;; Defined at:
  1961 ;;		line 181 in file "C:\sw_dev\AK7030-OTP\common.c"
  1962 ;; Parameters:    Size  Location     Type
  1963 ;;  ucValue         1    wreg     unsigned char 
  1964 ;; Auto vars:     Size  Location     Type
  1965 ;;  ucValue         1    0[BANK0 ] unsigned char 
  1966 ;; Return value:  Size  Location     Type
  1967 ;;		None               void
  1968 ;; Registers used:
  1969 ;;		wreg
  1970 ;; Tracked objects:
  1971 ;;		On entry : 60/0
  1972 ;;		On exit  : 60/20
  1973 ;;		Unchanged: FFF9F/0
  1974 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1975 ;;      Params:         0       0       0       0       0
  1976 ;;      Locals:         0       1       0       0       0
  1977 ;;      Temps:          0       0       0       0       0
  1978 ;;      Totals:         0       1       0       0       0
  1979 ;;Total ram usage:        1 bytes
  1980 ;; Hardware stack levels used:    1
  1981 ;; Hardware stack levels required when called:    2
  1982 ;; This function calls:
  1983 ;;		Nothing
  1984 ;; This function is called by:
  1985 ;;		_main
  1986 ;; This function uses a non-reentrant model
  1987 ;;
  1988  02B5                     _setDAC0_ChannelValue:	
  1989                           
  1990                           ; Regs used in _setDAC0_ChannelValue: [wreg]
  1991                           ;setDAC0_ChannelValue@ucValue stored from wreg
  1992  02B5  00C2               	movwf	setDAC0_ChannelValue@ucValue
  1993                           
  1994                           ;common.c: 182: DACR0=ucValue;
  1995  02B6  1683               	bsf	3,5	;RP0=1, select bank1
  1996  02B7  0088               	movwf	8	;volatile
  1997  02B8  0008               	return
  1998  02B9                     __end_of_setDAC0_ChannelValue:	
  1999                           
  2000                           	psect	text502
  2001  02A1                     __ptext502:	
  2002 ;; =============== function _setDAC0_ChannelValue ends ============
  2003                           
  2004                           
  2005 ;; *************** function _startBigTimer *****************
  2006 ;; Defined at:
  2007 ;;		line 186 in file "C:\sw_dev\AK7030-OTP\common.c"
  2008 ;; Parameters:    Size  Location     Type
  2009 ;;		None
  2010 ;; Auto vars:     Size  Location     Type
  2011 ;;		None
  2012 ;; Return value:  Size  Location     Type
  2013 ;;		None               void
  2014 ;; Registers used:
  2015 ;;		wreg
  2016 ;; Tracked objects:
  2017 ;;		On entry : 60/0
  2018 ;;		On exit  : 60/0
  2019 ;;		Unchanged: FFF9F/0
  2020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2021 ;;      Params:         0       0       0       0       0
  2022 ;;      Locals:         0       0       0       0       0
  2023 ;;      Temps:          0       0       0       0       0
  2024 ;;      Totals:         0       0       0       0       0
  2025 ;;Total ram usage:        0 bytes
  2026 ;; Hardware stack levels used:    1
  2027 ;; Hardware stack levels required when called:    2
  2028 ;; This function calls:
  2029 ;;		Nothing
  2030 ;; This function is called by:
  2031 ;;		_main
  2032 ;; This function uses a non-reentrant model
  2033 ;;
  2034  02A1                     _startBigTimer:	
  2035                           
  2036                           ;common.c: 187: uiBigTimer = 34200;
  2037                           
  2038                           ; Regs used in _startBigTimer: [wreg]
  2039  02A1  3098               	movlw	152
  2040  02A2  00F6               	movwf	_uiBigTimer
  2041  02A3  3085               	movlw	133
  2042  02A4  00F7               	movwf	_uiBigTimer+1
  2043  02A5  0008               	return
  2044  02A6                     __end_of_startBigTimer:	
  2045                           
  2046                           	psect	text503
  2047  02A6                     __ptext503:	
  2048 ;; =============== function _startBigTimer ends ============
  2049                           
  2050                           
  2051 ;; *************** function _getAdOriginalCh13Value *****************
  2052 ;; Defined at:
  2053 ;;		line 87 in file "C:\sw_dev\AK7030-OTP\common.c"
  2054 ;; Parameters:    Size  Location     Type
  2055 ;;		None
  2056 ;; Auto vars:     Size  Location     Type
  2057 ;;		None
  2058 ;; Return value:  Size  Location     Type
  2059 ;;                  2    0[BANK0 ] unsigned int 
  2060 ;; Registers used:
  2061 ;;		wreg
  2062 ;; Tracked objects:
  2063 ;;		On entry : 60/0
  2064 ;;		On exit  : 60/0
  2065 ;;		Unchanged: FFF9F/0
  2066 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2067 ;;      Params:         0       2       0       0       0
  2068 ;;      Locals:         0       0       0       0       0
  2069 ;;      Temps:          0       0       0       0       0
  2070 ;;      Totals:         0       2       0       0       0
  2071 ;;Total ram usage:        2 bytes
  2072 ;; Hardware stack levels used:    1
  2073 ;; Hardware stack levels required when called:    2
  2074 ;; This function calls:
  2075 ;;		Nothing
  2076 ;; This function is called by:
  2077 ;;		_main
  2078 ;; This function uses a non-reentrant model
  2079 ;;
  2080  02A6                     _getAdOriginalCh13Value:	
  2081                           
  2082                           ;common.c: 88: return adc_original_CH13_value;
  2083                           
  2084                           ; Regs used in _getAdOriginalCh13Value: [wreg]
  2085  02A6  082D               	movf	_adc_original_CH13_value+1,w
  2086  02A7  00C3               	movwf	?_getAdOriginalCh13Value+1
  2087  02A8  082C               	movf	_adc_original_CH13_value,w
  2088  02A9  00C2               	movwf	?_getAdOriginalCh13Value
  2089  02AA  0008               	return
  2090  02AB                     __end_of_getAdOriginalCh13Value:	
  2091                           
  2092                           	psect	text504
  2093  02B9                     __ptext504:	
  2094 ;; =============== function _getAdOriginalCh13Value ends ============
  2095                           
  2096                           
  2097 ;; *************** function _clearSmallTimer *****************
  2098 ;; Defined at:
  2099 ;;		line 202 in file "C:\sw_dev\AK7030-OTP\common.c"
  2100 ;; Parameters:    Size  Location     Type
  2101 ;;		None
  2102 ;; Auto vars:     Size  Location     Type
  2103 ;;		None
  2104 ;; Return value:  Size  Location     Type
  2105 ;;		None               void
  2106 ;; Registers used:
  2107 ;;		status,2
  2108 ;; Tracked objects:
  2109 ;;		On entry : 60/0
  2110 ;;		On exit  : 60/0
  2111 ;;		Unchanged: FFF9F/0
  2112 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2113 ;;      Params:         0       0       0       0       0
  2114 ;;      Locals:         0       0       0       0       0
  2115 ;;      Temps:          0       0       0       0       0
  2116 ;;      Totals:         0       0       0       0       0
  2117 ;;Total ram usage:        0 bytes
  2118 ;; Hardware stack levels used:    1
  2119 ;; Hardware stack levels required when called:    2
  2120 ;; This function calls:
  2121 ;;		Nothing
  2122 ;; This function is called by:
  2123 ;;		_main
  2124 ;; This function uses a non-reentrant model
  2125 ;;
  2126  02B9                     _clearSmallTimer:	
  2127                           
  2128                           ;common.c: 203: uiSmallTimer = 0;
  2129                           
  2130                           ; Regs used in _clearSmallTimer: [status,2]
  2131  02B9  01B4               	clrf	_uiSmallTimer
  2132  02BA  01B5               	clrf	_uiSmallTimer+1
  2133  02BB  0008               	return
  2134  02BC                     __end_of_clearSmallTimer:	
  2135                           
  2136                           	psect	text505
  2137  02BC                     __ptext505:	
  2138 ;; =============== function _clearSmallTimer ends ============
  2139                           
  2140                           
  2141 ;; *************** function _clearBigTimer *****************
  2142 ;; Defined at:
  2143 ;;		line 196 in file "C:\sw_dev\AK7030-OTP\common.c"
  2144 ;; Parameters:    Size  Location     Type
  2145 ;;		None
  2146 ;; Auto vars:     Size  Location     Type
  2147 ;;		None
  2148 ;; Return value:  Size  Location     Type
  2149 ;;		None               void
  2150 ;; Registers used:
  2151 ;;		status,2
  2152 ;; Tracked objects:
  2153 ;;		On entry : 60/0
  2154 ;;		On exit  : 60/0
  2155 ;;		Unchanged: FFF9F/0
  2156 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2157 ;;      Params:         0       0       0       0       0
  2158 ;;      Locals:         0       0       0       0       0
  2159 ;;      Temps:          0       0       0       0       0
  2160 ;;      Totals:         0       0       0       0       0
  2161 ;;Total ram usage:        0 bytes
  2162 ;; Hardware stack levels used:    1
  2163 ;; Hardware stack levels required when called:    2
  2164 ;; This function calls:
  2165 ;;		Nothing
  2166 ;; This function is called by:
  2167 ;;		_main
  2168 ;; This function uses a non-reentrant model
  2169 ;;
  2170  02BC                     _clearBigTimer:	
  2171                           
  2172                           ;common.c: 197: uiBigTimer = 0;
  2173                           
  2174                           ; Regs used in _clearBigTimer: [status,2]
  2175  02BC  01F6               	clrf	_uiBigTimer
  2176  02BD  01F7               	clrf	_uiBigTimer+1
  2177  02BE  0008               	return
  2178  02BF                     __end_of_clearBigTimer:	
  2179                           
  2180                           	psect	text506
  2181  02C2                     __ptext506:	
  2182 ;; =============== function _clearBigTimer ends ============
  2183                           
  2184                           
  2185 ;; *************** function _clrSampeTime *****************
  2186 ;; Defined at:
  2187 ;;		line 244 in file "C:\sw_dev\AK7030-OTP\common.c"
  2188 ;; Parameters:    Size  Location     Type
  2189 ;;		None
  2190 ;; Auto vars:     Size  Location     Type
  2191 ;;		None
  2192 ;; Return value:  Size  Location     Type
  2193 ;;		None               void
  2194 ;; Registers used:
  2195 ;;		status,2
  2196 ;; Tracked objects:
  2197 ;;		On entry : 0/0
  2198 ;;		On exit  : 0/0
  2199 ;;		Unchanged: FFFFF/0
  2200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2201 ;;      Params:         0       0       0       0       0
  2202 ;;      Locals:         0       0       0       0       0
  2203 ;;      Temps:          0       0       0       0       0
  2204 ;;      Totals:         0       0       0       0       0
  2205 ;;Total ram usage:        0 bytes
  2206 ;; Hardware stack levels used:    1
  2207 ;; Hardware stack levels required when called:    2
  2208 ;; This function calls:
  2209 ;;		Nothing
  2210 ;; This function is called by:
  2211 ;;		_main
  2212 ;; This function uses a non-reentrant model
  2213 ;;
  2214  02C2                     _clrSampeTime:	
  2215                           
  2216                           ;common.c: 245: timer.timer10msStopWatch = 0;
  2217                           
  2218                           ; Regs used in _clrSampeTime: [status,2]
  2219  02C2  01FA               	clrf	_timer
  2220  02C3  0008               	return
  2221  02C4                     __end_of_clrSampeTime:	
  2222                           
  2223                           	psect	text507
  2224  02AB                     __ptext507:	
  2225 ;; =============== function _clrSampeTime ends ============
  2226                           
  2227                           
  2228 ;; *************** function _isPermitSampleTime *****************
  2229 ;; Defined at:
  2230 ;;		line 234 in file "C:\sw_dev\AK7030-OTP\common.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      unsigned char 
  2237 ;; Registers used:
  2238 ;;		wreg
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: FFFFF/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2244 ;;      Params:         0       0       0       0       0
  2245 ;;      Locals:         0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0
  2247 ;;      Totals:         0       0       0       0       0
  2248 ;;Total ram usage:        0 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    2
  2251 ;; This function calls:
  2252 ;;		Nothing
  2253 ;; This function is called by:
  2254 ;;		_main
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257  02AB                     _isPermitSampleTime:	
  2258                           
  2259                           ;common.c: 235: if(timer.timer10msStopWatch > 10)
  2260                           
  2261                           ; Regs used in _isPermitSampleTime: [wreg]
  2262  02AB  300B               	movlw	11
  2263  02AC  027A               	subwf	_timer,w
  2264  02AD  1803               	btfsc	3,0
  2265                           
  2266                           ;common.c: 236: {
  2267                           ;common.c: 237: return 1;
  2268  02AE  3401               	retlw	1
  2269                           
  2270                           ;common.c: 239: else
  2271                           ;common.c: 240: return 0;
  2272  02AF  3400               	retlw	0
  2273  02B0                     __end_of_isPermitSampleTime:	
  2274                           
  2275                           	psect	text509
  2276  0279                     __ptext509:	
  2277 ;; =============== function _adc_start ends ============
  2278                           
  2279                           
  2280 ;; *************** function _op2_init *****************
  2281 ;; Defined at:
  2282 ;;		line 45 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg, status,2
  2291 ;; Tracked objects:
  2292 ;;		On entry : 17F/20
  2293 ;;		On exit  : 17F/20
  2294 ;;		Unchanged: FFE80/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0
  2299 ;;      Totals:         0       0       0       0       0
  2300 ;;Total ram usage:        0 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    2
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309  0279                     _op2_init:	
  2310                           
  2311                           ;periph.c: 52: OP2CON1=0x00;
  2312                           
  2313                           ; Regs used in _op2_init: [wreg+status,2]
  2314  0279  019C               	clrf	28	;volatile
  2315                           
  2316                           ;periph.c: 54: OP2CON2=0xA0;
  2317  027A  30A0               	movlw	160
  2318  027B  009D               	movwf	29	;volatile
  2319                           
  2320                           ;periph.c: 55: OP2CON0=0x80;
  2321  027C  3080               	movlw	128
  2322  027D  009B               	movwf	27	;volatile
  2323                           
  2324                           ;periph.c: 58: TRISA7=0;
  2325  027E  1385               	bcf	5,7
  2326                           
  2327                           ;periph.c: 59: TRISB6=1;
  2328  027F  1706               	bsf	6,6
  2329                           
  2330                           ;periph.c: 60: TRISB7 = 1;
  2331  0280  1786               	bsf	6,7
  2332  0281  0008               	return
  2333  0282                     __end_of_op2_init:	
  2334                           
  2335                           	psect	text510
  2336  0263                     __ptext510:	
  2337 ;; =============== function _op2_init ends ============
  2338                           
  2339                           
  2340 ;; *************** function _op1_init *****************
  2341 ;; Defined at:
  2342 ;;		line 26 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2343 ;; Parameters:    Size  Location     Type
  2344 ;;		None
  2345 ;; Auto vars:     Size  Location     Type
  2346 ;;		None
  2347 ;; Return value:  Size  Location     Type
  2348 ;;		None               void
  2349 ;; Registers used:
  2350 ;;		wreg
  2351 ;; Tracked objects:
  2352 ;;		On entry : 17F/20
  2353 ;;		On exit  : 17F/20
  2354 ;;		Unchanged: FFE80/0
  2355 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2356 ;;      Params:         0       0       0       0       0
  2357 ;;      Locals:         0       0       0       0       0
  2358 ;;      Temps:          0       0       0       0       0
  2359 ;;      Totals:         0       0       0       0       0
  2360 ;;Total ram usage:        0 bytes
  2361 ;; Hardware stack levels used:    1
  2362 ;; Hardware stack levels required when called:    2
  2363 ;; This function calls:
  2364 ;;		Nothing
  2365 ;; This function is called by:
  2366 ;;		_main
  2367 ;; This function uses a non-reentrant model
  2368 ;;
  2369  0263                     _op1_init:	
  2370                           
  2371                           ;periph.c: 33: OP1CON1=0x02;
  2372                           
  2373                           ; Regs used in _op1_init: [wreg]
  2374  0263  3002               	movlw	2
  2375  0264  1283               	bcf	3,5	;RP0=0, select bank0
  2376  0265  009C               	movwf	28	;volatile
  2377                           
  2378                           ;periph.c: 34: OP1CON2=0xA0;
  2379  0266  30A0               	movlw	160
  2380  0267  009D               	movwf	29	;volatile
  2381                           
  2382                           ;periph.c: 35: OP1CON0=0x80;
  2383  0268  3080               	movlw	128
  2384  0269  009B               	movwf	27	;volatile
  2385                           
  2386                           ;periph.c: 38: TRISB3=1;
  2387  026A  1683               	bsf	3,5	;RP0=1, select bank1
  2388  026B  1586               	bsf	6,3
  2389                           
  2390                           ;periph.c: 39: TRISB4=1;
  2391  026C  1606               	bsf	6,4
  2392                           
  2393                           ;periph.c: 40: TRISB5=0;
  2394  026D  1286               	bcf	6,5
  2395  026E  0008               	return
  2396  026F                     __end_of_op1_init:	
  2397                           
  2398                           	psect	text511
  2399  02B0                     __ptext511:	
  2400 ;; =============== function _op1_init ends ============
  2401                           
  2402                           
  2403 ;; *************** function _dac_init *****************
  2404 ;; Defined at:
  2405 ;;		line 14 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2406 ;; Parameters:    Size  Location     Type
  2407 ;;		None
  2408 ;; Auto vars:     Size  Location     Type
  2409 ;;		None
  2410 ;; Return value:  Size  Location     Type
  2411 ;;		None               void
  2412 ;; Registers used:
  2413 ;;		wreg
  2414 ;; Tracked objects:
  2415 ;;		On entry : 17F/20
  2416 ;;		On exit  : 17F/20
  2417 ;;		Unchanged: FFE80/0
  2418 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2419 ;;      Params:         0       0       0       0       0
  2420 ;;      Locals:         0       0       0       0       0
  2421 ;;      Temps:          0       0       0       0       0
  2422 ;;      Totals:         0       0       0       0       0
  2423 ;;Total ram usage:        0 bytes
  2424 ;; Hardware stack levels used:    1
  2425 ;; Hardware stack levels required when called:    2
  2426 ;; This function calls:
  2427 ;;		Nothing
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432  02B0                     _dac_init:	
  2433                           
  2434                           ;periph.c: 15: DACCON|=2;
  2435                           
  2436                           ; Regs used in _dac_init: [wreg]
  2437  02B0  1487               	bsf	7,1	;volatile
  2438                           
  2439                           ;periph.c: 17: DACR0=0x19;
  2440  02B1  3019               	movlw	25
  2441  02B2  0088               	movwf	8	;volatile
  2442                           
  2443                           ;periph.c: 18: DACCON|=(1)<<2;
  2444  02B3  1507               	bsf	7,2	;volatile
  2445  02B4  0008               	return
  2446  02B5                     __end_of_dac_init:	
  2447                           
  2448                           	psect	text512
  2449  023F                     __ptext512:	
  2450 ;; =============== function _dac_init ends ============
  2451                           
  2452                           
  2453 ;; *************** function _adc_test_init *****************
  2454 ;; Defined at:
  2455 ;;		line 85 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2456 ;; Parameters:    Size  Location     Type
  2457 ;;  channel         1    wreg     unsigned char 
  2458 ;;  ref             1    0[BANK0 ] unsigned char 
  2459 ;; Auto vars:     Size  Location     Type
  2460 ;;  channel         1    2[BANK0 ] unsigned char 
  2461 ;; Return value:  Size  Location     Type
  2462 ;;		None               void
  2463 ;; Registers used:
  2464 ;;		wreg, status,2, status,0
  2465 ;; Tracked objects:
  2466 ;;		On entry : 17F/0
  2467 ;;		On exit  : 17F/20
  2468 ;;		Unchanged: FFE80/0
  2469 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2470 ;;      Params:         0       1       0       0       0
  2471 ;;      Locals:         0       1       0       0       0
  2472 ;;      Temps:          0       1       0       0       0
  2473 ;;      Totals:         0       3       0       0       0
  2474 ;;Total ram usage:        3 bytes
  2475 ;; Hardware stack levels used:    1
  2476 ;; Hardware stack levels required when called:    2
  2477 ;; This function calls:
  2478 ;;		Nothing
  2479 ;; This function is called by:
  2480 ;;		_main
  2481 ;; This function uses a non-reentrant model
  2482 ;;
  2483  023F                     _adc_test_init:	
  2484                           
  2485                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2486                           ;adc_test_init@channel stored from wreg
  2487  023F  00C4               	movwf	adc_test_init@channel
  2488                           
  2489                           ;periph.c: 86: ADCON0|=channel<<2;
  2490  0240  00C3               	movwf	??_adc_test_init
  2491  0241  1003               	clrc
  2492  0242  0DC3               	rlf	??_adc_test_init,f
  2493  0243  1003               	clrc
  2494  0244  0D43               	rlf	??_adc_test_init,w
  2495  0245  049F               	iorwf	31,f	;volatile
  2496                           
  2497                           ;periph.c: 87: ADCON1|=ref<<6;
  2498  0246  0842               	movf	adc_test_init@ref,w
  2499  0247  00C3               	movwf	??_adc_test_init
  2500  0248  0CC3               	rrf	??_adc_test_init,f
  2501  0249  0CC3               	rrf	??_adc_test_init,f
  2502  024A  0C43               	rrf	??_adc_test_init,w
  2503  024B  39C0               	andlw	192
  2504  024C  1683               	bsf	3,5	;RP0=1, select bank1
  2505  024D  049F               	iorwf	31,f	;volatile
  2506                           
  2507                           ;periph.c: 88: ADON=1;
  2508  024E  1283               	bcf	3,5	;RP0=0, select bank0
  2509  024F  141F               	bsf	31,0
  2510                           
  2511                           ;periph.c: 89: ADIE=1;
  2512  0250  1683               	bsf	3,5	;RP0=1, select bank1
  2513  0251  150D               	bsf	13,2
  2514  0252  0008               	return
  2515  0253                     __end_of_adc_test_init:	
  2516                           
  2517                           	psect	text513
  2518  02BF                     __ptext513:	
  2519 ;; =============== function _adc_test_init ends ============
  2520                           
  2521                           
  2522 ;; *************** function _timer1_interrupt_config *****************
  2523 ;; Defined at:
  2524 ;;		line 56 in file "C:\sw_dev\AK7030-OTP\common.c"
  2525 ;; Parameters:    Size  Location     Type
  2526 ;;		None
  2527 ;; Auto vars:     Size  Location     Type
  2528 ;;		None
  2529 ;; Return value:  Size  Location     Type
  2530 ;;		None               void
  2531 ;; Registers used:
  2532 ;;		None
  2533 ;; Tracked objects:
  2534 ;;		On entry : 17F/20
  2535 ;;		On exit  : 17F/20
  2536 ;;		Unchanged: FFE80/0
  2537 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2538 ;;      Params:         0       0       0       0       0
  2539 ;;      Locals:         0       0       0       0       0
  2540 ;;      Temps:          0       0       0       0       0
  2541 ;;      Totals:         0       0       0       0       0
  2542 ;;Total ram usage:        0 bytes
  2543 ;; Hardware stack levels used:    1
  2544 ;; Hardware stack levels required when called:    2
  2545 ;; This function calls:
  2546 ;;		Nothing
  2547 ;; This function is called by:
  2548 ;;		_main
  2549 ;; This function uses a non-reentrant model
  2550 ;;
  2551  02BF                     _timer1_interrupt_config:	
  2552                           
  2553                           ;common.c: 57: GIE = 1;
  2554                           
  2555                           ; Regs used in _timer1_interrupt_config: []
  2556  02BF  178B               	bsf	11,7
  2557                           
  2558                           ;common.c: 58: PEIE = 1;
  2559  02C0  170B               	bsf	11,6
  2560  02C1  0008               	return
  2561  02C2                     __end_of_timer1_interrupt_config:	
  2562                           
  2563                           	psect	text514
  2564  026F                     __ptext514:	
  2565 ;; =============== function _timer1_interrupt_config ends ============
  2566                           
  2567                           
  2568 ;; *************** function _timer1_config *****************
  2569 ;; Defined at:
  2570 ;;		line 44 in file "C:\sw_dev\AK7030-OTP\common.c"
  2571 ;; Parameters:    Size  Location     Type
  2572 ;;		None
  2573 ;; Auto vars:     Size  Location     Type
  2574 ;;		None
  2575 ;; Return value:  Size  Location     Type
  2576 ;;		None               void
  2577 ;; Registers used:
  2578 ;;		wreg
  2579 ;; Tracked objects:
  2580 ;;		On entry : 17F/40
  2581 ;;		On exit  : 17F/20
  2582 ;;		Unchanged: FFE80/0
  2583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2584 ;;      Params:         0       0       0       0       0
  2585 ;;      Locals:         0       0       0       0       0
  2586 ;;      Temps:          0       0       0       0       0
  2587 ;;      Totals:         0       0       0       0       0
  2588 ;;Total ram usage:        0 bytes
  2589 ;; Hardware stack levels used:    1
  2590 ;; Hardware stack levels required when called:    2
  2591 ;; This function calls:
  2592 ;;		Nothing
  2593 ;; This function is called by:
  2594 ;;		_main
  2595 ;; This function uses a non-reentrant model
  2596 ;;
  2597  026F                     _timer1_config:	
  2598                           
  2599                           ;common.c: 46: TMR1H=0xCF;
  2600                           
  2601                           ; Regs used in _timer1_config: [wreg]
  2602  026F  30CF               	movlw	207
  2603  0270  1303               	bcf	3,6	;RP1=0, select bank0
  2604  0271  008F               	movwf	15	;volatile
  2605                           
  2606                           ;common.c: 47: TMR1L=0x2C;
  2607  0272  302C               	movlw	44
  2608  0273  008E               	movwf	14	;volatile
  2609                           
  2610                           ;common.c: 48: T1CON=0xE1;
  2611  0274  30E1               	movlw	225
  2612  0275  0090               	movwf	16	;volatile
  2613                           
  2614                           ;common.c: 49: TMR1IE=1;
  2615  0276  1683               	bsf	3,5	;RP0=1, select bank1
  2616  0277  140C               	bsf	12,0
  2617  0278  0008               	return
  2618  0279                     __end_of_timer1_config:	
  2619                           
  2620                           	psect	text515
  2621  028A                     __ptext515:	
  2622 ;; =============== function _timer1_config ends ============
  2623                           
  2624                           
  2625 ;; *************** function _clock_config *****************
  2626 ;; Defined at:
  2627 ;;		line 36 in file "C:\sw_dev\AK7030-OTP\common.c"
  2628 ;; Parameters:    Size  Location     Type
  2629 ;;		None
  2630 ;; Auto vars:     Size  Location     Type
  2631 ;;		None
  2632 ;; Return value:  Size  Location     Type
  2633 ;;		None               void
  2634 ;; Registers used:
  2635 ;;		wreg, status,2
  2636 ;; Tracked objects:
  2637 ;;		On entry : 17F/20
  2638 ;;		On exit  : 17F/40
  2639 ;;		Unchanged: FFE80/0
  2640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2641 ;;      Params:         0       0       0       0       0
  2642 ;;      Locals:         0       0       0       0       0
  2643 ;;      Temps:          0       0       0       0       0
  2644 ;;      Totals:         0       0       0       0       0
  2645 ;;Total ram usage:        0 bytes
  2646 ;; Hardware stack levels used:    1
  2647 ;; Hardware stack levels required when called:    2
  2648 ;; This function calls:
  2649 ;;		Nothing
  2650 ;; This function is called by:
  2651 ;;		_main
  2652 ;; This function uses a non-reentrant model
  2653 ;;
  2654  028A                     _clock_config:	
  2655                           
  2656                           ;common.c: 38: CLKPR = 0x80;
  2657                           
  2658                           ; Regs used in _clock_config: [wreg+status,2]
  2659  028A  3080               	movlw	128
  2660  028B  1283               	bcf	3,5	;RP0=0, select bank2
  2661  028C  1703               	bsf	3,6	;RP1=1, select bank2
  2662  028D  0088               	movwf	8	;volatile
  2663                           
  2664                           ;common.c: 39: CLKPR = 0x00;
  2665  028E  0188               	clrf	8	;volatile
  2666  028F                     l1428:	
  2667                           ;common.c: 40: while(CLKPCE);
  2668                           
  2669  028F  1F88               	btfss	8,7
  2670  0290  0008               	return
  2671  0291  2A8F               	goto	l1428
  2672  0292                     __end_of_clock_config:	
  2673                           
  2674                           	psect	text516
  2675  01DC                     __ptext516:	
  2676 ;; =============== function _clock_config ends ============
  2677                           
  2678                           
  2679 ;; *************** function _ISR *****************
  2680 ;; Defined at:
  2681 ;;		line 249 in file "C:\sw_dev\AK7030-OTP\common.c"
  2682 ;; Parameters:    Size  Location     Type
  2683 ;;		None
  2684 ;; Auto vars:     Size  Location     Type
  2685 ;;		None
  2686 ;; Return value:  Size  Location     Type
  2687 ;;		None               void
  2688 ;; Registers used:
  2689 ;;		wreg, status,2, status,0, pclath, cstack
  2690 ;; Tracked objects:
  2691 ;;		On entry : 0/0
  2692 ;;		On exit  : 40/0
  2693 ;;		Unchanged: FFF9F/0
  2694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2695 ;;      Params:         0       0       0       0       0
  2696 ;;      Locals:         0       0       0       0       0
  2697 ;;      Temps:          2       0       0       0       0
  2698 ;;      Totals:         2       0       0       0       0
  2699 ;;Total ram usage:        2 bytes
  2700 ;; Hardware stack levels used:    1
  2701 ;; Hardware stack levels required when called:    1
  2702 ;; This function calls:
  2703 ;;		i1_setAD_ConvertFlag
  2704 ;;		_adc_get
  2705 ;; This function is called by:
  2706 ;;		Interrupt level 1
  2707 ;; This function uses a non-reentrant model
  2708 ;;
  2709  01DC                     _ISR:	
  2710                           
  2711                           ;common.c: 250: static unsigned char ucTimer1sCnt = 0;
  2712                           ;common.c: 252: if(TMR1IF == 1)
  2713  01DC  1283               	bcf	3,5	;RP0=0, select bank0
  2714  01DD  1303               	bcf	3,6	;RP1=0, select bank0
  2715  01DE  1C0C               	btfss	12,0
  2716  01DF  29FC               	goto	i1l3142
  2717  01E0  3064               	movlw	100
  2718                           
  2719                           ;common.c: 253: {
  2720                           ;common.c: 254: TMR1IF = 0 ;
  2721  01E1  100C               	bcf	12,0
  2722                           
  2723                           ;common.c: 255: timer.timer10msStopWatch++;
  2724  01E2  0AFA               	incf	_timer,f
  2725                           
  2726                           ;common.c: 256: ucTimer1sCnt++;
  2727  01E3  0AF8               	incf	ISR@ucTimer1sCnt,f
  2728                           
  2729                           ;common.c: 258: if(ucTimer1sCnt >= 100)
  2730  01E4  0278               	subwf	ISR@ucTimer1sCnt,w
  2731  01E5  1C03               	skipc
  2732  01E6  29FC               	goto	i1l3142
  2733                           
  2734                           ;common.c: 259: {
  2735                           ;common.c: 260: ucTimer1sCnt = 0;
  2736  01E7  01F8               	clrf	ISR@ucTimer1sCnt
  2737                           
  2738                           ;common.c: 261: if(uiBigTimer > 0)
  2739  01E8  0877               	movf	_uiBigTimer+1,w
  2740  01E9  0476               	iorwf	_uiBigTimer,w
  2741  01EA  1903               	skipnz
  2742  01EB  29F2               	goto	i1l1516
  2743                           
  2744                           ;common.c: 262: uiBigTimer--;
  2745  01EC  3001               	movlw	1
  2746  01ED  02F6               	subwf	_uiBigTimer,f
  2747  01EE  3000               	movlw	0
  2748  01EF  1C03               	skipc
  2749  01F0  03F7               	decf	_uiBigTimer+1,f
  2750  01F1  02F7               	subwf	_uiBigTimer+1,f
  2751  01F2                     i1l1516:	
  2752                           
  2753                           ;common.c: 264: if(uiSmallTimer)
  2754  01F2  0835               	movf	_uiSmallTimer+1,w
  2755  01F3  0434               	iorwf	_uiSmallTimer,w
  2756  01F4  1903               	skipnz
  2757  01F5  29FC               	goto	i1l3142
  2758                           
  2759                           ;common.c: 265: uiSmallTimer--;
  2760  01F6  3001               	movlw	1
  2761  01F7  02B4               	subwf	_uiSmallTimer,f
  2762  01F8  3000               	movlw	0
  2763  01F9  1C03               	skipc
  2764  01FA  03B5               	decf	_uiSmallTimer+1,f
  2765  01FB  02B5               	subwf	_uiSmallTimer+1,f
  2766  01FC                     i1l3142:	
  2767                           
  2768                           ;common.c: 266: }
  2769                           ;common.c: 267: }
  2770                           ;common.c: 269: if(ADIF)
  2771  01FC  1D0D               	btfss	13,2
  2772  01FD  2A16               	goto	i1l1521
  2773  01FE  3001               	movlw	1
  2774                           
  2775                           ;common.c: 270: {
  2776                           ;common.c: 271: ADIF=0;
  2777  01FF  110D               	bcf	13,2
  2778                           
  2779                           ;common.c: 272: setAD_ConvertFlag(1);
  2780  0200  2228  118A         	fcall	i1_setAD_ConvertFlag
  2781                           
  2782                           ;common.c: 273: adc_original_value = adc_get();
  2783  0202  221D  118A         	fcall	_adc_get
  2784  0204  0871               	movf	?_adc_get+1,w
  2785  0205  1283               	bcf	3,5	;RP0=0, select bank0
  2786  0206  00AF               	movwf	_adc_original_value+1
  2787  0207  0870               	movf	?_adc_get,w
  2788  0208  00AE               	movwf	_adc_original_value
  2789                           
  2790                           ;common.c: 274: if(sampleChannelSelect == 12)
  2791  0209  0847               	movf	_sampleChannelSelect,w
  2792  020A  3A0C               	xorlw	12
  2793  020B  1D03               	skipz
  2794  020C  2A10               	goto	i1l3154
  2795                           
  2796                           ;common.c: 275: adc_original_CH12_value = adc_get();
  2797  020D  221D  118A         	fcall	_adc_get
  2798  020F  2A16               	goto	i1l1521
  2799  0210                     i1l3154:	
  2800                           
  2801                           ;common.c: 276: else
  2802                           ;common.c: 277: adc_original_CH13_value = adc_get();
  2803  0210  221D               	fcall	_adc_get
  2804  0211  0871               	movf	?_adc_get+1,w
  2805  0212  1283               	bcf	3,5	;RP0=0, select bank0
  2806  0213  00AD               	movwf	_adc_original_CH13_value+1
  2807  0214  0870               	movf	?_adc_get,w
  2808  0215  00AC               	movwf	_adc_original_CH13_value
  2809  0216                     i1l1521:	
  2810  0216  0875               	movf	??_ISR+1,w
  2811  0217  008A               	movwf	10
  2812  0218  0E74               	swapf	??_ISR^(0+-128),w
  2813  0219  0083               	movwf	3
  2814  021A  0EFE               	swapf	126,f
  2815  021B  0E7E               	swapf	126,w
  2816  021C  0009               	retfie
  2817  021D                     __end_of_ISR:	
  2818  021D                     __ptext518:	
  2819 ;; =============== function i1_setAD_ConvertFlag ends ============
  2820                           
  2821                           
  2822 ;; *************** function _adc_get *****************
  2823 ;; Defined at:
  2824 ;;		line 104 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2825 ;; Parameters:    Size  Location     Type
  2826 ;;		None
  2827 ;; Auto vars:     Size  Location     Type
  2828 ;;  val             2    2[COMMON] unsigned int 
  2829 ;; Return value:  Size  Location     Type
  2830 ;;                  2    0[COMMON] unsigned int 
  2831 ;; Registers used:
  2832 ;;		wreg
  2833 ;; Tracked objects:
  2834 ;;		On entry : 60/0
  2835 ;;		On exit  : 60/20
  2836 ;;		Unchanged: FFF9F/0
  2837 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2838 ;;      Params:         2       0       0       0       0
  2839 ;;      Locals:         2       0       0       0       0
  2840 ;;      Temps:          0       0       0       0       0
  2841 ;;      Totals:         4       0       0       0       0
  2842 ;;Total ram usage:        4 bytes
  2843 ;; Hardware stack levels used:    1
  2844 ;; This function calls:
  2845 ;;		Nothing
  2846 ;; This function is called by:
  2847 ;;		_ISR
  2848 ;; This function uses a non-reentrant model
  2849 ;;
  2850  021D                     _adc_get:	
  2851                           
  2852                           ;periph.c: 105: unsigned int val;
  2853                           ;periph.c: 106: val = (ADRESH<<8) | ADRESL;
  2854                           
  2855                           ; Regs used in _adc_get: [wreg]
  2856  021D  081E               	movf	30,w	;volatile
  2857  021E  00F3               	movwf	adc_get@val+1
  2858  021F  01F2               	clrf	adc_get@val
  2859  0220  1683               	bsf	3,5	;RP0=1, select bank1
  2860  0221  081E               	movf	30,w	;volatile
  2861  0222  04F2               	iorwf	adc_get@val,f
  2862                           
  2863                           ;periph.c: 107: return val;
  2864  0223  0873               	movf	adc_get@val+1,w
  2865  0224  00F1               	movwf	?_adc_get+1
  2866  0225  0872               	movf	adc_get@val,w
  2867  0226  00F0               	movwf	?_adc_get
  2868  0227  0008               	return
  2869  0228                     __end_of_adc_get:	
  2870  0228                     __ptext517:	
  2871 ;; =============== function _ISR ends ============
  2872                           
  2873                           
  2874 ;; *************** function i1_setAD_ConvertFlag *****************
  2875 ;; Defined at:
  2876 ;;		line 70 in file "C:\sw_dev\AK7030-OTP\common.c"
  2877 ;; Parameters:    Size  Location     Type
  2878 ;;  setAD_Conver    1    wreg     unsigned char 
  2879 ;; Auto vars:     Size  Location     Type
  2880 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2881 ;; Return value:  Size  Location     Type
  2882 ;;		None               void
  2883 ;; Registers used:
  2884 ;;		wreg
  2885 ;; Tracked objects:
  2886 ;;		On entry : 60/0
  2887 ;;		On exit  : 60/0
  2888 ;;		Unchanged: FFF9F/0
  2889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2890 ;;      Params:         0       0       0       0       0
  2891 ;;      Locals:         1       0       0       0       0
  2892 ;;      Temps:          0       0       0       0       0
  2893 ;;      Totals:         1       0       0       0       0
  2894 ;;Total ram usage:        1 bytes
  2895 ;; Hardware stack levels used:    1
  2896 ;; This function calls:
  2897 ;;		Nothing
  2898 ;; This function is called by:
  2899 ;;		_ISR
  2900 ;; This function uses a non-reentrant model
  2901 ;;
  2902  0228                     i1_setAD_ConvertFlag:	
  2903                           
  2904                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2905                           ;i1setAD_ConvertFlag@flag stored from wreg
  2906  0228  00F0               	movwf	i1setAD_ConvertFlag@flag
  2907                           
  2908                           ;common.c: 71: adc_convert_flag = flag;
  2909  0229  00F9               	movwf	_adc_convert_flag
  2910  022A  0008               	return
  2911  022B                     __end_ofi1_setAD_ConvertFlag:	
  2912                           
  2913                           	psect	intentry
  2914  0004                     __pintentry:	
  2915                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2916                           
  2917  0004                     interrupt_function:	
  2918  007E                     saved_w	set	btemp
  2919  0004  00FE               	movwf	btemp
  2920  0005  0E03               	swapf	3,w
  2921  0006  00F4               	movwf	??_ISR
  2922  0007  080A               	movf	10,w
  2923  0008  00F5               	movwf	??_ISR+1
  2924  0009  118A  29DC         	ljmp	_ISR
  2925                           
  2926                           	psect	text519
  2927  0000                     __ptext519:	
  2928 ;; =============== function _adc_get ends ============
  2929                           
  2930  007E                     btemp	set	126	;btemp
  2931  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Wed Dec 26 16:08:34 2018

                     ??_clock_config 0042                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 0042             ?_timer1_interrupt_config 0070  
                                l703 005B                                  l732 00DD  
                                l734 00F8                                  l718 00A4  
                                l751 0125                                  l752 012F  
                                l684 0160                                  l758 013A  
                                l695 004F                                  l697 0050  
                                l689 0044                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PA2 002A                                  _PA3 002B  
                                _PB2 0032                                  _ISR 01DC  
                                u555 0197                                  u565 01AA  
                                fsr0 0004                                  indf 0000  
           main@ucBigTimerActionFlag 003B                        _startBigTimer 02A1  
                               S3492 022B                          main@ampStep 0037  
                               ?_ISR 0070                   __size_of_AD_Sample 0058  
                               l3020 0000                                 l3022 0000  
                               l3030 0000                                 l1431 0000  
                               l3024 0000                                 l2160 0000  
                               l3032 0000                                 l3040 0000  
                               l2152 0000                                 l3104 0000  
                               l1440 0000                                 l3120 0000  
                               l3200 0000                                 l1434 0000  
                               l3026 0000                                 l3034 0000  
                               l2146 0000                                 l3042 0000  
                               l3050 0000                                 l3122 0000  
                               l3202 0000                                 l3210 0000  
                               l1443 0000                                 l1428 028F  
                               l3028 0000                                 l3036 0000  
                               l3044 0000                                 l3060 0000  
                               l3052 0000                                 l1452 0000  
                               l3116 0000                                 l3204 0000  
                               l3300 0084                                 l3220 0000  
                               l3212 0000                                 l1437 0000  
                               l2149 0000                                 l1509 0000  
                               l1461 01A2                                 l3038 0000  
                               l3046 0000                                 l3054 0000  
                               l2166 0000                                 l3062 0172  
                               l1446 0000                                 l3310 0000  
                               l3230 0000                                 l3222 0000  
                               l3214 0000                                 l3048 0000  
                               l3056 0000                                 l3064 0000  
                               l3080 0000                                 l3208 0000  
                               l3320 00A8                                 l3312 0000  
                               l3304 0086                                 l3240 0000  
                               l3224 0000                                 l3216 0000  
                               l3058 0000                                 l3082 0000  
                               l1482 0000                                 l3090 0000  
                               l3170 0190                                 l3162 0000  
                               l3402 010B                                 l3330 0000  
                               l3314 0000                                 l3306 0091  
                               l3250 0049                                 l3242 0000  
                               l3234 0000                                 l3226 0000  
                               l3218 0000                                 l1491 0000  
                               l3076 0000                                 l3092 0000  
                               l3332 0000                                 l3324 00AD  
                               l3316 00A5                                 l3340 00BB  
                               l3260 0054                                 l3244 0041  
                               l3236 0036                                 l3228 0145  
                               l1485 0000                                 l3078 0000  
                               l3086 0000                                 l3182 0000  
                               l3166 0000                                 l3414 011D  
                               l3350 0000                                 l3334 0000  
                               l3342 00CC                                 l3270 005D  
                               l3262 0055                                 l3238 0000  
                               l1479 0000                                 l1488 0000  
                               l3088 0000                                 l3176 01B5  
                               l3424 0133                                 l3416 0000  
                               l3352 00DA                                 l3328 00B2  
                               l3280 0000                                 l3248 0048  
                               l3178 0000                                 l3434 013E  
                               l3426 0134                                 l3418 0000  
                               l3346 0000                                 l3282 0074  
                               l3274 0000                                 l3436 013F  
                               l3364 0000                                 l3276 0000  
                               l3198 01C0                                 l3390 00FA  
                               l3382 0000                                 l3358 00DB  
                               l3374 00E0                                 l3294 007D  
                               l3286 0000                                 l3392 0100  
                               l3288 007C                                 l3376 00EB  
                               l3386 00F6                                 l3298 0000  
                               l3396 0103                                 l3398 0000  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _PEIE 005E  
               ??_getAdOriginalValue 0044               ??_isFinishedSmallTimer 0042  
                               _main 000D                    ??_startSmallTimer 0042  
                               btemp 007E                                 start 000B  
            ?_getAdOriginalCh13Value 0042                                ??_ISR 0074  
         __end_of_isPermitSampleTime 02B0                  _sampleChannelSelect 0047  
                              ?_main 0070                                _DACR0 0088  
                              _CLKPR 0108                                _T1CON 0010  
                    __end_of_adc_get 0228                                _TMR1H 000F  
                              _TMR1L 000E                       ?_startBigTimer 0070  
              setAD_ConvertFlag@flag 0042                        main@tDA_timer 003A  
                              _timer 007A                                pclath 000A  
                              status 0003                                wtemp0 007E  
     __end_of_getAdOriginalCh13Value 02AB                __end_of_clearBigTimer 02BF  
               __end_of_clrSampeTime 02C4           __end_of_isFinishedBigTimer 029C  
                       __end_of_main 0161               __size_of_adc_test_init 0014  
                  __end_of_AD_Sample 01CD             __size_of_clearSmallTimer 0003  
               _setDAC0_ChannelValue 02B5            main@ucInstalledBatteryCnt 0040  
                             ??_main 0047                               _ADCON0 001F  
                             _ADCON1 009F                 __end_of_clock_config 0292  
                             _DACCON 0087                               _ADRESH 001E  
                             _ADRESL 009E                               _CLKPCE 0847  
                             i1l1521 0216                               i1l3130 0000  
                             i1l1443 0000                               i1l1516 01F2  
                             i1l3132 0000                               i1l3150 0000  
                             i1l3142 01FC                               i1l3126 0000  
                             i1l3160 0000                               i1l3136 0000  
                             i1l2169 0000                               i1l3154 0210  
                             i1l3146 0000                               i1l3156 0000  
                             i1l3148 0000                     __end_of_dac_init 02B5  
                             _TMR1IE 0460                               _TMR1IF 0060  
                  _getAD_ConvertFlag 016B                    _setAD_ConvertFlag 016D  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISB5 0435  
                             _TRISA7 042F                               _TRISB6 0436  
                             _TRISB7 0437                   ?_getAD_ConvertFlag 0070  
                 ?_setAD_ConvertFlag 0070                     __end_of_op1_init 026F  
                   __end_of_op2_init 0282               main@ucConfirmTimerZptS 003E  
                          ??_adc_get 0072                  ??_getAD_ConvertFlag 0042  
                ??_setAD_ConvertFlag 0042                ?_setDAC0_ChannelValue 0070  
                             clrloop 0283                      ??_startBigTimer 0042  
                             saved_w 007E          ?_process_AD_Converter_Value 0070  
                      _adc_test_init 023F            __end_of_getAD_ConvertFlag 016D  
          __end_of_setAD_ConvertFlag 0172                   __size_of_adc_start 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
                    _startSmallTimer 029C              _adc_original_CH13_value 002C  
                  ??_clearSmallTimer 0042                __end_of_timer1_config 0279  
                     ?_adc_test_init 0042               main@bigTimerOutputStep 0038  
   __size_of_timer1_interrupt_config 0003                __size_of_clrSampeTime 0002  
                         __pbssBANK0 0020         __size_ofi1_setAD_ConvertFlag 0003  
                         adc_get@val 0072                           __pmaintext 000D  
             ??_setDAC0_ChannelValue 0042                           __pintentry 0004  
                          ?_dac_init 0070                __size_of_clock_config 0008  
                            _OP1CON0 001B                              _OP1CON1 001C  
                            _OP1CON2 001D                              _OP2CON0 009B  
                            _OP2CON1 009C                              _OP2CON2 009D  
                       _clrSampeTime 02C2                    __end_of_adc_start 0175  
           main@smallTimerOutputStep 0039                            ?_op1_init 0070  
                          ?_op2_init 0070                   _isPermitSampleTime 02AB  
             _buffer_Sample_AD_Value 0020                   _adc_original_value 002E  
         __size_of_getAD_ConvertFlag 0002           __size_of_setAD_ConvertFlag 0005  
        __size_of_getAdOriginalValue 0005                  ?_isPermitSampleTime 0070  
      __size_of_isFinishedSmallTimer 0005                           _uiBigTimer 0076  
                       _clock_config 028A                              _adc_get 021D  
            __end_of_startSmallTimer 02A1                  _multiFilterMaxValue 0030  
                _multiFilterMinValue 0032                 ??_isPermitSampleTime 0042  
                 _isFinishedBigTimer 0297                           ??_dac_init 0042  
                          _AD_Sample 0175                         __size_of_ISR 0041  
                    ??_adc_test_init 0043                           ??_op1_init 0042  
                         ??_op2_init 0042                  ?_isFinishedBigTimer 0070  
               end_of_initialization 0260                 ??_isFinishedBigTimer 0042  
                         ?_AD_Sample 0070               __size_of_clearBigTimer 0003  
                   _adc_convert_flag 0079              _timer1_interrupt_config 02BF  
                     AD_Sample@index 0046                           main@ucInit 003F  
                   main@ucWaitTime1S 0041                      _clearSmallTimer 02B9  
                   ?_startSmallTimer 0070                  i1_setAD_ConvertFlag 0228  
              __end_of_startBigTimer 02A6                  start_initialization 0253  
                        __end_of_ISR 021D             ??_getAdOriginalCh13Value 0044  
               ?i1_setAD_ConvertFlag 0070                        _clearBigTimer 02BC  
              main@ucCheckBatteryCnt 003C                          __pdataBANK0 0047  
                        ??_AD_Sample 0044            ??_timer1_interrupt_config 0042  
                        __pbssCOMMON 0076                    __size_of_dac_init 0005  
                      __pcstackBANK0 0042                            _adc_start 0172  
                  __size_of_op1_init 000C                    __size_of_op2_init 0009  
              ??i1_setAD_ConvertFlag 0070                       ?_clearBigTimer 0070  
            __end_of_clearSmallTimer 02BC               __size_of_timer1_config 000A  
                          __ptext500 029C                            __ptext501 02B5  
                          __ptext510 0263                            __ptext502 02A1  
                          __ptext511 02B0                            __ptext503 02A6  
                          __ptext512 023F                            __ptext504 02B9  
                          __ptext513 02BF                            __ptext505 02BC  
                          __ptext514 026F                            __ptext506 02C2  
                          __ptext515 028A                            __ptext507 02AB  
                          __ptext516 01DC                            __ptext508 0172  
                          __ptext517 0228                            __ptext509 0279  
                          __ptext518 021D                            __ptext519 0000  
                          __ptext493 0161                            __ptext494 0175  
                          __ptext495 01CD                            __ptext496 016D  
                          __ptext497 016B                            __ptext498 0292  
                          __ptext499 0297                             ?_adc_get 0070  
      __size_of_setDAC0_ChannelValue 0004         __end_of_isFinishedSmallTimer 0297  
                          __pswtext1 022B                      ISR@ucTimer1sCnt 0078  
         __end_of_getAdOriginalValue 01D2                           ?_adc_start 0070  
    __size_of_getAdOriginalCh13Value 0005                    interrupt_function 0004  
    __end_of_timer1_interrupt_config 02C2                 adc_test_init@channel 0044  
        __size_of_isPermitSampleTime 0005                         _uiSmallTimer 0034  
              __end_of_adc_test_init 0253                        _timer1_config 026F  
       ??_process_AD_Converter_Value 0047                      ??_clearBigTimer 0042  
                   ?_clearSmallTimer 0070                 main@ucConfirmTimer1S 003D  
        __size_of_isFinishedBigTimer 0005               _getAdOriginalCh13Value 02A6  
                   __size_of_adc_get 000B  __size_of_process_AD_Converter_Value 000A  
                           _dac_init 02B0                       ?_timer1_config 0070  
                           _op1_init 0263                             _op2_init 0279  
                        ??_adc_start 0042                        __size_of_main 0154  
               _isFinishedSmallTimer 0292                             clear_ram 0282  
        setDAC0_ChannelValue@ucValue 0042                        ?_clrSampeTime 0070  
                        _sampleTimes 0036             __size_of_startSmallTimer 0005  
                           intlevel1 0000                ?_isFinishedSmallTimer 0070  
             __size_of_startBigTimer 0005                        ?_clock_config 0070  
            i1setAD_ConvertFlag@flag 0070                       ??_clrSampeTime 0042  
                    ??_timer1_config 0042          __end_ofi1_setAD_ConvertFlag 022B  
 __end_of_process_AD_Converter_Value 016B           _process_AD_Converter_Value 0161  
       __end_of_setDAC0_ChannelValue 02B9                     adc_test_init@ref 0042  
                 _getAdOriginalValue 01CD  
