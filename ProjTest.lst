

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Fri Dec 21 09:37:45 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text498,local,class=CODE,delta=2
    16                           	psect	text503,local,class=CODE,delta=2
    17                           	psect	text504,local,class=CODE,delta=2
    18                           	psect	text505,local,class=CODE,delta=2
    19                           	psect	text506,local,class=CODE,delta=2
    20                           	psect	text507,local,class=CODE,delta=2
    21                           	psect	text508,local,class=CODE,delta=2
    22                           	psect	text509,local,class=CODE,delta=2
    23                           	psect	text510,local,class=CODE,delta=2
    24                           	psect	text511,local,class=CODE,delta=2
    25                           	psect	text512,local,class=CODE,delta=2
    26                           	psect	text514,local,class=CODE,delta=2
    27                           	psect	text515,local,class=CODE,delta=2
    28                           	psect	text516,local,class=CODE,delta=2
    29                           	psect	text517,local,class=CODE,delta=2
    30                           	psect	text518,local,class=CODE,delta=2
    31                           	psect	text519,local,class=CODE,delta=2
    32                           	psect	text520,local,class=CODE,delta=2
    33                           	psect	text521,local,class=CODE,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text524,local,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  000A                     	;#
    39                           
    40                           	psect	config
    41  2000  2FFF               	dw	12287	;#
    42  2001  3FDE               	dw	16350	;#
    43  2002  3FF8               	dw	16376	;#
    44                           
    45                           	psect	idataBANK0
    46  0000                     __pidataBANK0:	
    47  001F                     _ADCON0	set	31
    48  001E                     _ADRESH	set	30
    49  001B                     _OP1CON0	set	27
    50  001C                     _OP1CON1	set	28
    51  001D                     _OP1CON2	set	29
    52  0010                     _T1CON	set	16
    53  000F                     _TMR1H	set	15
    54  000E                     _TMR1L	set	14
    55  006A                     _ADIF	set	106
    56  00F8                     _ADON	set	248
    57  005F                     _GIE	set	95
    58  00F9                     _GO	set	249
    59  0028                     _PA0	set	40
    60  0029                     _PA1	set	41
    61  002A                     _PA2	set	42
    62  002B                     _PA3	set	43
    63  0032                     _PB2	set	50
    64  005E                     _PEIE	set	94
    65  0060                     _TMR1IF	set	96
    66  009F                     _ADCON1	set	159
    67  009E                     _ADRESL	set	158
    68  0087                     _DACCON	set	135
    69  0088                     _DACR0	set	136
    70  009B                     _OP2CON0	set	155
    71  009C                     _OP2CON1	set	156
    72  009D                     _OP2CON2	set	157
    73  046A                     _ADIE	set	1130
    74  0460                     _TMR1IE	set	1120
    75  0428                     _TRISA0	set	1064
    76  0429                     _TRISA1	set	1065
    77  042A                     _TRISA2	set	1066
    78  042B                     _TRISA3	set	1067
    79  042F                     _TRISA7	set	1071
    80  0430                     _TRISB0	set	1072
    81  0431                     _TRISB1	set	1073
    82  0432                     _TRISB2	set	1074
    83  0433                     _TRISB3	set	1075
    84  0434                     _TRISB4	set	1076
    85  0435                     _TRISB5	set	1077
    86  0436                     _TRISB6	set	1078
    87  0437                     _TRISB7	set	1079
    88  0108                     _CLKPR	set	264
    89  0847                     _CLKPCE	set	2119
    90                           
    91                           	psect	cinit
    92  0209                     start_initialization:	
    93  0209  3020               	movlw	low __pbssBANK0
    94                           
    95                           ; Clear objects allocated to COMMON
    96  020A  01F6               	clrf	__pbssCOMMON& (0+127)
    97  020B  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    98  020C  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    99  020D  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   100  020E  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   101                           
   102                           ; Clear objects allocated to BANK0
   103  020F  1383               	bcf	3,7	;select IRP bank0
   104  0210  0084               	movwf	4
   105  0211  3040               	movlw	low (__pbssBANK0+32)
   106  0212  118A  2238         	fcall	clear_ram
   107                           
   108                           ;initializer for _sampleChannelSelect
   109  0214  300D               	movlw	13
   110  0215  00C5               	movwf	__pdataBANK0& (0+127)
   111  0216                     end_of_initialization:	
   112                           ;End of C runtime variable initialization code
   113                           
   114  0216  0183               	clrf	3
   115  0217  118A  280D         	ljmp	_main	;jump to C main() function
   116                           
   117                           	psect	bssCOMMON
   118  0076                     __pbssCOMMON:	
   119  0076                     _uiBigTimer:	
   120  0076                     	ds	2
   121  0078                     ISR@ucTimer1sCnt:	
   122  0078                     	ds	1
   123  0079                     _adc_convert_flag:	
   124  0079                     	ds	1
   125  007A                     _timer:	
   126  007A                     	ds	1
   127                           
   128                           	psect	bssBANK0
   129  0020                     __pbssBANK0:	
   130  0020                     _buffer_Sample_AD_Value:	
   131  0020                     	ds	12
   132  002C                     _adc_original_CH13_value:	
   133  002C                     	ds	2
   134  002E                     _adc_original_value:	
   135  002E                     	ds	2
   136  0030                     _multiFilterMaxValue:	
   137  0030                     	ds	2
   138  0032                     _multiFilterMinValue:	
   139  0032                     	ds	2
   140  0034                     _uiSmallTimer:	
   141  0034                     	ds	2
   142  0036                     _sampleTimes:	
   143  0036                     	ds	1
   144  0037                     main@ampStep:	
   145  0037                     	ds	1
   146  0038                     main@tDA_timer:	
   147  0038                     	ds	1
   148  0039                     main@ucBigTimerActionFlag:	
   149  0039                     	ds	1
   150  003A                     main@ucCheckBatteryCnt:	
   151  003A                     	ds	1
   152  003B                     main@ucConfirmTimer1S:	
   153  003B                     	ds	1
   154  003C                     main@ucConfirmTimerZptS:	
   155  003C                     	ds	1
   156  003D                     main@ucInit:	
   157  003D                     	ds	1
   158  003E                     main@ucInstalledBatteryCnt:	
   159  003E                     	ds	1
   160  003F                     main@ucWaitTime1S:	
   161  003F                     	ds	1
   162                           
   163                           	psect	dataBANK0
   164  0045                     __pdataBANK0:	
   165  0045                     _sampleChannelSelect:	
   166  0045                     	ds	1
   167                           
   168                           	psect	clrtext
   169  0238                     clear_ram:	
   170                           ;	Called with FSR containing the base address, and
   171                           ;	W with the last address+1
   172                           
   173  0238  0064               	clrwdt	;clear the watchdog before getting into this loop
   174  0239                     clrloop:	
   175  0239  0180               	clrf	0	;clear RAM location pointed to by FSR
   176  023A  0A84               	incf	4,f	;increment pointer
   177  023B  0604               	xorwf	4,w	;XOR with final address
   178  023C  1903               	btfsc	3,2	;have we reached the end yet?
   179  023D  3400               	retlw	0	;all done for this memory range, return
   180  023E  0604               	xorwf	4,w	;XOR again to restore value
   181  023F  2A39               	goto	clrloop	;do the next byte
   182                           
   183                           	psect	cstackCOMMON
   184  0070                     __pcstackCOMMON:	
   185  0070                     ?_clock_config:	
   186  0070                     ?_timer1_config:	
   187                           ; 0 bytes @ 0x0
   188                           
   189  0070                     ?_timer1_interrupt_config:	
   190                           ; 0 bytes @ 0x0
   191                           
   192  0070                     ?_dac_init:	
   193                           ; 0 bytes @ 0x0
   194                           
   195  0070                     ?_op1_init:	
   196                           ; 0 bytes @ 0x0
   197                           
   198  0070                     ?_op2_init:	
   199                           ; 0 bytes @ 0x0
   200                           
   201  0070                     ?_adc_start:	
   202                           ; 0 bytes @ 0x0
   203                           
   204  0070                     ?_clrSampeTime:	
   205                           ; 0 bytes @ 0x0
   206                           
   207  0070                     ?_process_AD_Converter_Value:	
   208                           ; 0 bytes @ 0x0
   209                           
   210  0070                     ?_clearBigTimer:	
   211                           ; 0 bytes @ 0x0
   212                           
   213  0070                     ?_clearSmallTimer:	
   214                           ; 0 bytes @ 0x0
   215                           
   216  0070                     ?_setDAC0_ChannelValue:	
   217                           ; 0 bytes @ 0x0
   218                           
   219  0070                     ?_startBigTimer:	
   220                           ; 0 bytes @ 0x0
   221                           
   222  0070                     ?_startSmallTimer:	
   223                           ; 0 bytes @ 0x0
   224                           
   225  0070                     ?_AD_Sample:	
   226                           ; 0 bytes @ 0x0
   227                           
   228  0070                     ?_main:	
   229                           ; 0 bytes @ 0x0
   230                           
   231  0070                     ?_setAD_ConvertFlag:	
   232                           ; 0 bytes @ 0x0
   233                           
   234  0070                     ?_ISR:	
   235                           ; 0 bytes @ 0x0
   236                           
   237  0070                     ?i1_setAD_ConvertFlag:	
   238                           ; 0 bytes @ 0x0
   239                           
   240  0070                     ??i1_setAD_ConvertFlag:	
   241                           ; 0 bytes @ 0x0
   242                           
   243  0070                     ?_isPermitSampleTime:	
   244                           ; 0 bytes @ 0x0
   245                           
   246  0070                     ?_isFinishedBigTimer:	
   247                           ; 1 bytes @ 0x0
   248                           
   249  0070                     ?_isFinishedSmallTimer:	
   250                           ; 1 bytes @ 0x0
   251                           
   252  0070                     ?_getAD_ConvertFlag:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_adc_get:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     i1setAD_ConvertFlag@flag:	
   259                           ; 2 bytes @ 0x0
   260                           
   261                           
   262                           ; 1 bytes @ 0x0
   263  0070                     	ds	2
   264  0072                     ??_adc_get:	
   265  0072                     adc_get@val:	
   266                           ; 0 bytes @ 0x2
   267                           
   268                           
   269                           ; 2 bytes @ 0x2
   270  0072                     	ds	2
   271  0074                     ??_ISR:	
   272                           
   273                           ; 0 bytes @ 0x4
   274  0074                     	ds	2
   275                           
   276                           	psect	cstackBANK0
   277  0040                     __pcstackBANK0:	
   278  0040                     ??_clock_config:	
   279  0040                     ??_timer1_config:	
   280                           ; 0 bytes @ 0x0
   281                           
   282  0040                     ??_timer1_interrupt_config:	
   283                           ; 0 bytes @ 0x0
   284                           
   285  0040                     ?_adc_test_init:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0040                     ??_dac_init:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0040                     ??_op1_init:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0040                     ??_op2_init:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0040                     ??_adc_start:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0040                     ??_isPermitSampleTime:	
   301                           ; 0 bytes @ 0x0
   302                           
   303  0040                     ??_clrSampeTime:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0040                     ??_clearBigTimer:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0040                     ??_clearSmallTimer:	
   310                           ; 0 bytes @ 0x0
   311                           
   312  0040                     ??_setDAC0_ChannelValue:	
   313                           ; 0 bytes @ 0x0
   314                           
   315  0040                     ??_startBigTimer:	
   316                           ; 0 bytes @ 0x0
   317                           
   318  0040                     ??_startSmallTimer:	
   319                           ; 0 bytes @ 0x0
   320                           
   321  0040                     ??_isFinishedBigTimer:	
   322                           ; 0 bytes @ 0x0
   323                           
   324  0040                     ??_isFinishedSmallTimer:	
   325                           ; 0 bytes @ 0x0
   326                           
   327  0040                     ??_getAD_ConvertFlag:	
   328                           ; 0 bytes @ 0x0
   329                           
   330  0040                     ??_setAD_ConvertFlag:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0040                     ?_getAdOriginalCh13Value:	
   334                           ; 0 bytes @ 0x0
   335                           
   336  0040                     ?_getAdOriginalValue:	
   337                           ; 2 bytes @ 0x0
   338                           
   339  0040                     setAD_ConvertFlag@flag:	
   340                           ; 2 bytes @ 0x0
   341                           
   342  0040                     setDAC0_ChannelValue@ucValue:	
   343                           ; 1 bytes @ 0x0
   344                           
   345  0040                     adc_test_init@ref:	
   346                           ; 1 bytes @ 0x0
   347                           
   348                           
   349                           ; 1 bytes @ 0x0
   350  0040                     	ds	1
   351  0041                     ??_adc_test_init:	
   352                           
   353                           ; 0 bytes @ 0x1
   354  0041                     	ds	1
   355  0042                     ??_getAdOriginalCh13Value:	
   356  0042                     ??_AD_Sample:	
   357                           ; 0 bytes @ 0x2
   358                           
   359  0042                     ??_getAdOriginalValue:	
   360                           ; 0 bytes @ 0x2
   361                           
   362  0042                     adc_test_init@channel:	
   363                           ; 0 bytes @ 0x2
   364                           
   365                           
   366                           ; 1 bytes @ 0x2
   367  0042                     	ds	2
   368  0044                     AD_Sample@index:	
   369                           
   370                           ; 1 bytes @ 0x4
   371  0044                     	ds	1
   372  0045                     ??_process_AD_Converter_Value:	
   373  0045                     ??_main:	
   374                           ; 0 bytes @ 0x5
   375                           
   376                           
   377                           	psect	maintext
   378  000D                     __pmaintext:	
   379                           ; 0 bytes @ 0x5
   380 ;;Data sizes: Strings 0, constant 0, data 1, bss 37, persistent 0 stack 0
   381 ;;Auto spaces:   Size  Autos    Used
   382 ;; COMMON          14      6      11
   383 ;; BANK0           80      5      38
   384 ;; BANK1           80      0       0
   385 ;; BANK3           96      0       0
   386 ;; BANK2           96      0       0
   387 ;;
   388 ;; Pointer list with targets:
   389 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   390 ;;
   391 ;; ?_getAdOriginalCh13Value	unsigned int  size(1) Largest target is 0
   392 ;;
   393 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   394 ;;
   395 ;;
   396 ;; Critical Paths under _main in COMMON
   397 ;;
   398 ;;   None.
   399 ;;
   400 ;; Critical Paths under _ISR in COMMON
   401 ;;
   402 ;;   _ISR->_adc_get
   403 ;;
   404 ;; Critical Paths under _main in BANK0
   405 ;;
   406 ;;   _process_AD_Converter_Value->_AD_Sample
   407 ;;   _AD_Sample->_getAdOriginalValue
   408 ;;
   409 ;; Critical Paths under _ISR in BANK0
   410 ;;
   411 ;;   None.
   412 ;;
   413 ;; Critical Paths under _main in BANK1
   414 ;;
   415 ;;   None.
   416 ;;
   417 ;; Critical Paths under _ISR in BANK1
   418 ;;
   419 ;;   None.
   420 ;;
   421 ;; Critical Paths under _main in BANK3
   422 ;;
   423 ;;   None.
   424 ;;
   425 ;; Critical Paths under _ISR in BANK3
   426 ;;
   427 ;;   None.
   428 ;;
   429 ;; Critical Paths under _main in BANK2
   430 ;;
   431 ;;   None.
   432 ;;
   433 ;; Critical Paths under _ISR in BANK2
   434 ;;
   435 ;;   None.
   436 ;;
   437 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   438 ;;
   439 ;;
   440 ;;Call Graph Tables:
   441 ;;
   442 ;; ---------------------------------------------------------------------------------
   443 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   444 ;; ---------------------------------------------------------------------------------
   445 ;; (0) _main                                                 0     0      0     156
   446 ;;                       _clock_config
   447 ;;                      _timer1_config
   448 ;;            _timer1_interrupt_config
   449 ;;                      _adc_test_init
   450 ;;                           _dac_init
   451 ;;                           _op1_init
   452 ;;                           _op2_init
   453 ;;                          _adc_start
   454 ;;                 _isPermitSampleTime
   455 ;;                       _clrSampeTime
   456 ;;         _process_AD_Converter_Value
   457 ;;                      _clearBigTimer
   458 ;;                    _clearSmallTimer
   459 ;;             _getAdOriginalCh13Value
   460 ;;               _setDAC0_ChannelValue
   461 ;;                      _startBigTimer
   462 ;;                    _startSmallTimer
   463 ;;                 _isFinishedBigTimer
   464 ;;               _isFinishedSmallTimer
   465 ;; ---------------------------------------------------------------------------------
   466 ;; (1) _process_AD_Converter_Value                           0     0      0      90
   467 ;;                  _getAD_ConvertFlag
   468 ;;                  _setAD_ConvertFlag
   469 ;;                          _AD_Sample
   470 ;;                          _adc_start
   471 ;; ---------------------------------------------------------------------------------
   472 ;; (2) _AD_Sample                                            3     3      0      68
   473 ;;                                              2 BANK0      3     3      0
   474 ;;                 _getAdOriginalValue
   475 ;; ---------------------------------------------------------------------------------
   476 ;; (3) _getAdOriginalValue                                   2     0      2       0
   477 ;;                                              0 BANK0      2     0      2
   478 ;; ---------------------------------------------------------------------------------
   479 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   480 ;;                                              0 BANK0      1     1      0
   481 ;; ---------------------------------------------------------------------------------
   482 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   483 ;; ---------------------------------------------------------------------------------
   484 ;; (1) _isFinishedSmallTimer                                 0     0      0       0
   485 ;; ---------------------------------------------------------------------------------
   486 ;; (1) _isFinishedBigTimer                                   0     0      0       0
   487 ;; ---------------------------------------------------------------------------------
   488 ;; (1) _startSmallTimer                                      0     0      0       0
   489 ;; ---------------------------------------------------------------------------------
   490 ;; (1) _startBigTimer                                        0     0      0       0
   491 ;; ---------------------------------------------------------------------------------
   492 ;; (1) _setDAC0_ChannelValue                                 1     1      0      22
   493 ;;                                              0 BANK0      1     1      0
   494 ;; ---------------------------------------------------------------------------------
   495 ;; (1) _getAdOriginalCh13Value                               2     0      2       0
   496 ;;                                              0 BANK0      2     0      2
   497 ;; ---------------------------------------------------------------------------------
   498 ;; (1) _clearSmallTimer                                      0     0      0       0
   499 ;; ---------------------------------------------------------------------------------
   500 ;; (1) _clearBigTimer                                        0     0      0       0
   501 ;; ---------------------------------------------------------------------------------
   502 ;; (1) _clrSampeTime                                         0     0      0       0
   503 ;; ---------------------------------------------------------------------------------
   504 ;; (1) _isPermitSampleTime                                   0     0      0       0
   505 ;; ---------------------------------------------------------------------------------
   506 ;; (2) _adc_start                                            0     0      0       0
   507 ;; ---------------------------------------------------------------------------------
   508 ;; (1) _op2_init                                             0     0      0       0
   509 ;; ---------------------------------------------------------------------------------
   510 ;; (1) _op1_init                                             0     0      0       0
   511 ;; ---------------------------------------------------------------------------------
   512 ;; (1) _dac_init                                             0     0      0       0
   513 ;; ---------------------------------------------------------------------------------
   514 ;; (1) _adc_test_init                                        3     2      1      44
   515 ;;                                              0 BANK0      3     2      1
   516 ;; ---------------------------------------------------------------------------------
   517 ;; (1) _timer1_interrupt_config                              0     0      0       0
   518 ;; ---------------------------------------------------------------------------------
   519 ;; (1) _timer1_config                                        0     0      0       0
   520 ;; ---------------------------------------------------------------------------------
   521 ;; (1) _clock_config                                         0     0      0       0
   522 ;; ---------------------------------------------------------------------------------
   523 ;; Estimated maximum stack depth 3
   524 ;; ---------------------------------------------------------------------------------
   525 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   526 ;; ---------------------------------------------------------------------------------
   527 ;; (4) _ISR                                                  2     2      0      97
   528 ;;                                              4 COMMON     2     2      0
   529 ;;                i1_setAD_ConvertFlag
   530 ;;                            _adc_get
   531 ;; ---------------------------------------------------------------------------------
   532 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   533 ;;                                              0 COMMON     1     1      0
   534 ;; ---------------------------------------------------------------------------------
   535 ;; (5) _adc_get                                              4     2      2      24
   536 ;;                                              0 COMMON     4     2      2
   537 ;; ---------------------------------------------------------------------------------
   538 ;; Estimated maximum stack depth 5
   539 ;; ---------------------------------------------------------------------------------
   540 ;; Call Graph Graphs:
   541 ;; _main (ROOT)
   542 ;;   _clock_config
   543 ;;   _timer1_config
   544 ;;   _timer1_interrupt_config
   545 ;;   _adc_test_init
   546 ;;   _dac_init
   547 ;;   _op1_init
   548 ;;   _op2_init
   549 ;;   _adc_start
   550 ;;   _isPermitSampleTime
   551 ;;   _clrSampeTime
   552 ;;   _process_AD_Converter_Value
   553 ;;     _getAD_ConvertFlag
   554 ;;     _setAD_ConvertFlag
   555 ;;     _AD_Sample
   556 ;;       _getAdOriginalValue
   557 ;;     _adc_start
   558 ;;   _clearBigTimer
   559 ;;   _clearSmallTimer
   560 ;;   _getAdOriginalCh13Value
   561 ;;   _setDAC0_ChannelValue
   562 ;;   _startBigTimer
   563 ;;   _startSmallTimer
   564 ;;   _isFinishedBigTimer
   565 ;;   _isFinishedSmallTimer
   566 ;;
   567 ;; _ISR (ROOT)
   568 ;;   i1_setAD_ConvertFlag
   569 ;;   _adc_get
   570 ;;
   571 ;; Address spaces:
   572 ;;Name               Size   Autos  Total    Cost      Usage
   573 ;;BANK3               60      0       0      10        0.0%
   574 ;;BITBANK3            60      0       0       9        0.0%
   575 ;;SFR3                 0      0       0       4        0.0%
   576 ;;BITSFR3              0      0       0       4        0.0%
   577 ;;BANK2               60      0       0      12        0.0%
   578 ;;BITBANK2            60      0       0      11        0.0%
   579 ;;SFR2                 0      0       0       5        0.0%
   580 ;;BITSFR2              0      0       0       5        0.0%
   581 ;;SFR1                 0      0       0       2        0.0%
   582 ;;BITSFR1              0      0       0       2        0.0%
   583 ;;BANK1               50      0       0       8        0.0%
   584 ;;BITBANK1            50      0       0       7        0.0%
   585 ;;CODE                 0      0       0       0        0.0%
   586 ;;DATA                 0      0      38       6        0.0%
   587 ;;ABS                  0      0      31       3        0.0%
   588 ;;NULL                 0      0       0       0        0.0%
   589 ;;STACK                0      0       7       2        0.0%
   590 ;;BANK0               50      5      26       5       47.5%
   591 ;;BITBANK0            50      0       0       4        0.0%
   592 ;;SFR0                 0      0       0       1        0.0%
   593 ;;BITSFR0              0      0       0       1        0.0%
   594 ;;COMMON               E      6       B       1       78.6%
   595 ;;BITCOMMON            E      0       0       0        0.0%
   596                           
   597                           
   598 ;; *************** function _main *****************
   599 ;; Defined at:
   600 ;;		line 84 in file "C:\sw_dev\AK7030-OTP\main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;		None               void
   607 ;; Registers used:
   608 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   609 ;; Tracked objects:
   610 ;;		On entry : 17F/0
   611 ;;		On exit  : 60/0
   612 ;;		Unchanged: FFE00/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0
   617 ;;      Totals:         0       0       0       0       0
   618 ;;Total ram usage:        0 bytes
   619 ;; Hardware stack levels required when called:    5
   620 ;; This function calls:
   621 ;;		_clock_config
   622 ;;		_timer1_config
   623 ;;		_timer1_interrupt_config
   624 ;;		_adc_test_init
   625 ;;		_dac_init
   626 ;;		_op1_init
   627 ;;		_op2_init
   628 ;;		_adc_start
   629 ;;		_isPermitSampleTime
   630 ;;		_clrSampeTime
   631 ;;		_process_AD_Converter_Value
   632 ;;		_clearBigTimer
   633 ;;		_clearSmallTimer
   634 ;;		_getAdOriginalCh13Value
   635 ;;		_setDAC0_ChannelValue
   636 ;;		_startBigTimer
   637 ;;		_startSmallTimer
   638 ;;		_isFinishedBigTimer
   639 ;;		_isFinishedSmallTimer
   640 ;; This function is called by:
   641 ;;		Startup code after reset
   642 ;; This function uses a non-reentrant model
   643 ;;
   644  000D                     _main:	
   645                           
   646                           ;main.c: 85: enum step
   647                           ;main.c: 86: {
   648                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   649                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   650                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   651                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   652                           ;main.c: 91: SET_PA2_VALUE,
   653                           ;main.c: 92: PROCESS_AD_VALUE,
   654                           ;main.c: 93: WAIT_SET_TIME_FINISHED,
   655                           ;main.c: 94: SET_TIME_BE_FINISHED,
   656                           ;main.c: 95: CHECKING_PULL_OUT_BATTERY,
   657                           ;main.c: 96: CHECKING_INSTALLED_BATTERY,
   658                           ;main.c: 97: };
   659                           ;main.c: 99: enum workTimerType
   660                           ;main.c: 100: {
   661                           ;main.c: 101: BIG_TIMER_WORK = 0,
   662                           
   663                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   664  000D  1683               	bsf	3,5	;RP0=1, select bank1
   665  000E  1005               	bcf	5,0
   666                           
   667                           ;main.c: 112: TRISA1 = 0;
   668  000F  1085               	bcf	5,1
   669                           
   670                           ;main.c: 113: TRISA3 = 0;
   671  0010  1185               	bcf	5,3
   672                           
   673                           ;main.c: 114: TRISA2 = 0;
   674  0011  1105               	bcf	5,2
   675                           
   676                           ;main.c: 115: PA2 = 1;
   677  0012  1283               	bcf	3,5	;RP0=0, select bank0
   678  0013  1505               	bsf	5,2
   679                           
   680                           ;main.c: 116: PA0 = 1;
   681  0014  1405               	bsf	5,0
   682                           
   683                           ;main.c: 118: TRISB2 = 1;
   684  0015  1683               	bsf	3,5	;RP0=1, select bank1
   685  0016  1506               	bsf	6,2
   686                           
   687                           ;main.c: 120: TRISB1 = 1;
   688  0017  1486               	bsf	6,1
   689                           
   690                           ;main.c: 121: TRISB0 = 1;
   691  0018  1406               	bsf	6,0
   692                           
   693                           ;main.c: 123: clock_config();
   694  0019  118A  2240  118A   	fcall	_clock_config
   695                           
   696                           ;main.c: 124: timer1_config();
   697  001C  118A  2225  118A   	fcall	_timer1_config
   698                           
   699                           ;main.c: 125: timer1_interrupt_config();
   700  001F  118A  2276  118A   	fcall	_timer1_interrupt_config
   701                           
   702                           ;main.c: 127: adc_test_init(13,3);
   703  0022  3003               	movlw	3
   704  0023  1283               	bcf	3,5	;RP0=0, select bank0
   705  0024  00C0               	movwf	?_adc_test_init
   706  0025  300D               	movlw	13
   707  0026  118A  21F5  118A   	fcall	_adc_test_init
   708                           
   709                           ;main.c: 129: dac_init();
   710  0029  118A  2267  118A   	fcall	_dac_init
   711                           
   712                           ;main.c: 130: op1_init();
   713  002C  118A  2219  118A   	fcall	_op1_init
   714                           
   715                           ;main.c: 131: op2_init();
   716  002F  118A  222F  118A   	fcall	_op2_init
   717                           
   718                           ;main.c: 134: adc_start();
   719  0032  118A  2128  118A   	fcall	_adc_start
   720                           
   721                           ;main.c: 147: switch(ampStep)
   722  0035  28FB               	goto	l3128
   723  0036                     l3136:	
   724                           
   725                           ;main.c: 150: {
   726                           ;main.c: 151: ucBigTimerActionFlag = 0;
   727  0036  01B9               	clrf	main@ucBigTimerActionFlag
   728                           
   729                           ;main.c: 152: clearBigTimer();
   730  0037  118A  2273  118A   	fcall	_clearBigTimer
   731                           
   732                           ;main.c: 153: clearSmallTimer();
   733  003A  118A  2270  118A   	fcall	_clearSmallTimer
   734  003D                     L1:	
   735                           
   736                           ;main.c: 154: if(!PB2)
   737  003D  1906               	btfsc	6,2
   738  003E  28FB               	goto	l3128
   739  003F                     l3144:	
   740                           
   741                           ;main.c: 155: ampStep++;
   742  003F  1283               	bcf	3,5	;RP0=0, select bank0
   743  0040  0AB7               	incf	main@ampStep,f
   744  0041  28FB               	goto	l3128
   745  0042                     l679:	
   746                           ;main.c: 157: }
   747                           ;main.c: 159: case SENSE_PB2_DURATION_ONE_SECOND:
   748                           
   749                           
   750                           ;main.c: 160: {
   751                           ;main.c: 161: static unsigned char ucConfirmTimer1S = 0;
   752                           ;main.c: 162: if(!PB2)
   753  0042  1906               	btfsc	6,2
   754  0043  2846               	goto	l3148
   755                           
   756                           ;main.c: 163: {
   757                           ;main.c: 164: ucConfirmTimer1S++;
   758  0044  0ABB               	incf	main@ucConfirmTimer1S,f
   759                           
   760                           ;main.c: 165: }
   761  0045  2847               	goto	l3150
   762  0046                     l3148:	
   763                           
   764                           ;main.c: 166: else
   765                           ;main.c: 167: {
   766                           ;main.c: 168: ucConfirmTimer1S = 0;
   767  0046  01BB               	clrf	main@ucConfirmTimer1S
   768  0047                     l3150:	
   769                           
   770                           ;main.c: 169: }
   771                           ;main.c: 171: if(ucConfirmTimer1S >= 10)
   772  0047  300A               	movlw	10
   773  0048  023B               	subwf	main@ucConfirmTimer1S,w
   774  0049  1C03               	skipc
   775  004A  28FB               	goto	l3128
   776                           
   777                           ;main.c: 172: {
   778                           ;main.c: 173: ucConfirmTimer1S = 0;
   779  004B  01BB               	clrf	main@ucConfirmTimer1S
   780  004C  283F               	goto	l3144
   781  004D                     l685:	
   782                           ;main.c: 178: }
   783                           ;main.c: 180: case SENSE_PB2_INPUT_VOLTAGE__AGAIN:
   784                           
   785                           
   786                           ;main.c: 181: {
   787                           ;main.c: 182: if(!PB2)
   788  004D  283D               	goto	L1
   789  004E                     l687:	
   790                           ;main.c: 185: }
   791                           ;main.c: 187: case SENSE_PB2_DURATION__SECOND:
   792                           
   793                           
   794                           ;main.c: 188: {
   795                           ;main.c: 189: static unsigned char ucConfirmTimerZptS = 0;
   796                           ;main.c: 190: if(!PB2)
   797  004E  1906               	btfsc	6,2
   798  004F  2852               	goto	l3160
   799                           
   800                           ;main.c: 191: {
   801                           ;main.c: 192: ucConfirmTimerZptS++;
   802  0050  0ABC               	incf	main@ucConfirmTimerZptS,f
   803                           
   804                           ;main.c: 193: }
   805  0051  2853               	goto	l3162
   806  0052                     l3160:	
   807                           
   808                           ;main.c: 194: else
   809                           ;main.c: 195: {
   810                           ;main.c: 196: ucConfirmTimerZptS = 0;
   811  0052  01BC               	clrf	main@ucConfirmTimerZptS
   812  0053                     l3162:	
   813                           
   814                           ;main.c: 197: }
   815                           ;main.c: 199: if(ucConfirmTimerZptS >= 3)
   816  0053  3003               	movlw	3
   817  0054  023C               	subwf	main@ucConfirmTimerZptS,w
   818  0055  1C03               	skipc
   819  0056  28FB               	goto	l3128
   820                           
   821                           ;main.c: 200: {
   822                           ;main.c: 201: ucConfirmTimerZptS = 0;
   823  0057  01BC               	clrf	main@ucConfirmTimerZptS
   824  0058  283F               	goto	l3144
   825  0059                     l693:	
   826                           ;main.c: 206: }
   827                           ;main.c: 208: case SET_PA2_VALUE:
   828                           
   829                           
   830                           ;main.c: 209: {
   831                           ;main.c: 210: PA2 = 0;
   832  0059  1105               	bcf	5,2
   833  005A  283F               	goto	l3144
   834  005B                     l3170:	
   835                           
   836                           ;main.c: 216: {
   837                           ;main.c: 217: static unsigned char ucInit = 0;
   838                           ;main.c: 218: if(getAdOriginalCh13Value() > 40)
   839  005B  118A  225D  118A   	fcall	_getAdOriginalCh13Value
   840  005E  3000               	movlw	0
   841  005F  0241               	subwf	?_getAdOriginalCh13Value+1,w
   842  0060  3029               	movlw	41
   843  0061  1903               	skipnz
   844  0062  0240               	subwf	?_getAdOriginalCh13Value,w
   845  0063  1C03               	skipc
   846  0064  2878               	goto	l3184
   847  0065  301B               	movlw	27
   848                           
   849                           ;main.c: 219: {
   850                           ;main.c: 220: ucInit = 1;
   851  0066  01BD               	clrf	main@ucInit
   852  0067  0ABD               	incf	main@ucInit,f
   853                           
   854                           ;main.c: 221: PA0 = 0;
   855  0068  1005               	bcf	5,0
   856                           
   857                           ;main.c: 222: PA1 = 1;
   858  0069  1485               	bsf	5,1
   859                           
   860                           ;main.c: 224: tDA_timer = BIG_TIMER_WORK;
   861  006A  01B8               	clrf	main@tDA_timer
   862                           
   863                           ;main.c: 225: setDAC0_ChannelValue(27);
   864  006B  118A  226C  118A   	fcall	_setDAC0_ChannelValue
   865                           
   866                           ;main.c: 226: if(!ucBigTimerActionFlag)
   867  006E  1283               	bcf	3,5	;RP0=0, select bank0
   868  006F  08B9               	movf	main@ucBigTimerActionFlag,f
   869  0070  1D03               	skipz
   870  0071  28A1               	goto	l3204
   871  0072                     l3180:	
   872                           
   873                           ;main.c: 227: {
   874                           ;main.c: 228: startBigTimer();
   875  0072  118A  2258  118A   	fcall	_startBigTimer
   876                           
   877                           ;main.c: 229: ucBigTimerActionFlag = 1;
   878  0075  01B9               	clrf	main@ucBigTimerActionFlag
   879  0076  0AB9               	incf	main@ucBigTimerActionFlag,f
   880  0077  28A1               	goto	l3204
   881  0078                     l3184:	
   882                           
   883                           ;main.c: 232: else if(getAdOriginalCh13Value() <35)
   884  0078  118A  225D  118A   	fcall	_getAdOriginalCh13Value
   885  007B  3000               	movlw	0
   886  007C  0241               	subwf	?_getAdOriginalCh13Value+1,w
   887  007D  3023               	movlw	35
   888  007E  1903               	skipnz
   889  007F  0240               	subwf	?_getAdOriginalCh13Value,w
   890  0080  1803               	skipnc
   891  0081  2891               	goto	l3190
   892  0082  3019               	movlw	25
   893                           
   894                           ;main.c: 233: {
   895                           ;main.c: 234: ucInit = 1;
   896  0083  01BD               	clrf	main@ucInit
   897  0084  0ABD               	incf	main@ucInit,f
   898                           
   899                           ;main.c: 235: PA0 = 1;
   900  0085  1405               	bsf	5,0
   901                           
   902                           ;main.c: 236: PA1 = 0;
   903  0086  1085               	bcf	5,1
   904                           
   905                           ;main.c: 237: PA3 = 0;
   906  0087  1185               	bcf	5,3
   907                           
   908                           ;main.c: 238: tDA_timer = SMALL_TIMER_WORK;
   909  0088  01B8               	clrf	main@tDA_timer
   910  0089  0AB8               	incf	main@tDA_timer,f
   911                           
   912                           ;main.c: 239: setDAC0_ChannelValue(25);
   913  008A  118A  226C  118A   	fcall	_setDAC0_ChannelValue
   914                           
   915                           ;main.c: 240: startSmallTimer();
   916  008D  118A  2248  118A   	fcall	_startSmallTimer
   917                           
   918                           ;main.c: 241: }
   919  0090  28A1               	goto	l3204
   920  0091                     l3190:	
   921                           
   922                           ;main.c: 242: else
   923                           ;main.c: 243: {
   924                           ;main.c: 244: if(!ucInit)
   925  0091  08BD               	movf	main@ucInit,f
   926  0092  1D03               	skipz
   927  0093  28A1               	goto	l3204
   928  0094  301B               	movlw	27
   929                           
   930                           ;main.c: 245: {
   931                           ;main.c: 246: ucInit = 1;
   932  0095  01BD               	clrf	main@ucInit
   933  0096  0ABD               	incf	main@ucInit,f
   934                           
   935                           ;main.c: 247: PA0 = 0;
   936  0097  1005               	bcf	5,0
   937                           
   938                           ;main.c: 248: PA1 = 1;
   939  0098  1485               	bsf	5,1
   940                           
   941                           ;main.c: 250: tDA_timer = BIG_TIMER_WORK;
   942  0099  01B8               	clrf	main@tDA_timer
   943                           
   944                           ;main.c: 251: setDAC0_ChannelValue(27);
   945  009A  118A  226C  118A   	fcall	_setDAC0_ChannelValue
   946                           
   947                           ;main.c: 252: if(!ucBigTimerActionFlag)
   948  009D  1283               	bcf	3,5	;RP0=0, select bank0
   949  009E  08B9               	movf	main@ucBigTimerActionFlag,f
   950  009F  1903               	btfsc	3,2
   951  00A0  2872               	goto	l3180
   952  00A1                     l3204:	
   953                           
   954                           ;main.c: 256: }
   955                           ;main.c: 257: }
   956                           ;main.c: 258: }
   957                           ;main.c: 260: if(BIG_TIMER_WORK == tDA_timer)
   958  00A1  08B8               	movf	main@tDA_timer,f
   959  00A2  1D03               	skipz
   960  00A3  28AE               	goto	l704
   961                           
   962                           ;main.c: 261: {
   963                           ;main.c: 262: if(!PA3)
   964  00A4  1985               	btfsc	5,3
   965  00A5  283F               	goto	l3144
   966  00A6  3005               	movlw	5
   967                           
   968                           ;main.c: 263: {
   969                           ;main.c: 264: ucWaitTime1S++;
   970  00A7  0ABF               	incf	main@ucWaitTime1S,f
   971                           
   972                           ;main.c: 265: if(ucWaitTime1S >= 5)
   973  00A8  023F               	subwf	main@ucWaitTime1S,w
   974  00A9  1C03               	skipc
   975  00AA  283F               	goto	l3144
   976                           
   977                           ;main.c: 266: {
   978                           ;main.c: 267: PA3 = 1;
   979  00AB  1585               	bsf	5,3
   980  00AC                     l3214:	
   981                           
   982                           ;main.c: 268: ucWaitTime1S = 0;
   983  00AC  01BF               	clrf	main@ucWaitTime1S
   984  00AD  283F               	goto	l3144
   985  00AE                     l704:	
   986                           
   987                           ;main.c: 272: else
   988                           ;main.c: 273: {
   989                           ;main.c: 274: PA3 = 0;
   990  00AE  1185               	bcf	5,3
   991  00AF  28AC               	goto	l3214
   992  00B0                     l3220:	
   993                           
   994                           ;main.c: 287: {
   995                           ;main.c: 288: if(!isFinishedBigTimer())
   996  00B0  118A  2253  118A   	fcall	_isFinishedBigTimer
   997  00B3  3800               	iorlw	0
   998  00B4  1D03               	skipz
   999  00B5  283F               	goto	l3144
  1000  00B6                     l3222:	
  1001                           
  1002                           ;main.c: 289: {
  1003                           ;main.c: 290: ampStep = PROCESS_AD_VALUE;
  1004  00B6  3005               	movlw	5
  1005  00B7  00B7               	movwf	main@ampStep
  1006                           
  1007                           ;main.c: 291: }
  1008  00B8  28FB               	goto	l3128
  1009  00B9                     l3226:	
  1010                           
  1011                           ;main.c: 300: {
  1012                           ;main.c: 301: if((ucBigTimerActionFlag == 1) && isFinishedBigTimer())
  1013  00B9  0B39               	decfsz	main@ucBigTimerActionFlag,w
  1014  00BA  28C1               	goto	l3232
  1015  00BB  118A  2253  118A   	fcall	_isFinishedBigTimer
  1016  00BE  3A00               	xorlw	0
  1017  00BF  1D03               	btfss	3,2
  1018  00C0  283F               	goto	l3144
  1019  00C1                     l3232:	
  1020                           
  1021                           ;main.c: 305: else if(!isFinishedSmallTimer())
  1022  00C1  118A  224E  118A   	fcall	_isFinishedSmallTimer
  1023  00C4  3800               	iorlw	0
  1024  00C5  1D03               	skipz
  1025  00C6  283F               	goto	l3144
  1026                           
  1027                           ;main.c: 306: {
  1028                           ;main.c: 307: if(getAdOriginalCh13Value() > 40)
  1029  00C7  118A  225D  118A   	fcall	_getAdOriginalCh13Value
  1030  00CA  3000               	movlw	0
  1031  00CB  0241               	subwf	?_getAdOriginalCh13Value+1,w
  1032  00CC  3029               	movlw	41
  1033  00CD  1903               	skipnz
  1034  00CE  0240               	subwf	?_getAdOriginalCh13Value,w
  1035  00CF  1C03               	skipc
  1036  00D0  28FB               	goto	l3128
  1037                           
  1038                           ;main.c: 308: {
  1039                           ;main.c: 309: ucWaitTime1S = 0;
  1040  00D1  01BF               	clrf	main@ucWaitTime1S
  1041  00D2  28B6               	goto	l3222
  1042  00D3                     l3244:	
  1043  00D3  0838               	movf	main@tDA_timer,w
  1044                           
  1045                           ; Switch size 1, requested type "space"
  1046                           ; Number of cases is 2, Range of values is 0 to 1
  1047                           ; switch strategies available:
  1048                           ; Name         Instructions Cycles
  1049                           ; simple_byte            7     4 (average)
  1050                           ; direct_byte           11     7 (fixed)
  1051                           ; jumptable            260     6 (fixed)
  1052                           ; rangetable             6     6 (fixed)
  1053                           ; spacedrange           10     9 (fixed)
  1054                           ; locatedrange           2     3 (fixed)
  1055                           ;	Chosen strategy is simple_byte
  1056  00D4  3A00               	xorlw	0	; case 0
  1057  00D5  1903               	skipnz
  1058  00D6  28B0               	goto	l3220
  1059  00D7  3A01               	xorlw	1	; case 1
  1060  00D8  1903               	skipnz
  1061  00D9  28B9               	goto	l3226
  1062  00DA  2916               	goto	l674
  1063  00DB                     l721:	
  1064                           ;main.c: 325: }
  1065                           ;main.c: 327: case SET_TIME_BE_FINISHED:
  1066                           
  1067  00DB  3019               	movlw	25
  1068                           
  1069                           ;main.c: 328: {
  1070                           ;main.c: 329: PA2 = 1;
  1071  00DC  1505               	bsf	5,2
  1072                           
  1073                           ;main.c: 330: PA0 = 0;
  1074  00DD  1005               	bcf	5,0
  1075                           
  1076                           ;main.c: 331: PA1 = 0;
  1077  00DE  1085               	bcf	5,1
  1078                           
  1079                           ;main.c: 332: PA3 = 0;
  1080  00DF  1185               	bcf	5,3
  1081                           
  1082                           ;main.c: 333: ucWaitTime1S = 0;
  1083  00E0  01BF               	clrf	main@ucWaitTime1S
  1084                           
  1085                           ;main.c: 334: setDAC0_ChannelValue(25);
  1086  00E1  118A  226C  118A   	fcall	_setDAC0_ChannelValue
  1087  00E4  283F               	goto	l3144
  1088  00E5                     l722:	
  1089                           ;main.c: 337: }
  1090                           ;main.c: 339: case CHECKING_PULL_OUT_BATTERY:
  1091                           
  1092                           
  1093                           ;main.c: 340: {
  1094                           ;main.c: 341: static unsigned char ucCheckBatteryCnt = 0;
  1095                           ;main.c: 342: if(PB2)
  1096  00E5  1D06               	btfss	6,2
  1097  00E6  28E9               	goto	l3254
  1098                           
  1099                           ;main.c: 343: ucCheckBatteryCnt++;
  1100  00E7  0ABA               	incf	main@ucCheckBatteryCnt,f
  1101  00E8  28EA               	goto	l3256
  1102  00E9                     l3254:	
  1103                           
  1104                           ;main.c: 344: else
  1105                           ;main.c: 345: ucCheckBatteryCnt = 0;
  1106  00E9  01BA               	clrf	main@ucCheckBatteryCnt
  1107  00EA                     l3256:	
  1108                           
  1109                           ;main.c: 347: if(ucCheckBatteryCnt > 2)
  1110  00EA  3003               	movlw	3
  1111  00EB  023A               	subwf	main@ucCheckBatteryCnt,w
  1112  00EC  1C03               	skipc
  1113  00ED  28FB               	goto	l3128
  1114                           
  1115                           ;main.c: 348: {
  1116                           ;main.c: 349: ucCheckBatteryCnt = 0;
  1117  00EE  01BA               	clrf	main@ucCheckBatteryCnt
  1118  00EF  283F               	goto	l3144
  1119  00F0                     l728:	
  1120                           ;main.c: 353: }
  1121                           ;main.c: 355: case CHECKING_INSTALLED_BATTERY:
  1122                           
  1123                           
  1124                           ;main.c: 356: {
  1125                           ;main.c: 357: static unsigned char ucInstalledBatteryCnt = 0;
  1126                           ;main.c: 358: if(!PB2)
  1127  00F0  1906               	btfsc	6,2
  1128  00F1  28F4               	goto	l3264
  1129                           
  1130                           ;main.c: 359: ucInstalledBatteryCnt++;
  1131  00F2  0ABE               	incf	main@ucInstalledBatteryCnt,f
  1132  00F3  28F5               	goto	l3266
  1133  00F4                     l3264:	
  1134                           
  1135                           ;main.c: 360: else
  1136                           ;main.c: 361: ucInstalledBatteryCnt = 0;
  1137  00F4  01BE               	clrf	main@ucInstalledBatteryCnt
  1138  00F5                     l3266:	
  1139                           
  1140                           ;main.c: 363: if(ucInstalledBatteryCnt > 10)
  1141  00F5  300B               	movlw	11
  1142  00F6  023E               	subwf	main@ucInstalledBatteryCnt,w
  1143  00F7  1C03               	skipc
  1144  00F8  28FB               	goto	l3128
  1145                           
  1146                           ;main.c: 364: {
  1147                           ;main.c: 365: ucInstalledBatteryCnt = 0;
  1148  00F9  01BE               	clrf	main@ucInstalledBatteryCnt
  1149                           
  1150                           ;main.c: 366: ampStep = SENSE_PB2_INPUT_VOLTAGE;
  1151  00FA  01B7               	clrf	main@ampStep
  1152  00FB                     l3128:	
  1153  00FB  0064               	clrwdt	;#
  1154                           
  1155                           ;main.c: 142: if(isPermitSampleTime())
  1156  00FC  118A  2262  118A   	fcall	_isPermitSampleTime
  1157  00FF  3A00               	xorlw	0
  1158  0100  1903               	skipnz
  1159  0101  28FB               	goto	l3128
  1160                           
  1161                           ;main.c: 143: {
  1162                           ;main.c: 144: clrSampeTime();
  1163  0102  118A  2279  118A   	fcall	_clrSampeTime
  1164                           
  1165                           ;main.c: 145: process_AD_Converter_Value();
  1166  0105  118A  2117  118A   	fcall	_process_AD_Converter_Value
  1167  0108  1283               	bcf	3,5	;RP0=0, select bank0
  1168  0109  1303               	bcf	3,6	;RP1=0, select bank0
  1169  010A  0837               	movf	main@ampStep,w
  1170                           
  1171                           ; Switch size 1, requested type "space"
  1172                           ; Number of cases is 10, Range of values is 0 to 9
  1173                           ; switch strategies available:
  1174                           ; Name         Instructions Cycles
  1175                           ; direct_byte           27     7 (fixed)
  1176                           ; simple_byte           31    16 (average)
  1177                           ; jumptable            260     6 (fixed)
  1178                           ; rangetable            14     6 (fixed)
  1179                           ; spacedrange           26     9 (fixed)
  1180                           ; locatedrange          10     3 (fixed)
  1181                           ;	Chosen strategy is direct_byte
  1182  010B  0084               	movwf	4
  1183  010C  300A               	movlw	10
  1184  010D  0204               	subwf	4,w
  1185  010E  1803               	skipnc
  1186  010F  28FB               	goto	l3128
  1187  0110  3001               	movlw	high S3322
  1188  0111  008A               	movwf	10
  1189  0112  1003               	clrc
  1190  0113  0D04               	rlf	4,w
  1191  0114  3EE1               	addlw	low S3322
  1192  0115  0082               	movwf	2
  1193  0116                     l674:	
  1194  0116  28FB               	goto	l3128
  1195  0117                     __end_of_main:	
  1196                           
  1197                           	psect	swtext1
  1198  01E1                     __pswtext1:	
  1199  01E1                     S3322:	
  1200  01E1  118A  2836         	ljmp	l3136
  1201  01E3  118A  2842         	ljmp	l679
  1202  01E5  118A  284D         	ljmp	l685
  1203  01E7  118A  284E         	ljmp	l687
  1204  01E9  118A  2859         	ljmp	l693
  1205  01EB  118A  285B         	ljmp	l3170
  1206  01ED  118A  28D3         	ljmp	l3244
  1207  01EF  118A  28DB         	ljmp	l721
  1208  01F1  118A  28E5         	ljmp	l722
  1209  01F3  118A  28F0         	ljmp	l728
  1210                           
  1211                           	psect	text498
  1212  0117                     __ptext498:	
  1213 ;; =============== function _main ends ============
  1214                           
  1215                           
  1216 ;; *************** function _process_AD_Converter_Value *****************
  1217 ;; Defined at:
  1218 ;;		line 94 in file "C:\sw_dev\AK7030-OTP\common.c"
  1219 ;; Parameters:    Size  Location     Type
  1220 ;;		None
  1221 ;; Auto vars:     Size  Location     Type
  1222 ;;		None
  1223 ;; Return value:  Size  Location     Type
  1224 ;;		None               void
  1225 ;; Registers used:
  1226 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1227 ;; Tracked objects:
  1228 ;;		On entry : 0/0
  1229 ;;		On exit  : 0/0
  1230 ;;		Unchanged: FFE9F/0
  1231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1232 ;;      Params:         0       0       0       0       0
  1233 ;;      Locals:         0       0       0       0       0
  1234 ;;      Temps:          0       0       0       0       0
  1235 ;;      Totals:         0       0       0       0       0
  1236 ;;Total ram usage:        0 bytes
  1237 ;; Hardware stack levels used:    1
  1238 ;; Hardware stack levels required when called:    4
  1239 ;; This function calls:
  1240 ;;		_getAD_ConvertFlag
  1241 ;;		_setAD_ConvertFlag
  1242 ;;		_AD_Sample
  1243 ;;		_adc_start
  1244 ;; This function is called by:
  1245 ;;		_main
  1246 ;; This function uses a non-reentrant model
  1247 ;;
  1248  0117                     _process_AD_Converter_Value:	
  1249                           
  1250                           ;common.c: 65: return adc_convert_flag;
  1251                           
  1252                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1253                           
  1254                           ;common.c: 95: if(getAD_ConvertFlag())
  1255                           
  1256                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1257  0117  0879               	movf	_adc_convert_flag,w
  1258  0118  3A00               	xorlw	0
  1259  0119  1903               	skipnz
  1260  011A  0008               	return
  1261                           
  1262                           ;common.c: 96: {
  1263                           ;common.c: 97: setAD_ConvertFlag(0);
  1264  011B  3000               	movlw	0
  1265  011C  2123  118A         	fcall	_setAD_ConvertFlag
  1266                           
  1267                           ;common.c: 98: AD_Sample();
  1268  011E  212B  118A         	fcall	_AD_Sample
  1269                           
  1270                           ;common.c: 100: adc_start();
  1271  0120  2928               	ljmp	l2962
  1272  0121                     __end_of_process_AD_Converter_Value:	
  1273  0121                     __ptext502:	
  1274 ;; =============== function _setAD_ConvertFlag ends ============
  1275                           
  1276                           
  1277 ;; *************** function _getAD_ConvertFlag *****************
  1278 ;; Defined at:
  1279 ;;		line 64 in file "C:\sw_dev\AK7030-OTP\common.c"
  1280 ;; Parameters:    Size  Location     Type
  1281 ;;		None
  1282 ;; Auto vars:     Size  Location     Type
  1283 ;;		None
  1284 ;; Return value:  Size  Location     Type
  1285 ;;                  1    wreg      unsigned char 
  1286 ;; Registers used:
  1287 ;;		wreg
  1288 ;; Tracked objects:
  1289 ;;		On entry : 0/0
  1290 ;;		On exit  : 0/0
  1291 ;;		Unchanged: FFFFF/0
  1292 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1293 ;;      Params:         0       0       0       0       0
  1294 ;;      Locals:         0       0       0       0       0
  1295 ;;      Temps:          0       0       0       0       0
  1296 ;;      Totals:         0       0       0       0       0
  1297 ;;Total ram usage:        0 bytes
  1298 ;; Hardware stack levels used:    1
  1299 ;; Hardware stack levels required when called:    2
  1300 ;; This function calls:
  1301 ;;		Nothing
  1302 ;; This function is called by:
  1303 ;;		_process_AD_Converter_Value
  1304 ;; This function uses a non-reentrant model
  1305 ;;
  1306  0121                     _getAD_ConvertFlag:	
  1307                           
  1308                           ;common.c: 65: return adc_convert_flag;
  1309                           
  1310                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1311  0121  0879               	movf	_adc_convert_flag,w
  1312  0122  0008               	return
  1313  0123                     __end_of_getAD_ConvertFlag:	
  1314  0123                     __ptext501:	
  1315 ;; =============== function _getAdOriginalValue ends ============
  1316                           
  1317                           
  1318 ;; *************** function _setAD_ConvertFlag *****************
  1319 ;; Defined at:
  1320 ;;		line 70 in file "C:\sw_dev\AK7030-OTP\common.c"
  1321 ;; Parameters:    Size  Location     Type
  1322 ;;  flag            1    wreg     unsigned char 
  1323 ;; Auto vars:     Size  Location     Type
  1324 ;;  flag            1    0[BANK0 ] unsigned char 
  1325 ;; Return value:  Size  Location     Type
  1326 ;;		None               void
  1327 ;; Registers used:
  1328 ;;		wreg
  1329 ;; Tracked objects:
  1330 ;;		On entry : 0/0
  1331 ;;		On exit  : 60/0
  1332 ;;		Unchanged: FFF9F/0
  1333 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1334 ;;      Params:         0       0       0       0       0
  1335 ;;      Locals:         0       1       0       0       0
  1336 ;;      Temps:          0       0       0       0       0
  1337 ;;      Totals:         0       1       0       0       0
  1338 ;;Total ram usage:        1 bytes
  1339 ;; Hardware stack levels used:    1
  1340 ;; Hardware stack levels required when called:    2
  1341 ;; This function calls:
  1342 ;;		Nothing
  1343 ;; This function is called by:
  1344 ;;		_process_AD_Converter_Value
  1345 ;; This function uses a non-reentrant model
  1346 ;;
  1347  0123                     _setAD_ConvertFlag:	
  1348                           
  1349                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1350                           ;setAD_ConvertFlag@flag stored from wreg
  1351  0123  1283               	bcf	3,5	;RP0=0, select bank0
  1352  0124  1303               	bcf	3,6	;RP1=0, select bank0
  1353  0125  00C0               	movwf	setAD_ConvertFlag@flag
  1354                           
  1355                           ;common.c: 71: adc_convert_flag = flag;
  1356  0126  00F9               	movwf	_adc_convert_flag
  1357  0127  0008               	return
  1358  0128                     __end_of_setAD_ConvertFlag:	
  1359  0128                     __ptext513:	
  1360 ;; =============== function _isPermitSampleTime ends ============
  1361                           
  1362                           
  1363 ;; *************** function _adc_start *****************
  1364 ;; Defined at:
  1365 ;;		line 99 in file "C:\sw_dev\AK7030-OTP\periph.c"
  1366 ;; Parameters:    Size  Location     Type
  1367 ;;		None
  1368 ;; Auto vars:     Size  Location     Type
  1369 ;;		None
  1370 ;; Return value:  Size  Location     Type
  1371 ;;		None               void
  1372 ;; Registers used:
  1373 ;;		None
  1374 ;; Tracked objects:
  1375 ;;		On entry : 40/20
  1376 ;;		On exit  : 60/0
  1377 ;;		Unchanged: FFF9F/0
  1378 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1379 ;;      Params:         0       0       0       0       0
  1380 ;;      Locals:         0       0       0       0       0
  1381 ;;      Temps:          0       0       0       0       0
  1382 ;;      Totals:         0       0       0       0       0
  1383 ;;Total ram usage:        0 bytes
  1384 ;; Hardware stack levels used:    1
  1385 ;; Hardware stack levels required when called:    2
  1386 ;; This function calls:
  1387 ;;		Nothing
  1388 ;; This function is called by:
  1389 ;;		_main
  1390 ;;		_process_AD_Converter_Value
  1391 ;; This function uses a non-reentrant model
  1392 ;;
  1393  0128                     _adc_start:	
  1394  0128                     l2962:	
  1395                           ; Regs used in _adc_start: []
  1396                           
  1397                           
  1398                           ;periph.c: 100: GO=1;
  1399  0128  1283               	bcf	3,5	;RP0=0, select bank0
  1400  0129  149F               	bsf	31,1
  1401  012A  0008               	return
  1402  012B                     __end_of_adc_start:	
  1403  012B                     __ptext499:	
  1404 ;; =============== function _process_AD_Converter_Value ends ============
  1405                           
  1406                           
  1407 ;; *************** function _AD_Sample *****************
  1408 ;; Defined at:
  1409 ;;		line 114 in file "C:\sw_dev\AK7030-OTP\common.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;		None
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  index           1    4[BANK0 ] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;		None               void
  1416 ;; Registers used:
  1417 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1418 ;; Tracked objects:
  1419 ;;		On entry : 60/0
  1420 ;;		On exit  : 60/0
  1421 ;;		Unchanged: FFE9F/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1423 ;;      Params:         0       0       0       0       0
  1424 ;;      Locals:         0       1       0       0       0
  1425 ;;      Temps:          0       2       0       0       0
  1426 ;;      Totals:         0       3       0       0       0
  1427 ;;Total ram usage:        3 bytes
  1428 ;; Hardware stack levels used:    1
  1429 ;; Hardware stack levels required when called:    3
  1430 ;; This function calls:
  1431 ;;		_getAdOriginalValue
  1432 ;; This function is called by:
  1433 ;;		_process_AD_Converter_Value
  1434 ;; This function uses a non-reentrant model
  1435 ;;
  1436  012B                     _AD_Sample:	
  1437                           
  1438                           ;common.c: 115: if(sampleTimes < 6)
  1439                           
  1440                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1441  012B  3006               	movlw	6
  1442  012C  0236               	subwf	_sampleTimes,w
  1443  012D  1803               	skipnc
  1444  012E  0008               	return
  1445                           
  1446                           ;common.c: 116: {
  1447                           ;common.c: 118: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1448  012F  2183  118A         	fcall	_getAdOriginalValue
  1449  0131  1003               	clrc
  1450  0132  0D36               	rlf	_sampleTimes,w
  1451  0133  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1452  0134  0084               	movwf	4
  1453  0135  0840               	movf	?_getAdOriginalValue,w
  1454  0136  1383               	bcf	3,7	;select IRP bank0
  1455  0137  0080               	movwf	0
  1456  0138  0A84               	incf	4,f
  1457  0139  0841               	movf	?_getAdOriginalValue+1,w
  1458  013A  0080               	movwf	0
  1459                           
  1460                           ;common.c: 120: if(sampleTimes == 0)
  1461  013B  08B6               	movf	_sampleTimes,f
  1462  013C  1D03               	skipz
  1463  013D  2946               	goto	l3070
  1464                           
  1465                           ;common.c: 121: {
  1466                           ;common.c: 122: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1467  013E  0821               	movf	_buffer_Sample_AD_Value+1,w
  1468  013F  00B1               	movwf	_multiFilterMaxValue+1
  1469  0140  0820               	movf	_buffer_Sample_AD_Value,w
  1470  0141  00B0               	movwf	_multiFilterMaxValue
  1471                           
  1472                           ;common.c: 123: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1473  0142  0821               	movf	_buffer_Sample_AD_Value+1,w
  1474  0143  00B3               	movwf	_multiFilterMinValue+1
  1475  0144  0820               	movf	_buffer_Sample_AD_Value,w
  1476  0145  00B2               	movwf	_multiFilterMinValue
  1477  0146                     l3070:	
  1478                           
  1479                           ;common.c: 124: }
  1480                           ;common.c: 126: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1481  0146  2188  118A         	fcall	PL2	;call to abstracted procedure
  1482  0148  0231               	subwf	_multiFilterMaxValue+1,w
  1483  0149  1D03               	skipz
  1484  014A  294D               	goto	u555
  1485  014B  0842               	movf	??_AD_Sample,w
  1486  014C  0230               	subwf	_multiFilterMaxValue,w
  1487  014D                     u555:	
  1488  014D  1803               	skipnc
  1489  014E  2958               	goto	l1431
  1490                           
  1491                           ;common.c: 127: {
  1492                           ;common.c: 128: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1493  014F  1003               	clrc
  1494  0150  0D36               	rlf	_sampleTimes,w
  1495  0151  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1496  0152  0084               	movwf	4
  1497  0153  0800               	movf	0,w
  1498  0154  00B0               	movwf	_multiFilterMaxValue
  1499  0155  0A84               	incf	4,f
  1500  0156  0800               	movf	0,w
  1501  0157  00B1               	movwf	_multiFilterMaxValue+1
  1502  0158                     l1431:	
  1503                           
  1504                           ;common.c: 129: }
  1505                           ;common.c: 130: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1506  0158  2188  118A         	fcall	PL2	;call to abstracted procedure
  1507  015A  0833               	movf	_multiFilterMinValue+1,w
  1508  015B  0243               	subwf	??_AD_Sample+1,w
  1509  015C  1D03               	skipz
  1510  015D  2960               	goto	u565
  1511  015E  0832               	movf	_multiFilterMinValue,w
  1512  015F  0242               	subwf	??_AD_Sample,w
  1513  0160                     u565:	
  1514  0160  1803               	skipnc
  1515  0161  296B               	goto	l3076
  1516                           
  1517                           ;common.c: 131: {
  1518                           ;common.c: 132: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1519  0162  1003               	clrc
  1520  0163  0D36               	rlf	_sampleTimes,w
  1521  0164  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1522  0165  0084               	movwf	4
  1523  0166  0800               	movf	0,w
  1524  0167  00B2               	movwf	_multiFilterMinValue
  1525  0168  0A84               	incf	4,f
  1526  0169  0800               	movf	0,w
  1527  016A  00B3               	movwf	_multiFilterMinValue+1
  1528  016B                     l3076:	
  1529  016B  3006               	movlw	6
  1530                           
  1531                           ;common.c: 137: sampleTimes++;
  1532  016C  0AB6               	incf	_sampleTimes,f
  1533                           
  1534                           ;common.c: 139: if(sampleTimes >= 6)
  1535  016D  0236               	subwf	_sampleTimes,w
  1536  016E  1C03               	skipc
  1537  016F  0008               	return
  1538                           
  1539                           ;common.c: 140: {
  1540                           ;common.c: 141: sampleTimes = 0;
  1541  0170  01B6               	clrf	_sampleTimes
  1542                           
  1543                           ;common.c: 144: {
  1544                           ;common.c: 146: sampleCH13Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1545  0171  0845               	movf	_sampleChannelSelect,w
  1546  0172  3A0D               	xorlw	13
  1547                           
  1548                           ;common.c: 147: sampleChannelSelect = 13;
  1549  0173  300D               	movlw	13
  1550  0174  00C5               	movwf	_sampleChannelSelect
  1551                           
  1552                           ;common.c: 158: }
  1553                           ;common.c: 160: for(unsigned char index = 0; index < 6;index++)
  1554                           
  1555                           ;common.c: 148: }
  1556  0175  01C4               	clrf	AD_Sample@index
  1557  0176                     l3098:	
  1558                           
  1559                           ;common.c: 161: buffer_Sample_AD_Value[index] = 0;
  1560  0176  1003               	clrc
  1561  0177  0D44               	rlf	AD_Sample@index,w
  1562  0178  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1563  0179  0084               	movwf	4
  1564  017A  3006               	movlw	6
  1565  017B  0180               	clrf	0
  1566  017C  0A84               	incf	4,f
  1567  017D  0180               	clrf	0
  1568  017E  0AC4               	incf	AD_Sample@index,f
  1569  017F  0244               	subwf	AD_Sample@index,w
  1570  0180  1803               	btfsc	3,0
  1571  0181  0008               	return
  1572  0182  2976               	goto	l3098
  1573  0183                     __end_of_AD_Sample:	
  1574  0183                     __ptext500:	
  1575 ;; =============== function _AD_Sample ends ============
  1576                           
  1577                           
  1578 ;; *************** function _getAdOriginalValue *****************
  1579 ;; Defined at:
  1580 ;;		line 76 in file "C:\sw_dev\AK7030-OTP\common.c"
  1581 ;; Parameters:    Size  Location     Type
  1582 ;;		None
  1583 ;; Auto vars:     Size  Location     Type
  1584 ;;		None
  1585 ;; Return value:  Size  Location     Type
  1586 ;;                  2    0[BANK0 ] unsigned int 
  1587 ;; Registers used:
  1588 ;;		wreg
  1589 ;; Tracked objects:
  1590 ;;		On entry : 60/0
  1591 ;;		On exit  : 60/0
  1592 ;;		Unchanged: FFF9F/0
  1593 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1594 ;;      Params:         0       2       0       0       0
  1595 ;;      Locals:         0       0       0       0       0
  1596 ;;      Temps:          0       0       0       0       0
  1597 ;;      Totals:         0       2       0       0       0
  1598 ;;Total ram usage:        2 bytes
  1599 ;; Hardware stack levels used:    1
  1600 ;; Hardware stack levels required when called:    2
  1601 ;; This function calls:
  1602 ;;		Nothing
  1603 ;; This function is called by:
  1604 ;;		_AD_Sample
  1605 ;; This function uses a non-reentrant model
  1606 ;;
  1607  0183                     _getAdOriginalValue:	
  1608                           
  1609                           ;common.c: 77: return adc_original_value;
  1610                           
  1611                           ; Regs used in _getAdOriginalValue: [wreg]
  1612  0183  082F               	movf	_adc_original_value+1,w
  1613  0184  00C1               	movwf	?_getAdOriginalValue+1
  1614  0185  082E               	movf	_adc_original_value,w
  1615  0186  00C0               	movwf	?_getAdOriginalValue
  1616  0187  0008               	return
  1617  0188                     __end_of_getAdOriginalValue:	
  1618  0188                     PL2:	
  1619  0188  1003               	clrc
  1620  0189  0D36               	rlf	_sampleTimes,w
  1621  018A  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1622  018B  0084               	movwf	4
  1623  018C  0800               	movf	0,w
  1624  018D  00C2               	movwf	??_AD_Sample
  1625  018E  0A84               	incf	4,f
  1626  018F  0800               	movf	0,w
  1627  0190  00C3               	movwf	??_AD_Sample+1
  1628  0191  0008               	return
  1629                           
  1630                           	psect	text503
  1631  024E                     __ptext503:	
  1632 ;; =============== function _getAD_ConvertFlag ends ============
  1633                           
  1634                           
  1635 ;; *************** function _isFinishedSmallTimer *****************
  1636 ;; Defined at:
  1637 ;;		line 226 in file "C:\sw_dev\AK7030-OTP\common.c"
  1638 ;; Parameters:    Size  Location     Type
  1639 ;;		None
  1640 ;; Auto vars:     Size  Location     Type
  1641 ;;		None
  1642 ;; Return value:  Size  Location     Type
  1643 ;;                  1    wreg      unsigned char 
  1644 ;; Registers used:
  1645 ;;		wreg, status,2, status,0
  1646 ;; Tracked objects:
  1647 ;;		On entry : 60/0
  1648 ;;		On exit  : 60/0
  1649 ;;		Unchanged: FFF9F/0
  1650 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1651 ;;      Params:         0       0       0       0       0
  1652 ;;      Locals:         0       0       0       0       0
  1653 ;;      Temps:          0       0       0       0       0
  1654 ;;      Totals:         0       0       0       0       0
  1655 ;;Total ram usage:        0 bytes
  1656 ;; Hardware stack levels used:    1
  1657 ;; Hardware stack levels required when called:    2
  1658 ;; This function calls:
  1659 ;;		Nothing
  1660 ;; This function is called by:
  1661 ;;		_main
  1662 ;; This function uses a non-reentrant model
  1663 ;;
  1664  024E                     _isFinishedSmallTimer:	
  1665                           
  1666                           ;common.c: 227: if(uiSmallTimer == 0)
  1667                           
  1668                           ; Regs used in _isFinishedSmallTimer: [wreg+status,2+status,0]
  1669  024E  0835               	movf	_uiSmallTimer+1,w
  1670  024F  0434               	iorwf	_uiSmallTimer,w
  1671  0250  1903               	btfsc	3,2
  1672                           
  1673                           ;common.c: 228: return 1;
  1674  0251  3401               	retlw	1
  1675                           
  1676                           ;common.c: 229: else
  1677                           ;common.c: 230: return 0;
  1678  0252  3400               	retlw	0
  1679  0253                     __end_of_isFinishedSmallTimer:	
  1680                           
  1681                           	psect	text504
  1682  0253                     __ptext504:	
  1683 ;; =============== function _isFinishedSmallTimer ends ============
  1684                           
  1685                           
  1686 ;; *************** function _isFinishedBigTimer *****************
  1687 ;; Defined at:
  1688 ;;		line 218 in file "C:\sw_dev\AK7030-OTP\common.c"
  1689 ;; Parameters:    Size  Location     Type
  1690 ;;		None
  1691 ;; Auto vars:     Size  Location     Type
  1692 ;;		None
  1693 ;; Return value:  Size  Location     Type
  1694 ;;                  1    wreg      unsigned char 
  1695 ;; Registers used:
  1696 ;;		wreg, status,2, status,0
  1697 ;; Tracked objects:
  1698 ;;		On entry : 60/0
  1699 ;;		On exit  : 60/0
  1700 ;;		Unchanged: FFF9F/0
  1701 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1702 ;;      Params:         0       0       0       0       0
  1703 ;;      Locals:         0       0       0       0       0
  1704 ;;      Temps:          0       0       0       0       0
  1705 ;;      Totals:         0       0       0       0       0
  1706 ;;Total ram usage:        0 bytes
  1707 ;; Hardware stack levels used:    1
  1708 ;; Hardware stack levels required when called:    2
  1709 ;; This function calls:
  1710 ;;		Nothing
  1711 ;; This function is called by:
  1712 ;;		_main
  1713 ;; This function uses a non-reentrant model
  1714 ;;
  1715  0253                     _isFinishedBigTimer:	
  1716                           
  1717                           ;common.c: 219: if(uiBigTimer == 0)
  1718                           
  1719                           ; Regs used in _isFinishedBigTimer: [wreg+status,2+status,0]
  1720  0253  0877               	movf	_uiBigTimer+1,w
  1721  0254  0476               	iorwf	_uiBigTimer,w
  1722  0255  1903               	btfsc	3,2
  1723                           
  1724                           ;common.c: 220: return 1;
  1725  0256  3401               	retlw	1
  1726                           
  1727                           ;common.c: 221: else
  1728                           ;common.c: 222: return 0;
  1729  0257  3400               	retlw	0
  1730  0258                     __end_of_isFinishedBigTimer:	
  1731                           
  1732                           	psect	text505
  1733  0248                     __ptext505:	
  1734 ;; =============== function _isFinishedBigTimer ends ============
  1735                           
  1736                           
  1737 ;; *************** function _startSmallTimer *****************
  1738 ;; Defined at:
  1739 ;;		line 208 in file "C:\sw_dev\AK7030-OTP\common.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;		None
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;		None
  1744 ;; Return value:  Size  Location     Type
  1745 ;;		None               void
  1746 ;; Registers used:
  1747 ;;		wreg
  1748 ;; Tracked objects:
  1749 ;;		On entry : 60/20
  1750 ;;		On exit  : 60/0
  1751 ;;		Unchanged: FFF9F/0
  1752 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1753 ;;      Params:         0       0       0       0       0
  1754 ;;      Locals:         0       0       0       0       0
  1755 ;;      Temps:          0       0       0       0       0
  1756 ;;      Totals:         0       0       0       0       0
  1757 ;;Total ram usage:        0 bytes
  1758 ;; Hardware stack levels used:    1
  1759 ;; Hardware stack levels required when called:    2
  1760 ;; This function calls:
  1761 ;;		Nothing
  1762 ;; This function is called by:
  1763 ;;		_main
  1764 ;; This function uses a non-reentrant model
  1765 ;;
  1766  0248                     _startSmallTimer:	
  1767                           
  1768                           ;common.c: 209: uiSmallTimer = 10800;
  1769                           
  1770                           ; Regs used in _startSmallTimer: [wreg]
  1771  0248  3030               	movlw	48
  1772  0249  1283               	bcf	3,5	;RP0=0, select bank0
  1773  024A  00B4               	movwf	_uiSmallTimer
  1774  024B  302A               	movlw	42
  1775  024C  00B5               	movwf	_uiSmallTimer+1
  1776  024D  0008               	return
  1777  024E                     __end_of_startSmallTimer:	
  1778                           
  1779                           	psect	text506
  1780  0258                     __ptext506:	
  1781 ;; =============== function _startSmallTimer ends ============
  1782                           
  1783                           
  1784 ;; *************** function _startBigTimer *****************
  1785 ;; Defined at:
  1786 ;;		line 186 in file "C:\sw_dev\AK7030-OTP\common.c"
  1787 ;; Parameters:    Size  Location     Type
  1788 ;;		None
  1789 ;; Auto vars:     Size  Location     Type
  1790 ;;		None
  1791 ;; Return value:  Size  Location     Type
  1792 ;;		None               void
  1793 ;; Registers used:
  1794 ;;		wreg
  1795 ;; Tracked objects:
  1796 ;;		On entry : 60/0
  1797 ;;		On exit  : 60/0
  1798 ;;		Unchanged: FFF9F/0
  1799 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1800 ;;      Params:         0       0       0       0       0
  1801 ;;      Locals:         0       0       0       0       0
  1802 ;;      Temps:          0       0       0       0       0
  1803 ;;      Totals:         0       0       0       0       0
  1804 ;;Total ram usage:        0 bytes
  1805 ;; Hardware stack levels used:    1
  1806 ;; Hardware stack levels required when called:    2
  1807 ;; This function calls:
  1808 ;;		Nothing
  1809 ;; This function is called by:
  1810 ;;		_main
  1811 ;; This function uses a non-reentrant model
  1812 ;;
  1813  0258                     _startBigTimer:	
  1814                           
  1815                           ;common.c: 187: uiBigTimer = 34200;
  1816                           
  1817                           ; Regs used in _startBigTimer: [wreg]
  1818  0258  3098               	movlw	152
  1819  0259  00F6               	movwf	_uiBigTimer
  1820  025A  3085               	movlw	133
  1821  025B  00F7               	movwf	_uiBigTimer+1
  1822  025C  0008               	return
  1823  025D                     __end_of_startBigTimer:	
  1824                           
  1825                           	psect	text507
  1826  026C                     __ptext507:	
  1827 ;; =============== function _startBigTimer ends ============
  1828                           
  1829                           
  1830 ;; *************** function _setDAC0_ChannelValue *****************
  1831 ;; Defined at:
  1832 ;;		line 181 in file "C:\sw_dev\AK7030-OTP\common.c"
  1833 ;; Parameters:    Size  Location     Type
  1834 ;;  ucValue         1    wreg     unsigned char 
  1835 ;; Auto vars:     Size  Location     Type
  1836 ;;  ucValue         1    0[BANK0 ] unsigned char 
  1837 ;; Return value:  Size  Location     Type
  1838 ;;		None               void
  1839 ;; Registers used:
  1840 ;;		wreg
  1841 ;; Tracked objects:
  1842 ;;		On entry : 60/0
  1843 ;;		On exit  : 60/20
  1844 ;;		Unchanged: FFF9F/0
  1845 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1846 ;;      Params:         0       0       0       0       0
  1847 ;;      Locals:         0       1       0       0       0
  1848 ;;      Temps:          0       0       0       0       0
  1849 ;;      Totals:         0       1       0       0       0
  1850 ;;Total ram usage:        1 bytes
  1851 ;; Hardware stack levels used:    1
  1852 ;; Hardware stack levels required when called:    2
  1853 ;; This function calls:
  1854 ;;		Nothing
  1855 ;; This function is called by:
  1856 ;;		_main
  1857 ;; This function uses a non-reentrant model
  1858 ;;
  1859  026C                     _setDAC0_ChannelValue:	
  1860                           
  1861                           ; Regs used in _setDAC0_ChannelValue: [wreg]
  1862                           ;setDAC0_ChannelValue@ucValue stored from wreg
  1863  026C  00C0               	movwf	setDAC0_ChannelValue@ucValue
  1864                           
  1865                           ;common.c: 182: DACR0=ucValue;
  1866  026D  1683               	bsf	3,5	;RP0=1, select bank1
  1867  026E  0088               	movwf	8	;volatile
  1868  026F  0008               	return
  1869  0270                     __end_of_setDAC0_ChannelValue:	
  1870                           
  1871                           	psect	text508
  1872  025D                     __ptext508:	
  1873 ;; =============== function _setDAC0_ChannelValue ends ============
  1874                           
  1875                           
  1876 ;; *************** function _getAdOriginalCh13Value *****************
  1877 ;; Defined at:
  1878 ;;		line 87 in file "C:\sw_dev\AK7030-OTP\common.c"
  1879 ;; Parameters:    Size  Location     Type
  1880 ;;		None
  1881 ;; Auto vars:     Size  Location     Type
  1882 ;;		None
  1883 ;; Return value:  Size  Location     Type
  1884 ;;                  2    0[BANK0 ] unsigned int 
  1885 ;; Registers used:
  1886 ;;		wreg
  1887 ;; Tracked objects:
  1888 ;;		On entry : 60/0
  1889 ;;		On exit  : 60/0
  1890 ;;		Unchanged: FFF9F/0
  1891 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1892 ;;      Params:         0       2       0       0       0
  1893 ;;      Locals:         0       0       0       0       0
  1894 ;;      Temps:          0       0       0       0       0
  1895 ;;      Totals:         0       2       0       0       0
  1896 ;;Total ram usage:        2 bytes
  1897 ;; Hardware stack levels used:    1
  1898 ;; Hardware stack levels required when called:    2
  1899 ;; This function calls:
  1900 ;;		Nothing
  1901 ;; This function is called by:
  1902 ;;		_main
  1903 ;; This function uses a non-reentrant model
  1904 ;;
  1905  025D                     _getAdOriginalCh13Value:	
  1906                           
  1907                           ;common.c: 88: return adc_original_CH13_value;
  1908                           
  1909                           ; Regs used in _getAdOriginalCh13Value: [wreg]
  1910  025D  082D               	movf	_adc_original_CH13_value+1,w
  1911  025E  00C1               	movwf	?_getAdOriginalCh13Value+1
  1912  025F  082C               	movf	_adc_original_CH13_value,w
  1913  0260  00C0               	movwf	?_getAdOriginalCh13Value
  1914  0261  0008               	return
  1915  0262                     __end_of_getAdOriginalCh13Value:	
  1916                           
  1917                           	psect	text509
  1918  0270                     __ptext509:	
  1919 ;; =============== function _getAdOriginalCh13Value ends ============
  1920                           
  1921                           
  1922 ;; *************** function _clearSmallTimer *****************
  1923 ;; Defined at:
  1924 ;;		line 202 in file "C:\sw_dev\AK7030-OTP\common.c"
  1925 ;; Parameters:    Size  Location     Type
  1926 ;;		None
  1927 ;; Auto vars:     Size  Location     Type
  1928 ;;		None
  1929 ;; Return value:  Size  Location     Type
  1930 ;;		None               void
  1931 ;; Registers used:
  1932 ;;		status,2
  1933 ;; Tracked objects:
  1934 ;;		On entry : 60/0
  1935 ;;		On exit  : 60/0
  1936 ;;		Unchanged: FFF9F/0
  1937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1938 ;;      Params:         0       0       0       0       0
  1939 ;;      Locals:         0       0       0       0       0
  1940 ;;      Temps:          0       0       0       0       0
  1941 ;;      Totals:         0       0       0       0       0
  1942 ;;Total ram usage:        0 bytes
  1943 ;; Hardware stack levels used:    1
  1944 ;; Hardware stack levels required when called:    2
  1945 ;; This function calls:
  1946 ;;		Nothing
  1947 ;; This function is called by:
  1948 ;;		_main
  1949 ;; This function uses a non-reentrant model
  1950 ;;
  1951  0270                     _clearSmallTimer:	
  1952                           
  1953                           ;common.c: 203: uiSmallTimer = 0;
  1954                           
  1955                           ; Regs used in _clearSmallTimer: [status,2]
  1956  0270  01B4               	clrf	_uiSmallTimer
  1957  0271  01B5               	clrf	_uiSmallTimer+1
  1958  0272  0008               	return
  1959  0273                     __end_of_clearSmallTimer:	
  1960                           
  1961                           	psect	text510
  1962  0273                     __ptext510:	
  1963 ;; =============== function _clearSmallTimer ends ============
  1964                           
  1965                           
  1966 ;; *************** function _clearBigTimer *****************
  1967 ;; Defined at:
  1968 ;;		line 196 in file "C:\sw_dev\AK7030-OTP\common.c"
  1969 ;; Parameters:    Size  Location     Type
  1970 ;;		None
  1971 ;; Auto vars:     Size  Location     Type
  1972 ;;		None
  1973 ;; Return value:  Size  Location     Type
  1974 ;;		None               void
  1975 ;; Registers used:
  1976 ;;		status,2
  1977 ;; Tracked objects:
  1978 ;;		On entry : 60/0
  1979 ;;		On exit  : 60/0
  1980 ;;		Unchanged: FFF9F/0
  1981 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1982 ;;      Params:         0       0       0       0       0
  1983 ;;      Locals:         0       0       0       0       0
  1984 ;;      Temps:          0       0       0       0       0
  1985 ;;      Totals:         0       0       0       0       0
  1986 ;;Total ram usage:        0 bytes
  1987 ;; Hardware stack levels used:    1
  1988 ;; Hardware stack levels required when called:    2
  1989 ;; This function calls:
  1990 ;;		Nothing
  1991 ;; This function is called by:
  1992 ;;		_main
  1993 ;; This function uses a non-reentrant model
  1994 ;;
  1995  0273                     _clearBigTimer:	
  1996                           
  1997                           ;common.c: 197: uiBigTimer = 0;
  1998                           
  1999                           ; Regs used in _clearBigTimer: [status,2]
  2000  0273  01F6               	clrf	_uiBigTimer
  2001  0274  01F7               	clrf	_uiBigTimer+1
  2002  0275  0008               	return
  2003  0276                     __end_of_clearBigTimer:	
  2004                           
  2005                           	psect	text511
  2006  0279                     __ptext511:	
  2007 ;; =============== function _clearBigTimer ends ============
  2008                           
  2009                           
  2010 ;; *************** function _clrSampeTime *****************
  2011 ;; Defined at:
  2012 ;;		line 244 in file "C:\sw_dev\AK7030-OTP\common.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;		None               void
  2019 ;; Registers used:
  2020 ;;		status,2
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: FFFFF/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0
  2029 ;;      Totals:         0       0       0       0       0
  2030 ;;Total ram usage:        0 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    2
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039  0279                     _clrSampeTime:	
  2040                           
  2041                           ;common.c: 245: timer.timer10msStopWatch = 0;
  2042                           
  2043                           ; Regs used in _clrSampeTime: [status,2]
  2044  0279  01FA               	clrf	_timer
  2045  027A  0008               	return
  2046  027B                     __end_of_clrSampeTime:	
  2047                           
  2048                           	psect	text512
  2049  0262                     __ptext512:	
  2050 ;; =============== function _clrSampeTime ends ============
  2051                           
  2052                           
  2053 ;; *************** function _isPermitSampleTime *****************
  2054 ;; Defined at:
  2055 ;;		line 234 in file "C:\sw_dev\AK7030-OTP\common.c"
  2056 ;; Parameters:    Size  Location     Type
  2057 ;;		None
  2058 ;; Auto vars:     Size  Location     Type
  2059 ;;		None
  2060 ;; Return value:  Size  Location     Type
  2061 ;;                  1    wreg      unsigned char 
  2062 ;; Registers used:
  2063 ;;		wreg
  2064 ;; Tracked objects:
  2065 ;;		On entry : 0/0
  2066 ;;		On exit  : 0/0
  2067 ;;		Unchanged: FFFFF/0
  2068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2069 ;;      Params:         0       0       0       0       0
  2070 ;;      Locals:         0       0       0       0       0
  2071 ;;      Temps:          0       0       0       0       0
  2072 ;;      Totals:         0       0       0       0       0
  2073 ;;Total ram usage:        0 bytes
  2074 ;; Hardware stack levels used:    1
  2075 ;; Hardware stack levels required when called:    2
  2076 ;; This function calls:
  2077 ;;		Nothing
  2078 ;; This function is called by:
  2079 ;;		_main
  2080 ;; This function uses a non-reentrant model
  2081 ;;
  2082  0262                     _isPermitSampleTime:	
  2083                           
  2084                           ;common.c: 235: if(timer.timer10msStopWatch > 10)
  2085                           
  2086                           ; Regs used in _isPermitSampleTime: [wreg]
  2087  0262  300B               	movlw	11
  2088  0263  027A               	subwf	_timer,w
  2089  0264  1803               	btfsc	3,0
  2090                           
  2091                           ;common.c: 236: {
  2092                           ;common.c: 237: return 1;
  2093  0265  3401               	retlw	1
  2094                           
  2095                           ;common.c: 239: else
  2096                           ;common.c: 240: return 0;
  2097  0266  3400               	retlw	0
  2098  0267                     __end_of_isPermitSampleTime:	
  2099                           
  2100                           	psect	text514
  2101  022F                     __ptext514:	
  2102 ;; =============== function _adc_start ends ============
  2103                           
  2104                           
  2105 ;; *************** function _op2_init *****************
  2106 ;; Defined at:
  2107 ;;		line 45 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2108 ;; Parameters:    Size  Location     Type
  2109 ;;		None
  2110 ;; Auto vars:     Size  Location     Type
  2111 ;;		None
  2112 ;; Return value:  Size  Location     Type
  2113 ;;		None               void
  2114 ;; Registers used:
  2115 ;;		wreg, status,2
  2116 ;; Tracked objects:
  2117 ;;		On entry : 17F/20
  2118 ;;		On exit  : 17F/20
  2119 ;;		Unchanged: FFE80/0
  2120 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2121 ;;      Params:         0       0       0       0       0
  2122 ;;      Locals:         0       0       0       0       0
  2123 ;;      Temps:          0       0       0       0       0
  2124 ;;      Totals:         0       0       0       0       0
  2125 ;;Total ram usage:        0 bytes
  2126 ;; Hardware stack levels used:    1
  2127 ;; Hardware stack levels required when called:    2
  2128 ;; This function calls:
  2129 ;;		Nothing
  2130 ;; This function is called by:
  2131 ;;		_main
  2132 ;; This function uses a non-reentrant model
  2133 ;;
  2134  022F                     _op2_init:	
  2135                           
  2136                           ;periph.c: 52: OP2CON1=0x00;
  2137                           
  2138                           ; Regs used in _op2_init: [wreg+status,2]
  2139  022F  019C               	clrf	28	;volatile
  2140                           
  2141                           ;periph.c: 54: OP2CON2=0xA0;
  2142  0230  30A0               	movlw	160
  2143  0231  009D               	movwf	29	;volatile
  2144                           
  2145                           ;periph.c: 55: OP2CON0=0x80;
  2146  0232  3080               	movlw	128
  2147  0233  009B               	movwf	27	;volatile
  2148                           
  2149                           ;periph.c: 58: TRISA7=0;
  2150  0234  1385               	bcf	5,7
  2151                           
  2152                           ;periph.c: 59: TRISB6=1;
  2153  0235  1706               	bsf	6,6
  2154                           
  2155                           ;periph.c: 60: TRISB7 = 1;
  2156  0236  1786               	bsf	6,7
  2157  0237  0008               	return
  2158  0238                     __end_of_op2_init:	
  2159                           
  2160                           	psect	text515
  2161  0219                     __ptext515:	
  2162 ;; =============== function _op2_init ends ============
  2163                           
  2164                           
  2165 ;; *************** function _op1_init *****************
  2166 ;; Defined at:
  2167 ;;		line 26 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2168 ;; Parameters:    Size  Location     Type
  2169 ;;		None
  2170 ;; Auto vars:     Size  Location     Type
  2171 ;;		None
  2172 ;; Return value:  Size  Location     Type
  2173 ;;		None               void
  2174 ;; Registers used:
  2175 ;;		wreg
  2176 ;; Tracked objects:
  2177 ;;		On entry : 17F/20
  2178 ;;		On exit  : 17F/20
  2179 ;;		Unchanged: FFE80/0
  2180 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2181 ;;      Params:         0       0       0       0       0
  2182 ;;      Locals:         0       0       0       0       0
  2183 ;;      Temps:          0       0       0       0       0
  2184 ;;      Totals:         0       0       0       0       0
  2185 ;;Total ram usage:        0 bytes
  2186 ;; Hardware stack levels used:    1
  2187 ;; Hardware stack levels required when called:    2
  2188 ;; This function calls:
  2189 ;;		Nothing
  2190 ;; This function is called by:
  2191 ;;		_main
  2192 ;; This function uses a non-reentrant model
  2193 ;;
  2194  0219                     _op1_init:	
  2195                           
  2196                           ;periph.c: 33: OP1CON1=0x02;
  2197                           
  2198                           ; Regs used in _op1_init: [wreg]
  2199  0219  3002               	movlw	2
  2200  021A  1283               	bcf	3,5	;RP0=0, select bank0
  2201  021B  009C               	movwf	28	;volatile
  2202                           
  2203                           ;periph.c: 34: OP1CON2=0xA0;
  2204  021C  30A0               	movlw	160
  2205  021D  009D               	movwf	29	;volatile
  2206                           
  2207                           ;periph.c: 35: OP1CON0=0x80;
  2208  021E  3080               	movlw	128
  2209  021F  009B               	movwf	27	;volatile
  2210                           
  2211                           ;periph.c: 38: TRISB3=1;
  2212  0220  1683               	bsf	3,5	;RP0=1, select bank1
  2213  0221  1586               	bsf	6,3
  2214                           
  2215                           ;periph.c: 39: TRISB4=1;
  2216  0222  1606               	bsf	6,4
  2217                           
  2218                           ;periph.c: 40: TRISB5=0;
  2219  0223  1286               	bcf	6,5
  2220  0224  0008               	return
  2221  0225                     __end_of_op1_init:	
  2222                           
  2223                           	psect	text516
  2224  0267                     __ptext516:	
  2225 ;; =============== function _op1_init ends ============
  2226                           
  2227                           
  2228 ;; *************** function _dac_init *****************
  2229 ;; Defined at:
  2230 ;;		line 14 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;		None
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;		None
  2235 ;; Return value:  Size  Location     Type
  2236 ;;		None               void
  2237 ;; Registers used:
  2238 ;;		wreg
  2239 ;; Tracked objects:
  2240 ;;		On entry : 17F/20
  2241 ;;		On exit  : 17F/20
  2242 ;;		Unchanged: FFE80/0
  2243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2244 ;;      Params:         0       0       0       0       0
  2245 ;;      Locals:         0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0
  2247 ;;      Totals:         0       0       0       0       0
  2248 ;;Total ram usage:        0 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; Hardware stack levels required when called:    2
  2251 ;; This function calls:
  2252 ;;		Nothing
  2253 ;; This function is called by:
  2254 ;;		_main
  2255 ;; This function uses a non-reentrant model
  2256 ;;
  2257  0267                     _dac_init:	
  2258                           
  2259                           ;periph.c: 15: DACCON|=2;
  2260                           
  2261                           ; Regs used in _dac_init: [wreg]
  2262  0267  1487               	bsf	7,1	;volatile
  2263                           
  2264                           ;periph.c: 17: DACR0=0x19;
  2265  0268  3019               	movlw	25
  2266  0269  0088               	movwf	8	;volatile
  2267                           
  2268                           ;periph.c: 18: DACCON|=(1)<<2;
  2269  026A  1507               	bsf	7,2	;volatile
  2270  026B  0008               	return
  2271  026C                     __end_of_dac_init:	
  2272                           
  2273                           	psect	text517
  2274  01F5                     __ptext517:	
  2275 ;; =============== function _dac_init ends ============
  2276                           
  2277                           
  2278 ;; *************** function _adc_test_init *****************
  2279 ;; Defined at:
  2280 ;;		line 85 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2281 ;; Parameters:    Size  Location     Type
  2282 ;;  channel         1    wreg     unsigned char 
  2283 ;;  ref             1    0[BANK0 ] unsigned char 
  2284 ;; Auto vars:     Size  Location     Type
  2285 ;;  channel         1    2[BANK0 ] unsigned char 
  2286 ;; Return value:  Size  Location     Type
  2287 ;;		None               void
  2288 ;; Registers used:
  2289 ;;		wreg, status,2, status,0
  2290 ;; Tracked objects:
  2291 ;;		On entry : 17F/0
  2292 ;;		On exit  : 17F/20
  2293 ;;		Unchanged: FFE80/0
  2294 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2295 ;;      Params:         0       1       0       0       0
  2296 ;;      Locals:         0       1       0       0       0
  2297 ;;      Temps:          0       1       0       0       0
  2298 ;;      Totals:         0       3       0       0       0
  2299 ;;Total ram usage:        3 bytes
  2300 ;; Hardware stack levels used:    1
  2301 ;; Hardware stack levels required when called:    2
  2302 ;; This function calls:
  2303 ;;		Nothing
  2304 ;; This function is called by:
  2305 ;;		_main
  2306 ;; This function uses a non-reentrant model
  2307 ;;
  2308  01F5                     _adc_test_init:	
  2309                           
  2310                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2311                           ;adc_test_init@channel stored from wreg
  2312  01F5  00C2               	movwf	adc_test_init@channel
  2313                           
  2314                           ;periph.c: 86: ADCON0|=channel<<2;
  2315  01F6  00C1               	movwf	??_adc_test_init
  2316  01F7  1003               	clrc
  2317  01F8  0DC1               	rlf	??_adc_test_init,f
  2318  01F9  1003               	clrc
  2319  01FA  0D41               	rlf	??_adc_test_init,w
  2320  01FB  049F               	iorwf	31,f	;volatile
  2321                           
  2322                           ;periph.c: 87: ADCON1|=ref<<6;
  2323  01FC  0840               	movf	adc_test_init@ref,w
  2324  01FD  00C1               	movwf	??_adc_test_init
  2325  01FE  0CC1               	rrf	??_adc_test_init,f
  2326  01FF  0CC1               	rrf	??_adc_test_init,f
  2327  0200  0C41               	rrf	??_adc_test_init,w
  2328  0201  39C0               	andlw	192
  2329  0202  1683               	bsf	3,5	;RP0=1, select bank1
  2330  0203  049F               	iorwf	31,f	;volatile
  2331                           
  2332                           ;periph.c: 88: ADON=1;
  2333  0204  1283               	bcf	3,5	;RP0=0, select bank0
  2334  0205  141F               	bsf	31,0
  2335                           
  2336                           ;periph.c: 89: ADIE=1;
  2337  0206  1683               	bsf	3,5	;RP0=1, select bank1
  2338  0207  150D               	bsf	13,2
  2339  0208  0008               	return
  2340  0209                     __end_of_adc_test_init:	
  2341                           
  2342                           	psect	text518
  2343  0276                     __ptext518:	
  2344 ;; =============== function _adc_test_init ends ============
  2345                           
  2346                           
  2347 ;; *************** function _timer1_interrupt_config *****************
  2348 ;; Defined at:
  2349 ;;		line 56 in file "C:\sw_dev\AK7030-OTP\common.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;		None
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		None
  2358 ;; Tracked objects:
  2359 ;;		On entry : 17F/20
  2360 ;;		On exit  : 17F/20
  2361 ;;		Unchanged: FFE80/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2363 ;;      Params:         0       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0
  2366 ;;      Totals:         0       0       0       0       0
  2367 ;;Total ram usage:        0 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    2
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_main
  2374 ;; This function uses a non-reentrant model
  2375 ;;
  2376  0276                     _timer1_interrupt_config:	
  2377                           
  2378                           ;common.c: 57: GIE = 1;
  2379                           
  2380                           ; Regs used in _timer1_interrupt_config: []
  2381  0276  178B               	bsf	11,7
  2382                           
  2383                           ;common.c: 58: PEIE = 1;
  2384  0277  170B               	bsf	11,6
  2385  0278  0008               	return
  2386  0279                     __end_of_timer1_interrupt_config:	
  2387                           
  2388                           	psect	text519
  2389  0225                     __ptext519:	
  2390 ;; =============== function _timer1_interrupt_config ends ============
  2391                           
  2392                           
  2393 ;; *************** function _timer1_config *****************
  2394 ;; Defined at:
  2395 ;;		line 44 in file "C:\sw_dev\AK7030-OTP\common.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;		None               void
  2402 ;; Registers used:
  2403 ;;		wreg
  2404 ;; Tracked objects:
  2405 ;;		On entry : 17F/40
  2406 ;;		On exit  : 17F/20
  2407 ;;		Unchanged: FFE80/0
  2408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2409 ;;      Params:         0       0       0       0       0
  2410 ;;      Locals:         0       0       0       0       0
  2411 ;;      Temps:          0       0       0       0       0
  2412 ;;      Totals:         0       0       0       0       0
  2413 ;;Total ram usage:        0 bytes
  2414 ;; Hardware stack levels used:    1
  2415 ;; Hardware stack levels required when called:    2
  2416 ;; This function calls:
  2417 ;;		Nothing
  2418 ;; This function is called by:
  2419 ;;		_main
  2420 ;; This function uses a non-reentrant model
  2421 ;;
  2422  0225                     _timer1_config:	
  2423                           
  2424                           ;common.c: 46: TMR1H=0xCF;
  2425                           
  2426                           ; Regs used in _timer1_config: [wreg]
  2427  0225  30CF               	movlw	207
  2428  0226  1303               	bcf	3,6	;RP1=0, select bank0
  2429  0227  008F               	movwf	15	;volatile
  2430                           
  2431                           ;common.c: 47: TMR1L=0x2C;
  2432  0228  302C               	movlw	44
  2433  0229  008E               	movwf	14	;volatile
  2434                           
  2435                           ;common.c: 48: T1CON=0xE1;
  2436  022A  30E1               	movlw	225
  2437  022B  0090               	movwf	16	;volatile
  2438                           
  2439                           ;common.c: 49: TMR1IE=1;
  2440  022C  1683               	bsf	3,5	;RP0=1, select bank1
  2441  022D  140C               	bsf	12,0
  2442  022E  0008               	return
  2443  022F                     __end_of_timer1_config:	
  2444                           
  2445                           	psect	text520
  2446  0240                     __ptext520:	
  2447 ;; =============== function _timer1_config ends ============
  2448                           
  2449                           
  2450 ;; *************** function _clock_config *****************
  2451 ;; Defined at:
  2452 ;;		line 36 in file "C:\sw_dev\AK7030-OTP\common.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;		None               void
  2459 ;; Registers used:
  2460 ;;		wreg, status,2
  2461 ;; Tracked objects:
  2462 ;;		On entry : 17F/20
  2463 ;;		On exit  : 17F/40
  2464 ;;		Unchanged: FFE80/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2466 ;;      Params:         0       0       0       0       0
  2467 ;;      Locals:         0       0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0
  2469 ;;      Totals:         0       0       0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    2
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479  0240                     _clock_config:	
  2480                           
  2481                           ;common.c: 38: CLKPR = 0x80;
  2482                           
  2483                           ; Regs used in _clock_config: [wreg+status,2]
  2484  0240  3080               	movlw	128
  2485  0241  1283               	bcf	3,5	;RP0=0, select bank2
  2486  0242  1703               	bsf	3,6	;RP1=1, select bank2
  2487  0243  0088               	movwf	8	;volatile
  2488                           
  2489                           ;common.c: 39: CLKPR = 0x00;
  2490  0244  0188               	clrf	8	;volatile
  2491  0245                     l1398:	
  2492                           ;common.c: 40: while(CLKPCE);
  2493                           
  2494  0245  1F88               	btfss	8,7
  2495  0246  0008               	return
  2496  0247  2A45               	goto	l1398
  2497  0248                     __end_of_clock_config:	
  2498                           
  2499                           	psect	text521
  2500  0192                     __ptext521:	
  2501 ;; =============== function _clock_config ends ============
  2502                           
  2503                           
  2504 ;; *************** function _ISR *****************
  2505 ;; Defined at:
  2506 ;;		line 249 in file "C:\sw_dev\AK7030-OTP\common.c"
  2507 ;; Parameters:    Size  Location     Type
  2508 ;;		None
  2509 ;; Auto vars:     Size  Location     Type
  2510 ;;		None
  2511 ;; Return value:  Size  Location     Type
  2512 ;;		None               void
  2513 ;; Registers used:
  2514 ;;		wreg, status,2, status,0, pclath, cstack
  2515 ;; Tracked objects:
  2516 ;;		On entry : 0/0
  2517 ;;		On exit  : 40/0
  2518 ;;		Unchanged: FFF9F/0
  2519 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2520 ;;      Params:         0       0       0       0       0
  2521 ;;      Locals:         0       0       0       0       0
  2522 ;;      Temps:          2       0       0       0       0
  2523 ;;      Totals:         2       0       0       0       0
  2524 ;;Total ram usage:        2 bytes
  2525 ;; Hardware stack levels used:    1
  2526 ;; Hardware stack levels required when called:    1
  2527 ;; This function calls:
  2528 ;;		i1_setAD_ConvertFlag
  2529 ;;		_adc_get
  2530 ;; This function is called by:
  2531 ;;		Interrupt level 1
  2532 ;; This function uses a non-reentrant model
  2533 ;;
  2534  0192                     _ISR:	
  2535                           
  2536                           ;common.c: 250: static unsigned char ucTimer1sCnt = 0;
  2537                           ;common.c: 252: if(TMR1IF == 1)
  2538  0192  1283               	bcf	3,5	;RP0=0, select bank0
  2539  0193  1303               	bcf	3,6	;RP1=0, select bank0
  2540  0194  1C0C               	btfss	12,0
  2541  0195  29B2               	goto	i1l3042
  2542  0196  3064               	movlw	100
  2543                           
  2544                           ;common.c: 253: {
  2545                           ;common.c: 254: TMR1IF = 0 ;
  2546  0197  100C               	bcf	12,0
  2547                           
  2548                           ;common.c: 255: timer.timer10msStopWatch++;
  2549  0198  0AFA               	incf	_timer,f
  2550                           
  2551                           ;common.c: 256: ucTimer1sCnt++;
  2552  0199  0AF8               	incf	ISR@ucTimer1sCnt,f
  2553                           
  2554                           ;common.c: 258: if(ucTimer1sCnt >= 100)
  2555  019A  0278               	subwf	ISR@ucTimer1sCnt,w
  2556  019B  1C03               	skipc
  2557  019C  29B2               	goto	i1l3042
  2558                           
  2559                           ;common.c: 259: {
  2560                           ;common.c: 260: ucTimer1sCnt = 0;
  2561  019D  01F8               	clrf	ISR@ucTimer1sCnt
  2562                           
  2563                           ;common.c: 261: if(uiBigTimer > 0)
  2564  019E  0877               	movf	_uiBigTimer+1,w
  2565  019F  0476               	iorwf	_uiBigTimer,w
  2566  01A0  1903               	skipnz
  2567  01A1  29A8               	goto	i1l1486
  2568                           
  2569                           ;common.c: 262: uiBigTimer--;
  2570  01A2  3001               	movlw	1
  2571  01A3  02F6               	subwf	_uiBigTimer,f
  2572  01A4  3000               	movlw	0
  2573  01A5  1C03               	skipc
  2574  01A6  03F7               	decf	_uiBigTimer+1,f
  2575  01A7  02F7               	subwf	_uiBigTimer+1,f
  2576  01A8                     i1l1486:	
  2577                           
  2578                           ;common.c: 264: if(uiSmallTimer)
  2579  01A8  0835               	movf	_uiSmallTimer+1,w
  2580  01A9  0434               	iorwf	_uiSmallTimer,w
  2581  01AA  1903               	skipnz
  2582  01AB  29B2               	goto	i1l3042
  2583                           
  2584                           ;common.c: 265: uiSmallTimer--;
  2585  01AC  3001               	movlw	1
  2586  01AD  02B4               	subwf	_uiSmallTimer,f
  2587  01AE  3000               	movlw	0
  2588  01AF  1C03               	skipc
  2589  01B0  03B5               	decf	_uiSmallTimer+1,f
  2590  01B1  02B5               	subwf	_uiSmallTimer+1,f
  2591  01B2                     i1l3042:	
  2592                           
  2593                           ;common.c: 266: }
  2594                           ;common.c: 267: }
  2595                           ;common.c: 269: if(ADIF)
  2596  01B2  1D0D               	btfss	13,2
  2597  01B3  29CC               	goto	i1l1491
  2598  01B4  3001               	movlw	1
  2599                           
  2600                           ;common.c: 270: {
  2601                           ;common.c: 271: ADIF=0;
  2602  01B5  110D               	bcf	13,2
  2603                           
  2604                           ;common.c: 272: setAD_ConvertFlag(1);
  2605  01B6  21DE  118A         	fcall	i1_setAD_ConvertFlag
  2606                           
  2607                           ;common.c: 273: adc_original_value = adc_get();
  2608  01B8  21D3  118A         	fcall	_adc_get
  2609  01BA  0871               	movf	?_adc_get+1,w
  2610  01BB  1283               	bcf	3,5	;RP0=0, select bank0
  2611  01BC  00AF               	movwf	_adc_original_value+1
  2612  01BD  0870               	movf	?_adc_get,w
  2613  01BE  00AE               	movwf	_adc_original_value
  2614                           
  2615                           ;common.c: 274: if(sampleChannelSelect == 12)
  2616  01BF  0845               	movf	_sampleChannelSelect,w
  2617  01C0  3A0C               	xorlw	12
  2618  01C1  1D03               	skipz
  2619  01C2  29C6               	goto	i1l3054
  2620                           
  2621                           ;common.c: 275: adc_original_CH12_value = adc_get();
  2622  01C3  21D3  118A         	fcall	_adc_get
  2623  01C5  29CC               	goto	i1l1491
  2624  01C6                     i1l3054:	
  2625                           
  2626                           ;common.c: 276: else
  2627                           ;common.c: 277: adc_original_CH13_value = adc_get();
  2628  01C6  21D3               	fcall	_adc_get
  2629  01C7  0871               	movf	?_adc_get+1,w
  2630  01C8  1283               	bcf	3,5	;RP0=0, select bank0
  2631  01C9  00AD               	movwf	_adc_original_CH13_value+1
  2632  01CA  0870               	movf	?_adc_get,w
  2633  01CB  00AC               	movwf	_adc_original_CH13_value
  2634  01CC                     i1l1491:	
  2635  01CC  0875               	movf	??_ISR+1,w
  2636  01CD  008A               	movwf	10
  2637  01CE  0E74               	swapf	??_ISR^(0+-128),w
  2638  01CF  0083               	movwf	3
  2639  01D0  0EFE               	swapf	126,f
  2640  01D1  0E7E               	swapf	126,w
  2641  01D2  0009               	retfie
  2642  01D3                     __end_of_ISR:	
  2643  01D3                     __ptext523:	
  2644 ;; =============== function i1_setAD_ConvertFlag ends ============
  2645                           
  2646                           
  2647 ;; *************** function _adc_get *****************
  2648 ;; Defined at:
  2649 ;;		line 104 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2650 ;; Parameters:    Size  Location     Type
  2651 ;;		None
  2652 ;; Auto vars:     Size  Location     Type
  2653 ;;  val             2    2[COMMON] unsigned int 
  2654 ;; Return value:  Size  Location     Type
  2655 ;;                  2    0[COMMON] unsigned int 
  2656 ;; Registers used:
  2657 ;;		wreg
  2658 ;; Tracked objects:
  2659 ;;		On entry : 60/0
  2660 ;;		On exit  : 60/20
  2661 ;;		Unchanged: FFF9F/0
  2662 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2663 ;;      Params:         2       0       0       0       0
  2664 ;;      Locals:         2       0       0       0       0
  2665 ;;      Temps:          0       0       0       0       0
  2666 ;;      Totals:         4       0       0       0       0
  2667 ;;Total ram usage:        4 bytes
  2668 ;; Hardware stack levels used:    1
  2669 ;; This function calls:
  2670 ;;		Nothing
  2671 ;; This function is called by:
  2672 ;;		_ISR
  2673 ;; This function uses a non-reentrant model
  2674 ;;
  2675  01D3                     _adc_get:	
  2676                           
  2677                           ;periph.c: 105: unsigned int val;
  2678                           ;periph.c: 106: val = (ADRESH<<8) | ADRESL;
  2679                           
  2680                           ; Regs used in _adc_get: [wreg]
  2681  01D3  081E               	movf	30,w	;volatile
  2682  01D4  00F3               	movwf	adc_get@val+1
  2683  01D5  01F2               	clrf	adc_get@val
  2684  01D6  1683               	bsf	3,5	;RP0=1, select bank1
  2685  01D7  081E               	movf	30,w	;volatile
  2686  01D8  04F2               	iorwf	adc_get@val,f
  2687                           
  2688                           ;periph.c: 107: return val;
  2689  01D9  0873               	movf	adc_get@val+1,w
  2690  01DA  00F1               	movwf	?_adc_get+1
  2691  01DB  0872               	movf	adc_get@val,w
  2692  01DC  00F0               	movwf	?_adc_get
  2693  01DD  0008               	return
  2694  01DE                     __end_of_adc_get:	
  2695  01DE                     __ptext522:	
  2696 ;; =============== function _ISR ends ============
  2697                           
  2698                           
  2699 ;; *************** function i1_setAD_ConvertFlag *****************
  2700 ;; Defined at:
  2701 ;;		line 70 in file "C:\sw_dev\AK7030-OTP\common.c"
  2702 ;; Parameters:    Size  Location     Type
  2703 ;;  setAD_Conver    1    wreg     unsigned char 
  2704 ;; Auto vars:     Size  Location     Type
  2705 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2706 ;; Return value:  Size  Location     Type
  2707 ;;		None               void
  2708 ;; Registers used:
  2709 ;;		wreg
  2710 ;; Tracked objects:
  2711 ;;		On entry : 60/0
  2712 ;;		On exit  : 60/0
  2713 ;;		Unchanged: FFF9F/0
  2714 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2715 ;;      Params:         0       0       0       0       0
  2716 ;;      Locals:         1       0       0       0       0
  2717 ;;      Temps:          0       0       0       0       0
  2718 ;;      Totals:         1       0       0       0       0
  2719 ;;Total ram usage:        1 bytes
  2720 ;; Hardware stack levels used:    1
  2721 ;; This function calls:
  2722 ;;		Nothing
  2723 ;; This function is called by:
  2724 ;;		_ISR
  2725 ;; This function uses a non-reentrant model
  2726 ;;
  2727  01DE                     i1_setAD_ConvertFlag:	
  2728                           
  2729                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2730                           ;i1setAD_ConvertFlag@flag stored from wreg
  2731  01DE  00F0               	movwf	i1setAD_ConvertFlag@flag
  2732                           
  2733                           ;common.c: 71: adc_convert_flag = flag;
  2734  01DF  00F9               	movwf	_adc_convert_flag
  2735  01E0  0008               	return
  2736  01E1                     __end_ofi1_setAD_ConvertFlag:	
  2737                           
  2738                           	psect	intentry
  2739  0004                     __pintentry:	
  2740                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2741                           
  2742  0004                     interrupt_function:	
  2743  007E                     saved_w	set	btemp
  2744  0004  00FE               	movwf	btemp
  2745  0005  0E03               	swapf	3,w
  2746  0006  00F4               	movwf	??_ISR
  2747  0007  080A               	movf	10,w
  2748  0008  00F5               	movwf	??_ISR+1
  2749  0009  118A  2992         	ljmp	_ISR
  2750                           
  2751                           	psect	text524
  2752  0000                     __ptext524:	
  2753 ;; =============== function _adc_get ends ============
  2754                           
  2755  007E                     btemp	set	126	;btemp
  2756  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Fri Dec 21 09:37:45 2018

                     ??_clock_config 0040                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 0040             ?_timer1_interrupt_config 0070  
                                l704 00AE                                  l721 00DB  
                                l722 00E5                                  l728 00F0  
                                l674 0116                                  l693 0059  
                                l685 004D                                  l687 004E  
                                l679 0042                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PA2 002A                                  _PA3 002B  
                                _PB2 0032                                  _ISR 0192  
                                u555 014D                                  u565 0160  
                                fsr0 0004                                  indf 0000  
           main@ucBigTimerActionFlag 0039                        _startBigTimer 0258  
                               S3322 01E1                          main@ampStep 0037  
                               ?_ISR 0070                   __size_of_AD_Sample 0058  
                               l1401 0000                                 l2130 0000  
                               l2122 0000                                 l1410 0000  
                               l1404 0000                                 l2116 0000  
                               l3004 0000                                 l3020 0000  
                               l3100 0000                                 l1413 0000  
                               l1422 0000                                 l3022 0000  
                               l3102 0000                                 l3110 0000  
                               l1407 0000                                 l2119 0000  
                               l1431 0158                                 l2136 0000  
                               l3016 0000                                 l1416 0000  
                               l3104 0000                                 l3120 0000  
                               l3112 0000                                 l3210 0000  
                               l3130 0000                                 l3122 0000  
                               l3114 0000                                 l1452 0000  
                               l3108 0000                                 l3220 00B0  
                               l3204 00A1                                 l3140 0000  
                               l3124 0000                                 l3116 0000  
                               l1461 0000                                 l3070 0146  
                               l3062 0000                                 l3222 00B6  
                               l3214 00AC                                 l3150 0047  
                               l3142 0000                                 l3134 0000  
                               l3126 0000                                 l3118 0000  
                               l1455 0000                                 l3232 00C1  
                               l3160 0052                                 l3144 003F  
                               l3136 0036                                 l3128 00FB  
                               l1449 0000                                 l1458 0000  
                               l3082 0000                                 l3066 0000  
                               l3226 00B9                                 l3170 005B  
                               l3162 0053                                 l3138 0000  
                               l3076 016B                                 l3244 00D3  
                               l3228 0000                                 l3180 0072  
                               l3148 0046                                 l1398 0245  
                               l3078 0000                                 l3254 00E9  
                               l3246 0000                                 l3190 0091  
                               l3182 0000                                 l3174 0000  
                               l1479 0000                                 l3264 00F4  
                               l3256 00EA                                 l3248 0000  
                               l3176 0000                                 l3184 0078  
                               l3098 0176                                 l3266 00F5  
                               l3194 0000                                 l3178 0000  
                               l3196 0000                                 l3188 0000  
                               l3198 0000                                 l2920 0000  
                               l2922 0000                                 l2930 0000  
                               l2924 0000                                 l2932 0000  
                               l2940 0000                                 l2926 0000  
                               l2934 0000                                 l2942 0000  
                               l2950 0000                                 l2928 0000  
                               l2936 0000                                 l2944 0000  
                               l2960 0000                                 l2952 0000  
                               l2938 0000                                 l2946 0000  
                               l2954 0000                                 l2962 0128  
                               l2948 0000                                 l2956 0000  
                               l2964 0000                                 l2980 0000  
                               l2958 0000                                 l2982 0000  
                               l2990 0000                                 l2976 0000  
                               l2992 0000                                 l2978 0000  
                               l2986 0000                                 l2988 0000  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _PEIE 005E  
               ??_getAdOriginalValue 0042               ??_isFinishedSmallTimer 0040  
                               _main 000D                    ??_startSmallTimer 0040  
                               btemp 007E                                 start 000B  
            ?_getAdOriginalCh13Value 0040                                ??_ISR 0074  
         __end_of_isPermitSampleTime 0267                  _sampleChannelSelect 0045  
                              ?_main 0070                                _DACR0 0088  
                              _CLKPR 0108                                _T1CON 0010  
                    __end_of_adc_get 01DE                                _TMR1H 000F  
                              _TMR1L 000E                       ?_startBigTimer 0070  
              setAD_ConvertFlag@flag 0040                        main@tDA_timer 0038  
                              _timer 007A                                pclath 000A  
                              status 0003                                wtemp0 007E  
     __end_of_getAdOriginalCh13Value 0262                __end_of_clearBigTimer 0276  
               __end_of_clrSampeTime 027B           __end_of_isFinishedBigTimer 0258  
                       __end_of_main 0117               __size_of_adc_test_init 0014  
                  __end_of_AD_Sample 0183             __size_of_clearSmallTimer 0003  
               _setDAC0_ChannelValue 026C            main@ucInstalledBatteryCnt 003E  
                             ??_main 0045                               _ADCON0 001F  
                             _ADCON1 009F                 __end_of_clock_config 0248  
                             _DACCON 0087                               _ADRESH 001E  
                             _ADRESL 009E                               _CLKPCE 0847  
                             i1l1413 0000                               i1l3030 0000  
                             i1l3032 0000                               i1l3050 0000  
                             i1l3042 01B2                               i1l3026 0000  
                             i1l2139 0000                               i1l3060 0000  
                             i1l3036 0000                               i1l3054 01C6  
                             i1l3046 0000                               i1l3056 0000  
                             i1l3048 0000                               i1l1491 01CC  
                             i1l1486 01A8                     __end_of_dac_init 026C  
                             _TMR1IE 0460                               _TMR1IF 0060  
                  _getAD_ConvertFlag 0121                    _setAD_ConvertFlag 0123  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISB5 0435  
                             _TRISA7 042F                               _TRISB6 0436  
                             _TRISB7 0437                   ?_getAD_ConvertFlag 0070  
                 ?_setAD_ConvertFlag 0070                     __end_of_op1_init 0225  
                   __end_of_op2_init 0238               main@ucConfirmTimerZptS 003C  
                          ??_adc_get 0072                  ??_getAD_ConvertFlag 0040  
                ??_setAD_ConvertFlag 0040                ?_setDAC0_ChannelValue 0070  
                             clrloop 0239                      ??_startBigTimer 0040  
                             saved_w 007E          ?_process_AD_Converter_Value 0070  
                      _adc_test_init 01F5            __end_of_getAD_ConvertFlag 0123  
          __end_of_setAD_ConvertFlag 0128                   __size_of_adc_start 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
                    _startSmallTimer 0248              _adc_original_CH13_value 002C  
                  ??_clearSmallTimer 0040                __end_of_timer1_config 022F  
                     ?_adc_test_init 0040     __size_of_timer1_interrupt_config 0003  
              __size_of_clrSampeTime 0002                           __pbssBANK0 0020  
       __size_ofi1_setAD_ConvertFlag 0003                           adc_get@val 0072  
                         __pmaintext 000D               ??_setDAC0_ChannelValue 0040  
                         __pintentry 0004                            ?_dac_init 0070  
              __size_of_clock_config 0008                              _OP1CON0 001B  
                            _OP1CON1 001C                              _OP1CON2 001D  
                            _OP2CON0 009B                              _OP2CON1 009C  
                            _OP2CON2 009D                         _clrSampeTime 0279  
                  __end_of_adc_start 012B                            ?_op1_init 0070  
                          ?_op2_init 0070                   _isPermitSampleTime 0262  
             _buffer_Sample_AD_Value 0020                   _adc_original_value 002E  
         __size_of_getAD_ConvertFlag 0002           __size_of_setAD_ConvertFlag 0005  
        __size_of_getAdOriginalValue 0005                  ?_isPermitSampleTime 0070  
      __size_of_isFinishedSmallTimer 0005                           _uiBigTimer 0076  
                       _clock_config 0240                              _adc_get 01D3  
            __end_of_startSmallTimer 024E                  _multiFilterMaxValue 0030  
                _multiFilterMinValue 0032                 ??_isPermitSampleTime 0040  
                 _isFinishedBigTimer 0253                           ??_dac_init 0040  
                          _AD_Sample 012B                         __size_of_ISR 0041  
                    ??_adc_test_init 0041                           ??_op1_init 0040  
                         ??_op2_init 0040                  ?_isFinishedBigTimer 0070  
               end_of_initialization 0216                 ??_isFinishedBigTimer 0040  
                         ?_AD_Sample 0070               __size_of_clearBigTimer 0003  
                   _adc_convert_flag 0079              _timer1_interrupt_config 0276  
                     AD_Sample@index 0044                           main@ucInit 003D  
                   main@ucWaitTime1S 003F                      _clearSmallTimer 0270  
                   ?_startSmallTimer 0070                  i1_setAD_ConvertFlag 01DE  
              __end_of_startBigTimer 025D                  start_initialization 0209  
                        __end_of_ISR 01D3             ??_getAdOriginalCh13Value 0042  
               ?i1_setAD_ConvertFlag 0070                        _clearBigTimer 0273  
              main@ucCheckBatteryCnt 003A                          __pdataBANK0 0045  
                        ??_AD_Sample 0042            ??_timer1_interrupt_config 0040  
                        __pbssCOMMON 0076                    __size_of_dac_init 0005  
                      __pcstackBANK0 0040                            _adc_start 0128  
                  __size_of_op1_init 000C                    __size_of_op2_init 0009  
              ??i1_setAD_ConvertFlag 0070                       ?_clearBigTimer 0070  
            __end_of_clearSmallTimer 0273               __size_of_timer1_config 000A  
                          __ptext500 0183                            __ptext501 0123  
                          __ptext510 0273                            __ptext502 0121  
                          __ptext511 0279                            __ptext503 024E  
                          __ptext520 0240                            __ptext512 0262  
                          __ptext504 0253                            __ptext521 0192  
                          __ptext513 0128                            __ptext505 0248  
                          __ptext522 01DE                            __ptext514 022F  
                          __ptext506 0258                            __ptext523 01D3  
                          __ptext515 0219                            __ptext507 026C  
                          __ptext524 0000                            __ptext516 0267  
                          __ptext508 025D                            __ptext517 01F5  
                          __ptext509 0270                            __ptext518 0276  
                          __ptext519 0225                            __ptext498 0117  
                          __ptext499 012B                             ?_adc_get 0070  
      __size_of_setDAC0_ChannelValue 0004         __end_of_isFinishedSmallTimer 0253  
                          __pswtext1 01E1                      ISR@ucTimer1sCnt 0078  
         __end_of_getAdOriginalValue 0188                           ?_adc_start 0070  
    __size_of_getAdOriginalCh13Value 0005                    interrupt_function 0004  
    __end_of_timer1_interrupt_config 0279                 adc_test_init@channel 0042  
        __size_of_isPermitSampleTime 0005                         _uiSmallTimer 0034  
              __end_of_adc_test_init 0209                        _timer1_config 0225  
       ??_process_AD_Converter_Value 0045                      ??_clearBigTimer 0040  
                   ?_clearSmallTimer 0070                 main@ucConfirmTimer1S 003B  
        __size_of_isFinishedBigTimer 0005               _getAdOriginalCh13Value 025D  
                   __size_of_adc_get 000B  __size_of_process_AD_Converter_Value 000A  
                           _dac_init 0267                       ?_timer1_config 0070  
                           _op1_init 0219                             _op2_init 022F  
                        ??_adc_start 0040                        __size_of_main 010A  
               _isFinishedSmallTimer 024E                             clear_ram 0238  
        setDAC0_ChannelValue@ucValue 0040                        ?_clrSampeTime 0070  
                        _sampleTimes 0036             __size_of_startSmallTimer 0006  
                           intlevel1 0000                ?_isFinishedSmallTimer 0070  
             __size_of_startBigTimer 0005                        ?_clock_config 0070  
            i1setAD_ConvertFlag@flag 0070                       ??_clrSampeTime 0040  
                    ??_timer1_config 0040          __end_ofi1_setAD_ConvertFlag 01E1  
 __end_of_process_AD_Converter_Value 0121           _process_AD_Converter_Value 0117  
       __end_of_setDAC0_ChannelValue 0270                     adc_test_init@ref 0040  
                 _getAdOriginalValue 0183  
