

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Fri Dec 21 15:30:14 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text492,local,class=CODE,delta=2
    16                           	psect	text497,local,class=CODE,delta=2
    17                           	psect	text498,local,class=CODE,delta=2
    18                           	psect	text499,local,class=CODE,delta=2
    19                           	psect	text500,local,class=CODE,delta=2
    20                           	psect	text501,local,class=CODE,delta=2
    21                           	psect	text502,local,class=CODE,delta=2
    22                           	psect	text503,local,class=CODE,delta=2
    23                           	psect	text504,local,class=CODE,delta=2
    24                           	psect	text505,local,class=CODE,delta=2
    25                           	psect	text506,local,class=CODE,delta=2
    26                           	psect	text508,local,class=CODE,delta=2
    27                           	psect	text509,local,class=CODE,delta=2
    28                           	psect	text510,local,class=CODE,delta=2
    29                           	psect	text511,local,class=CODE,delta=2
    30                           	psect	text512,local,class=CODE,delta=2
    31                           	psect	text513,local,class=CODE,delta=2
    32                           	psect	text514,local,class=CODE,delta=2
    33                           	psect	text515,local,class=CODE,delta=2
    34                           	psect	intentry,global,class=CODE,delta=2
    35                           	psect	text518,local,class=CODE,delta=2
    36                           	psect	pa_nodes,global,class=CODE,delta=2
    37                           	dabs	1,0x7E,2
    38  000A                     	;#
    39                           
    40                           	psect	config
    41  2000  2FFF               	dw	12287	;#
    42  2001  3FDE               	dw	16350	;#
    43  2002  3FF8               	dw	16376	;#
    44                           
    45                           	psect	idataBANK0
    46  0000                     __pidataBANK0:	
    47  001F                     _ADCON0	set	31
    48  001E                     _ADRESH	set	30
    49  001B                     _OP1CON0	set	27
    50  001C                     _OP1CON1	set	28
    51  001D                     _OP1CON2	set	29
    52  0010                     _T1CON	set	16
    53  000F                     _TMR1H	set	15
    54  000E                     _TMR1L	set	14
    55  006A                     _ADIF	set	106
    56  00F8                     _ADON	set	248
    57  005F                     _GIE	set	95
    58  00F9                     _GO	set	249
    59  0028                     _PA0	set	40
    60  0029                     _PA1	set	41
    61  002A                     _PA2	set	42
    62  002B                     _PA3	set	43
    63  0032                     _PB2	set	50
    64  005E                     _PEIE	set	94
    65  0060                     _TMR1IF	set	96
    66  009F                     _ADCON1	set	159
    67  009E                     _ADRESL	set	158
    68  0087                     _DACCON	set	135
    69  0088                     _DACR0	set	136
    70  009B                     _OP2CON0	set	155
    71  009C                     _OP2CON1	set	156
    72  009D                     _OP2CON2	set	157
    73  046A                     _ADIE	set	1130
    74  0460                     _TMR1IE	set	1120
    75  0428                     _TRISA0	set	1064
    76  0429                     _TRISA1	set	1065
    77  042A                     _TRISA2	set	1066
    78  042B                     _TRISA3	set	1067
    79  042F                     _TRISA7	set	1071
    80  0430                     _TRISB0	set	1072
    81  0431                     _TRISB1	set	1073
    82  0432                     _TRISB2	set	1074
    83  0433                     _TRISB3	set	1075
    84  0434                     _TRISB4	set	1076
    85  0435                     _TRISB5	set	1077
    86  0436                     _TRISB6	set	1078
    87  0437                     _TRISB7	set	1079
    88  0108                     _CLKPR	set	264
    89  0847                     _CLKPCE	set	2119
    90                           
    91                           	psect	cinit
    92  0228                     start_initialization:	
    93  0228  3020               	movlw	low __pbssBANK0
    94                           
    95                           ; Clear objects allocated to COMMON
    96  0229  01F6               	clrf	__pbssCOMMON& (0+127)
    97  022A  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    98  022B  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    99  022C  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
   100  022D  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   101                           
   102                           ; Clear objects allocated to BANK0
   103  022E  1383               	bcf	3,7	;select IRP bank0
   104  022F  0084               	movwf	4
   105  0230  3043               	movlw	low (__pbssBANK0+35)
   106  0231  118A  2257         	fcall	clear_ram
   107                           
   108                           ;initializer for _sampleChannelSelect
   109  0233  300D               	movlw	13
   110  0234  00C8               	movwf	__pdataBANK0& (0+127)
   111  0235                     end_of_initialization:	
   112                           ;End of C runtime variable initialization code
   113                           
   114  0235  0183               	clrf	3
   115  0236  118A  280D         	ljmp	_main	;jump to C main() function
   116                           
   117                           	psect	bssCOMMON
   118  0076                     __pbssCOMMON:	
   119  0076                     _uiBigTimer:	
   120  0076                     	ds	2
   121  0078                     ISR@ucTimer1sCnt:	
   122  0078                     	ds	1
   123  0079                     _adc_convert_flag:	
   124  0079                     	ds	1
   125  007A                     _timer:	
   126  007A                     	ds	1
   127                           
   128                           	psect	bssBANK0
   129  0020                     __pbssBANK0:	
   130  0020                     _buffer_Sample_AD_Value:	
   131  0020                     	ds	12
   132  002C                     _adc_original_CH13_value:	
   133  002C                     	ds	2
   134  002E                     _adc_original_value:	
   135  002E                     	ds	2
   136  0030                     _multiFilterMaxValue:	
   137  0030                     	ds	2
   138  0032                     _multiFilterMinValue:	
   139  0032                     	ds	2
   140  0034                     _uiSmallTimer:	
   141  0034                     	ds	2
   142  0036                     _sampleTimes:	
   143  0036                     	ds	1
   144  0037                     main@ampStep:	
   145  0037                     	ds	1
   146  0038                     main@tDA_timer:	
   147  0038                     	ds	1
   148  0039                     main@ucBigTimerActionFlag:	
   149  0039                     	ds	1
   150  003A                     main@ucCheckBatteryCnt:	
   151  003A                     	ds	1
   152  003B                     main@ucConfirmTimer1S:	
   153  003B                     	ds	1
   154  003C                     main@ucConfirmTimerZptS:	
   155  003C                     	ds	1
   156  003D                     main@ucInit:	
   157  003D                     	ds	1
   158  003E                     main@ucInstalledBatteryCnt:	
   159  003E                     	ds	1
   160  003F                     main@ucSetSmallActionFlag:	
   161  003F                     	ds	1
   162  0040                     main@ucSmallTimerActionFlag:	
   163  0040                     	ds	1
   164  0041                     main@ucWaitTime1S:	
   165  0041                     	ds	1
   166  0042                     main@ucWaitTimeO3s:	
   167  0042                     	ds	1
   168                           
   169                           	psect	dataBANK0
   170  0048                     __pdataBANK0:	
   171  0048                     _sampleChannelSelect:	
   172  0048                     	ds	1
   173                           
   174                           	psect	clrtext
   175  0257                     clear_ram:	
   176                           ;	Called with FSR containing the base address, and
   177                           ;	W with the last address+1
   178                           
   179  0257  0064               	clrwdt	;clear the watchdog before getting into this loop
   180  0258                     clrloop:	
   181  0258  0180               	clrf	0	;clear RAM location pointed to by FSR
   182  0259  0A84               	incf	4,f	;increment pointer
   183  025A  0604               	xorwf	4,w	;XOR with final address
   184  025B  1903               	btfsc	3,2	;have we reached the end yet?
   185  025C  3400               	retlw	0	;all done for this memory range, return
   186  025D  0604               	xorwf	4,w	;XOR again to restore value
   187  025E  2A58               	goto	clrloop	;do the next byte
   188                           
   189                           	psect	cstackCOMMON
   190  0070                     __pcstackCOMMON:	
   191  0070                     ?_clock_config:	
   192  0070                     ?_timer1_config:	
   193                           ; 0 bytes @ 0x0
   194                           
   195  0070                     ?_timer1_interrupt_config:	
   196                           ; 0 bytes @ 0x0
   197                           
   198  0070                     ?_dac_init:	
   199                           ; 0 bytes @ 0x0
   200                           
   201  0070                     ?_op1_init:	
   202                           ; 0 bytes @ 0x0
   203                           
   204  0070                     ?_op2_init:	
   205                           ; 0 bytes @ 0x0
   206                           
   207  0070                     ?_adc_start:	
   208                           ; 0 bytes @ 0x0
   209                           
   210  0070                     ?_clrSampeTime:	
   211                           ; 0 bytes @ 0x0
   212                           
   213  0070                     ?_process_AD_Converter_Value:	
   214                           ; 0 bytes @ 0x0
   215                           
   216  0070                     ?_clearBigTimer:	
   217                           ; 0 bytes @ 0x0
   218                           
   219  0070                     ?_clearSmallTimer:	
   220                           ; 0 bytes @ 0x0
   221                           
   222  0070                     ?_setDAC0_ChannelValue:	
   223                           ; 0 bytes @ 0x0
   224                           
   225  0070                     ?_startBigTimer:	
   226                           ; 0 bytes @ 0x0
   227                           
   228  0070                     ?_startSmallTimer:	
   229                           ; 0 bytes @ 0x0
   230                           
   231  0070                     ?_AD_Sample:	
   232                           ; 0 bytes @ 0x0
   233                           
   234  0070                     ?_main:	
   235                           ; 0 bytes @ 0x0
   236                           
   237  0070                     ?_setAD_ConvertFlag:	
   238                           ; 0 bytes @ 0x0
   239                           
   240  0070                     ?_ISR:	
   241                           ; 0 bytes @ 0x0
   242                           
   243  0070                     ?i1_setAD_ConvertFlag:	
   244                           ; 0 bytes @ 0x0
   245                           
   246  0070                     ??i1_setAD_ConvertFlag:	
   247                           ; 0 bytes @ 0x0
   248                           
   249  0070                     ?_isPermitSampleTime:	
   250                           ; 0 bytes @ 0x0
   251                           
   252  0070                     ?_isFinishedBigTimer:	
   253                           ; 1 bytes @ 0x0
   254                           
   255  0070                     ?_isFinishedSmallTimer:	
   256                           ; 1 bytes @ 0x0
   257                           
   258  0070                     ?_getAD_ConvertFlag:	
   259                           ; 1 bytes @ 0x0
   260                           
   261  0070                     ?_adc_get:	
   262                           ; 1 bytes @ 0x0
   263                           
   264  0070                     i1setAD_ConvertFlag@flag:	
   265                           ; 2 bytes @ 0x0
   266                           
   267                           
   268                           ; 1 bytes @ 0x0
   269  0070                     	ds	2
   270  0072                     ??_adc_get:	
   271  0072                     adc_get@val:	
   272                           ; 0 bytes @ 0x2
   273                           
   274                           
   275                           ; 2 bytes @ 0x2
   276  0072                     	ds	2
   277  0074                     ??_ISR:	
   278                           
   279                           ; 0 bytes @ 0x4
   280  0074                     	ds	2
   281                           
   282                           	psect	cstackBANK0
   283  0043                     __pcstackBANK0:	
   284  0043                     ??_clock_config:	
   285  0043                     ??_timer1_config:	
   286                           ; 0 bytes @ 0x0
   287                           
   288  0043                     ??_timer1_interrupt_config:	
   289                           ; 0 bytes @ 0x0
   290                           
   291  0043                     ?_adc_test_init:	
   292                           ; 0 bytes @ 0x0
   293                           
   294  0043                     ??_dac_init:	
   295                           ; 0 bytes @ 0x0
   296                           
   297  0043                     ??_op1_init:	
   298                           ; 0 bytes @ 0x0
   299                           
   300  0043                     ??_op2_init:	
   301                           ; 0 bytes @ 0x0
   302                           
   303  0043                     ??_adc_start:	
   304                           ; 0 bytes @ 0x0
   305                           
   306  0043                     ??_isPermitSampleTime:	
   307                           ; 0 bytes @ 0x0
   308                           
   309  0043                     ??_clrSampeTime:	
   310                           ; 0 bytes @ 0x0
   311                           
   312  0043                     ??_clearBigTimer:	
   313                           ; 0 bytes @ 0x0
   314                           
   315  0043                     ??_clearSmallTimer:	
   316                           ; 0 bytes @ 0x0
   317                           
   318  0043                     ??_setDAC0_ChannelValue:	
   319                           ; 0 bytes @ 0x0
   320                           
   321  0043                     ??_startBigTimer:	
   322                           ; 0 bytes @ 0x0
   323                           
   324  0043                     ??_startSmallTimer:	
   325                           ; 0 bytes @ 0x0
   326                           
   327  0043                     ??_isFinishedBigTimer:	
   328                           ; 0 bytes @ 0x0
   329                           
   330  0043                     ??_isFinishedSmallTimer:	
   331                           ; 0 bytes @ 0x0
   332                           
   333  0043                     ??_getAD_ConvertFlag:	
   334                           ; 0 bytes @ 0x0
   335                           
   336  0043                     ??_setAD_ConvertFlag:	
   337                           ; 0 bytes @ 0x0
   338                           
   339  0043                     ?_getAdOriginalCh13Value:	
   340                           ; 0 bytes @ 0x0
   341                           
   342  0043                     ?_getAdOriginalValue:	
   343                           ; 2 bytes @ 0x0
   344                           
   345  0043                     setAD_ConvertFlag@flag:	
   346                           ; 2 bytes @ 0x0
   347                           
   348  0043                     setDAC0_ChannelValue@ucValue:	
   349                           ; 1 bytes @ 0x0
   350                           
   351  0043                     adc_test_init@ref:	
   352                           ; 1 bytes @ 0x0
   353                           
   354                           
   355                           ; 1 bytes @ 0x0
   356  0043                     	ds	1
   357  0044                     ??_adc_test_init:	
   358                           
   359                           ; 0 bytes @ 0x1
   360  0044                     	ds	1
   361  0045                     ??_getAdOriginalCh13Value:	
   362  0045                     ??_AD_Sample:	
   363                           ; 0 bytes @ 0x2
   364                           
   365  0045                     ??_getAdOriginalValue:	
   366                           ; 0 bytes @ 0x2
   367                           
   368  0045                     adc_test_init@channel:	
   369                           ; 0 bytes @ 0x2
   370                           
   371                           
   372                           ; 1 bytes @ 0x2
   373  0045                     	ds	2
   374  0047                     AD_Sample@index:	
   375                           
   376                           ; 1 bytes @ 0x4
   377  0047                     	ds	1
   378  0048                     ??_process_AD_Converter_Value:	
   379  0048                     ??_main:	
   380                           ; 0 bytes @ 0x5
   381                           
   382                           
   383                           	psect	maintext
   384  000D                     __pmaintext:	
   385                           ; 0 bytes @ 0x5
   386 ;;Data sizes: Strings 0, constant 0, data 1, bss 40, persistent 0 stack 0
   387 ;;Auto spaces:   Size  Autos    Used
   388 ;; COMMON          14      6      11
   389 ;; BANK0           80      5      41
   390 ;; BANK1           80      0       0
   391 ;; BANK3           96      0       0
   392 ;; BANK2           96      0       0
   393 ;;
   394 ;; Pointer list with targets:
   395 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   396 ;;
   397 ;; ?_getAdOriginalCh13Value	unsigned int  size(1) Largest target is 0
   398 ;;
   399 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   400 ;;
   401 ;;
   402 ;; Critical Paths under _main in COMMON
   403 ;;
   404 ;;   None.
   405 ;;
   406 ;; Critical Paths under _ISR in COMMON
   407 ;;
   408 ;;   _ISR->_adc_get
   409 ;;
   410 ;; Critical Paths under _main in BANK0
   411 ;;
   412 ;;   _process_AD_Converter_Value->_AD_Sample
   413 ;;   _AD_Sample->_getAdOriginalValue
   414 ;;
   415 ;; Critical Paths under _ISR in BANK0
   416 ;;
   417 ;;   None.
   418 ;;
   419 ;; Critical Paths under _main in BANK1
   420 ;;
   421 ;;   None.
   422 ;;
   423 ;; Critical Paths under _ISR in BANK1
   424 ;;
   425 ;;   None.
   426 ;;
   427 ;; Critical Paths under _main in BANK3
   428 ;;
   429 ;;   None.
   430 ;;
   431 ;; Critical Paths under _ISR in BANK3
   432 ;;
   433 ;;   None.
   434 ;;
   435 ;; Critical Paths under _main in BANK2
   436 ;;
   437 ;;   None.
   438 ;;
   439 ;; Critical Paths under _ISR in BANK2
   440 ;;
   441 ;;   None.
   442 ;;
   443 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   444 ;;
   445 ;;
   446 ;;Call Graph Tables:
   447 ;;
   448 ;; ---------------------------------------------------------------------------------
   449 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   450 ;; ---------------------------------------------------------------------------------
   451 ;; (0) _main                                                 0     0      0     156
   452 ;;                       _clock_config
   453 ;;                      _timer1_config
   454 ;;            _timer1_interrupt_config
   455 ;;                      _adc_test_init
   456 ;;                           _dac_init
   457 ;;                           _op1_init
   458 ;;                           _op2_init
   459 ;;                          _adc_start
   460 ;;                 _isPermitSampleTime
   461 ;;                       _clrSampeTime
   462 ;;         _process_AD_Converter_Value
   463 ;;                      _clearBigTimer
   464 ;;                    _clearSmallTimer
   465 ;;             _getAdOriginalCh13Value
   466 ;;               _setDAC0_ChannelValue
   467 ;;                      _startBigTimer
   468 ;;                    _startSmallTimer
   469 ;;                 _isFinishedBigTimer
   470 ;;               _isFinishedSmallTimer
   471 ;; ---------------------------------------------------------------------------------
   472 ;; (1) _process_AD_Converter_Value                           0     0      0      90
   473 ;;                  _getAD_ConvertFlag
   474 ;;                  _setAD_ConvertFlag
   475 ;;                          _AD_Sample
   476 ;;                          _adc_start
   477 ;; ---------------------------------------------------------------------------------
   478 ;; (2) _AD_Sample                                            3     3      0      68
   479 ;;                                              2 BANK0      3     3      0
   480 ;;                 _getAdOriginalValue
   481 ;; ---------------------------------------------------------------------------------
   482 ;; (3) _getAdOriginalValue                                   2     0      2       0
   483 ;;                                              0 BANK0      2     0      2
   484 ;; ---------------------------------------------------------------------------------
   485 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   486 ;;                                              0 BANK0      1     1      0
   487 ;; ---------------------------------------------------------------------------------
   488 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   489 ;; ---------------------------------------------------------------------------------
   490 ;; (1) _isFinishedSmallTimer                                 0     0      0       0
   491 ;; ---------------------------------------------------------------------------------
   492 ;; (1) _isFinishedBigTimer                                   0     0      0       0
   493 ;; ---------------------------------------------------------------------------------
   494 ;; (1) _startSmallTimer                                      0     0      0       0
   495 ;; ---------------------------------------------------------------------------------
   496 ;; (1) _startBigTimer                                        0     0      0       0
   497 ;; ---------------------------------------------------------------------------------
   498 ;; (1) _setDAC0_ChannelValue                                 1     1      0      22
   499 ;;                                              0 BANK0      1     1      0
   500 ;; ---------------------------------------------------------------------------------
   501 ;; (1) _getAdOriginalCh13Value                               2     0      2       0
   502 ;;                                              0 BANK0      2     0      2
   503 ;; ---------------------------------------------------------------------------------
   504 ;; (1) _clearSmallTimer                                      0     0      0       0
   505 ;; ---------------------------------------------------------------------------------
   506 ;; (1) _clearBigTimer                                        0     0      0       0
   507 ;; ---------------------------------------------------------------------------------
   508 ;; (1) _clrSampeTime                                         0     0      0       0
   509 ;; ---------------------------------------------------------------------------------
   510 ;; (1) _isPermitSampleTime                                   0     0      0       0
   511 ;; ---------------------------------------------------------------------------------
   512 ;; (2) _adc_start                                            0     0      0       0
   513 ;; ---------------------------------------------------------------------------------
   514 ;; (1) _op2_init                                             0     0      0       0
   515 ;; ---------------------------------------------------------------------------------
   516 ;; (1) _op1_init                                             0     0      0       0
   517 ;; ---------------------------------------------------------------------------------
   518 ;; (1) _dac_init                                             0     0      0       0
   519 ;; ---------------------------------------------------------------------------------
   520 ;; (1) _adc_test_init                                        3     2      1      44
   521 ;;                                              0 BANK0      3     2      1
   522 ;; ---------------------------------------------------------------------------------
   523 ;; (1) _timer1_interrupt_config                              0     0      0       0
   524 ;; ---------------------------------------------------------------------------------
   525 ;; (1) _timer1_config                                        0     0      0       0
   526 ;; ---------------------------------------------------------------------------------
   527 ;; (1) _clock_config                                         0     0      0       0
   528 ;; ---------------------------------------------------------------------------------
   529 ;; Estimated maximum stack depth 3
   530 ;; ---------------------------------------------------------------------------------
   531 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   532 ;; ---------------------------------------------------------------------------------
   533 ;; (4) _ISR                                                  2     2      0      97
   534 ;;                                              4 COMMON     2     2      0
   535 ;;                i1_setAD_ConvertFlag
   536 ;;                            _adc_get
   537 ;; ---------------------------------------------------------------------------------
   538 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   539 ;;                                              0 COMMON     1     1      0
   540 ;; ---------------------------------------------------------------------------------
   541 ;; (5) _adc_get                                              4     2      2      24
   542 ;;                                              0 COMMON     4     2      2
   543 ;; ---------------------------------------------------------------------------------
   544 ;; Estimated maximum stack depth 5
   545 ;; ---------------------------------------------------------------------------------
   546 ;; Call Graph Graphs:
   547 ;; _main (ROOT)
   548 ;;   _clock_config
   549 ;;   _timer1_config
   550 ;;   _timer1_interrupt_config
   551 ;;   _adc_test_init
   552 ;;   _dac_init
   553 ;;   _op1_init
   554 ;;   _op2_init
   555 ;;   _adc_start
   556 ;;   _isPermitSampleTime
   557 ;;   _clrSampeTime
   558 ;;   _process_AD_Converter_Value
   559 ;;     _getAD_ConvertFlag
   560 ;;     _setAD_ConvertFlag
   561 ;;     _AD_Sample
   562 ;;       _getAdOriginalValue
   563 ;;     _adc_start
   564 ;;   _clearBigTimer
   565 ;;   _clearSmallTimer
   566 ;;   _getAdOriginalCh13Value
   567 ;;   _setDAC0_ChannelValue
   568 ;;   _startBigTimer
   569 ;;   _startSmallTimer
   570 ;;   _isFinishedBigTimer
   571 ;;   _isFinishedSmallTimer
   572 ;;
   573 ;; _ISR (ROOT)
   574 ;;   i1_setAD_ConvertFlag
   575 ;;   _adc_get
   576 ;;
   577 ;; Address spaces:
   578 ;;Name               Size   Autos  Total    Cost      Usage
   579 ;;BANK3               60      0       0      10        0.0%
   580 ;;BITBANK3            60      0       0       9        0.0%
   581 ;;SFR3                 0      0       0       4        0.0%
   582 ;;BITSFR3              0      0       0       4        0.0%
   583 ;;BANK2               60      0       0      12        0.0%
   584 ;;BITBANK2            60      0       0      11        0.0%
   585 ;;SFR2                 0      0       0       5        0.0%
   586 ;;BITSFR2              0      0       0       5        0.0%
   587 ;;SFR1                 0      0       0       2        0.0%
   588 ;;BITSFR1              0      0       0       2        0.0%
   589 ;;BANK1               50      0       0       8        0.0%
   590 ;;BITBANK1            50      0       0       7        0.0%
   591 ;;CODE                 0      0       0       0        0.0%
   592 ;;DATA                 0      0      3B       6        0.0%
   593 ;;ABS                  0      0      34       3        0.0%
   594 ;;NULL                 0      0       0       0        0.0%
   595 ;;STACK                0      0       7       2        0.0%
   596 ;;BANK0               50      5      29       5       51.3%
   597 ;;BITBANK0            50      0       0       4        0.0%
   598 ;;SFR0                 0      0       0       1        0.0%
   599 ;;BITSFR0              0      0       0       1        0.0%
   600 ;;COMMON               E      6       B       1       78.6%
   601 ;;BITCOMMON            E      0       0       0        0.0%
   602                           
   603                           
   604 ;; *************** function _main *****************
   605 ;; Defined at:
   606 ;;		line 84 in file "C:\sw_dev\AK7030-OTP\main.c"
   607 ;; Parameters:    Size  Location     Type
   608 ;;		None
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;		None               void
   613 ;; Registers used:
   614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 17F/0
   617 ;;		On exit  : 60/0
   618 ;;		Unchanged: FFE00/0
   619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   620 ;;      Params:         0       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0
   623 ;;      Totals:         0       0       0       0       0
   624 ;;Total ram usage:        0 bytes
   625 ;; Hardware stack levels required when called:    5
   626 ;; This function calls:
   627 ;;		_clock_config
   628 ;;		_timer1_config
   629 ;;		_timer1_interrupt_config
   630 ;;		_adc_test_init
   631 ;;		_dac_init
   632 ;;		_op1_init
   633 ;;		_op2_init
   634 ;;		_adc_start
   635 ;;		_isPermitSampleTime
   636 ;;		_clrSampeTime
   637 ;;		_process_AD_Converter_Value
   638 ;;		_clearBigTimer
   639 ;;		_clearSmallTimer
   640 ;;		_getAdOriginalCh13Value
   641 ;;		_setDAC0_ChannelValue
   642 ;;		_startBigTimer
   643 ;;		_startSmallTimer
   644 ;;		_isFinishedBigTimer
   645 ;;		_isFinishedSmallTimer
   646 ;; This function is called by:
   647 ;;		Startup code after reset
   648 ;; This function uses a non-reentrant model
   649 ;;
   650  000D                     _main:	
   651                           
   652                           ;main.c: 85: enum step
   653                           ;main.c: 86: {
   654                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   655                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   656                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   657                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   658                           ;main.c: 91: SET_PA2_VALUE,
   659                           ;main.c: 92: PROCESS_AD_VALUE,
   660                           ;main.c: 93: WAIT_SET_TIME_FINISHED,
   661                           ;main.c: 94: SET_TIME_BE_FINISHED,
   662                           ;main.c: 95: CHECKING_PULL_OUT_BATTERY,
   663                           ;main.c: 96: CHECKING_INSTALLED_BATTERY,
   664                           ;main.c: 97: };
   665                           ;main.c: 99: enum workTimerType
   666                           ;main.c: 100: {
   667                           ;main.c: 101: BIG_TIMER_WORK = 0,
   668                           
   669                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   670  000D  1683               	bsf	3,5	;RP0=1, select bank1
   671  000E  1005               	bcf	5,0
   672                           
   673                           ;main.c: 118: TRISA1 = 0;
   674  000F  1085               	bcf	5,1
   675                           
   676                           ;main.c: 119: TRISA3 = 0;
   677  0010  1185               	bcf	5,3
   678                           
   679                           ;main.c: 120: TRISA2 = 0;
   680  0011  1105               	bcf	5,2
   681                           
   682                           ;main.c: 121: PA2 = 1;
   683  0012  1283               	bcf	3,5	;RP0=0, select bank0
   684  0013  1505               	bsf	5,2
   685                           
   686                           ;main.c: 122: PA0 = 1;
   687  0014  1405               	bsf	5,0
   688                           
   689                           ;main.c: 124: TRISB2 = 1;
   690  0015  1683               	bsf	3,5	;RP0=1, select bank1
   691  0016  1506               	bsf	6,2
   692                           
   693                           ;main.c: 126: TRISB1 = 1;
   694  0017  1486               	bsf	6,1
   695                           
   696                           ;main.c: 127: TRISB0 = 1;
   697  0018  1406               	bsf	6,0
   698                           
   699                           ;main.c: 129: clock_config();
   700  0019  118A  225F  118A   	fcall	_clock_config
   701                           
   702                           ;main.c: 130: timer1_config();
   703  001C  118A  2244  118A   	fcall	_timer1_config
   704                           
   705                           ;main.c: 131: timer1_interrupt_config();
   706  001F  118A  2294  118A   	fcall	_timer1_interrupt_config
   707                           
   708                           ;main.c: 133: adc_test_init(13,3);
   709  0022  3003               	movlw	3
   710  0023  1283               	bcf	3,5	;RP0=0, select bank0
   711  0024  00C3               	movwf	?_adc_test_init
   712  0025  300D               	movlw	13
   713  0026  118A  2214  118A   	fcall	_adc_test_init
   714                           
   715                           ;main.c: 135: dac_init();
   716  0029  118A  2285  118A   	fcall	_dac_init
   717                           
   718                           ;main.c: 136: op1_init();
   719  002C  118A  2238  118A   	fcall	_op1_init
   720                           
   721                           ;main.c: 137: op2_init();
   722  002F  118A  224E  118A   	fcall	_op2_init
   723                           
   724                           ;main.c: 140: adc_start();
   725  0032  118A  2142  118A   	fcall	_adc_start
   726                           
   727                           ;main.c: 153: switch(ampStep)
   728  0035  2915               	goto	l3156
   729  0036                     l3164:	
   730                           
   731                           ;main.c: 156: {
   732                           ;main.c: 157: ucBigTimerActionFlag = 0;
   733  0036  01B9               	clrf	main@ucBigTimerActionFlag
   734                           
   735                           ;main.c: 158: clearBigTimer();
   736  0037  118A  2291  118A   	fcall	_clearBigTimer
   737                           
   738                           ;main.c: 159: clearSmallTimer();
   739  003A  118A  228E  118A   	fcall	_clearSmallTimer
   740  003D                     L1:	
   741                           
   742                           ;main.c: 160: if(!PB2)
   743  003D  1906               	btfsc	6,2
   744  003E  2915               	goto	l3156
   745  003F                     l3172:	
   746                           
   747                           ;main.c: 161: ampStep++;
   748  003F  1283               	bcf	3,5	;RP0=0, select bank0
   749  0040  0AB7               	incf	main@ampStep,f
   750  0041  2915               	goto	l3156
   751  0042                     l685:	
   752                           ;main.c: 163: }
   753                           ;main.c: 165: case SENSE_PB2_DURATION_ONE_SECOND:
   754                           
   755                           
   756                           ;main.c: 166: {
   757                           ;main.c: 167: static unsigned char ucConfirmTimer1S = 0;
   758                           ;main.c: 168: if(!PB2)
   759  0042  1906               	btfsc	6,2
   760  0043  2846               	goto	l3176
   761                           
   762                           ;main.c: 169: {
   763                           ;main.c: 170: ucConfirmTimer1S++;
   764  0044  0ABB               	incf	main@ucConfirmTimer1S,f
   765                           
   766                           ;main.c: 171: }
   767  0045  2847               	goto	l3178
   768  0046                     l3176:	
   769                           
   770                           ;main.c: 172: else
   771                           ;main.c: 173: {
   772                           ;main.c: 174: ucConfirmTimer1S = 0;
   773  0046  01BB               	clrf	main@ucConfirmTimer1S
   774  0047                     l3178:	
   775                           
   776                           ;main.c: 175: }
   777                           ;main.c: 177: if(ucConfirmTimer1S >= 10)
   778  0047  300A               	movlw	10
   779  0048  023B               	subwf	main@ucConfirmTimer1S,w
   780  0049  1C03               	skipc
   781  004A  2915               	goto	l3156
   782                           
   783                           ;main.c: 178: {
   784                           ;main.c: 179: ucConfirmTimer1S = 0;
   785  004B  01BB               	clrf	main@ucConfirmTimer1S
   786  004C  283F               	goto	l3172
   787  004D                     l691:	
   788                           ;main.c: 184: }
   789                           ;main.c: 186: case SENSE_PB2_INPUT_VOLTAGE__AGAIN:
   790                           
   791                           
   792                           ;main.c: 187: {
   793                           ;main.c: 188: if(!PB2)
   794  004D  283D               	goto	L1
   795  004E                     l693:	
   796                           ;main.c: 191: }
   797                           ;main.c: 193: case SENSE_PB2_DURATION__SECOND:
   798                           
   799                           
   800                           ;main.c: 194: {
   801                           ;main.c: 195: static unsigned char ucConfirmTimerZptS = 0;
   802                           ;main.c: 196: if(!PB2)
   803  004E  1906               	btfsc	6,2
   804  004F  2852               	goto	l3188
   805                           
   806                           ;main.c: 197: {
   807                           ;main.c: 198: ucConfirmTimerZptS++;
   808  0050  0ABC               	incf	main@ucConfirmTimerZptS,f
   809                           
   810                           ;main.c: 199: }
   811  0051  2853               	goto	l3190
   812  0052                     l3188:	
   813                           
   814                           ;main.c: 200: else
   815                           ;main.c: 201: {
   816                           ;main.c: 202: ucConfirmTimerZptS = 0;
   817  0052  01BC               	clrf	main@ucConfirmTimerZptS
   818  0053                     l3190:	
   819                           
   820                           ;main.c: 203: }
   821                           ;main.c: 205: if(ucConfirmTimerZptS >= 3)
   822  0053  3003               	movlw	3
   823  0054  023C               	subwf	main@ucConfirmTimerZptS,w
   824  0055  1C03               	skipc
   825  0056  2915               	goto	l3156
   826                           
   827                           ;main.c: 206: {
   828                           ;main.c: 207: ucConfirmTimerZptS = 0;
   829  0057  01BC               	clrf	main@ucConfirmTimerZptS
   830  0058  283F               	goto	l3172
   831  0059                     l699:	
   832                           ;main.c: 212: }
   833                           ;main.c: 214: case SET_PA2_VALUE:
   834                           
   835                           
   836                           ;main.c: 215: {
   837                           ;main.c: 216: PA2 = 0;
   838  0059  1105               	bcf	5,2
   839  005A  283F               	goto	l3172
   840  005B                     l3198:	
   841                           
   842                           ;main.c: 222: {
   843                           ;main.c: 223: static unsigned char ucInit = 0;
   844                           ;main.c: 224: if(getAdOriginalCh13Value() > 40)
   845  005B  118A  227B  118A   	fcall	_getAdOriginalCh13Value
   846  005E  3000               	movlw	0
   847  005F  0244               	subwf	?_getAdOriginalCh13Value+1,w
   848  0060  3029               	movlw	41
   849  0061  1903               	skipnz
   850  0062  0243               	subwf	?_getAdOriginalCh13Value,w
   851  0063  1C03               	skipc
   852  0064  2878               	goto	l3212
   853  0065  301B               	movlw	27
   854                           
   855                           ;main.c: 225: {
   856                           ;main.c: 226: ucInit = 1;
   857  0066  01BD               	clrf	main@ucInit
   858  0067  0ABD               	incf	main@ucInit,f
   859                           
   860                           ;main.c: 227: PA0 = 0;
   861  0068  1005               	bcf	5,0
   862                           
   863                           ;main.c: 228: PA1 = 1;
   864  0069  1485               	bsf	5,1
   865                           
   866                           ;main.c: 230: tDA_timer = BIG_TIMER_WORK;
   867  006A  01B8               	clrf	main@tDA_timer
   868                           
   869                           ;main.c: 231: setDAC0_ChannelValue(27);
   870  006B  118A  228A  118A   	fcall	_setDAC0_ChannelValue
   871                           
   872                           ;main.c: 232: if(!ucBigTimerActionFlag)
   873  006E  1283               	bcf	3,5	;RP0=0, select bank0
   874  006F  08B9               	movf	main@ucBigTimerActionFlag,f
   875  0070  1D03               	skipz
   876  0071  28A0               	goto	l3236
   877  0072                     l3208:	
   878                           
   879                           ;main.c: 233: {
   880                           ;main.c: 234: startBigTimer();
   881  0072  118A  2276  118A   	fcall	_startBigTimer
   882                           
   883                           ;main.c: 235: ucBigTimerActionFlag = 1;
   884  0075  01B9               	clrf	main@ucBigTimerActionFlag
   885  0076  0AB9               	incf	main@ucBigTimerActionFlag,f
   886  0077  28A0               	goto	l3236
   887  0078                     l3212:	
   888                           
   889                           ;main.c: 238: else if(getAdOriginalCh13Value() <35)
   890  0078  118A  227B  118A   	fcall	_getAdOriginalCh13Value
   891  007B  3000               	movlw	0
   892  007C  0244               	subwf	?_getAdOriginalCh13Value+1,w
   893  007D  3023               	movlw	35
   894  007E  1903               	skipnz
   895  007F  0243               	subwf	?_getAdOriginalCh13Value,w
   896  0080  1803               	skipnc
   897  0081  2890               	goto	l3222
   898                           
   899                           ;main.c: 239: {
   900                           ;main.c: 240: ucInit = 1;
   901  0082  01BD               	clrf	main@ucInit
   902  0083  0ABD               	incf	main@ucInit,f
   903                           
   904                           ;main.c: 243: PA3 = 0;
   905  0084  1185               	bcf	5,3
   906                           
   907                           ;main.c: 244: tDA_timer = SMALL_TIMER_WORK;
   908  0085  01B8               	clrf	main@tDA_timer
   909  0086  0AB8               	incf	main@tDA_timer,f
   910                           
   911                           ;main.c: 245: ucSmallTimerActionFlag = 1;
   912  0087  01C0               	clrf	main@ucSmallTimerActionFlag
   913  0088  0AC0               	incf	main@ucSmallTimerActionFlag,f
   914                           
   915                           ;main.c: 246: ucWaitTimeO3s = 0;
   916  0089  01C2               	clrf	main@ucWaitTimeO3s
   917                           
   918                           ;main.c: 247: ucSetSmallActionFlag = 1;
   919  008A  01BF               	clrf	main@ucSetSmallActionFlag
   920  008B  0ABF               	incf	main@ucSetSmallActionFlag,f
   921                           
   922                           ;main.c: 249: startSmallTimer();
   923  008C  118A  2271  118A   	fcall	_startSmallTimer
   924                           
   925                           ;main.c: 250: }
   926  008F  28A0               	goto	l3236
   927  0090                     l3222:	
   928                           
   929                           ;main.c: 251: else
   930                           ;main.c: 252: {
   931                           ;main.c: 253: if(!ucInit)
   932  0090  08BD               	movf	main@ucInit,f
   933  0091  1D03               	skipz
   934  0092  28A0               	goto	l3236
   935  0093  301B               	movlw	27
   936                           
   937                           ;main.c: 254: {
   938                           ;main.c: 255: ucInit = 1;
   939  0094  01BD               	clrf	main@ucInit
   940  0095  0ABD               	incf	main@ucInit,f
   941                           
   942                           ;main.c: 256: PA0 = 0;
   943  0096  1005               	bcf	5,0
   944                           
   945                           ;main.c: 257: PA1 = 1;
   946  0097  1485               	bsf	5,1
   947                           
   948                           ;main.c: 259: tDA_timer = BIG_TIMER_WORK;
   949  0098  01B8               	clrf	main@tDA_timer
   950                           
   951                           ;main.c: 260: setDAC0_ChannelValue(27);
   952  0099  118A  228A  118A   	fcall	_setDAC0_ChannelValue
   953                           
   954                           ;main.c: 261: if(!ucBigTimerActionFlag)
   955  009C  1283               	bcf	3,5	;RP0=0, select bank0
   956  009D  08B9               	movf	main@ucBigTimerActionFlag,f
   957  009E  1903               	btfsc	3,2
   958  009F  2872               	goto	l3208
   959  00A0                     l3236:	
   960                           
   961                           ;main.c: 265: }
   962                           ;main.c: 266: }
   963                           ;main.c: 267: }
   964                           ;main.c: 269: if(BIG_TIMER_WORK == tDA_timer)
   965  00A0  08B8               	movf	main@tDA_timer,f
   966  00A1  1D03               	skipz
   967  00A2  28AD               	goto	l710
   968                           
   969                           ;main.c: 270: {
   970                           ;main.c: 271: if(!PA3)
   971  00A3  1985               	btfsc	5,3
   972  00A4  283F               	goto	l3172
   973  00A5  3005               	movlw	5
   974                           
   975                           ;main.c: 272: {
   976                           ;main.c: 273: ucWaitTime1S++;
   977  00A6  0AC1               	incf	main@ucWaitTime1S,f
   978                           
   979                           ;main.c: 274: if(ucWaitTime1S >= 5)
   980  00A7  0241               	subwf	main@ucWaitTime1S,w
   981  00A8  1C03               	skipc
   982  00A9  283F               	goto	l3172
   983                           
   984                           ;main.c: 275: {
   985                           ;main.c: 276: PA3 = 1;
   986  00AA  1585               	bsf	5,3
   987  00AB                     l3246:	
   988                           
   989                           ;main.c: 277: ucWaitTime1S = 0;
   990  00AB  01C1               	clrf	main@ucWaitTime1S
   991  00AC  283F               	goto	l3172
   992  00AD                     l710:	
   993                           
   994                           ;main.c: 281: else
   995                           ;main.c: 282: {
   996                           ;main.c: 283: PA3 = 0;
   997  00AD  1185               	bcf	5,3
   998  00AE  28AB               	goto	l3246
   999  00AF                     l3252:	
  1000                           
  1001                           ;main.c: 296: {
  1002                           ;main.c: 297: if(!isFinishedBigTimer())
  1003  00AF  118A  226C  118A   	fcall	_isFinishedBigTimer
  1004  00B2  3800               	iorlw	0
  1005  00B3  1D03               	skipz
  1006  00B4  283F               	goto	l3172
  1007                           
  1008                           ;main.c: 298: {
  1009                           ;main.c: 299: ampStep = PROCESS_AD_VALUE;
  1010  00B5  3005               	movlw	5
  1011  00B6  00B7               	movwf	main@ampStep
  1012                           
  1013                           ;main.c: 300: }
  1014  00B7  2915               	goto	l3156
  1015  00B8                     l3258:	
  1016                           
  1017                           ;main.c: 309: {
  1018                           ;main.c: 310: if((ucBigTimerActionFlag == 1) && isFinishedBigTimer())
  1019  00B8  0B39               	decfsz	main@ucBigTimerActionFlag,w
  1020  00B9  28C2               	goto	l3264
  1021  00BA  118A  226C  118A   	fcall	_isFinishedBigTimer
  1022  00BD  3A00               	xorlw	0
  1023  00BE  1903               	skipnz
  1024  00BF  28C2               	goto	l3264
  1025  00C0                     l3262:	
  1026                           
  1027                           ;main.c: 311: {
  1028                           ;main.c: 312: ampStep++;
  1029  00C0  0AB7               	incf	main@ampStep,f
  1030                           
  1031                           ;main.c: 313: }
  1032  00C1  28D7               	goto	l3274
  1033  00C2                     l3264:	
  1034                           
  1035                           ;main.c: 314: else if(!isFinishedSmallTimer())
  1036  00C2  118A  2267  118A   	fcall	_isFinishedSmallTimer
  1037  00C5  3800               	iorlw	0
  1038  00C6  1D03               	skipz
  1039  00C7  28C0               	goto	l3262
  1040                           
  1041                           ;main.c: 315: {
  1042                           ;main.c: 316: if(getAdOriginalCh13Value() > 40)
  1043  00C8  118A  227B  118A   	fcall	_getAdOriginalCh13Value
  1044  00CB  3000               	movlw	0
  1045  00CC  0244               	subwf	?_getAdOriginalCh13Value+1,w
  1046  00CD  3029               	movlw	41
  1047  00CE  1903               	skipnz
  1048  00CF  0243               	subwf	?_getAdOriginalCh13Value,w
  1049  00D0  1C03               	skipc
  1050  00D1  28D7               	goto	l3274
  1051  00D2  3005               	movlw	5
  1052                           
  1053                           ;main.c: 317: {
  1054                           ;main.c: 318: ucWaitTime1S = 0;
  1055  00D3  01C1               	clrf	main@ucWaitTime1S
  1056                           
  1057                           ;main.c: 319: ucSmallTimerActionFlag = 0;
  1058  00D4  01C0               	clrf	main@ucSmallTimerActionFlag
  1059                           
  1060                           ;main.c: 320: ucSetSmallActionFlag = 0;
  1061  00D5  01BF               	clrf	main@ucSetSmallActionFlag
  1062                           
  1063                           ;main.c: 321: ampStep = PROCESS_AD_VALUE;
  1064  00D6  00B7               	movwf	main@ampStep
  1065  00D7                     l3274:	
  1066                           
  1067                           ;main.c: 327: }
  1068                           ;main.c: 329: if((ucSmallTimerActionFlag)&&(ucSetSmallActionFlag))
  1069  00D7  0840               	movf	main@ucSmallTimerActionFlag,w
  1070  00D8  1903               	btfsc	3,2
  1071  00D9  2915               	goto	l3156
  1072  00DA  083F               	movf	main@ucSetSmallActionFlag,w
  1073  00DB  1903               	btfsc	3,2
  1074  00DC  2915               	goto	l3156
  1075  00DD  3003               	movlw	3
  1076                           
  1077                           ;main.c: 330: {
  1078                           ;main.c: 331: ucWaitTimeO3s++;
  1079  00DE  0AC2               	incf	main@ucWaitTimeO3s,f
  1080                           
  1081                           ;main.c: 332: if(ucWaitTimeO3s >= 3)
  1082  00DF  0242               	subwf	main@ucWaitTimeO3s,w
  1083  00E0  1C03               	skipc
  1084  00E1  2915               	goto	l3156
  1085  00E2  3019               	movlw	25
  1086                           
  1087                           ;main.c: 333: {
  1088                           ;main.c: 334: ucWaitTimeO3s = 0;
  1089  00E3  01C2               	clrf	main@ucWaitTimeO3s
  1090                           
  1091                           ;main.c: 335: ucSetSmallActionFlag = 0;
  1092  00E4  01BF               	clrf	main@ucSetSmallActionFlag
  1093                           
  1094                           ;main.c: 336: PA0 = 1;
  1095  00E5  1405               	bsf	5,0
  1096                           
  1097                           ;main.c: 337: PA1 = 0;
  1098  00E6  1085               	bcf	5,1
  1099                           
  1100                           ;main.c: 338: setDAC0_ChannelValue(25);
  1101  00E7  118A  228A  118A   	fcall	_setDAC0_ChannelValue
  1102  00EA  2915               	goto	l3156
  1103  00EB                     l3292:	
  1104  00EB  0838               	movf	main@tDA_timer,w
  1105                           
  1106                           ; Switch size 1, requested type "space"
  1107                           ; Number of cases is 2, Range of values is 0 to 1
  1108                           ; switch strategies available:
  1109                           ; Name         Instructions Cycles
  1110                           ; simple_byte            7     4 (average)
  1111                           ; direct_byte           11     7 (fixed)
  1112                           ; jumptable            260     6 (fixed)
  1113                           ; rangetable             6     6 (fixed)
  1114                           ; spacedrange           10     9 (fixed)
  1115                           ; locatedrange           2     3 (fixed)
  1116                           ;	Chosen strategy is simple_byte
  1117  00EC  3A00               	xorlw	0	; case 0
  1118  00ED  1903               	skipnz
  1119  00EE  28AF               	goto	l3252
  1120  00EF  3A01               	xorlw	1	; case 1
  1121  00F0  1903               	skipnz
  1122  00F1  28B8               	goto	l3258
  1123  00F2  2930               	goto	l680
  1124  00F3                     l729:	
  1125                           ;main.c: 351: }
  1126                           ;main.c: 353: case SET_TIME_BE_FINISHED:
  1127                           
  1128  00F3  3019               	movlw	25
  1129                           
  1130                           ;main.c: 354: {
  1131                           ;main.c: 355: PA2 = 1;
  1132  00F4  1505               	bsf	5,2
  1133                           
  1134                           ;main.c: 356: PA0 = 0;
  1135  00F5  1005               	bcf	5,0
  1136                           
  1137                           ;main.c: 357: PA1 = 0;
  1138  00F6  1085               	bcf	5,1
  1139                           
  1140                           ;main.c: 358: PA3 = 0;
  1141  00F7  1185               	bcf	5,3
  1142                           
  1143                           ;main.c: 359: ucWaitTime1S = 0;
  1144  00F8  01C1               	clrf	main@ucWaitTime1S
  1145                           
  1146                           ;main.c: 360: ucSmallTimerActionFlag = 0;
  1147  00F9  01C0               	clrf	main@ucSmallTimerActionFlag
  1148                           
  1149                           ;main.c: 361: ucSetSmallActionFlag = 0;
  1150  00FA  01BF               	clrf	main@ucSetSmallActionFlag
  1151                           
  1152                           ;main.c: 362: setDAC0_ChannelValue(25);
  1153  00FB  118A  228A  118A   	fcall	_setDAC0_ChannelValue
  1154  00FE  283F               	goto	l3172
  1155  00FF                     l730:	
  1156                           ;main.c: 365: }
  1157                           ;main.c: 367: case CHECKING_PULL_OUT_BATTERY:
  1158                           
  1159                           
  1160                           ;main.c: 368: {
  1161                           ;main.c: 369: static unsigned char ucCheckBatteryCnt = 0;
  1162                           ;main.c: 370: if(PB2)
  1163  00FF  1D06               	btfss	6,2
  1164  0100  2903               	goto	l3302
  1165                           
  1166                           ;main.c: 371: ucCheckBatteryCnt++;
  1167  0101  0ABA               	incf	main@ucCheckBatteryCnt,f
  1168  0102  2904               	goto	l3304
  1169  0103                     l3302:	
  1170                           
  1171                           ;main.c: 372: else
  1172                           ;main.c: 373: ucCheckBatteryCnt = 0;
  1173  0103  01BA               	clrf	main@ucCheckBatteryCnt
  1174  0104                     l3304:	
  1175                           
  1176                           ;main.c: 375: if(ucCheckBatteryCnt > 2)
  1177  0104  3003               	movlw	3
  1178  0105  023A               	subwf	main@ucCheckBatteryCnt,w
  1179  0106  1C03               	skipc
  1180  0107  2915               	goto	l3156
  1181                           
  1182                           ;main.c: 376: {
  1183                           ;main.c: 377: ucCheckBatteryCnt = 0;
  1184  0108  01BA               	clrf	main@ucCheckBatteryCnt
  1185  0109  283F               	goto	l3172
  1186  010A                     l736:	
  1187                           ;main.c: 381: }
  1188                           ;main.c: 383: case CHECKING_INSTALLED_BATTERY:
  1189                           
  1190                           
  1191                           ;main.c: 384: {
  1192                           ;main.c: 385: static unsigned char ucInstalledBatteryCnt = 0;
  1193                           ;main.c: 386: if(!PB2)
  1194  010A  1906               	btfsc	6,2
  1195  010B  290E               	goto	l3312
  1196                           
  1197                           ;main.c: 387: ucInstalledBatteryCnt++;
  1198  010C  0ABE               	incf	main@ucInstalledBatteryCnt,f
  1199  010D  290F               	goto	l3314
  1200  010E                     l3312:	
  1201                           
  1202                           ;main.c: 388: else
  1203                           ;main.c: 389: ucInstalledBatteryCnt = 0;
  1204  010E  01BE               	clrf	main@ucInstalledBatteryCnt
  1205  010F                     l3314:	
  1206                           
  1207                           ;main.c: 391: if(ucInstalledBatteryCnt > 10)
  1208  010F  300B               	movlw	11
  1209  0110  023E               	subwf	main@ucInstalledBatteryCnt,w
  1210  0111  1C03               	skipc
  1211  0112  2915               	goto	l3156
  1212                           
  1213                           ;main.c: 392: {
  1214                           ;main.c: 393: ucInstalledBatteryCnt = 0;
  1215  0113  01BE               	clrf	main@ucInstalledBatteryCnt
  1216                           
  1217                           ;main.c: 394: ampStep = SENSE_PB2_INPUT_VOLTAGE;
  1218  0114  01B7               	clrf	main@ampStep
  1219  0115                     l3156:	
  1220  0115  0064               	clrwdt	;#
  1221                           
  1222                           ;main.c: 148: if(isPermitSampleTime())
  1223  0116  118A  2280  118A   	fcall	_isPermitSampleTime
  1224  0119  3A00               	xorlw	0
  1225  011A  1903               	skipnz
  1226  011B  2915               	goto	l3156
  1227                           
  1228                           ;main.c: 149: {
  1229                           ;main.c: 150: clrSampeTime();
  1230  011C  118A  2297  118A   	fcall	_clrSampeTime
  1231                           
  1232                           ;main.c: 151: process_AD_Converter_Value();
  1233  011F  118A  2131  118A   	fcall	_process_AD_Converter_Value
  1234  0122  1283               	bcf	3,5	;RP0=0, select bank0
  1235  0123  1303               	bcf	3,6	;RP1=0, select bank0
  1236  0124  0837               	movf	main@ampStep,w
  1237                           
  1238                           ; Switch size 1, requested type "space"
  1239                           ; Number of cases is 10, Range of values is 0 to 9
  1240                           ; switch strategies available:
  1241                           ; Name         Instructions Cycles
  1242                           ; direct_byte           27     7 (fixed)
  1243                           ; simple_byte           31    16 (average)
  1244                           ; jumptable            260     6 (fixed)
  1245                           ; rangetable            14     6 (fixed)
  1246                           ; spacedrange           26     9 (fixed)
  1247                           ; locatedrange          10     3 (fixed)
  1248                           ;	Chosen strategy is direct_byte
  1249  0125  0084               	movwf	4
  1250  0126  300A               	movlw	10
  1251  0127  0204               	subwf	4,w
  1252  0128  1803               	skipnc
  1253  0129  2915               	goto	l3156
  1254  012A  3002               	movlw	high S3370
  1255  012B  008A               	movwf	10
  1256  012C  1003               	clrc
  1257  012D  0D04               	rlf	4,w
  1258  012E  3E00               	addlw	low S3370
  1259  012F  0082               	movwf	2
  1260  0130                     l680:	
  1261  0130  2915               	goto	l3156
  1262  0131                     __end_of_main:	
  1263                           
  1264                           	psect	swtext1
  1265  0200                     __pswtext1:	
  1266  0200                     S3370:	
  1267  0200  118A  2836         	ljmp	l3164
  1268  0202  118A  2842         	ljmp	l685
  1269  0204  118A  284D         	ljmp	l691
  1270  0206  118A  284E         	ljmp	l693
  1271  0208  118A  2859         	ljmp	l699
  1272  020A  118A  285B         	ljmp	l3198
  1273  020C  118A  28EB         	ljmp	l3292
  1274  020E  118A  28F3         	ljmp	l729
  1275  0210  118A  28FF         	ljmp	l730
  1276  0212  118A  290A         	ljmp	l736
  1277                           
  1278                           	psect	text492
  1279  0131                     __ptext492:	
  1280 ;; =============== function _main ends ============
  1281                           
  1282                           
  1283 ;; *************** function _process_AD_Converter_Value *****************
  1284 ;; Defined at:
  1285 ;;		line 94 in file "C:\sw_dev\AK7030-OTP\common.c"
  1286 ;; Parameters:    Size  Location     Type
  1287 ;;		None
  1288 ;; Auto vars:     Size  Location     Type
  1289 ;;		None
  1290 ;; Return value:  Size  Location     Type
  1291 ;;		None               void
  1292 ;; Registers used:
  1293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: FFE9F/0
  1298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1299 ;;      Params:         0       0       0       0       0
  1300 ;;      Locals:         0       0       0       0       0
  1301 ;;      Temps:          0       0       0       0       0
  1302 ;;      Totals:         0       0       0       0       0
  1303 ;;Total ram usage:        0 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    4
  1306 ;; This function calls:
  1307 ;;		_getAD_ConvertFlag
  1308 ;;		_setAD_ConvertFlag
  1309 ;;		_AD_Sample
  1310 ;;		_adc_start
  1311 ;; This function is called by:
  1312 ;;		_main
  1313 ;; This function uses a non-reentrant model
  1314 ;;
  1315  0131                     _process_AD_Converter_Value:	
  1316                           
  1317                           ;common.c: 65: return adc_convert_flag;
  1318                           
  1319                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1320                           
  1321                           ;common.c: 95: if(getAD_ConvertFlag())
  1322                           
  1323                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1324  0131  0879               	movf	_adc_convert_flag,w
  1325  0132  3A00               	xorlw	0
  1326  0133  1903               	skipnz
  1327  0134  0008               	return
  1328                           
  1329                           ;common.c: 96: {
  1330                           ;common.c: 97: setAD_ConvertFlag(0);
  1331  0135  3000               	movlw	0
  1332  0136  213D  118A         	fcall	_setAD_ConvertFlag
  1333                           
  1334                           ;common.c: 98: AD_Sample();
  1335  0138  2145  118A         	fcall	_AD_Sample
  1336                           
  1337                           ;common.c: 100: adc_start();
  1338  013A  2942               	ljmp	l2990
  1339  013B                     __end_of_process_AD_Converter_Value:	
  1340  013B                     __ptext496:	
  1341 ;; =============== function _setAD_ConvertFlag ends ============
  1342                           
  1343                           
  1344 ;; *************** function _getAD_ConvertFlag *****************
  1345 ;; Defined at:
  1346 ;;		line 64 in file "C:\sw_dev\AK7030-OTP\common.c"
  1347 ;; Parameters:    Size  Location     Type
  1348 ;;		None
  1349 ;; Auto vars:     Size  Location     Type
  1350 ;;		None
  1351 ;; Return value:  Size  Location     Type
  1352 ;;                  1    wreg      unsigned char 
  1353 ;; Registers used:
  1354 ;;		wreg
  1355 ;; Tracked objects:
  1356 ;;		On entry : 0/0
  1357 ;;		On exit  : 0/0
  1358 ;;		Unchanged: FFFFF/0
  1359 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1360 ;;      Params:         0       0       0       0       0
  1361 ;;      Locals:         0       0       0       0       0
  1362 ;;      Temps:          0       0       0       0       0
  1363 ;;      Totals:         0       0       0       0       0
  1364 ;;Total ram usage:        0 bytes
  1365 ;; Hardware stack levels used:    1
  1366 ;; Hardware stack levels required when called:    2
  1367 ;; This function calls:
  1368 ;;		Nothing
  1369 ;; This function is called by:
  1370 ;;		_process_AD_Converter_Value
  1371 ;; This function uses a non-reentrant model
  1372 ;;
  1373  013B                     _getAD_ConvertFlag:	
  1374                           
  1375                           ;common.c: 65: return adc_convert_flag;
  1376                           
  1377                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1378  013B  0879               	movf	_adc_convert_flag,w
  1379  013C  0008               	return
  1380  013D                     __end_of_getAD_ConvertFlag:	
  1381  013D                     __ptext495:	
  1382 ;; =============== function _getAdOriginalValue ends ============
  1383                           
  1384                           
  1385 ;; *************** function _setAD_ConvertFlag *****************
  1386 ;; Defined at:
  1387 ;;		line 70 in file "C:\sw_dev\AK7030-OTP\common.c"
  1388 ;; Parameters:    Size  Location     Type
  1389 ;;  flag            1    wreg     unsigned char 
  1390 ;; Auto vars:     Size  Location     Type
  1391 ;;  flag            1    0[BANK0 ] unsigned char 
  1392 ;; Return value:  Size  Location     Type
  1393 ;;		None               void
  1394 ;; Registers used:
  1395 ;;		wreg
  1396 ;; Tracked objects:
  1397 ;;		On entry : 0/0
  1398 ;;		On exit  : 60/0
  1399 ;;		Unchanged: FFF9F/0
  1400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1401 ;;      Params:         0       0       0       0       0
  1402 ;;      Locals:         0       1       0       0       0
  1403 ;;      Temps:          0       0       0       0       0
  1404 ;;      Totals:         0       1       0       0       0
  1405 ;;Total ram usage:        1 bytes
  1406 ;; Hardware stack levels used:    1
  1407 ;; Hardware stack levels required when called:    2
  1408 ;; This function calls:
  1409 ;;		Nothing
  1410 ;; This function is called by:
  1411 ;;		_process_AD_Converter_Value
  1412 ;; This function uses a non-reentrant model
  1413 ;;
  1414  013D                     _setAD_ConvertFlag:	
  1415                           
  1416                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1417                           ;setAD_ConvertFlag@flag stored from wreg
  1418  013D  1283               	bcf	3,5	;RP0=0, select bank0
  1419  013E  1303               	bcf	3,6	;RP1=0, select bank0
  1420  013F  00C3               	movwf	setAD_ConvertFlag@flag
  1421                           
  1422                           ;common.c: 71: adc_convert_flag = flag;
  1423  0140  00F9               	movwf	_adc_convert_flag
  1424  0141  0008               	return
  1425  0142                     __end_of_setAD_ConvertFlag:	
  1426  0142                     __ptext507:	
  1427 ;; =============== function _isPermitSampleTime ends ============
  1428                           
  1429                           
  1430 ;; *************** function _adc_start *****************
  1431 ;; Defined at:
  1432 ;;		line 99 in file "C:\sw_dev\AK7030-OTP\periph.c"
  1433 ;; Parameters:    Size  Location     Type
  1434 ;;		None
  1435 ;; Auto vars:     Size  Location     Type
  1436 ;;		None
  1437 ;; Return value:  Size  Location     Type
  1438 ;;		None               void
  1439 ;; Registers used:
  1440 ;;		None
  1441 ;; Tracked objects:
  1442 ;;		On entry : 40/20
  1443 ;;		On exit  : 60/0
  1444 ;;		Unchanged: FFF9F/0
  1445 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1446 ;;      Params:         0       0       0       0       0
  1447 ;;      Locals:         0       0       0       0       0
  1448 ;;      Temps:          0       0       0       0       0
  1449 ;;      Totals:         0       0       0       0       0
  1450 ;;Total ram usage:        0 bytes
  1451 ;; Hardware stack levels used:    1
  1452 ;; Hardware stack levels required when called:    2
  1453 ;; This function calls:
  1454 ;;		Nothing
  1455 ;; This function is called by:
  1456 ;;		_main
  1457 ;;		_process_AD_Converter_Value
  1458 ;; This function uses a non-reentrant model
  1459 ;;
  1460  0142                     _adc_start:	
  1461  0142                     l2990:	
  1462                           ; Regs used in _adc_start: []
  1463                           
  1464                           
  1465                           ;periph.c: 100: GO=1;
  1466  0142  1283               	bcf	3,5	;RP0=0, select bank0
  1467  0143  149F               	bsf	31,1
  1468  0144  0008               	return
  1469  0145                     __end_of_adc_start:	
  1470  0145                     __ptext493:	
  1471 ;; =============== function _process_AD_Converter_Value ends ============
  1472                           
  1473                           
  1474 ;; *************** function _AD_Sample *****************
  1475 ;; Defined at:
  1476 ;;		line 114 in file "C:\sw_dev\AK7030-OTP\common.c"
  1477 ;; Parameters:    Size  Location     Type
  1478 ;;		None
  1479 ;; Auto vars:     Size  Location     Type
  1480 ;;  index           1    4[BANK0 ] unsigned char 
  1481 ;; Return value:  Size  Location     Type
  1482 ;;		None               void
  1483 ;; Registers used:
  1484 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1485 ;; Tracked objects:
  1486 ;;		On entry : 60/0
  1487 ;;		On exit  : 60/0
  1488 ;;		Unchanged: FFE9F/0
  1489 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1490 ;;      Params:         0       0       0       0       0
  1491 ;;      Locals:         0       1       0       0       0
  1492 ;;      Temps:          0       2       0       0       0
  1493 ;;      Totals:         0       3       0       0       0
  1494 ;;Total ram usage:        3 bytes
  1495 ;; Hardware stack levels used:    1
  1496 ;; Hardware stack levels required when called:    3
  1497 ;; This function calls:
  1498 ;;		_getAdOriginalValue
  1499 ;; This function is called by:
  1500 ;;		_process_AD_Converter_Value
  1501 ;; This function uses a non-reentrant model
  1502 ;;
  1503  0145                     _AD_Sample:	
  1504                           
  1505                           ;common.c: 115: if(sampleTimes < 6)
  1506                           
  1507                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1508  0145  3006               	movlw	6
  1509  0146  0236               	subwf	_sampleTimes,w
  1510  0147  1803               	skipnc
  1511  0148  0008               	return
  1512                           
  1513                           ;common.c: 116: {
  1514                           ;common.c: 118: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1515  0149  219D  118A         	fcall	_getAdOriginalValue
  1516  014B  1003               	clrc
  1517  014C  0D36               	rlf	_sampleTimes,w
  1518  014D  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1519  014E  0084               	movwf	4
  1520  014F  0843               	movf	?_getAdOriginalValue,w
  1521  0150  1383               	bcf	3,7	;select IRP bank0
  1522  0151  0080               	movwf	0
  1523  0152  0A84               	incf	4,f
  1524  0153  0844               	movf	?_getAdOriginalValue+1,w
  1525  0154  0080               	movwf	0
  1526                           
  1527                           ;common.c: 120: if(sampleTimes == 0)
  1528  0155  08B6               	movf	_sampleTimes,f
  1529  0156  1D03               	skipz
  1530  0157  2960               	goto	l3098
  1531                           
  1532                           ;common.c: 121: {
  1533                           ;common.c: 122: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1534  0158  0821               	movf	_buffer_Sample_AD_Value+1,w
  1535  0159  00B1               	movwf	_multiFilterMaxValue+1
  1536  015A  0820               	movf	_buffer_Sample_AD_Value,w
  1537  015B  00B0               	movwf	_multiFilterMaxValue
  1538                           
  1539                           ;common.c: 123: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1540  015C  0821               	movf	_buffer_Sample_AD_Value+1,w
  1541  015D  00B3               	movwf	_multiFilterMinValue+1
  1542  015E  0820               	movf	_buffer_Sample_AD_Value,w
  1543  015F  00B2               	movwf	_multiFilterMinValue
  1544  0160                     l3098:	
  1545                           
  1546                           ;common.c: 124: }
  1547                           ;common.c: 126: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1548  0160  21A2  118A         	fcall	PL2	;call to abstracted procedure
  1549  0162  0231               	subwf	_multiFilterMaxValue+1,w
  1550  0163  1D03               	skipz
  1551  0164  2967               	goto	u585
  1552  0165  0845               	movf	??_AD_Sample,w
  1553  0166  0230               	subwf	_multiFilterMaxValue,w
  1554  0167                     u585:	
  1555  0167  1803               	skipnc
  1556  0168  2972               	goto	l1439
  1557                           
  1558                           ;common.c: 127: {
  1559                           ;common.c: 128: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1560  0169  1003               	clrc
  1561  016A  0D36               	rlf	_sampleTimes,w
  1562  016B  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1563  016C  0084               	movwf	4
  1564  016D  0800               	movf	0,w
  1565  016E  00B0               	movwf	_multiFilterMaxValue
  1566  016F  0A84               	incf	4,f
  1567  0170  0800               	movf	0,w
  1568  0171  00B1               	movwf	_multiFilterMaxValue+1
  1569  0172                     l1439:	
  1570                           
  1571                           ;common.c: 129: }
  1572                           ;common.c: 130: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1573  0172  21A2  118A         	fcall	PL2	;call to abstracted procedure
  1574  0174  0833               	movf	_multiFilterMinValue+1,w
  1575  0175  0246               	subwf	??_AD_Sample+1,w
  1576  0176  1D03               	skipz
  1577  0177  297A               	goto	u595
  1578  0178  0832               	movf	_multiFilterMinValue,w
  1579  0179  0245               	subwf	??_AD_Sample,w
  1580  017A                     u595:	
  1581  017A  1803               	skipnc
  1582  017B  2985               	goto	l3104
  1583                           
  1584                           ;common.c: 131: {
  1585                           ;common.c: 132: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1586  017C  1003               	clrc
  1587  017D  0D36               	rlf	_sampleTimes,w
  1588  017E  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1589  017F  0084               	movwf	4
  1590  0180  0800               	movf	0,w
  1591  0181  00B2               	movwf	_multiFilterMinValue
  1592  0182  0A84               	incf	4,f
  1593  0183  0800               	movf	0,w
  1594  0184  00B3               	movwf	_multiFilterMinValue+1
  1595  0185                     l3104:	
  1596  0185  3006               	movlw	6
  1597                           
  1598                           ;common.c: 137: sampleTimes++;
  1599  0186  0AB6               	incf	_sampleTimes,f
  1600                           
  1601                           ;common.c: 139: if(sampleTimes >= 6)
  1602  0187  0236               	subwf	_sampleTimes,w
  1603  0188  1C03               	skipc
  1604  0189  0008               	return
  1605                           
  1606                           ;common.c: 140: {
  1607                           ;common.c: 141: sampleTimes = 0;
  1608  018A  01B6               	clrf	_sampleTimes
  1609                           
  1610                           ;common.c: 144: {
  1611                           ;common.c: 146: sampleCH13Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1612  018B  0848               	movf	_sampleChannelSelect,w
  1613  018C  3A0D               	xorlw	13
  1614                           
  1615                           ;common.c: 147: sampleChannelSelect = 13;
  1616  018D  300D               	movlw	13
  1617  018E  00C8               	movwf	_sampleChannelSelect
  1618                           
  1619                           ;common.c: 158: }
  1620                           ;common.c: 160: for(unsigned char index = 0; index < 6;index++)
  1621                           
  1622                           ;common.c: 148: }
  1623  018F  01C7               	clrf	AD_Sample@index
  1624  0190                     l3126:	
  1625                           
  1626                           ;common.c: 161: buffer_Sample_AD_Value[index] = 0;
  1627  0190  1003               	clrc
  1628  0191  0D47               	rlf	AD_Sample@index,w
  1629  0192  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1630  0193  0084               	movwf	4
  1631  0194  3006               	movlw	6
  1632  0195  0180               	clrf	0
  1633  0196  0A84               	incf	4,f
  1634  0197  0180               	clrf	0
  1635  0198  0AC7               	incf	AD_Sample@index,f
  1636  0199  0247               	subwf	AD_Sample@index,w
  1637  019A  1803               	btfsc	3,0
  1638  019B  0008               	return
  1639  019C  2990               	goto	l3126
  1640  019D                     __end_of_AD_Sample:	
  1641  019D                     __ptext494:	
  1642 ;; =============== function _AD_Sample ends ============
  1643                           
  1644                           
  1645 ;; *************** function _getAdOriginalValue *****************
  1646 ;; Defined at:
  1647 ;;		line 76 in file "C:\sw_dev\AK7030-OTP\common.c"
  1648 ;; Parameters:    Size  Location     Type
  1649 ;;		None
  1650 ;; Auto vars:     Size  Location     Type
  1651 ;;		None
  1652 ;; Return value:  Size  Location     Type
  1653 ;;                  2    0[BANK0 ] unsigned int 
  1654 ;; Registers used:
  1655 ;;		wreg
  1656 ;; Tracked objects:
  1657 ;;		On entry : 60/0
  1658 ;;		On exit  : 60/0
  1659 ;;		Unchanged: FFF9F/0
  1660 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1661 ;;      Params:         0       2       0       0       0
  1662 ;;      Locals:         0       0       0       0       0
  1663 ;;      Temps:          0       0       0       0       0
  1664 ;;      Totals:         0       2       0       0       0
  1665 ;;Total ram usage:        2 bytes
  1666 ;; Hardware stack levels used:    1
  1667 ;; Hardware stack levels required when called:    2
  1668 ;; This function calls:
  1669 ;;		Nothing
  1670 ;; This function is called by:
  1671 ;;		_AD_Sample
  1672 ;; This function uses a non-reentrant model
  1673 ;;
  1674  019D                     _getAdOriginalValue:	
  1675                           
  1676                           ;common.c: 77: return adc_original_value;
  1677                           
  1678                           ; Regs used in _getAdOriginalValue: [wreg]
  1679  019D  082F               	movf	_adc_original_value+1,w
  1680  019E  00C4               	movwf	?_getAdOriginalValue+1
  1681  019F  082E               	movf	_adc_original_value,w
  1682  01A0  00C3               	movwf	?_getAdOriginalValue
  1683  01A1  0008               	return
  1684  01A2                     __end_of_getAdOriginalValue:	
  1685  01A2                     PL2:	
  1686  01A2  1003               	clrc
  1687  01A3  0D36               	rlf	_sampleTimes,w
  1688  01A4  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1689  01A5  0084               	movwf	4
  1690  01A6  0800               	movf	0,w
  1691  01A7  00C5               	movwf	??_AD_Sample
  1692  01A8  0A84               	incf	4,f
  1693  01A9  0800               	movf	0,w
  1694  01AA  00C6               	movwf	??_AD_Sample+1
  1695  01AB  0008               	return
  1696                           
  1697                           	psect	text497
  1698  0267                     __ptext497:	
  1699 ;; =============== function _getAD_ConvertFlag ends ============
  1700                           
  1701                           
  1702 ;; *************** function _isFinishedSmallTimer *****************
  1703 ;; Defined at:
  1704 ;;		line 226 in file "C:\sw_dev\AK7030-OTP\common.c"
  1705 ;; Parameters:    Size  Location     Type
  1706 ;;		None
  1707 ;; Auto vars:     Size  Location     Type
  1708 ;;		None
  1709 ;; Return value:  Size  Location     Type
  1710 ;;                  1    wreg      unsigned char 
  1711 ;; Registers used:
  1712 ;;		wreg, status,2, status,0
  1713 ;; Tracked objects:
  1714 ;;		On entry : 60/0
  1715 ;;		On exit  : 60/0
  1716 ;;		Unchanged: FFF9F/0
  1717 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1718 ;;      Params:         0       0       0       0       0
  1719 ;;      Locals:         0       0       0       0       0
  1720 ;;      Temps:          0       0       0       0       0
  1721 ;;      Totals:         0       0       0       0       0
  1722 ;;Total ram usage:        0 bytes
  1723 ;; Hardware stack levels used:    1
  1724 ;; Hardware stack levels required when called:    2
  1725 ;; This function calls:
  1726 ;;		Nothing
  1727 ;; This function is called by:
  1728 ;;		_main
  1729 ;; This function uses a non-reentrant model
  1730 ;;
  1731  0267                     _isFinishedSmallTimer:	
  1732                           
  1733                           ;common.c: 227: if(uiSmallTimer == 0)
  1734                           
  1735                           ; Regs used in _isFinishedSmallTimer: [wreg+status,2+status,0]
  1736  0267  0835               	movf	_uiSmallTimer+1,w
  1737  0268  0434               	iorwf	_uiSmallTimer,w
  1738  0269  1903               	btfsc	3,2
  1739                           
  1740                           ;common.c: 228: return 1;
  1741  026A  3401               	retlw	1
  1742                           
  1743                           ;common.c: 229: else
  1744                           ;common.c: 230: return 0;
  1745  026B  3400               	retlw	0
  1746  026C                     __end_of_isFinishedSmallTimer:	
  1747                           
  1748                           	psect	text498
  1749  026C                     __ptext498:	
  1750 ;; =============== function _isFinishedSmallTimer ends ============
  1751                           
  1752                           
  1753 ;; *************** function _isFinishedBigTimer *****************
  1754 ;; Defined at:
  1755 ;;		line 218 in file "C:\sw_dev\AK7030-OTP\common.c"
  1756 ;; Parameters:    Size  Location     Type
  1757 ;;		None
  1758 ;; Auto vars:     Size  Location     Type
  1759 ;;		None
  1760 ;; Return value:  Size  Location     Type
  1761 ;;                  1    wreg      unsigned char 
  1762 ;; Registers used:
  1763 ;;		wreg, status,2, status,0
  1764 ;; Tracked objects:
  1765 ;;		On entry : 60/0
  1766 ;;		On exit  : 60/0
  1767 ;;		Unchanged: FFF9F/0
  1768 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1769 ;;      Params:         0       0       0       0       0
  1770 ;;      Locals:         0       0       0       0       0
  1771 ;;      Temps:          0       0       0       0       0
  1772 ;;      Totals:         0       0       0       0       0
  1773 ;;Total ram usage:        0 bytes
  1774 ;; Hardware stack levels used:    1
  1775 ;; Hardware stack levels required when called:    2
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_main
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782  026C                     _isFinishedBigTimer:	
  1783                           
  1784                           ;common.c: 219: if(uiBigTimer == 0)
  1785                           
  1786                           ; Regs used in _isFinishedBigTimer: [wreg+status,2+status,0]
  1787  026C  0877               	movf	_uiBigTimer+1,w
  1788  026D  0476               	iorwf	_uiBigTimer,w
  1789  026E  1903               	btfsc	3,2
  1790                           
  1791                           ;common.c: 220: return 1;
  1792  026F  3401               	retlw	1
  1793                           
  1794                           ;common.c: 221: else
  1795                           ;common.c: 222: return 0;
  1796  0270  3400               	retlw	0
  1797  0271                     __end_of_isFinishedBigTimer:	
  1798                           
  1799                           	psect	text499
  1800  0271                     __ptext499:	
  1801 ;; =============== function _isFinishedBigTimer ends ============
  1802                           
  1803                           
  1804 ;; *************** function _startSmallTimer *****************
  1805 ;; Defined at:
  1806 ;;		line 208 in file "C:\sw_dev\AK7030-OTP\common.c"
  1807 ;; Parameters:    Size  Location     Type
  1808 ;;		None
  1809 ;; Auto vars:     Size  Location     Type
  1810 ;;		None
  1811 ;; Return value:  Size  Location     Type
  1812 ;;		None               void
  1813 ;; Registers used:
  1814 ;;		wreg
  1815 ;; Tracked objects:
  1816 ;;		On entry : 60/0
  1817 ;;		On exit  : 60/0
  1818 ;;		Unchanged: FFF9F/0
  1819 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1820 ;;      Params:         0       0       0       0       0
  1821 ;;      Locals:         0       0       0       0       0
  1822 ;;      Temps:          0       0       0       0       0
  1823 ;;      Totals:         0       0       0       0       0
  1824 ;;Total ram usage:        0 bytes
  1825 ;; Hardware stack levels used:    1
  1826 ;; Hardware stack levels required when called:    2
  1827 ;; This function calls:
  1828 ;;		Nothing
  1829 ;; This function is called by:
  1830 ;;		_main
  1831 ;; This function uses a non-reentrant model
  1832 ;;
  1833  0271                     _startSmallTimer:	
  1834                           
  1835                           ;common.c: 209: uiSmallTimer = 10800;
  1836                           
  1837                           ; Regs used in _startSmallTimer: [wreg]
  1838  0271  3030               	movlw	48
  1839  0272  00B4               	movwf	_uiSmallTimer
  1840  0273  302A               	movlw	42
  1841  0274  00B5               	movwf	_uiSmallTimer+1
  1842  0275  0008               	return
  1843  0276                     __end_of_startSmallTimer:	
  1844                           
  1845                           	psect	text500
  1846  0276                     __ptext500:	
  1847 ;; =============== function _startSmallTimer ends ============
  1848                           
  1849                           
  1850 ;; *************** function _startBigTimer *****************
  1851 ;; Defined at:
  1852 ;;		line 186 in file "C:\sw_dev\AK7030-OTP\common.c"
  1853 ;; Parameters:    Size  Location     Type
  1854 ;;		None
  1855 ;; Auto vars:     Size  Location     Type
  1856 ;;		None
  1857 ;; Return value:  Size  Location     Type
  1858 ;;		None               void
  1859 ;; Registers used:
  1860 ;;		wreg
  1861 ;; Tracked objects:
  1862 ;;		On entry : 60/0
  1863 ;;		On exit  : 60/0
  1864 ;;		Unchanged: FFF9F/0
  1865 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1866 ;;      Params:         0       0       0       0       0
  1867 ;;      Locals:         0       0       0       0       0
  1868 ;;      Temps:          0       0       0       0       0
  1869 ;;      Totals:         0       0       0       0       0
  1870 ;;Total ram usage:        0 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    2
  1873 ;; This function calls:
  1874 ;;		Nothing
  1875 ;; This function is called by:
  1876 ;;		_main
  1877 ;; This function uses a non-reentrant model
  1878 ;;
  1879  0276                     _startBigTimer:	
  1880                           
  1881                           ;common.c: 187: uiBigTimer = 34200;
  1882                           
  1883                           ; Regs used in _startBigTimer: [wreg]
  1884  0276  3098               	movlw	152
  1885  0277  00F6               	movwf	_uiBigTimer
  1886  0278  3085               	movlw	133
  1887  0279  00F7               	movwf	_uiBigTimer+1
  1888  027A  0008               	return
  1889  027B                     __end_of_startBigTimer:	
  1890                           
  1891                           	psect	text501
  1892  028A                     __ptext501:	
  1893 ;; =============== function _startBigTimer ends ============
  1894                           
  1895                           
  1896 ;; *************** function _setDAC0_ChannelValue *****************
  1897 ;; Defined at:
  1898 ;;		line 181 in file "C:\sw_dev\AK7030-OTP\common.c"
  1899 ;; Parameters:    Size  Location     Type
  1900 ;;  ucValue         1    wreg     unsigned char 
  1901 ;; Auto vars:     Size  Location     Type
  1902 ;;  ucValue         1    0[BANK0 ] unsigned char 
  1903 ;; Return value:  Size  Location     Type
  1904 ;;		None               void
  1905 ;; Registers used:
  1906 ;;		wreg
  1907 ;; Tracked objects:
  1908 ;;		On entry : 60/0
  1909 ;;		On exit  : 60/20
  1910 ;;		Unchanged: FFF9F/0
  1911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1912 ;;      Params:         0       0       0       0       0
  1913 ;;      Locals:         0       1       0       0       0
  1914 ;;      Temps:          0       0       0       0       0
  1915 ;;      Totals:         0       1       0       0       0
  1916 ;;Total ram usage:        1 bytes
  1917 ;; Hardware stack levels used:    1
  1918 ;; Hardware stack levels required when called:    2
  1919 ;; This function calls:
  1920 ;;		Nothing
  1921 ;; This function is called by:
  1922 ;;		_main
  1923 ;; This function uses a non-reentrant model
  1924 ;;
  1925  028A                     _setDAC0_ChannelValue:	
  1926                           
  1927                           ; Regs used in _setDAC0_ChannelValue: [wreg]
  1928                           ;setDAC0_ChannelValue@ucValue stored from wreg
  1929  028A  00C3               	movwf	setDAC0_ChannelValue@ucValue
  1930                           
  1931                           ;common.c: 182: DACR0=ucValue;
  1932  028B  1683               	bsf	3,5	;RP0=1, select bank1
  1933  028C  0088               	movwf	8	;volatile
  1934  028D  0008               	return
  1935  028E                     __end_of_setDAC0_ChannelValue:	
  1936                           
  1937                           	psect	text502
  1938  027B                     __ptext502:	
  1939 ;; =============== function _setDAC0_ChannelValue ends ============
  1940                           
  1941                           
  1942 ;; *************** function _getAdOriginalCh13Value *****************
  1943 ;; Defined at:
  1944 ;;		line 87 in file "C:\sw_dev\AK7030-OTP\common.c"
  1945 ;; Parameters:    Size  Location     Type
  1946 ;;		None
  1947 ;; Auto vars:     Size  Location     Type
  1948 ;;		None
  1949 ;; Return value:  Size  Location     Type
  1950 ;;                  2    0[BANK0 ] unsigned int 
  1951 ;; Registers used:
  1952 ;;		wreg
  1953 ;; Tracked objects:
  1954 ;;		On entry : 60/0
  1955 ;;		On exit  : 60/0
  1956 ;;		Unchanged: FFF9F/0
  1957 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1958 ;;      Params:         0       2       0       0       0
  1959 ;;      Locals:         0       0       0       0       0
  1960 ;;      Temps:          0       0       0       0       0
  1961 ;;      Totals:         0       2       0       0       0
  1962 ;;Total ram usage:        2 bytes
  1963 ;; Hardware stack levels used:    1
  1964 ;; Hardware stack levels required when called:    2
  1965 ;; This function calls:
  1966 ;;		Nothing
  1967 ;; This function is called by:
  1968 ;;		_main
  1969 ;; This function uses a non-reentrant model
  1970 ;;
  1971  027B                     _getAdOriginalCh13Value:	
  1972                           
  1973                           ;common.c: 88: return adc_original_CH13_value;
  1974                           
  1975                           ; Regs used in _getAdOriginalCh13Value: [wreg]
  1976  027B  082D               	movf	_adc_original_CH13_value+1,w
  1977  027C  00C4               	movwf	?_getAdOriginalCh13Value+1
  1978  027D  082C               	movf	_adc_original_CH13_value,w
  1979  027E  00C3               	movwf	?_getAdOriginalCh13Value
  1980  027F  0008               	return
  1981  0280                     __end_of_getAdOriginalCh13Value:	
  1982                           
  1983                           	psect	text503
  1984  028E                     __ptext503:	
  1985 ;; =============== function _getAdOriginalCh13Value ends ============
  1986                           
  1987                           
  1988 ;; *************** function _clearSmallTimer *****************
  1989 ;; Defined at:
  1990 ;;		line 202 in file "C:\sw_dev\AK7030-OTP\common.c"
  1991 ;; Parameters:    Size  Location     Type
  1992 ;;		None
  1993 ;; Auto vars:     Size  Location     Type
  1994 ;;		None
  1995 ;; Return value:  Size  Location     Type
  1996 ;;		None               void
  1997 ;; Registers used:
  1998 ;;		status,2
  1999 ;; Tracked objects:
  2000 ;;		On entry : 60/0
  2001 ;;		On exit  : 60/0
  2002 ;;		Unchanged: FFF9F/0
  2003 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2004 ;;      Params:         0       0       0       0       0
  2005 ;;      Locals:         0       0       0       0       0
  2006 ;;      Temps:          0       0       0       0       0
  2007 ;;      Totals:         0       0       0       0       0
  2008 ;;Total ram usage:        0 bytes
  2009 ;; Hardware stack levels used:    1
  2010 ;; Hardware stack levels required when called:    2
  2011 ;; This function calls:
  2012 ;;		Nothing
  2013 ;; This function is called by:
  2014 ;;		_main
  2015 ;; This function uses a non-reentrant model
  2016 ;;
  2017  028E                     _clearSmallTimer:	
  2018                           
  2019                           ;common.c: 203: uiSmallTimer = 0;
  2020                           
  2021                           ; Regs used in _clearSmallTimer: [status,2]
  2022  028E  01B4               	clrf	_uiSmallTimer
  2023  028F  01B5               	clrf	_uiSmallTimer+1
  2024  0290  0008               	return
  2025  0291                     __end_of_clearSmallTimer:	
  2026                           
  2027                           	psect	text504
  2028  0291                     __ptext504:	
  2029 ;; =============== function _clearSmallTimer ends ============
  2030                           
  2031                           
  2032 ;; *************** function _clearBigTimer *****************
  2033 ;; Defined at:
  2034 ;;		line 196 in file "C:\sw_dev\AK7030-OTP\common.c"
  2035 ;; Parameters:    Size  Location     Type
  2036 ;;		None
  2037 ;; Auto vars:     Size  Location     Type
  2038 ;;		None
  2039 ;; Return value:  Size  Location     Type
  2040 ;;		None               void
  2041 ;; Registers used:
  2042 ;;		status,2
  2043 ;; Tracked objects:
  2044 ;;		On entry : 60/0
  2045 ;;		On exit  : 60/0
  2046 ;;		Unchanged: FFF9F/0
  2047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2048 ;;      Params:         0       0       0       0       0
  2049 ;;      Locals:         0       0       0       0       0
  2050 ;;      Temps:          0       0       0       0       0
  2051 ;;      Totals:         0       0       0       0       0
  2052 ;;Total ram usage:        0 bytes
  2053 ;; Hardware stack levels used:    1
  2054 ;; Hardware stack levels required when called:    2
  2055 ;; This function calls:
  2056 ;;		Nothing
  2057 ;; This function is called by:
  2058 ;;		_main
  2059 ;; This function uses a non-reentrant model
  2060 ;;
  2061  0291                     _clearBigTimer:	
  2062                           
  2063                           ;common.c: 197: uiBigTimer = 0;
  2064                           
  2065                           ; Regs used in _clearBigTimer: [status,2]
  2066  0291  01F6               	clrf	_uiBigTimer
  2067  0292  01F7               	clrf	_uiBigTimer+1
  2068  0293  0008               	return
  2069  0294                     __end_of_clearBigTimer:	
  2070                           
  2071                           	psect	text505
  2072  0297                     __ptext505:	
  2073 ;; =============== function _clearBigTimer ends ============
  2074                           
  2075                           
  2076 ;; *************** function _clrSampeTime *****************
  2077 ;; Defined at:
  2078 ;;		line 244 in file "C:\sw_dev\AK7030-OTP\common.c"
  2079 ;; Parameters:    Size  Location     Type
  2080 ;;		None
  2081 ;; Auto vars:     Size  Location     Type
  2082 ;;		None
  2083 ;; Return value:  Size  Location     Type
  2084 ;;		None               void
  2085 ;; Registers used:
  2086 ;;		status,2
  2087 ;; Tracked objects:
  2088 ;;		On entry : 0/0
  2089 ;;		On exit  : 0/0
  2090 ;;		Unchanged: FFFFF/0
  2091 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2092 ;;      Params:         0       0       0       0       0
  2093 ;;      Locals:         0       0       0       0       0
  2094 ;;      Temps:          0       0       0       0       0
  2095 ;;      Totals:         0       0       0       0       0
  2096 ;;Total ram usage:        0 bytes
  2097 ;; Hardware stack levels used:    1
  2098 ;; Hardware stack levels required when called:    2
  2099 ;; This function calls:
  2100 ;;		Nothing
  2101 ;; This function is called by:
  2102 ;;		_main
  2103 ;; This function uses a non-reentrant model
  2104 ;;
  2105  0297                     _clrSampeTime:	
  2106                           
  2107                           ;common.c: 245: timer.timer10msStopWatch = 0;
  2108                           
  2109                           ; Regs used in _clrSampeTime: [status,2]
  2110  0297  01FA               	clrf	_timer
  2111  0298  0008               	return
  2112  0299                     __end_of_clrSampeTime:	
  2113                           
  2114                           	psect	text506
  2115  0280                     __ptext506:	
  2116 ;; =============== function _clrSampeTime ends ============
  2117                           
  2118                           
  2119 ;; *************** function _isPermitSampleTime *****************
  2120 ;; Defined at:
  2121 ;;		line 234 in file "C:\sw_dev\AK7030-OTP\common.c"
  2122 ;; Parameters:    Size  Location     Type
  2123 ;;		None
  2124 ;; Auto vars:     Size  Location     Type
  2125 ;;		None
  2126 ;; Return value:  Size  Location     Type
  2127 ;;                  1    wreg      unsigned char 
  2128 ;; Registers used:
  2129 ;;		wreg
  2130 ;; Tracked objects:
  2131 ;;		On entry : 0/0
  2132 ;;		On exit  : 0/0
  2133 ;;		Unchanged: FFFFF/0
  2134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2135 ;;      Params:         0       0       0       0       0
  2136 ;;      Locals:         0       0       0       0       0
  2137 ;;      Temps:          0       0       0       0       0
  2138 ;;      Totals:         0       0       0       0       0
  2139 ;;Total ram usage:        0 bytes
  2140 ;; Hardware stack levels used:    1
  2141 ;; Hardware stack levels required when called:    2
  2142 ;; This function calls:
  2143 ;;		Nothing
  2144 ;; This function is called by:
  2145 ;;		_main
  2146 ;; This function uses a non-reentrant model
  2147 ;;
  2148  0280                     _isPermitSampleTime:	
  2149                           
  2150                           ;common.c: 235: if(timer.timer10msStopWatch > 10)
  2151                           
  2152                           ; Regs used in _isPermitSampleTime: [wreg]
  2153  0280  300B               	movlw	11
  2154  0281  027A               	subwf	_timer,w
  2155  0282  1803               	btfsc	3,0
  2156                           
  2157                           ;common.c: 236: {
  2158                           ;common.c: 237: return 1;
  2159  0283  3401               	retlw	1
  2160                           
  2161                           ;common.c: 239: else
  2162                           ;common.c: 240: return 0;
  2163  0284  3400               	retlw	0
  2164  0285                     __end_of_isPermitSampleTime:	
  2165                           
  2166                           	psect	text508
  2167  024E                     __ptext508:	
  2168 ;; =============== function _adc_start ends ============
  2169                           
  2170                           
  2171 ;; *************** function _op2_init *****************
  2172 ;; Defined at:
  2173 ;;		line 45 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2174 ;; Parameters:    Size  Location     Type
  2175 ;;		None
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;		None
  2178 ;; Return value:  Size  Location     Type
  2179 ;;		None               void
  2180 ;; Registers used:
  2181 ;;		wreg, status,2
  2182 ;; Tracked objects:
  2183 ;;		On entry : 17F/20
  2184 ;;		On exit  : 17F/20
  2185 ;;		Unchanged: FFE80/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2187 ;;      Params:         0       0       0       0       0
  2188 ;;      Locals:         0       0       0       0       0
  2189 ;;      Temps:          0       0       0       0       0
  2190 ;;      Totals:         0       0       0       0       0
  2191 ;;Total ram usage:        0 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    2
  2194 ;; This function calls:
  2195 ;;		Nothing
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200  024E                     _op2_init:	
  2201                           
  2202                           ;periph.c: 52: OP2CON1=0x00;
  2203                           
  2204                           ; Regs used in _op2_init: [wreg+status,2]
  2205  024E  019C               	clrf	28	;volatile
  2206                           
  2207                           ;periph.c: 54: OP2CON2=0xA0;
  2208  024F  30A0               	movlw	160
  2209  0250  009D               	movwf	29	;volatile
  2210                           
  2211                           ;periph.c: 55: OP2CON0=0x80;
  2212  0251  3080               	movlw	128
  2213  0252  009B               	movwf	27	;volatile
  2214                           
  2215                           ;periph.c: 58: TRISA7=0;
  2216  0253  1385               	bcf	5,7
  2217                           
  2218                           ;periph.c: 59: TRISB6=1;
  2219  0254  1706               	bsf	6,6
  2220                           
  2221                           ;periph.c: 60: TRISB7 = 1;
  2222  0255  1786               	bsf	6,7
  2223  0256  0008               	return
  2224  0257                     __end_of_op2_init:	
  2225                           
  2226                           	psect	text509
  2227  0238                     __ptext509:	
  2228 ;; =============== function _op2_init ends ============
  2229                           
  2230                           
  2231 ;; *************** function _op1_init *****************
  2232 ;; Defined at:
  2233 ;;		line 26 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2234 ;; Parameters:    Size  Location     Type
  2235 ;;		None
  2236 ;; Auto vars:     Size  Location     Type
  2237 ;;		None
  2238 ;; Return value:  Size  Location     Type
  2239 ;;		None               void
  2240 ;; Registers used:
  2241 ;;		wreg
  2242 ;; Tracked objects:
  2243 ;;		On entry : 17F/20
  2244 ;;		On exit  : 17F/20
  2245 ;;		Unchanged: FFE80/0
  2246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2247 ;;      Params:         0       0       0       0       0
  2248 ;;      Locals:         0       0       0       0       0
  2249 ;;      Temps:          0       0       0       0       0
  2250 ;;      Totals:         0       0       0       0       0
  2251 ;;Total ram usage:        0 bytes
  2252 ;; Hardware stack levels used:    1
  2253 ;; Hardware stack levels required when called:    2
  2254 ;; This function calls:
  2255 ;;		Nothing
  2256 ;; This function is called by:
  2257 ;;		_main
  2258 ;; This function uses a non-reentrant model
  2259 ;;
  2260  0238                     _op1_init:	
  2261                           
  2262                           ;periph.c: 33: OP1CON1=0x02;
  2263                           
  2264                           ; Regs used in _op1_init: [wreg]
  2265  0238  3002               	movlw	2
  2266  0239  1283               	bcf	3,5	;RP0=0, select bank0
  2267  023A  009C               	movwf	28	;volatile
  2268                           
  2269                           ;periph.c: 34: OP1CON2=0xA0;
  2270  023B  30A0               	movlw	160
  2271  023C  009D               	movwf	29	;volatile
  2272                           
  2273                           ;periph.c: 35: OP1CON0=0x80;
  2274  023D  3080               	movlw	128
  2275  023E  009B               	movwf	27	;volatile
  2276                           
  2277                           ;periph.c: 38: TRISB3=1;
  2278  023F  1683               	bsf	3,5	;RP0=1, select bank1
  2279  0240  1586               	bsf	6,3
  2280                           
  2281                           ;periph.c: 39: TRISB4=1;
  2282  0241  1606               	bsf	6,4
  2283                           
  2284                           ;periph.c: 40: TRISB5=0;
  2285  0242  1286               	bcf	6,5
  2286  0243  0008               	return
  2287  0244                     __end_of_op1_init:	
  2288                           
  2289                           	psect	text510
  2290  0285                     __ptext510:	
  2291 ;; =============== function _op1_init ends ============
  2292                           
  2293                           
  2294 ;; *************** function _dac_init *****************
  2295 ;; Defined at:
  2296 ;;		line 14 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2297 ;; Parameters:    Size  Location     Type
  2298 ;;		None
  2299 ;; Auto vars:     Size  Location     Type
  2300 ;;		None
  2301 ;; Return value:  Size  Location     Type
  2302 ;;		None               void
  2303 ;; Registers used:
  2304 ;;		wreg
  2305 ;; Tracked objects:
  2306 ;;		On entry : 17F/20
  2307 ;;		On exit  : 17F/20
  2308 ;;		Unchanged: FFE80/0
  2309 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2310 ;;      Params:         0       0       0       0       0
  2311 ;;      Locals:         0       0       0       0       0
  2312 ;;      Temps:          0       0       0       0       0
  2313 ;;      Totals:         0       0       0       0       0
  2314 ;;Total ram usage:        0 bytes
  2315 ;; Hardware stack levels used:    1
  2316 ;; Hardware stack levels required when called:    2
  2317 ;; This function calls:
  2318 ;;		Nothing
  2319 ;; This function is called by:
  2320 ;;		_main
  2321 ;; This function uses a non-reentrant model
  2322 ;;
  2323  0285                     _dac_init:	
  2324                           
  2325                           ;periph.c: 15: DACCON|=2;
  2326                           
  2327                           ; Regs used in _dac_init: [wreg]
  2328  0285  1487               	bsf	7,1	;volatile
  2329                           
  2330                           ;periph.c: 17: DACR0=0x19;
  2331  0286  3019               	movlw	25
  2332  0287  0088               	movwf	8	;volatile
  2333                           
  2334                           ;periph.c: 18: DACCON|=(1)<<2;
  2335  0288  1507               	bsf	7,2	;volatile
  2336  0289  0008               	return
  2337  028A                     __end_of_dac_init:	
  2338                           
  2339                           	psect	text511
  2340  0214                     __ptext511:	
  2341 ;; =============== function _dac_init ends ============
  2342                           
  2343                           
  2344 ;; *************** function _adc_test_init *****************
  2345 ;; Defined at:
  2346 ;;		line 85 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2347 ;; Parameters:    Size  Location     Type
  2348 ;;  channel         1    wreg     unsigned char 
  2349 ;;  ref             1    0[BANK0 ] unsigned char 
  2350 ;; Auto vars:     Size  Location     Type
  2351 ;;  channel         1    2[BANK0 ] unsigned char 
  2352 ;; Return value:  Size  Location     Type
  2353 ;;		None               void
  2354 ;; Registers used:
  2355 ;;		wreg, status,2, status,0
  2356 ;; Tracked objects:
  2357 ;;		On entry : 17F/0
  2358 ;;		On exit  : 17F/20
  2359 ;;		Unchanged: FFE80/0
  2360 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2361 ;;      Params:         0       1       0       0       0
  2362 ;;      Locals:         0       1       0       0       0
  2363 ;;      Temps:          0       1       0       0       0
  2364 ;;      Totals:         0       3       0       0       0
  2365 ;;Total ram usage:        3 bytes
  2366 ;; Hardware stack levels used:    1
  2367 ;; Hardware stack levels required when called:    2
  2368 ;; This function calls:
  2369 ;;		Nothing
  2370 ;; This function is called by:
  2371 ;;		_main
  2372 ;; This function uses a non-reentrant model
  2373 ;;
  2374  0214                     _adc_test_init:	
  2375                           
  2376                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2377                           ;adc_test_init@channel stored from wreg
  2378  0214  00C5               	movwf	adc_test_init@channel
  2379                           
  2380                           ;periph.c: 86: ADCON0|=channel<<2;
  2381  0215  00C4               	movwf	??_adc_test_init
  2382  0216  1003               	clrc
  2383  0217  0DC4               	rlf	??_adc_test_init,f
  2384  0218  1003               	clrc
  2385  0219  0D44               	rlf	??_adc_test_init,w
  2386  021A  049F               	iorwf	31,f	;volatile
  2387                           
  2388                           ;periph.c: 87: ADCON1|=ref<<6;
  2389  021B  0843               	movf	adc_test_init@ref,w
  2390  021C  00C4               	movwf	??_adc_test_init
  2391  021D  0CC4               	rrf	??_adc_test_init,f
  2392  021E  0CC4               	rrf	??_adc_test_init,f
  2393  021F  0C44               	rrf	??_adc_test_init,w
  2394  0220  39C0               	andlw	192
  2395  0221  1683               	bsf	3,5	;RP0=1, select bank1
  2396  0222  049F               	iorwf	31,f	;volatile
  2397                           
  2398                           ;periph.c: 88: ADON=1;
  2399  0223  1283               	bcf	3,5	;RP0=0, select bank0
  2400  0224  141F               	bsf	31,0
  2401                           
  2402                           ;periph.c: 89: ADIE=1;
  2403  0225  1683               	bsf	3,5	;RP0=1, select bank1
  2404  0226  150D               	bsf	13,2
  2405  0227  0008               	return
  2406  0228                     __end_of_adc_test_init:	
  2407                           
  2408                           	psect	text512
  2409  0294                     __ptext512:	
  2410 ;; =============== function _adc_test_init ends ============
  2411                           
  2412                           
  2413 ;; *************** function _timer1_interrupt_config *****************
  2414 ;; Defined at:
  2415 ;;		line 56 in file "C:\sw_dev\AK7030-OTP\common.c"
  2416 ;; Parameters:    Size  Location     Type
  2417 ;;		None
  2418 ;; Auto vars:     Size  Location     Type
  2419 ;;		None
  2420 ;; Return value:  Size  Location     Type
  2421 ;;		None               void
  2422 ;; Registers used:
  2423 ;;		None
  2424 ;; Tracked objects:
  2425 ;;		On entry : 17F/20
  2426 ;;		On exit  : 17F/20
  2427 ;;		Unchanged: FFE80/0
  2428 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2429 ;;      Params:         0       0       0       0       0
  2430 ;;      Locals:         0       0       0       0       0
  2431 ;;      Temps:          0       0       0       0       0
  2432 ;;      Totals:         0       0       0       0       0
  2433 ;;Total ram usage:        0 bytes
  2434 ;; Hardware stack levels used:    1
  2435 ;; Hardware stack levels required when called:    2
  2436 ;; This function calls:
  2437 ;;		Nothing
  2438 ;; This function is called by:
  2439 ;;		_main
  2440 ;; This function uses a non-reentrant model
  2441 ;;
  2442  0294                     _timer1_interrupt_config:	
  2443                           
  2444                           ;common.c: 57: GIE = 1;
  2445                           
  2446                           ; Regs used in _timer1_interrupt_config: []
  2447  0294  178B               	bsf	11,7
  2448                           
  2449                           ;common.c: 58: PEIE = 1;
  2450  0295  170B               	bsf	11,6
  2451  0296  0008               	return
  2452  0297                     __end_of_timer1_interrupt_config:	
  2453                           
  2454                           	psect	text513
  2455  0244                     __ptext513:	
  2456 ;; =============== function _timer1_interrupt_config ends ============
  2457                           
  2458                           
  2459 ;; *************** function _timer1_config *****************
  2460 ;; Defined at:
  2461 ;;		line 44 in file "C:\sw_dev\AK7030-OTP\common.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;		None               void
  2468 ;; Registers used:
  2469 ;;		wreg
  2470 ;; Tracked objects:
  2471 ;;		On entry : 17F/40
  2472 ;;		On exit  : 17F/20
  2473 ;;		Unchanged: FFE80/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2475 ;;      Params:         0       0       0       0       0
  2476 ;;      Locals:         0       0       0       0       0
  2477 ;;      Temps:          0       0       0       0       0
  2478 ;;      Totals:         0       0       0       0       0
  2479 ;;Total ram usage:        0 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    2
  2482 ;; This function calls:
  2483 ;;		Nothing
  2484 ;; This function is called by:
  2485 ;;		_main
  2486 ;; This function uses a non-reentrant model
  2487 ;;
  2488  0244                     _timer1_config:	
  2489                           
  2490                           ;common.c: 46: TMR1H=0xCF;
  2491                           
  2492                           ; Regs used in _timer1_config: [wreg]
  2493  0244  30CF               	movlw	207
  2494  0245  1303               	bcf	3,6	;RP1=0, select bank0
  2495  0246  008F               	movwf	15	;volatile
  2496                           
  2497                           ;common.c: 47: TMR1L=0x2C;
  2498  0247  302C               	movlw	44
  2499  0248  008E               	movwf	14	;volatile
  2500                           
  2501                           ;common.c: 48: T1CON=0xE1;
  2502  0249  30E1               	movlw	225
  2503  024A  0090               	movwf	16	;volatile
  2504                           
  2505                           ;common.c: 49: TMR1IE=1;
  2506  024B  1683               	bsf	3,5	;RP0=1, select bank1
  2507  024C  140C               	bsf	12,0
  2508  024D  0008               	return
  2509  024E                     __end_of_timer1_config:	
  2510                           
  2511                           	psect	text514
  2512  025F                     __ptext514:	
  2513 ;; =============== function _timer1_config ends ============
  2514                           
  2515                           
  2516 ;; *************** function _clock_config *****************
  2517 ;; Defined at:
  2518 ;;		line 36 in file "C:\sw_dev\AK7030-OTP\common.c"
  2519 ;; Parameters:    Size  Location     Type
  2520 ;;		None
  2521 ;; Auto vars:     Size  Location     Type
  2522 ;;		None
  2523 ;; Return value:  Size  Location     Type
  2524 ;;		None               void
  2525 ;; Registers used:
  2526 ;;		wreg, status,2
  2527 ;; Tracked objects:
  2528 ;;		On entry : 17F/20
  2529 ;;		On exit  : 17F/40
  2530 ;;		Unchanged: FFE80/0
  2531 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2532 ;;      Params:         0       0       0       0       0
  2533 ;;      Locals:         0       0       0       0       0
  2534 ;;      Temps:          0       0       0       0       0
  2535 ;;      Totals:         0       0       0       0       0
  2536 ;;Total ram usage:        0 bytes
  2537 ;; Hardware stack levels used:    1
  2538 ;; Hardware stack levels required when called:    2
  2539 ;; This function calls:
  2540 ;;		Nothing
  2541 ;; This function is called by:
  2542 ;;		_main
  2543 ;; This function uses a non-reentrant model
  2544 ;;
  2545  025F                     _clock_config:	
  2546                           
  2547                           ;common.c: 38: CLKPR = 0x80;
  2548                           
  2549                           ; Regs used in _clock_config: [wreg+status,2]
  2550  025F  3080               	movlw	128
  2551  0260  1283               	bcf	3,5	;RP0=0, select bank2
  2552  0261  1703               	bsf	3,6	;RP1=1, select bank2
  2553  0262  0088               	movwf	8	;volatile
  2554                           
  2555                           ;common.c: 39: CLKPR = 0x00;
  2556  0263  0188               	clrf	8	;volatile
  2557  0264                     l1406:	
  2558                           ;common.c: 40: while(CLKPCE);
  2559                           
  2560  0264  1F88               	btfss	8,7
  2561  0265  0008               	return
  2562  0266  2A64               	goto	l1406
  2563  0267                     __end_of_clock_config:	
  2564                           
  2565                           	psect	text515
  2566  01AC                     __ptext515:	
  2567 ;; =============== function _clock_config ends ============
  2568                           
  2569                           
  2570 ;; *************** function _ISR *****************
  2571 ;; Defined at:
  2572 ;;		line 249 in file "C:\sw_dev\AK7030-OTP\common.c"
  2573 ;; Parameters:    Size  Location     Type
  2574 ;;		None
  2575 ;; Auto vars:     Size  Location     Type
  2576 ;;		None
  2577 ;; Return value:  Size  Location     Type
  2578 ;;		None               void
  2579 ;; Registers used:
  2580 ;;		wreg, status,2, status,0, pclath, cstack
  2581 ;; Tracked objects:
  2582 ;;		On entry : 0/0
  2583 ;;		On exit  : 40/0
  2584 ;;		Unchanged: FFF9F/0
  2585 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2586 ;;      Params:         0       0       0       0       0
  2587 ;;      Locals:         0       0       0       0       0
  2588 ;;      Temps:          2       0       0       0       0
  2589 ;;      Totals:         2       0       0       0       0
  2590 ;;Total ram usage:        2 bytes
  2591 ;; Hardware stack levels used:    1
  2592 ;; Hardware stack levels required when called:    1
  2593 ;; This function calls:
  2594 ;;		i1_setAD_ConvertFlag
  2595 ;;		_adc_get
  2596 ;; This function is called by:
  2597 ;;		Interrupt level 1
  2598 ;; This function uses a non-reentrant model
  2599 ;;
  2600  01AC                     _ISR:	
  2601                           
  2602                           ;common.c: 250: static unsigned char ucTimer1sCnt = 0;
  2603                           ;common.c: 252: if(TMR1IF == 1)
  2604  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  2605  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  2606  01AE  1C0C               	btfss	12,0
  2607  01AF  29CC               	goto	i1l3070
  2608  01B0  3064               	movlw	100
  2609                           
  2610                           ;common.c: 253: {
  2611                           ;common.c: 254: TMR1IF = 0 ;
  2612  01B1  100C               	bcf	12,0
  2613                           
  2614                           ;common.c: 255: timer.timer10msStopWatch++;
  2615  01B2  0AFA               	incf	_timer,f
  2616                           
  2617                           ;common.c: 256: ucTimer1sCnt++;
  2618  01B3  0AF8               	incf	ISR@ucTimer1sCnt,f
  2619                           
  2620                           ;common.c: 258: if(ucTimer1sCnt >= 100)
  2621  01B4  0278               	subwf	ISR@ucTimer1sCnt,w
  2622  01B5  1C03               	skipc
  2623  01B6  29CC               	goto	i1l3070
  2624                           
  2625                           ;common.c: 259: {
  2626                           ;common.c: 260: ucTimer1sCnt = 0;
  2627  01B7  01F8               	clrf	ISR@ucTimer1sCnt
  2628                           
  2629                           ;common.c: 261: if(uiBigTimer > 0)
  2630  01B8  0877               	movf	_uiBigTimer+1,w
  2631  01B9  0476               	iorwf	_uiBigTimer,w
  2632  01BA  1903               	skipnz
  2633  01BB  29C2               	goto	i1l1494
  2634                           
  2635                           ;common.c: 262: uiBigTimer--;
  2636  01BC  3001               	movlw	1
  2637  01BD  02F6               	subwf	_uiBigTimer,f
  2638  01BE  3000               	movlw	0
  2639  01BF  1C03               	skipc
  2640  01C0  03F7               	decf	_uiBigTimer+1,f
  2641  01C1  02F7               	subwf	_uiBigTimer+1,f
  2642  01C2                     i1l1494:	
  2643                           
  2644                           ;common.c: 264: if(uiSmallTimer)
  2645  01C2  0835               	movf	_uiSmallTimer+1,w
  2646  01C3  0434               	iorwf	_uiSmallTimer,w
  2647  01C4  1903               	skipnz
  2648  01C5  29CC               	goto	i1l3070
  2649                           
  2650                           ;common.c: 265: uiSmallTimer--;
  2651  01C6  3001               	movlw	1
  2652  01C7  02B4               	subwf	_uiSmallTimer,f
  2653  01C8  3000               	movlw	0
  2654  01C9  1C03               	skipc
  2655  01CA  03B5               	decf	_uiSmallTimer+1,f
  2656  01CB  02B5               	subwf	_uiSmallTimer+1,f
  2657  01CC                     i1l3070:	
  2658                           
  2659                           ;common.c: 266: }
  2660                           ;common.c: 267: }
  2661                           ;common.c: 269: if(ADIF)
  2662  01CC  1D0D               	btfss	13,2
  2663  01CD  29E6               	goto	i1l1499
  2664  01CE  3001               	movlw	1
  2665                           
  2666                           ;common.c: 270: {
  2667                           ;common.c: 271: ADIF=0;
  2668  01CF  110D               	bcf	13,2
  2669                           
  2670                           ;common.c: 272: setAD_ConvertFlag(1);
  2671  01D0  21F8  118A         	fcall	i1_setAD_ConvertFlag
  2672                           
  2673                           ;common.c: 273: adc_original_value = adc_get();
  2674  01D2  21ED  118A         	fcall	_adc_get
  2675  01D4  0871               	movf	?_adc_get+1,w
  2676  01D5  1283               	bcf	3,5	;RP0=0, select bank0
  2677  01D6  00AF               	movwf	_adc_original_value+1
  2678  01D7  0870               	movf	?_adc_get,w
  2679  01D8  00AE               	movwf	_adc_original_value
  2680                           
  2681                           ;common.c: 274: if(sampleChannelSelect == 12)
  2682  01D9  0848               	movf	_sampleChannelSelect,w
  2683  01DA  3A0C               	xorlw	12
  2684  01DB  1D03               	skipz
  2685  01DC  29E0               	goto	i1l3082
  2686                           
  2687                           ;common.c: 275: adc_original_CH12_value = adc_get();
  2688  01DD  21ED  118A         	fcall	_adc_get
  2689  01DF  29E6               	goto	i1l1499
  2690  01E0                     i1l3082:	
  2691                           
  2692                           ;common.c: 276: else
  2693                           ;common.c: 277: adc_original_CH13_value = adc_get();
  2694  01E0  21ED               	fcall	_adc_get
  2695  01E1  0871               	movf	?_adc_get+1,w
  2696  01E2  1283               	bcf	3,5	;RP0=0, select bank0
  2697  01E3  00AD               	movwf	_adc_original_CH13_value+1
  2698  01E4  0870               	movf	?_adc_get,w
  2699  01E5  00AC               	movwf	_adc_original_CH13_value
  2700  01E6                     i1l1499:	
  2701  01E6  0875               	movf	??_ISR+1,w
  2702  01E7  008A               	movwf	10
  2703  01E8  0E74               	swapf	??_ISR^(0+-128),w
  2704  01E9  0083               	movwf	3
  2705  01EA  0EFE               	swapf	126,f
  2706  01EB  0E7E               	swapf	126,w
  2707  01EC  0009               	retfie
  2708  01ED                     __end_of_ISR:	
  2709  01ED                     __ptext517:	
  2710 ;; =============== function i1_setAD_ConvertFlag ends ============
  2711                           
  2712                           
  2713 ;; *************** function _adc_get *****************
  2714 ;; Defined at:
  2715 ;;		line 104 in file "C:\sw_dev\AK7030-OTP\periph.c"
  2716 ;; Parameters:    Size  Location     Type
  2717 ;;		None
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  val             2    2[COMMON] unsigned int 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  2    0[COMMON] unsigned int 
  2722 ;; Registers used:
  2723 ;;		wreg
  2724 ;; Tracked objects:
  2725 ;;		On entry : 60/0
  2726 ;;		On exit  : 60/20
  2727 ;;		Unchanged: FFF9F/0
  2728 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2729 ;;      Params:         2       0       0       0       0
  2730 ;;      Locals:         2       0       0       0       0
  2731 ;;      Temps:          0       0       0       0       0
  2732 ;;      Totals:         4       0       0       0       0
  2733 ;;Total ram usage:        4 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; This function calls:
  2736 ;;		Nothing
  2737 ;; This function is called by:
  2738 ;;		_ISR
  2739 ;; This function uses a non-reentrant model
  2740 ;;
  2741  01ED                     _adc_get:	
  2742                           
  2743                           ;periph.c: 105: unsigned int val;
  2744                           ;periph.c: 106: val = (ADRESH<<8) | ADRESL;
  2745                           
  2746                           ; Regs used in _adc_get: [wreg]
  2747  01ED  081E               	movf	30,w	;volatile
  2748  01EE  00F3               	movwf	adc_get@val+1
  2749  01EF  01F2               	clrf	adc_get@val
  2750  01F0  1683               	bsf	3,5	;RP0=1, select bank1
  2751  01F1  081E               	movf	30,w	;volatile
  2752  01F2  04F2               	iorwf	adc_get@val,f
  2753                           
  2754                           ;periph.c: 107: return val;
  2755  01F3  0873               	movf	adc_get@val+1,w
  2756  01F4  00F1               	movwf	?_adc_get+1
  2757  01F5  0872               	movf	adc_get@val,w
  2758  01F6  00F0               	movwf	?_adc_get
  2759  01F7  0008               	return
  2760  01F8                     __end_of_adc_get:	
  2761  01F8                     __ptext516:	
  2762 ;; =============== function _ISR ends ============
  2763                           
  2764                           
  2765 ;; *************** function i1_setAD_ConvertFlag *****************
  2766 ;; Defined at:
  2767 ;;		line 70 in file "C:\sw_dev\AK7030-OTP\common.c"
  2768 ;; Parameters:    Size  Location     Type
  2769 ;;  setAD_Conver    1    wreg     unsigned char 
  2770 ;; Auto vars:     Size  Location     Type
  2771 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2772 ;; Return value:  Size  Location     Type
  2773 ;;		None               void
  2774 ;; Registers used:
  2775 ;;		wreg
  2776 ;; Tracked objects:
  2777 ;;		On entry : 60/0
  2778 ;;		On exit  : 60/0
  2779 ;;		Unchanged: FFF9F/0
  2780 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2781 ;;      Params:         0       0       0       0       0
  2782 ;;      Locals:         1       0       0       0       0
  2783 ;;      Temps:          0       0       0       0       0
  2784 ;;      Totals:         1       0       0       0       0
  2785 ;;Total ram usage:        1 bytes
  2786 ;; Hardware stack levels used:    1
  2787 ;; This function calls:
  2788 ;;		Nothing
  2789 ;; This function is called by:
  2790 ;;		_ISR
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793  01F8                     i1_setAD_ConvertFlag:	
  2794                           
  2795                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2796                           ;i1setAD_ConvertFlag@flag stored from wreg
  2797  01F8  00F0               	movwf	i1setAD_ConvertFlag@flag
  2798                           
  2799                           ;common.c: 71: adc_convert_flag = flag;
  2800  01F9  00F9               	movwf	_adc_convert_flag
  2801  01FA  0008               	return
  2802  01FB                     __end_ofi1_setAD_ConvertFlag:	
  2803                           
  2804                           	psect	intentry
  2805  0004                     __pintentry:	
  2806                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2807                           
  2808  0004                     interrupt_function:	
  2809  007E                     saved_w	set	btemp
  2810  0004  00FE               	movwf	btemp
  2811  0005  0E03               	swapf	3,w
  2812  0006  00F4               	movwf	??_ISR
  2813  0007  080A               	movf	10,w
  2814  0008  00F5               	movwf	??_ISR+1
  2815  0009  118A  29AC         	ljmp	_ISR
  2816                           
  2817                           	psect	text518
  2818  0000                     __ptext518:	
  2819 ;; =============== function _adc_get ends ============
  2820                           
  2821  007E                     btemp	set	126	;btemp
  2822  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Fri Dec 21 15:30:14 2018

                     ??_clock_config 0043                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 0043             ?_timer1_interrupt_config 0070  
                                l710 00AD                                  l730 00FF  
                                l736 010A                                  l680 0130  
                                l729 00F3                                  l691 004D  
                                l693 004E                                  l685 0042  
                                l699 0059                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PA2 002A                                  _PA3 002B  
                                _PB2 0032                                  _ISR 01AC  
                                u585 0167                                  u595 017A  
                                fsr0 0004                                  indf 0000  
           main@ucBigTimerActionFlag 0039                        _startBigTimer 0276  
                               S3370 0200                          main@ampStep 0037  
                               ?_ISR 0070                   __size_of_AD_Sample 0058  
                               l2130 0000                                 l3010 0000  
                               l1412 0000                                 l2124 0000  
                               l3004 0000                                 l3020 0000  
                               l1421 0000                                 l1406 0264  
                               l3006 0000                                 l1430 0000  
                               l3014 0000                                 l3110 0000  
                               l1415 0000                                 l2127 0000  
                               l2144 0000                                 l3008 0000  
                               l3016 0000                                 l3032 0000  
                               l1424 0000                                 l3104 0185  
                               l1409 0000                                 l2138 0000  
                               l3018 0000                                 l1418 0000  
                               l3050 0000                                 l3130 0000  
                               l3106 0000                                 l3210 0000  
                               l3202 0000                                 l1460 0000  
                               l3044 0000                                 l3132 0000  
                               l3220 0000                                 l3204 0000  
                               l3212 0078                                 l3140 0000  
                               l3126 0190                                 l3302 0103  
                               l3230 0000                                 l3222 0090  
                               l3206 0000                                 l3150 0000  
                               l3142 0000                                 l1463 0000  
                               l1439 0172                                 l3048 0000  
                               l3128 0000                                 l3136 0000  
                               l3312 010E                                 l3304 0104  
                               l3216 0000                                 l3208 0072  
                               l3152 0000                                 l3144 0000  
                               l1457 0000                                 l1466 0000  
                               l3090 0000                                 l3138 0000  
                               l3314 010F                                 l3242 0000  
                               l3226 0000                                 l3218 0000  
                               l3170 0000                                 l3162 0000  
                               l3154 0000                                 l3146 0000  
                               l3260 0000                                 l3252 00AF  
                               l3228 0000                                 l3236 00A0  
                               l3172 003F                                 l3164 0036  
                               l3156 0115                                 l3148 0000  
                               l1469 0000                                 l3094 0000  
                               l3270 0000                                 l3262 00C0  
                               l3246 00AB                                 l3190 0053  
                               l3166 0000                                 l3158 0000  
                               l1487 0000                                 l3280 0000  
                               l3264 00C2                                 l3176 0046  
                               l3168 0000                                 l3098 0160  
                               l3274 00D7                                 l3258 00B8  
                               l3178 0047                                 l3292 00EB  
                               l3284 0000                                 l3276 0000  
                               l3188 0052                                 l3294 0000  
                               l3286 0000                                 l3278 0000  
                               l3198 005B                                 l3296 0000  
                               l3288 0000                                 l2950 0000  
                               l2952 0000                                 l2960 0000  
                               l2954 0000                                 l2962 0000  
                               l2970 0000                                 l2948 0000  
                               l2956 0000                                 l2964 0000  
                               l2972 0000                                 l2980 0000  
                               l2958 0000                                 l2966 0000  
                               l2974 0000                                 l2982 0000  
                               l2990 0142                                 l2968 0000  
                               l2976 0000                                 l2984 0000  
                               l2992 0000                                 l2986 0000  
                               l2978 0000                                 l2988 0000  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _PEIE 005E  
               ??_getAdOriginalValue 0045               ??_isFinishedSmallTimer 0043  
                  main@ucWaitTimeO3s 0042                                 _main 000D  
                  ??_startSmallTimer 0043                                 btemp 007E  
                               start 000B              ?_getAdOriginalCh13Value 0043  
                              ??_ISR 0074           __end_of_isPermitSampleTime 0285  
                _sampleChannelSelect 0048                                ?_main 0070  
                              _DACR0 0088                                _CLKPR 0108  
                              _T1CON 0010                      __end_of_adc_get 01F8  
                              _TMR1H 000F                                _TMR1L 000E  
                     ?_startBigTimer 0070                setAD_ConvertFlag@flag 0043  
                      main@tDA_timer 0038                                _timer 007A  
                              pclath 000A                                status 0003  
                              wtemp0 007E       __end_of_getAdOriginalCh13Value 0280  
              __end_of_clearBigTimer 0294                 __end_of_clrSampeTime 0299  
         __end_of_isFinishedBigTimer 0271                         __end_of_main 0131  
             __size_of_adc_test_init 0014                    __end_of_AD_Sample 019D  
           __size_of_clearSmallTimer 0003                 _setDAC0_ChannelValue 028A  
          main@ucInstalledBatteryCnt 003E                               ??_main 0048  
           main@ucSetSmallActionFlag 003F                               _ADCON0 001F  
                             _ADCON1 009F                 __end_of_clock_config 0267  
                             _DACCON 0087                               _ADRESH 001E  
                             _ADRESL 009E                               _CLKPCE 0847  
                             i1l1421 0000                               i1l2147 0000  
                             i1l3060 0000                               i1l3070 01CC  
                             i1l3054 0000                               i1l3064 0000  
                             i1l3082 01E0                               i1l3074 0000  
                             i1l3058 0000                               i1l3084 0000  
                             i1l3076 0000                               i1l3078 0000  
                             i1l1494 01C2                               i1l3088 0000  
                             i1l1499 01E6                     __end_of_dac_init 028A  
                             _TMR1IE 0460                               _TMR1IF 0060  
                  _getAD_ConvertFlag 013B                    _setAD_ConvertFlag 013D  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISB5 0435  
                             _TRISA7 042F                               _TRISB6 0436  
                             _TRISB7 0437                   ?_getAD_ConvertFlag 0070  
                 ?_setAD_ConvertFlag 0070                     __end_of_op1_init 0244  
                   __end_of_op2_init 0257               main@ucConfirmTimerZptS 003C  
                          ??_adc_get 0072                  ??_getAD_ConvertFlag 0043  
                ??_setAD_ConvertFlag 0043                ?_setDAC0_ChannelValue 0070  
                             clrloop 0258                      ??_startBigTimer 0043  
                             saved_w 007E          ?_process_AD_Converter_Value 0070  
                      _adc_test_init 0214            __end_of_getAD_ConvertFlag 013D  
          __end_of_setAD_ConvertFlag 0142                   __size_of_adc_start 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
                    _startSmallTimer 0271              _adc_original_CH13_value 002C  
                  ??_clearSmallTimer 0043                __end_of_timer1_config 024E  
                     ?_adc_test_init 0043     __size_of_timer1_interrupt_config 0003  
              __size_of_clrSampeTime 0002                           __pbssBANK0 0020  
       __size_ofi1_setAD_ConvertFlag 0003                           adc_get@val 0072  
                         __pmaintext 000D               ??_setDAC0_ChannelValue 0043  
                         __pintentry 0004                            ?_dac_init 0070  
              __size_of_clock_config 0008                              _OP1CON0 001B  
                            _OP1CON1 001C                              _OP1CON2 001D  
                            _OP2CON0 009B                              _OP2CON1 009C  
                            _OP2CON2 009D                         _clrSampeTime 0297  
                  __end_of_adc_start 0145                            ?_op1_init 0070  
                          ?_op2_init 0070                   _isPermitSampleTime 0280  
             _buffer_Sample_AD_Value 0020                   _adc_original_value 002E  
         __size_of_getAD_ConvertFlag 0002           __size_of_setAD_ConvertFlag 0005  
        __size_of_getAdOriginalValue 0005                  ?_isPermitSampleTime 0070  
      __size_of_isFinishedSmallTimer 0005                           _uiBigTimer 0076  
                       _clock_config 025F                              _adc_get 01ED  
            __end_of_startSmallTimer 0276                  _multiFilterMaxValue 0030  
                _multiFilterMinValue 0032                 ??_isPermitSampleTime 0043  
                 _isFinishedBigTimer 026C                           ??_dac_init 0043  
                          _AD_Sample 0145                         __size_of_ISR 0041  
                    ??_adc_test_init 0044                           ??_op1_init 0043  
                         ??_op2_init 0043                  ?_isFinishedBigTimer 0070  
               end_of_initialization 0235                 ??_isFinishedBigTimer 0043  
                         ?_AD_Sample 0070               __size_of_clearBigTimer 0003  
                   _adc_convert_flag 0079              _timer1_interrupt_config 0294  
                     AD_Sample@index 0047                           main@ucInit 003D  
                   main@ucWaitTime1S 0041                      _clearSmallTimer 028E  
                   ?_startSmallTimer 0070                  i1_setAD_ConvertFlag 01F8  
              __end_of_startBigTimer 027B                  start_initialization 0228  
                        __end_of_ISR 01ED             ??_getAdOriginalCh13Value 0045  
               ?i1_setAD_ConvertFlag 0070                        _clearBigTimer 0291  
              main@ucCheckBatteryCnt 003A                          __pdataBANK0 0048  
                        ??_AD_Sample 0045            ??_timer1_interrupt_config 0043  
                        __pbssCOMMON 0076                    __size_of_dac_init 0005  
                      __pcstackBANK0 0043                            _adc_start 0142  
                  __size_of_op1_init 000C                    __size_of_op2_init 0009  
              ??i1_setAD_ConvertFlag 0070                       ?_clearBigTimer 0070  
            __end_of_clearSmallTimer 0291           main@ucSmallTimerActionFlag 0040  
             __size_of_timer1_config 000A                            __ptext500 0276  
                          __ptext501 028A                            __ptext510 0285  
                          __ptext502 027B                            __ptext511 0214  
                          __ptext503 028E                            __ptext512 0294  
                          __ptext504 0291                            __ptext513 0244  
                          __ptext505 0297                            __ptext514 025F  
                          __ptext506 0280                            __ptext515 01AC  
                          __ptext507 0142                            __ptext516 01F8  
                          __ptext508 024E                            __ptext517 01ED  
                          __ptext509 0238                            __ptext518 0000  
                          __ptext492 0131                            __ptext493 0145  
                          __ptext494 019D                            __ptext495 013D  
                          __ptext496 013B                            __ptext497 0267  
                          __ptext498 026C                            __ptext499 0271  
                           ?_adc_get 0070        __size_of_setDAC0_ChannelValue 0004  
       __end_of_isFinishedSmallTimer 026C                            __pswtext1 0200  
                    ISR@ucTimer1sCnt 0078           __end_of_getAdOriginalValue 01A2  
                         ?_adc_start 0070      __size_of_getAdOriginalCh13Value 0005  
                  interrupt_function 0004      __end_of_timer1_interrupt_config 0297  
               adc_test_init@channel 0045          __size_of_isPermitSampleTime 0005  
                       _uiSmallTimer 0034                __end_of_adc_test_init 0228  
                      _timer1_config 0244         ??_process_AD_Converter_Value 0048  
                    ??_clearBigTimer 0043                     ?_clearSmallTimer 0070  
               main@ucConfirmTimer1S 003B          __size_of_isFinishedBigTimer 0005  
             _getAdOriginalCh13Value 027B                     __size_of_adc_get 000B  
__size_of_process_AD_Converter_Value 000A                             _dac_init 0285  
                     ?_timer1_config 0070                             _op1_init 0238  
                           _op2_init 024E                          ??_adc_start 0043  
                      __size_of_main 0124                 _isFinishedSmallTimer 0267  
                           clear_ram 0257          setDAC0_ChannelValue@ucValue 0043  
                      ?_clrSampeTime 0070                          _sampleTimes 0036  
           __size_of_startSmallTimer 0005                             intlevel1 0000  
              ?_isFinishedSmallTimer 0070               __size_of_startBigTimer 0005  
                      ?_clock_config 0070              i1setAD_ConvertFlag@flag 0070  
                     ??_clrSampeTime 0043                      ??_timer1_config 0043  
        __end_ofi1_setAD_ConvertFlag 01FB   __end_of_process_AD_Converter_Value 013B  
         _process_AD_Converter_Value 0131         __end_of_setDAC0_ChannelValue 028E  
                   adc_test_init@ref 0043                   _getAdOriginalValue 019D  
