

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Sun Dec 09 09:33:31 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text481,local,class=CODE,delta=2
    16                           	psect	text486,local,class=CODE,delta=2
    17                           	psect	text487,local,class=CODE,delta=2
    18                           	psect	text488,local,class=CODE,delta=2
    19                           	psect	text489,local,class=CODE,delta=2
    20                           	psect	text490,local,class=CODE,delta=2
    21                           	psect	text491,local,class=CODE,delta=2
    22                           	psect	text492,local,class=CODE,delta=2
    23                           	psect	text493,local,class=CODE,delta=2
    24                           	psect	text494,local,class=CODE,delta=2
    25                           	psect	text496,local,class=CODE,delta=2
    26                           	psect	text497,local,class=CODE,delta=2
    27                           	psect	text498,local,class=CODE,delta=2
    28                           	psect	text499,local,class=CODE,delta=2
    29                           	psect	text500,local,class=CODE,delta=2
    30                           	psect	text501,local,class=CODE,delta=2
    31                           	psect	text502,local,class=CODE,delta=2
    32                           	psect	text503,local,class=CODE,delta=2
    33                           	psect	intentry,global,class=CODE,delta=2
    34                           	psect	text506,local,class=CODE,delta=2
    35                           	psect	pa_nodes,global,class=CODE,delta=2
    36                           	dabs	1,0x7E,2
    37  000A                     	;#
    38                           
    39                           	psect	config
    40  2000  2FFF               	dw	12287	;#
    41  2001  3FDE               	dw	16350	;#
    42  2002  3FF8               	dw	16376	;#
    43                           
    44                           	psect	idataBANK0
    45  0000                     __pidataBANK0:	
    46  001F                     _ADCON0	set	31
    47  001E                     _ADRESH	set	30
    48  001B                     _OP1CON0	set	27
    49  001C                     _OP1CON1	set	28
    50  001D                     _OP1CON2	set	29
    51  0010                     _T1CON	set	16
    52  000F                     _TMR1H	set	15
    53  000E                     _TMR1L	set	14
    54  006A                     _ADIF	set	106
    55  00F8                     _ADON	set	248
    56  005F                     _GIE	set	95
    57  00F9                     _GO	set	249
    58  0028                     _PA0	set	40
    59  0029                     _PA1	set	41
    60  002A                     _PA2	set	42
    61  002B                     _PA3	set	43
    62  0032                     _PB2	set	50
    63  005E                     _PEIE	set	94
    64  0060                     _TMR1IF	set	96
    65  009F                     _ADCON1	set	159
    66  009E                     _ADRESL	set	158
    67  0087                     _DACCON	set	135
    68  0088                     _DACR0	set	136
    69  009B                     _OP2CON0	set	155
    70  009C                     _OP2CON1	set	156
    71  009D                     _OP2CON2	set	157
    72  046A                     _ADIE	set	1130
    73  0460                     _TMR1IE	set	1120
    74  0428                     _TRISA0	set	1064
    75  0429                     _TRISA1	set	1065
    76  042A                     _TRISA2	set	1066
    77  042B                     _TRISA3	set	1067
    78  042F                     _TRISA7	set	1071
    79  0430                     _TRISB0	set	1072
    80  0431                     _TRISB1	set	1073
    81  0432                     _TRISB2	set	1074
    82  0433                     _TRISB3	set	1075
    83  0434                     _TRISB4	set	1076
    84  0435                     _TRISB5	set	1077
    85  0436                     _TRISB6	set	1078
    86  0437                     _TRISB7	set	1079
    87  0108                     _CLKPR	set	264
    88  0847                     _CLKPCE	set	2119
    89                           
    90                           	psect	cinit
    91  020C                     start_initialization:	
    92  020C  3020               	movlw	low __pbssBANK0
    93                           
    94                           ; Clear objects allocated to COMMON
    95  020D  01F6               	clrf	__pbssCOMMON& (0+127)
    96  020E  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
    97  020F  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
    98  0210  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
    99  0211  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
   100                           
   101                           ; Clear objects allocated to BANK0
   102  0212  1383               	bcf	3,7	;select IRP bank0
   103  0213  0084               	movwf	4
   104  0214  3043               	movlw	low (__pbssBANK0+35)
   105  0215  118A  224D         	fcall	clear_ram
   106                           
   107                           ;initializer for _sampleChannelSelect
   108  0217  300D               	movlw	13
   109  0218  00C8               	movwf	__pdataBANK0& (0+127)
   110  0219                     end_of_initialization:	
   111                           ;End of C runtime variable initialization code
   112                           
   113  0219  0183               	clrf	3
   114  021A  118A  280D         	ljmp	_main	;jump to C main() function
   115                           
   116                           	psect	bssCOMMON
   117  0076                     __pbssCOMMON:	
   118  0076                     _uiBigTimer:	
   119  0076                     	ds	2
   120  0078                     ISR@ucTimer1sCnt:	
   121  0078                     	ds	1
   122  0079                     _adc_convert_flag:	
   123  0079                     	ds	1
   124  007A                     _timer:	
   125  007A                     	ds	1
   126                           
   127                           	psect	bssBANK0
   128  0020                     __pbssBANK0:	
   129  0020                     _buffer_Sample_AD_Value:	
   130  0020                     	ds	12
   131  002C                     _adc_original_CH13_value:	
   132  002C                     	ds	2
   133  002E                     _adc_original_value:	
   134  002E                     	ds	2
   135  0030                     _multiFilterMaxValue:	
   136  0030                     	ds	2
   137  0032                     _multiFilterMinValue:	
   138  0032                     	ds	2
   139  0034                     _multiFilterSumValue:	
   140  0034                     	ds	2
   141  0036                     _sampleCH13Value:	
   142  0036                     	ds	2
   143  0038                     _uiSmallTimer:	
   144  0038                     	ds	2
   145  003A                     _sampleTimes:	
   146  003A                     	ds	1
   147  003B                     main@ampStep:	
   148  003B                     	ds	1
   149  003C                     main@tDA_timer:	
   150  003C                     	ds	1
   151  003D                     main@ucCheckBatteryCnt:	
   152  003D                     	ds	1
   153  003E                     main@ucConfirmTimer1S:	
   154  003E                     	ds	1
   155  003F                     main@ucConfirmTimerZptS:	
   156  003F                     	ds	1
   157  0040                     main@ucConfrimeCnt:	
   158  0040                     	ds	1
   159  0041                     main@ucInit:	
   160  0041                     	ds	1
   161  0042                     main@ucInstalledBatteryCnt:	
   162  0042                     	ds	1
   163                           
   164                           	psect	dataBANK0
   165  0048                     __pdataBANK0:	
   166  0048                     _sampleChannelSelect:	
   167  0048                     	ds	1
   168                           
   169                           	psect	clrtext
   170  024D                     clear_ram:	
   171                           ;	Called with FSR containing the base address, and
   172                           ;	W with the last address+1
   173                           
   174  024D  0064               	clrwdt	;clear the watchdog before getting into this loop
   175  024E                     clrloop:	
   176  024E  0180               	clrf	0	;clear RAM location pointed to by FSR
   177  024F  0A84               	incf	4,f	;increment pointer
   178  0250  0604               	xorwf	4,w	;XOR with final address
   179  0251  1903               	btfsc	3,2	;have we reached the end yet?
   180  0252  3400               	retlw	0	;all done for this memory range, return
   181  0253  0604               	xorwf	4,w	;XOR again to restore value
   182  0254  2A4E               	goto	clrloop	;do the next byte
   183                           
   184                           	psect	cstackCOMMON
   185  0070                     __pcstackCOMMON:	
   186  0070                     ?_clock_config:	
   187  0070                     ?_timer1_config:	
   188                           ; 0 bytes @ 0x0
   189                           
   190  0070                     ?_timer1_interrupt_config:	
   191                           ; 0 bytes @ 0x0
   192                           
   193  0070                     ?_dac_init:	
   194                           ; 0 bytes @ 0x0
   195                           
   196  0070                     ?_op1_init:	
   197                           ; 0 bytes @ 0x0
   198                           
   199  0070                     ?_op2_init:	
   200                           ; 0 bytes @ 0x0
   201                           
   202  0070                     ?_adc_start:	
   203                           ; 0 bytes @ 0x0
   204                           
   205  0070                     ?_clrSampeTime:	
   206                           ; 0 bytes @ 0x0
   207                           
   208  0070                     ?_process_AD_Converter_Value:	
   209                           ; 0 bytes @ 0x0
   210                           
   211  0070                     ?_setDAC0_ChannelValue:	
   212                           ; 0 bytes @ 0x0
   213                           
   214  0070                     ?_startBigTimer:	
   215                           ; 0 bytes @ 0x0
   216                           
   217  0070                     ?_startSmallTimer:	
   218                           ; 0 bytes @ 0x0
   219                           
   220  0070                     ?_AD_Sample:	
   221                           ; 0 bytes @ 0x0
   222                           
   223  0070                     ?_main:	
   224                           ; 0 bytes @ 0x0
   225                           
   226  0070                     ?_setAD_ConvertFlag:	
   227                           ; 0 bytes @ 0x0
   228                           
   229  0070                     ?_ISR:	
   230                           ; 0 bytes @ 0x0
   231                           
   232  0070                     ?i1_setAD_ConvertFlag:	
   233                           ; 0 bytes @ 0x0
   234                           
   235  0070                     ??i1_setAD_ConvertFlag:	
   236                           ; 0 bytes @ 0x0
   237                           
   238  0070                     ?_isPermitSampleTime:	
   239                           ; 0 bytes @ 0x0
   240                           
   241  0070                     ?_isFinishedBigTimer:	
   242                           ; 1 bytes @ 0x0
   243                           
   244  0070                     ?_isFinishedSmallTimer:	
   245                           ; 1 bytes @ 0x0
   246                           
   247  0070                     ?_getAD_ConvertFlag:	
   248                           ; 1 bytes @ 0x0
   249                           
   250  0070                     ?_adc_get:	
   251                           ; 1 bytes @ 0x0
   252                           
   253  0070                     i1setAD_ConvertFlag@flag:	
   254                           ; 2 bytes @ 0x0
   255                           
   256                           
   257                           ; 1 bytes @ 0x0
   258  0070                     	ds	2
   259  0072                     ??_adc_get:	
   260  0072                     adc_get@val:	
   261                           ; 0 bytes @ 0x2
   262                           
   263                           
   264                           ; 2 bytes @ 0x2
   265  0072                     	ds	2
   266  0074                     ??_ISR:	
   267                           
   268                           ; 0 bytes @ 0x4
   269  0074                     	ds	2
   270                           
   271                           	psect	cstackBANK0
   272  0043                     __pcstackBANK0:	
   273  0043                     ??_clock_config:	
   274  0043                     ??_timer1_config:	
   275                           ; 0 bytes @ 0x0
   276                           
   277  0043                     ??_timer1_interrupt_config:	
   278                           ; 0 bytes @ 0x0
   279                           
   280  0043                     ?_adc_test_init:	
   281                           ; 0 bytes @ 0x0
   282                           
   283  0043                     ??_dac_init:	
   284                           ; 0 bytes @ 0x0
   285                           
   286  0043                     ??_op1_init:	
   287                           ; 0 bytes @ 0x0
   288                           
   289  0043                     ??_op2_init:	
   290                           ; 0 bytes @ 0x0
   291                           
   292  0043                     ??_adc_start:	
   293                           ; 0 bytes @ 0x0
   294                           
   295  0043                     ??_isPermitSampleTime:	
   296                           ; 0 bytes @ 0x0
   297                           
   298  0043                     ??_clrSampeTime:	
   299                           ; 0 bytes @ 0x0
   300                           
   301  0043                     ??_setDAC0_ChannelValue:	
   302                           ; 0 bytes @ 0x0
   303                           
   304  0043                     ??_startBigTimer:	
   305                           ; 0 bytes @ 0x0
   306                           
   307  0043                     ??_startSmallTimer:	
   308                           ; 0 bytes @ 0x0
   309                           
   310  0043                     ??_isFinishedBigTimer:	
   311                           ; 0 bytes @ 0x0
   312                           
   313  0043                     ??_isFinishedSmallTimer:	
   314                           ; 0 bytes @ 0x0
   315                           
   316  0043                     ??_getAD_ConvertFlag:	
   317                           ; 0 bytes @ 0x0
   318                           
   319  0043                     ??_setAD_ConvertFlag:	
   320                           ; 0 bytes @ 0x0
   321                           
   322  0043                     ?_getAdOriginalCh13Value:	
   323                           ; 0 bytes @ 0x0
   324                           
   325  0043                     ?_getAdCh13Value:	
   326                           ; 2 bytes @ 0x0
   327                           
   328  0043                     ?_getAdOriginalValue:	
   329                           ; 2 bytes @ 0x0
   330                           
   331  0043                     setAD_ConvertFlag@flag:	
   332                           ; 2 bytes @ 0x0
   333                           
   334  0043                     setDAC0_ChannelValue@ucValue:	
   335                           ; 1 bytes @ 0x0
   336                           
   337  0043                     adc_test_init@ref:	
   338                           ; 1 bytes @ 0x0
   339                           
   340                           
   341                           ; 1 bytes @ 0x0
   342  0043                     	ds	1
   343  0044                     ??_adc_test_init:	
   344                           
   345                           ; 0 bytes @ 0x1
   346  0044                     	ds	1
   347  0045                     ??_getAdOriginalCh13Value:	
   348  0045                     ??_getAdCh13Value:	
   349                           ; 0 bytes @ 0x2
   350                           
   351  0045                     ??_AD_Sample:	
   352                           ; 0 bytes @ 0x2
   353                           
   354  0045                     ??_getAdOriginalValue:	
   355                           ; 0 bytes @ 0x2
   356                           
   357  0045                     adc_test_init@channel:	
   358                           ; 0 bytes @ 0x2
   359                           
   360                           
   361                           ; 1 bytes @ 0x2
   362  0045                     	ds	2
   363  0047                     AD_Sample@index:	
   364                           
   365                           ; 1 bytes @ 0x4
   366  0047                     	ds	1
   367  0048                     ??_process_AD_Converter_Value:	
   368  0048                     ??_main:	
   369                           ; 0 bytes @ 0x5
   370                           
   371                           
   372                           	psect	maintext
   373  000D                     __pmaintext:	
   374                           ; 0 bytes @ 0x5
   375 ;;Data sizes: Strings 0, constant 0, data 1, bss 40, persistent 0 stack 0
   376 ;;Auto spaces:   Size  Autos    Used
   377 ;; COMMON          14      6      11
   378 ;; BANK0           80      5      41
   379 ;; BANK1           80      0       0
   380 ;; BANK3           96      0       0
   381 ;; BANK2           96      0       0
   382 ;;
   383 ;; Pointer list with targets:
   384 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   385 ;;
   386 ;; ?_getAdCh13Value	unsigned int  size(1) Largest target is 0
   387 ;;
   388 ;; ?_getAdOriginalCh13Value	unsigned int  size(1) Largest target is 0
   389 ;;
   390 ;; ?_getAdOriginalValue	unsigned int  size(1) Largest target is 0
   391 ;;
   392 ;;
   393 ;; Critical Paths under _main in COMMON
   394 ;;
   395 ;;   None.
   396 ;;
   397 ;; Critical Paths under _ISR in COMMON
   398 ;;
   399 ;;   _ISR->_adc_get
   400 ;;
   401 ;; Critical Paths under _main in BANK0
   402 ;;
   403 ;;   _process_AD_Converter_Value->_AD_Sample
   404 ;;   _AD_Sample->_getAdOriginalValue
   405 ;;
   406 ;; Critical Paths under _ISR in BANK0
   407 ;;
   408 ;;   None.
   409 ;;
   410 ;; Critical Paths under _main in BANK1
   411 ;;
   412 ;;   None.
   413 ;;
   414 ;; Critical Paths under _ISR in BANK1
   415 ;;
   416 ;;   None.
   417 ;;
   418 ;; Critical Paths under _main in BANK3
   419 ;;
   420 ;;   None.
   421 ;;
   422 ;; Critical Paths under _ISR in BANK3
   423 ;;
   424 ;;   None.
   425 ;;
   426 ;; Critical Paths under _main in BANK2
   427 ;;
   428 ;;   None.
   429 ;;
   430 ;; Critical Paths under _ISR in BANK2
   431 ;;
   432 ;;   None.
   433 ;;
   434 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   435 ;;
   436 ;;
   437 ;;Call Graph Tables:
   438 ;;
   439 ;; ---------------------------------------------------------------------------------
   440 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   441 ;; ---------------------------------------------------------------------------------
   442 ;; (0) _main                                                 0     0      0     156
   443 ;;                       _clock_config
   444 ;;                      _timer1_config
   445 ;;            _timer1_interrupt_config
   446 ;;                      _adc_test_init
   447 ;;                           _dac_init
   448 ;;                           _op1_init
   449 ;;                           _op2_init
   450 ;;                          _adc_start
   451 ;;                 _isPermitSampleTime
   452 ;;                       _clrSampeTime
   453 ;;         _process_AD_Converter_Value
   454 ;;             _getAdOriginalCh13Value
   455 ;;               _setDAC0_ChannelValue
   456 ;;                      _startBigTimer
   457 ;;                    _startSmallTimer
   458 ;;                 _isFinishedBigTimer
   459 ;;               _isFinishedSmallTimer
   460 ;;                     _getAdCh13Value
   461 ;; ---------------------------------------------------------------------------------
   462 ;; (1) _process_AD_Converter_Value                           0     0      0      90
   463 ;;                  _getAD_ConvertFlag
   464 ;;                  _setAD_ConvertFlag
   465 ;;                          _AD_Sample
   466 ;;                          _adc_start
   467 ;; ---------------------------------------------------------------------------------
   468 ;; (2) _AD_Sample                                            3     3      0      68
   469 ;;                                              2 BANK0      3     3      0
   470 ;;                 _getAdOriginalValue
   471 ;; ---------------------------------------------------------------------------------
   472 ;; (3) _getAdOriginalValue                                   2     0      2       0
   473 ;;                                              0 BANK0      2     0      2
   474 ;; ---------------------------------------------------------------------------------
   475 ;; (2) _setAD_ConvertFlag                                    1     1      0      22
   476 ;;                                              0 BANK0      1     1      0
   477 ;; ---------------------------------------------------------------------------------
   478 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   479 ;; ---------------------------------------------------------------------------------
   480 ;; (1) _getAdCh13Value                                       2     0      2       0
   481 ;;                                              0 BANK0      2     0      2
   482 ;; ---------------------------------------------------------------------------------
   483 ;; (1) _isFinishedSmallTimer                                 0     0      0       0
   484 ;; ---------------------------------------------------------------------------------
   485 ;; (1) _isFinishedBigTimer                                   0     0      0       0
   486 ;; ---------------------------------------------------------------------------------
   487 ;; (1) _startSmallTimer                                      0     0      0       0
   488 ;; ---------------------------------------------------------------------------------
   489 ;; (1) _startBigTimer                                        0     0      0       0
   490 ;; ---------------------------------------------------------------------------------
   491 ;; (1) _setDAC0_ChannelValue                                 1     1      0      22
   492 ;;                                              0 BANK0      1     1      0
   493 ;; ---------------------------------------------------------------------------------
   494 ;; (1) _getAdOriginalCh13Value                               2     0      2       0
   495 ;;                                              0 BANK0      2     0      2
   496 ;; ---------------------------------------------------------------------------------
   497 ;; (1) _clrSampeTime                                         0     0      0       0
   498 ;; ---------------------------------------------------------------------------------
   499 ;; (1) _isPermitSampleTime                                   0     0      0       0
   500 ;; ---------------------------------------------------------------------------------
   501 ;; (2) _adc_start                                            0     0      0       0
   502 ;; ---------------------------------------------------------------------------------
   503 ;; (1) _op2_init                                             0     0      0       0
   504 ;; ---------------------------------------------------------------------------------
   505 ;; (1) _op1_init                                             0     0      0       0
   506 ;; ---------------------------------------------------------------------------------
   507 ;; (1) _dac_init                                             0     0      0       0
   508 ;; ---------------------------------------------------------------------------------
   509 ;; (1) _adc_test_init                                        3     2      1      44
   510 ;;                                              0 BANK0      3     2      1
   511 ;; ---------------------------------------------------------------------------------
   512 ;; (1) _timer1_interrupt_config                              0     0      0       0
   513 ;; ---------------------------------------------------------------------------------
   514 ;; (1) _timer1_config                                        0     0      0       0
   515 ;; ---------------------------------------------------------------------------------
   516 ;; (1) _clock_config                                         0     0      0       0
   517 ;; ---------------------------------------------------------------------------------
   518 ;; Estimated maximum stack depth 3
   519 ;; ---------------------------------------------------------------------------------
   520 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   521 ;; ---------------------------------------------------------------------------------
   522 ;; (4) _ISR                                                  2     2      0      97
   523 ;;                                              4 COMMON     2     2      0
   524 ;;                i1_setAD_ConvertFlag
   525 ;;                            _adc_get
   526 ;; ---------------------------------------------------------------------------------
   527 ;; (5) i1_setAD_ConvertFlag                                  1     1      0      73
   528 ;;                                              0 COMMON     1     1      0
   529 ;; ---------------------------------------------------------------------------------
   530 ;; (5) _adc_get                                              4     2      2      24
   531 ;;                                              0 COMMON     4     2      2
   532 ;; ---------------------------------------------------------------------------------
   533 ;; Estimated maximum stack depth 5
   534 ;; ---------------------------------------------------------------------------------
   535 ;; Call Graph Graphs:
   536 ;; _main (ROOT)
   537 ;;   _clock_config
   538 ;;   _timer1_config
   539 ;;   _timer1_interrupt_config
   540 ;;   _adc_test_init
   541 ;;   _dac_init
   542 ;;   _op1_init
   543 ;;   _op2_init
   544 ;;   _adc_start
   545 ;;   _isPermitSampleTime
   546 ;;   _clrSampeTime
   547 ;;   _process_AD_Converter_Value
   548 ;;     _getAD_ConvertFlag
   549 ;;     _setAD_ConvertFlag
   550 ;;     _AD_Sample
   551 ;;       _getAdOriginalValue
   552 ;;     _adc_start
   553 ;;   _getAdOriginalCh13Value
   554 ;;   _setDAC0_ChannelValue
   555 ;;   _startBigTimer
   556 ;;   _startSmallTimer
   557 ;;   _isFinishedBigTimer
   558 ;;   _isFinishedSmallTimer
   559 ;;   _getAdCh13Value
   560 ;;
   561 ;; _ISR (ROOT)
   562 ;;   i1_setAD_ConvertFlag
   563 ;;   _adc_get
   564 ;;
   565 ;; Address spaces:
   566 ;;Name               Size   Autos  Total    Cost      Usage
   567 ;;BANK3               60      0       0      10        0.0%
   568 ;;BITBANK3            60      0       0       9        0.0%
   569 ;;SFR3                 0      0       0       4        0.0%
   570 ;;BITSFR3              0      0       0       4        0.0%
   571 ;;BANK2               60      0       0      12        0.0%
   572 ;;BITBANK2            60      0       0      11        0.0%
   573 ;;SFR2                 0      0       0       5        0.0%
   574 ;;BITSFR2              0      0       0       5        0.0%
   575 ;;SFR1                 0      0       0       2        0.0%
   576 ;;BITSFR1              0      0       0       2        0.0%
   577 ;;BANK1               50      0       0       8        0.0%
   578 ;;BITBANK1            50      0       0       7        0.0%
   579 ;;CODE                 0      0       0       0        0.0%
   580 ;;DATA                 0      0      3B       6        0.0%
   581 ;;ABS                  0      0      34       3        0.0%
   582 ;;NULL                 0      0       0       0        0.0%
   583 ;;STACK                0      0       7       2        0.0%
   584 ;;BANK0               50      5      29       5       51.3%
   585 ;;BITBANK0            50      0       0       4        0.0%
   586 ;;SFR0                 0      0       0       1        0.0%
   587 ;;BITSFR0              0      0       0       1        0.0%
   588 ;;COMMON               E      6       B       1       78.6%
   589 ;;BITCOMMON            E      0       0       0        0.0%
   590                           
   591                           
   592 ;; *************** function _main *****************
   593 ;; Defined at:
   594 ;;		line 84 in file "C:\dev\AK7030-OTP\main.c"
   595 ;; Parameters:    Size  Location     Type
   596 ;;		None
   597 ;; Auto vars:     Size  Location     Type
   598 ;;		None
   599 ;; Return value:  Size  Location     Type
   600 ;;		None               void
   601 ;; Registers used:
   602 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   603 ;; Tracked objects:
   604 ;;		On entry : 17F/0
   605 ;;		On exit  : 60/0
   606 ;;		Unchanged: FFE00/0
   607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   608 ;;      Params:         0       0       0       0       0
   609 ;;      Locals:         0       0       0       0       0
   610 ;;      Temps:          0       0       0       0       0
   611 ;;      Totals:         0       0       0       0       0
   612 ;;Total ram usage:        0 bytes
   613 ;; Hardware stack levels required when called:    5
   614 ;; This function calls:
   615 ;;		_clock_config
   616 ;;		_timer1_config
   617 ;;		_timer1_interrupt_config
   618 ;;		_adc_test_init
   619 ;;		_dac_init
   620 ;;		_op1_init
   621 ;;		_op2_init
   622 ;;		_adc_start
   623 ;;		_isPermitSampleTime
   624 ;;		_clrSampeTime
   625 ;;		_process_AD_Converter_Value
   626 ;;		_getAdOriginalCh13Value
   627 ;;		_setDAC0_ChannelValue
   628 ;;		_startBigTimer
   629 ;;		_startSmallTimer
   630 ;;		_isFinishedBigTimer
   631 ;;		_isFinishedSmallTimer
   632 ;;		_getAdCh13Value
   633 ;; This function is called by:
   634 ;;		Startup code after reset
   635 ;; This function uses a non-reentrant model
   636 ;;
   637  000D                     _main:	
   638                           
   639                           ;main.c: 85: enum step
   640                           ;main.c: 86: {
   641                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   642                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   643                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   644                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   645                           ;main.c: 91: SET_PA2_VALUE,
   646                           ;main.c: 92: PROCESS_AD_VALUE,
   647                           ;main.c: 93: WAIT_SET_TIME_FINISHED,
   648                           ;main.c: 94: SET_TIME_BE_FINISHED,
   649                           ;main.c: 95: CHECKING_PULL_OUT_BATTERY,
   650                           ;main.c: 96: CHECKING_INSTALLED_BATTERY,
   651                           ;main.c: 97: };
   652                           ;main.c: 99: enum workTimerType
   653                           ;main.c: 100: {
   654                           ;main.c: 101: BIG_TIMER_WORK = 0,
   655                           
   656                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   657  000D  1683               	bsf	3,5	;RP0=1, select bank1
   658  000E  1005               	bcf	5,0
   659                           
   660                           ;main.c: 110: TRISA1 = 0;
   661  000F  1085               	bcf	5,1
   662                           
   663                           ;main.c: 111: TRISA3 = 0;
   664  0010  1185               	bcf	5,3
   665                           
   666                           ;main.c: 112: TRISA2 = 0;
   667  0011  1105               	bcf	5,2
   668                           
   669                           ;main.c: 113: PA2 = 1;
   670  0012  1283               	bcf	3,5	;RP0=0, select bank0
   671  0013  1505               	bsf	5,2
   672                           
   673                           ;main.c: 114: PA0 = 1;
   674  0014  1405               	bsf	5,0
   675                           
   676                           ;main.c: 116: TRISB2 = 1;
   677  0015  1683               	bsf	3,5	;RP0=1, select bank1
   678  0016  1506               	bsf	6,2
   679                           
   680                           ;main.c: 118: TRISB1 = 1;
   681  0017  1486               	bsf	6,1
   682                           
   683                           ;main.c: 119: TRISB0 = 1;
   684  0018  1406               	bsf	6,0
   685                           
   686                           ;main.c: 121: clock_config();
   687  0019  118A  2255  118A   	fcall	_clock_config
   688                           
   689                           ;main.c: 122: timer1_config();
   690  001C  118A  2228  118A   	fcall	_timer1_config
   691                           
   692                           ;main.c: 123: timer1_interrupt_config();
   693  001F  118A  227F  118A   	fcall	_timer1_interrupt_config
   694                           
   695                           ;main.c: 125: adc_test_init(13,3);
   696  0022  3003               	movlw	3
   697  0023  1283               	bcf	3,5	;RP0=0, select bank0
   698  0024  00C3               	movwf	?_adc_test_init
   699  0025  300D               	movlw	13
   700  0026  118A  21F8  118A   	fcall	_adc_test_init
   701                           
   702                           ;main.c: 127: dac_init();
   703  0029  118A  2276  118A   	fcall	_dac_init
   704                           
   705                           ;main.c: 128: op1_init();
   706  002C  118A  221C  118A   	fcall	_op1_init
   707                           
   708                           ;main.c: 129: op2_init();
   709  002F  118A  2244  118A   	fcall	_op2_init
   710                           
   711                           ;main.c: 132: adc_start();
   712  0032  118A  2100  118A   	fcall	_adc_start
   713                           
   714                           ;main.c: 145: switch(ampStep)
   715  0035  28D3               	goto	l3089
   716  0036                     l670:	
   717                           ;main.c: 146: {
   718                           ;main.c: 147: case SENSE_PB2_INPUT_VOLTAGE:
   719                           
   720                           
   721                           ;main.c: 148: {
   722                           ;main.c: 149: if(!PB2)
   723  0036  1906               	btfsc	6,2
   724  0037  28D3               	goto	l3089
   725  0038                     l3097:	
   726                           
   727                           ;main.c: 150: ampStep++;
   728  0038  1283               	bcf	3,5	;RP0=0, select bank0
   729  0039  0ABB               	incf	main@ampStep,f
   730  003A  28D3               	goto	l3089
   731  003B                     l673:	
   732                           ;main.c: 152: }
   733                           ;main.c: 154: case SENSE_PB2_DURATION_ONE_SECOND:
   734                           
   735                           
   736                           ;main.c: 155: {
   737                           ;main.c: 156: static unsigned char ucConfirmTimer1S = 0;
   738                           ;main.c: 157: if(!PB2)
   739  003B  1906               	btfsc	6,2
   740  003C  283F               	goto	l3101
   741                           
   742                           ;main.c: 158: {
   743                           ;main.c: 159: ucConfirmTimer1S++;
   744  003D  0ABE               	incf	main@ucConfirmTimer1S,f
   745                           
   746                           ;main.c: 160: }
   747  003E  2840               	goto	l3103
   748  003F                     l3101:	
   749                           
   750                           ;main.c: 161: else
   751                           ;main.c: 162: {
   752                           ;main.c: 163: ucConfirmTimer1S = 0;
   753  003F  01BE               	clrf	main@ucConfirmTimer1S
   754  0040                     l3103:	
   755                           
   756                           ;main.c: 164: }
   757                           ;main.c: 166: if(ucConfirmTimer1S >= 10)
   758  0040  300A               	movlw	10
   759  0041  023E               	subwf	main@ucConfirmTimer1S,w
   760  0042  1C03               	skipc
   761  0043  28D3               	goto	l3089
   762                           
   763                           ;main.c: 167: {
   764                           ;main.c: 168: ucConfirmTimer1S = 0;
   765  0044  01BE               	clrf	main@ucConfirmTimer1S
   766  0045  2838               	goto	l3097
   767  0046                     l679:	
   768                           ;main.c: 173: }
   769                           ;main.c: 175: case SENSE_PB2_INPUT_VOLTAGE__AGAIN:
   770                           
   771                           
   772                           ;main.c: 176: {
   773                           ;main.c: 177: if(!PB2)
   774  0046  2836               	goto	l670
   775  0047                     l681:	
   776                           ;main.c: 180: }
   777                           ;main.c: 182: case SENSE_PB2_DURATION__SECOND:
   778                           
   779                           
   780                           ;main.c: 183: {
   781                           ;main.c: 184: static unsigned char ucConfirmTimerZptS = 0;
   782                           ;main.c: 185: if(!PB2)
   783  0047  1906               	btfsc	6,2
   784  0048  284B               	goto	l3113
   785                           
   786                           ;main.c: 186: {
   787                           ;main.c: 187: ucConfirmTimerZptS++;
   788  0049  0ABF               	incf	main@ucConfirmTimerZptS,f
   789                           
   790                           ;main.c: 188: }
   791  004A  284C               	goto	l3115
   792  004B                     l3113:	
   793                           
   794                           ;main.c: 189: else
   795                           ;main.c: 190: {
   796                           ;main.c: 191: ucConfirmTimerZptS = 0;
   797  004B  01BF               	clrf	main@ucConfirmTimerZptS
   798  004C                     l3115:	
   799                           
   800                           ;main.c: 192: }
   801                           ;main.c: 194: if(ucConfirmTimerZptS >= 3)
   802  004C  3003               	movlw	3
   803  004D  023F               	subwf	main@ucConfirmTimerZptS,w
   804  004E  1C03               	skipc
   805  004F  28D3               	goto	l3089
   806                           
   807                           ;main.c: 195: {
   808                           ;main.c: 196: ucConfirmTimerZptS = 0;
   809  0050  01BF               	clrf	main@ucConfirmTimerZptS
   810  0051  2838               	goto	l3097
   811  0052                     l687:	
   812                           ;main.c: 201: }
   813                           ;main.c: 203: case SET_PA2_VALUE:
   814                           
   815                           
   816                           ;main.c: 204: {
   817                           ;main.c: 205: PA2 = 0;
   818  0052  1105               	bcf	5,2
   819  0053  2838               	goto	l3097
   820  0054                     l3123:	
   821                           
   822                           ;main.c: 211: {
   823                           ;main.c: 212: static unsigned char ucInit = 0;
   824                           ;main.c: 213: if(getAdOriginalCh13Value() > 40)
   825  0054  118A  226C  118A   	fcall	_getAdOriginalCh13Value
   826  0057  3000               	movlw	0
   827  0058  0244               	subwf	?_getAdOriginalCh13Value+1,w
   828  0059  3029               	movlw	41
   829  005A  1903               	skipnz
   830  005B  0243               	subwf	?_getAdOriginalCh13Value,w
   831  005C  1C03               	skipc
   832  005D  286A               	goto	l3133
   833  005E                     l3125:	
   834  005E  301B               	movlw	27
   835                           
   836                           ;main.c: 214: {
   837                           ;main.c: 215: PA0 = 0;
   838  005F  1005               	bcf	5,0
   839                           
   840                           ;main.c: 216: PA1 = 1;
   841  0060  1485               	bsf	5,1
   842                           
   843                           ;main.c: 217: PA3 = 1;
   844  0061  1585               	bsf	5,3
   845                           
   846                           ;main.c: 218: tDA_timer = BIG_TIMER_WORK;
   847  0062  01BC               	clrf	main@tDA_timer
   848                           
   849                           ;main.c: 219: setDAC0_ChannelValue(27);
   850  0063  118A  227B  118A   	fcall	_setDAC0_ChannelValue
   851                           
   852                           ;main.c: 220: startBigTimer();
   853  0066  118A  223B  118A   	fcall	_startBigTimer
   854                           
   855                           ;main.c: 221: }
   856  0069  2838               	goto	l3097
   857  006A                     l3133:	
   858                           
   859                           ;main.c: 222: else if(getAdOriginalCh13Value() <35)
   860  006A  118A  226C  118A   	fcall	_getAdOriginalCh13Value
   861  006D  3000               	movlw	0
   862  006E  0244               	subwf	?_getAdOriginalCh13Value+1,w
   863  006F  3023               	movlw	35
   864  0070  1903               	skipnz
   865  0071  0243               	subwf	?_getAdOriginalCh13Value,w
   866  0072  1803               	skipnc
   867  0073  2881               	goto	l3139
   868  0074  3019               	movlw	25
   869                           
   870                           ;main.c: 223: {
   871                           ;main.c: 224: PA0 = 1;
   872  0075  1405               	bsf	5,0
   873                           
   874                           ;main.c: 225: PA1 = 0;
   875  0076  1085               	bcf	5,1
   876                           
   877                           ;main.c: 226: PA3 = 0;
   878  0077  1185               	bcf	5,3
   879                           
   880                           ;main.c: 227: tDA_timer = SMALL_TIMER_WORK;
   881  0078  01BC               	clrf	main@tDA_timer
   882  0079  0ABC               	incf	main@tDA_timer,f
   883                           
   884                           ;main.c: 228: setDAC0_ChannelValue(25);
   885  007A  118A  227B  118A   	fcall	_setDAC0_ChannelValue
   886                           
   887                           ;main.c: 229: startSmallTimer();
   888  007D  118A  2232  118A   	fcall	_startSmallTimer
   889                           
   890                           ;main.c: 230: }
   891  0080  2838               	goto	l3097
   892  0081                     l3139:	
   893                           
   894                           ;main.c: 231: else
   895                           ;main.c: 232: {
   896                           ;main.c: 233: if(!ucInit)
   897  0081  08C1               	movf	main@ucInit,f
   898  0082  1D03               	skipz
   899  0083  2838               	goto	l3097
   900                           
   901                           ;main.c: 234: {
   902                           ;main.c: 235: ucInit = 1;
   903  0084  01C1               	clrf	main@ucInit
   904  0085  0AC1               	incf	main@ucInit,f
   905  0086  285E               	goto	l3125
   906  0087                     l3151:	
   907                           ;main.c: 240: setDAC0_ChannelValue(27);
   908                           
   909                           ;main.c: 239: tDA_timer = BIG_TIMER_WORK;
   910                           
   911                           ;main.c: 238: PA3 = 1;
   912                           
   913                           ;main.c: 237: PA1 = 1;
   914                           
   915                           ;main.c: 236: PA0 = 0;
   916                           
   917                           
   918                           ;main.c: 254: {
   919                           ;main.c: 255: static unsigned char ucConfrimeCnt = 0;
   920                           ;main.c: 256: if(!isFinishedBigTimer())
   921  0087  118A  2267  118A   	fcall	_isFinishedBigTimer
   922  008A  3800               	iorlw	0
   923  008B  1D03               	skipz
   924  008C  2838               	goto	l3097
   925                           
   926                           ;main.c: 257: {
   927                           ;main.c: 258: if(!PB2)
   928  008D  1906               	btfsc	6,2
   929  008E  2891               	goto	l3157
   930                           
   931                           ;main.c: 259: ucConfrimeCnt++;
   932  008F  0AC0               	incf	main@ucConfrimeCnt,f
   933  0090  2892               	goto	l3159
   934  0091                     l3157:	
   935                           
   936                           ;main.c: 260: else
   937                           ;main.c: 261: ucConfrimeCnt = 0;
   938  0091  01C0               	clrf	main@ucConfrimeCnt
   939  0092                     l3159:	
   940                           
   941                           ;main.c: 263: if(ucConfrimeCnt >=3)
   942  0092  3003               	movlw	3
   943  0093  0240               	subwf	main@ucConfrimeCnt,w
   944  0094  1C03               	skipc
   945  0095  28D3               	goto	l3089
   946  0096  3004               	movlw	4
   947                           
   948                           ;main.c: 264: {
   949                           ;main.c: 265: ucConfrimeCnt = 0;
   950  0097  01C0               	clrf	main@ucConfrimeCnt
   951                           
   952                           ;main.c: 266: ampStep = SET_PA2_VALUE;
   953  0098  28AA               	goto	L1
   954  0099                     l3167:	
   955                           
   956                           ;main.c: 277: {
   957                           ;main.c: 278: if(!isFinishedSmallTimer())
   958  0099  118A  2262  118A   	fcall	_isFinishedSmallTimer
   959  009C  3800               	iorlw	0
   960  009D  1D03               	skipz
   961  009E  2838               	goto	l3097
   962                           
   963                           ;main.c: 279: {
   964                           ;main.c: 280: if(getAdCh13Value() > 40)
   965  009F  118A  225D  118A   	fcall	_getAdCh13Value
   966  00A2  3000               	movlw	0
   967  00A3  0244               	subwf	?_getAdCh13Value+1,w
   968  00A4  3029               	movlw	41
   969  00A5  1903               	skipnz
   970  00A6  0243               	subwf	?_getAdCh13Value,w
   971  00A7  1C03               	skipc
   972  00A8  28D3               	goto	l3089
   973                           
   974                           ;main.c: 281: ampStep = PROCESS_AD_VALUE;
   975  00A9  3005               	movlw	5
   976  00AA                     L1:	
   977  00AA  00BB               	movwf	main@ampStep
   978  00AB  28D3               	goto	l3089
   979  00AC                     l3177:	
   980  00AC  083C               	movf	main@tDA_timer,w
   981                           
   982                           ; Switch size 1, requested type "space"
   983                           ; Number of cases is 2, Range of values is 0 to 1
   984                           ; switch strategies available:
   985                           ; Name         Instructions Cycles
   986                           ; simple_byte            7     4 (average)
   987                           ; direct_byte           11     7 (fixed)
   988                           ; jumptable            260     6 (fixed)
   989                           ; rangetable             6     6 (fixed)
   990                           ; spacedrange           10     9 (fixed)
   991                           ; locatedrange           2     3 (fixed)
   992                           ;	Chosen strategy is simple_byte
   993  00AD  3A00               	xorlw	0	; case 0
   994  00AE  1903               	skipnz
   995  00AF  2887               	goto	l3151
   996  00B0  3A01               	xorlw	1	; case 1
   997  00B1  1903               	skipnz
   998  00B2  2899               	goto	l3167
   999  00B3  28EE               	goto	l668
  1000  00B4                     l712:	
  1001                           ;main.c: 295: }
  1002                           ;main.c: 297: case SET_TIME_BE_FINISHED:
  1003                           
  1004  00B4  3019               	movlw	25
  1005                           
  1006                           ;main.c: 298: {
  1007                           ;main.c: 299: PA2 = 1;
  1008  00B5  1505               	bsf	5,2
  1009                           
  1010                           ;main.c: 300: PA0 = 0;
  1011  00B6  1005               	bcf	5,0
  1012                           
  1013                           ;main.c: 301: PA1 = 0;
  1014  00B7  1085               	bcf	5,1
  1015                           
  1016                           ;main.c: 302: PA3 = 0;
  1017  00B8  1185               	bcf	5,3
  1018                           
  1019                           ;main.c: 303: setDAC0_ChannelValue(25);
  1020  00B9  118A  227B  118A   	fcall	_setDAC0_ChannelValue
  1021  00BC  2838               	goto	l3097
  1022  00BD                     l713:	
  1023                           ;main.c: 306: }
  1024                           ;main.c: 308: case CHECKING_PULL_OUT_BATTERY:
  1025                           
  1026                           
  1027                           ;main.c: 309: {
  1028                           ;main.c: 310: static unsigned char ucCheckBatteryCnt = 0;
  1029                           ;main.c: 311: if(PB2)
  1030  00BD  1D06               	btfss	6,2
  1031  00BE  28C1               	goto	l3185
  1032                           
  1033                           ;main.c: 312: ucCheckBatteryCnt++;
  1034  00BF  0ABD               	incf	main@ucCheckBatteryCnt,f
  1035  00C0  28C2               	goto	l3187
  1036  00C1                     l3185:	
  1037                           
  1038                           ;main.c: 313: else
  1039                           ;main.c: 314: ucCheckBatteryCnt = 0;
  1040  00C1  01BD               	clrf	main@ucCheckBatteryCnt
  1041  00C2                     l3187:	
  1042                           
  1043                           ;main.c: 316: if(ucCheckBatteryCnt > 2)
  1044  00C2  3003               	movlw	3
  1045  00C3  023D               	subwf	main@ucCheckBatteryCnt,w
  1046  00C4  1C03               	skipc
  1047  00C5  28D3               	goto	l3089
  1048                           
  1049                           ;main.c: 317: {
  1050                           ;main.c: 318: ucCheckBatteryCnt = 0;
  1051  00C6  01BD               	clrf	main@ucCheckBatteryCnt
  1052  00C7  2838               	goto	l3097
  1053  00C8                     l719:	
  1054                           ;main.c: 322: }
  1055                           ;main.c: 324: case CHECKING_INSTALLED_BATTERY:
  1056                           
  1057                           
  1058                           ;main.c: 325: {
  1059                           ;main.c: 326: static unsigned char ucInstalledBatteryCnt = 0;
  1060                           ;main.c: 327: if(!PB2)
  1061  00C8  1906               	btfsc	6,2
  1062  00C9  28CC               	goto	l3195
  1063                           
  1064                           ;main.c: 328: ucInstalledBatteryCnt++;
  1065  00CA  0AC2               	incf	main@ucInstalledBatteryCnt,f
  1066  00CB  28CD               	goto	l3197
  1067  00CC                     l3195:	
  1068                           
  1069                           ;main.c: 329: else
  1070                           ;main.c: 330: ucInstalledBatteryCnt = 0;
  1071  00CC  01C2               	clrf	main@ucInstalledBatteryCnt
  1072  00CD                     l3197:	
  1073                           
  1074                           ;main.c: 332: if(ucInstalledBatteryCnt > 10)
  1075  00CD  300B               	movlw	11
  1076  00CE  0242               	subwf	main@ucInstalledBatteryCnt,w
  1077  00CF  1C03               	skipc
  1078  00D0  28D3               	goto	l3089
  1079                           
  1080                           ;main.c: 333: {
  1081                           ;main.c: 334: ucInstalledBatteryCnt = 0;
  1082  00D1  01C2               	clrf	main@ucInstalledBatteryCnt
  1083                           
  1084                           ;main.c: 335: ampStep = SENSE_PB2_INPUT_VOLTAGE;
  1085  00D2  01BB               	clrf	main@ampStep
  1086  00D3                     l3089:	
  1087  00D3  0064               	clrwdt	;#
  1088                           
  1089                           ;main.c: 140: if(isPermitSampleTime())
  1090  00D4  118A  2271  118A   	fcall	_isPermitSampleTime
  1091  00D7  3A00               	xorlw	0
  1092  00D8  1903               	skipnz
  1093  00D9  28D3               	goto	l3089
  1094                           
  1095                           ;main.c: 141: {
  1096                           ;main.c: 142: clrSampeTime();
  1097  00DA  118A  2282  118A   	fcall	_clrSampeTime
  1098                           
  1099                           ;main.c: 143: process_AD_Converter_Value();
  1100  00DD  118A  20EF  118A   	fcall	_process_AD_Converter_Value
  1101  00E0  1283               	bcf	3,5	;RP0=0, select bank0
  1102  00E1  1303               	bcf	3,6	;RP1=0, select bank0
  1103  00E2  083B               	movf	main@ampStep,w
  1104                           
  1105                           ; Switch size 1, requested type "space"
  1106                           ; Number of cases is 10, Range of values is 0 to 9
  1107                           ; switch strategies available:
  1108                           ; Name         Instructions Cycles
  1109                           ; direct_byte           27     7 (fixed)
  1110                           ; simple_byte           31    16 (average)
  1111                           ; jumptable            260     6 (fixed)
  1112                           ; rangetable            14     6 (fixed)
  1113                           ; spacedrange           26     9 (fixed)
  1114                           ; locatedrange          10     3 (fixed)
  1115                           ;	Chosen strategy is direct_byte
  1116  00E3  0084               	movwf	4
  1117  00E4  300A               	movlw	10
  1118  00E5  0204               	subwf	4,w
  1119  00E6  1803               	skipnc
  1120  00E7  28D3               	goto	l3089
  1121  00E8  3001               	movlw	high S3253
  1122  00E9  008A               	movwf	10
  1123  00EA  1003               	clrc
  1124  00EB  0D04               	rlf	4,w
  1125  00EC  3EE4               	addlw	low S3253
  1126  00ED  0082               	movwf	2
  1127  00EE                     l668:	
  1128  00EE  28D3               	goto	l3089
  1129  00EF                     __end_of_main:	
  1130                           
  1131                           	psect	swtext1
  1132  01E4                     __pswtext1:	
  1133  01E4                     S3253:	
  1134  01E4  118A  2836         	ljmp	l670
  1135  01E6  118A  283B         	ljmp	l673
  1136  01E8  118A  2846         	ljmp	l679
  1137  01EA  118A  2847         	ljmp	l681
  1138  01EC  118A  2852         	ljmp	l687
  1139  01EE  118A  2854         	ljmp	l3123
  1140  01F0  118A  28AC         	ljmp	l3177
  1141  01F2  118A  28B4         	ljmp	l712
  1142  01F4  118A  28BD         	ljmp	l713
  1143  01F6  118A  28C8         	ljmp	l719
  1144                           
  1145                           	psect	text481
  1146  00EF                     __ptext481:	
  1147 ;; =============== function _main ends ============
  1148                           
  1149                           
  1150 ;; *************** function _process_AD_Converter_Value *****************
  1151 ;; Defined at:
  1152 ;;		line 94 in file "C:\dev\AK7030-OTP\common.c"
  1153 ;; Parameters:    Size  Location     Type
  1154 ;;		None
  1155 ;; Auto vars:     Size  Location     Type
  1156 ;;		None
  1157 ;; Return value:  Size  Location     Type
  1158 ;;		None               void
  1159 ;; Registers used:
  1160 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1161 ;; Tracked objects:
  1162 ;;		On entry : 0/0
  1163 ;;		On exit  : 0/0
  1164 ;;		Unchanged: FFE9F/0
  1165 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1166 ;;      Params:         0       0       0       0       0
  1167 ;;      Locals:         0       0       0       0       0
  1168 ;;      Temps:          0       0       0       0       0
  1169 ;;      Totals:         0       0       0       0       0
  1170 ;;Total ram usage:        0 bytes
  1171 ;; Hardware stack levels used:    1
  1172 ;; Hardware stack levels required when called:    4
  1173 ;; This function calls:
  1174 ;;		_getAD_ConvertFlag
  1175 ;;		_setAD_ConvertFlag
  1176 ;;		_AD_Sample
  1177 ;;		_adc_start
  1178 ;; This function is called by:
  1179 ;;		_main
  1180 ;; This function uses a non-reentrant model
  1181 ;;
  1182  00EF                     _process_AD_Converter_Value:	
  1183                           
  1184                           ;common.c: 65: return adc_convert_flag;
  1185                           
  1186                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1187                           
  1188                           ;common.c: 95: if(getAD_ConvertFlag())
  1189                           
  1190                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1191  00EF  0879               	movf	_adc_convert_flag,w
  1192  00F0  3A00               	xorlw	0
  1193  00F1  1903               	skipnz
  1194  00F2  0008               	return
  1195                           
  1196                           ;common.c: 96: {
  1197                           ;common.c: 97: setAD_ConvertFlag(0);
  1198  00F3  3000               	movlw	0
  1199  00F4  20FB  118A         	fcall	_setAD_ConvertFlag
  1200                           
  1201                           ;common.c: 98: AD_Sample();
  1202  00F6  2103  118A         	fcall	_AD_Sample
  1203                           
  1204                           ;common.c: 100: adc_start();
  1205  00F8  2900               	ljmp	l2915
  1206  00F9                     __end_of_process_AD_Converter_Value:	
  1207  00F9                     __ptext485:	
  1208 ;; =============== function _setAD_ConvertFlag ends ============
  1209                           
  1210                           
  1211 ;; *************** function _getAD_ConvertFlag *****************
  1212 ;; Defined at:
  1213 ;;		line 64 in file "C:\dev\AK7030-OTP\common.c"
  1214 ;; Parameters:    Size  Location     Type
  1215 ;;		None
  1216 ;; Auto vars:     Size  Location     Type
  1217 ;;		None
  1218 ;; Return value:  Size  Location     Type
  1219 ;;                  1    wreg      unsigned char 
  1220 ;; Registers used:
  1221 ;;		wreg
  1222 ;; Tracked objects:
  1223 ;;		On entry : 0/0
  1224 ;;		On exit  : 0/0
  1225 ;;		Unchanged: FFFFF/0
  1226 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1227 ;;      Params:         0       0       0       0       0
  1228 ;;      Locals:         0       0       0       0       0
  1229 ;;      Temps:          0       0       0       0       0
  1230 ;;      Totals:         0       0       0       0       0
  1231 ;;Total ram usage:        0 bytes
  1232 ;; Hardware stack levels used:    1
  1233 ;; Hardware stack levels required when called:    2
  1234 ;; This function calls:
  1235 ;;		Nothing
  1236 ;; This function is called by:
  1237 ;;		_process_AD_Converter_Value
  1238 ;; This function uses a non-reentrant model
  1239 ;;
  1240  00F9                     _getAD_ConvertFlag:	
  1241                           
  1242                           ;common.c: 65: return adc_convert_flag;
  1243                           
  1244                           ; Regs used in _getAD_ConvertFlag: [wreg]
  1245  00F9  0879               	movf	_adc_convert_flag,w
  1246  00FA  0008               	return
  1247  00FB                     __end_of_getAD_ConvertFlag:	
  1248  00FB                     __ptext484:	
  1249 ;; =============== function _getAdOriginalValue ends ============
  1250                           
  1251                           
  1252 ;; *************** function _setAD_ConvertFlag *****************
  1253 ;; Defined at:
  1254 ;;		line 70 in file "C:\dev\AK7030-OTP\common.c"
  1255 ;; Parameters:    Size  Location     Type
  1256 ;;  flag            1    wreg     unsigned char 
  1257 ;; Auto vars:     Size  Location     Type
  1258 ;;  flag            1    0[BANK0 ] unsigned char 
  1259 ;; Return value:  Size  Location     Type
  1260 ;;		None               void
  1261 ;; Registers used:
  1262 ;;		wreg
  1263 ;; Tracked objects:
  1264 ;;		On entry : 0/0
  1265 ;;		On exit  : 60/0
  1266 ;;		Unchanged: FFF9F/0
  1267 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1268 ;;      Params:         0       0       0       0       0
  1269 ;;      Locals:         0       1       0       0       0
  1270 ;;      Temps:          0       0       0       0       0
  1271 ;;      Totals:         0       1       0       0       0
  1272 ;;Total ram usage:        1 bytes
  1273 ;; Hardware stack levels used:    1
  1274 ;; Hardware stack levels required when called:    2
  1275 ;; This function calls:
  1276 ;;		Nothing
  1277 ;; This function is called by:
  1278 ;;		_process_AD_Converter_Value
  1279 ;; This function uses a non-reentrant model
  1280 ;;
  1281  00FB                     _setAD_ConvertFlag:	
  1282                           
  1283                           ; Regs used in _setAD_ConvertFlag: [wreg]
  1284                           ;setAD_ConvertFlag@flag stored from wreg
  1285  00FB  1283               	bcf	3,5	;RP0=0, select bank0
  1286  00FC  1303               	bcf	3,6	;RP1=0, select bank0
  1287  00FD  00C3               	movwf	setAD_ConvertFlag@flag
  1288                           
  1289                           ;common.c: 71: adc_convert_flag = flag;
  1290  00FE  00F9               	movwf	_adc_convert_flag
  1291  00FF  0008               	return
  1292  0100                     __end_of_setAD_ConvertFlag:	
  1293  0100                     __ptext495:	
  1294 ;; =============== function _isPermitSampleTime ends ============
  1295                           
  1296                           
  1297 ;; *************** function _adc_start *****************
  1298 ;; Defined at:
  1299 ;;		line 99 in file "C:\dev\AK7030-OTP\periph.c"
  1300 ;; Parameters:    Size  Location     Type
  1301 ;;		None
  1302 ;; Auto vars:     Size  Location     Type
  1303 ;;		None
  1304 ;; Return value:  Size  Location     Type
  1305 ;;		None               void
  1306 ;; Registers used:
  1307 ;;		None
  1308 ;; Tracked objects:
  1309 ;;		On entry : 40/20
  1310 ;;		On exit  : 60/0
  1311 ;;		Unchanged: FFF9F/0
  1312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1313 ;;      Params:         0       0       0       0       0
  1314 ;;      Locals:         0       0       0       0       0
  1315 ;;      Temps:          0       0       0       0       0
  1316 ;;      Totals:         0       0       0       0       0
  1317 ;;Total ram usage:        0 bytes
  1318 ;; Hardware stack levels used:    1
  1319 ;; Hardware stack levels required when called:    2
  1320 ;; This function calls:
  1321 ;;		Nothing
  1322 ;; This function is called by:
  1323 ;;		_main
  1324 ;;		_process_AD_Converter_Value
  1325 ;; This function uses a non-reentrant model
  1326 ;;
  1327  0100                     _adc_start:	
  1328  0100                     l2915:	
  1329                           ; Regs used in _adc_start: []
  1330                           
  1331                           
  1332                           ;periph.c: 100: GO=1;
  1333  0100  1283               	bcf	3,5	;RP0=0, select bank0
  1334  0101  149F               	bsf	31,1
  1335  0102  0008               	return
  1336  0103                     __end_of_adc_start:	
  1337  0103                     __ptext482:	
  1338 ;; =============== function _process_AD_Converter_Value ends ============
  1339                           
  1340                           
  1341 ;; *************** function _AD_Sample *****************
  1342 ;; Defined at:
  1343 ;;		line 114 in file "C:\dev\AK7030-OTP\common.c"
  1344 ;; Parameters:    Size  Location     Type
  1345 ;;		None
  1346 ;; Auto vars:     Size  Location     Type
  1347 ;;  index           1    4[BANK0 ] unsigned char 
  1348 ;; Return value:  Size  Location     Type
  1349 ;;		None               void
  1350 ;; Registers used:
  1351 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1352 ;; Tracked objects:
  1353 ;;		On entry : 60/0
  1354 ;;		On exit  : 60/0
  1355 ;;		Unchanged: FFE9F/0
  1356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1357 ;;      Params:         0       0       0       0       0
  1358 ;;      Locals:         0       1       0       0       0
  1359 ;;      Temps:          0       2       0       0       0
  1360 ;;      Totals:         0       3       0       0       0
  1361 ;;Total ram usage:        3 bytes
  1362 ;; Hardware stack levels used:    1
  1363 ;; Hardware stack levels required when called:    3
  1364 ;; This function calls:
  1365 ;;		_getAdOriginalValue
  1366 ;; This function is called by:
  1367 ;;		_process_AD_Converter_Value
  1368 ;; This function uses a non-reentrant model
  1369 ;;
  1370  0103                     _AD_Sample:	
  1371                           
  1372                           ;common.c: 115: if(sampleTimes < 6)
  1373                           
  1374                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1375  0103  3006               	movlw	6
  1376  0104  023A               	subwf	_sampleTimes,w
  1377  0105  1803               	skipnc
  1378  0106  0008               	return
  1379                           
  1380                           ;common.c: 116: {
  1381                           ;common.c: 118: buffer_Sample_AD_Value[sampleTimes] = getAdOriginalValue();
  1382  0107  2186  118A         	fcall	_getAdOriginalValue
  1383  0109  1003               	clrc
  1384  010A  0D3A               	rlf	_sampleTimes,w
  1385  010B  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1386  010C  0084               	movwf	4
  1387  010D  0843               	movf	?_getAdOriginalValue,w
  1388  010E  1383               	bcf	3,7	;select IRP bank0
  1389  010F  0080               	movwf	0
  1390  0110  0A84               	incf	4,f
  1391  0111  0844               	movf	?_getAdOriginalValue+1,w
  1392  0112  0080               	movwf	0
  1393                           
  1394                           ;common.c: 120: if(sampleTimes == 0)
  1395  0113  08BA               	movf	_sampleTimes,f
  1396  0114  1D03               	skipz
  1397  0115  291E               	goto	l3023
  1398                           
  1399                           ;common.c: 121: {
  1400                           ;common.c: 122: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1401  0116  0821               	movf	_buffer_Sample_AD_Value+1,w
  1402  0117  00B1               	movwf	_multiFilterMaxValue+1
  1403  0118  0820               	movf	_buffer_Sample_AD_Value,w
  1404  0119  00B0               	movwf	_multiFilterMaxValue
  1405                           
  1406                           ;common.c: 123: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1407  011A  0821               	movf	_buffer_Sample_AD_Value+1,w
  1408  011B  00B3               	movwf	_multiFilterMinValue+1
  1409  011C  0820               	movf	_buffer_Sample_AD_Value,w
  1410  011D  00B2               	movwf	_multiFilterMinValue
  1411  011E                     l3023:	
  1412                           
  1413                           ;common.c: 124: }
  1414                           ;common.c: 126: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1415  011E  218B  118A         	fcall	PL2	;call to abstracted procedure
  1416  0120  0231               	subwf	_multiFilterMaxValue+1,w
  1417  0121  1D03               	skipz
  1418  0122  2925               	goto	u515
  1419  0123  0845               	movf	??_AD_Sample,w
  1420  0124  0230               	subwf	_multiFilterMaxValue,w
  1421  0125                     u515:	
  1422  0125  1803               	skipnc
  1423  0126  2930               	goto	l1422
  1424                           
  1425                           ;common.c: 127: {
  1426                           ;common.c: 128: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1427  0127  1003               	clrc
  1428  0128  0D3A               	rlf	_sampleTimes,w
  1429  0129  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1430  012A  0084               	movwf	4
  1431  012B  0800               	movf	0,w
  1432  012C  00B0               	movwf	_multiFilterMaxValue
  1433  012D  0A84               	incf	4,f
  1434  012E  0800               	movf	0,w
  1435  012F  00B1               	movwf	_multiFilterMaxValue+1
  1436  0130                     l1422:	
  1437                           
  1438                           ;common.c: 129: }
  1439                           ;common.c: 130: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1440  0130  218B  118A         	fcall	PL2	;call to abstracted procedure
  1441  0132  0833               	movf	_multiFilterMinValue+1,w
  1442  0133  0246               	subwf	??_AD_Sample+1,w
  1443  0134  1D03               	skipz
  1444  0135  2938               	goto	u525
  1445  0136  0832               	movf	_multiFilterMinValue,w
  1446  0137  0245               	subwf	??_AD_Sample,w
  1447  0138                     u525:	
  1448  0138  1803               	skipnc
  1449  0139  2943               	goto	l1423
  1450                           
  1451                           ;common.c: 131: {
  1452                           ;common.c: 132: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1453  013A  1003               	clrc
  1454  013B  0D3A               	rlf	_sampleTimes,w
  1455  013C  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1456  013D  0084               	movwf	4
  1457  013E  0800               	movf	0,w
  1458  013F  00B2               	movwf	_multiFilterMinValue
  1459  0140  0A84               	incf	4,f
  1460  0141  0800               	movf	0,w
  1461  0142  00B3               	movwf	_multiFilterMinValue+1
  1462  0143                     l1423:	
  1463                           
  1464                           ;common.c: 133: }
  1465                           ;common.c: 135: multiFilterSumValue = multiFilterSumValue + buffer_Sample_AD_Value[sampl
      +                          eTimes];
  1466  0143  218B  118A         	fcall	PL2	;call to abstracted procedure
  1467  0145  0845               	movf	??_AD_Sample,w
  1468  0146  07B4               	addwf	_multiFilterSumValue,f
  1469  0147  1803               	skipnc
  1470  0148  0AB5               	incf	_multiFilterSumValue+1,f
  1471  0149  0846               	movf	??_AD_Sample+1,w
  1472  014A  07B5               	addwf	_multiFilterSumValue+1,f
  1473  014B  3006               	movlw	6
  1474                           
  1475                           ;common.c: 137: sampleTimes++;
  1476  014C  0ABA               	incf	_sampleTimes,f
  1477                           
  1478                           ;common.c: 139: if(sampleTimes >= 6)
  1479  014D  023A               	subwf	_sampleTimes,w
  1480  014E  1C03               	skipc
  1481  014F  0008               	return
  1482                           
  1483                           ;common.c: 140: {
  1484                           ;common.c: 141: sampleTimes = 0;
  1485  0150  01BA               	clrf	_sampleTimes
  1486                           
  1487                           ;common.c: 143: if(sampleChannelSelect == 13)
  1488  0151  0848               	movf	_sampleChannelSelect,w
  1489  0152  3A0D               	xorlw	13
  1490  0153  1903               	btfsc	3,2
  1491  0154  2959               	goto	l3037
  1492                           
  1493                           ;common.c: 150: {
  1494                           ;common.c: 151: sampleCH12Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1495                           
  1496                           ;common.c: 148: }
  1497  0155  0848               	movf	_sampleChannelSelect,w
  1498  0156  3A0C               	xorlw	12
  1499  0157  1903               	btfsc	3,2
  1500  0158  2976               	goto	l3041
  1501  0159                     l3037:	
  1502                           
  1503                           ;common.c: 144: {
  1504                           ;common.c: 146: sampleCH13Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 2;
  1505  0159  0832               	movf	_multiFilterMinValue,w
  1506  015A  0730               	addwf	_multiFilterMaxValue,w
  1507  015B  00C5               	movwf	??_AD_Sample
  1508  015C  0833               	movf	_multiFilterMinValue+1,w
  1509  015D  1803               	skipnc
  1510  015E  0A33               	incf	_multiFilterMinValue+1,w
  1511  015F  0731               	addwf	_multiFilterMaxValue+1,w
  1512  0160  00C6               	movwf	??_AD_Sample+1
  1513  0161  09C5               	comf	??_AD_Sample,f
  1514  0162  09C6               	comf	??_AD_Sample+1,f
  1515  0163  0AC5               	incf	??_AD_Sample,f
  1516  0164  1903               	skipnz
  1517  0165  0AC6               	incf	??_AD_Sample+1,f
  1518  0166  0845               	movf	??_AD_Sample,w
  1519  0167  00B6               	movwf	_sampleCH13Value
  1520  0168  0846               	movf	??_AD_Sample+1,w
  1521  0169  00B7               	movwf	_sampleCH13Value+1
  1522  016A  0834               	movf	_multiFilterSumValue,w
  1523  016B  07B6               	addwf	_sampleCH13Value,f
  1524  016C  1803               	skipnc
  1525  016D  0AB7               	incf	_sampleCH13Value+1,f
  1526  016E  0835               	movf	_multiFilterSumValue+1,w
  1527  016F  07B7               	addwf	_sampleCH13Value+1,f
  1528  0170  1003               	clrc
  1529  0171  0CB7               	rrf	_sampleCH13Value+1,f
  1530  0172  0CB6               	rrf	_sampleCH13Value,f
  1531  0173  1003               	clrc
  1532  0174  0CB7               	rrf	_sampleCH13Value+1,f
  1533  0175  0CB6               	rrf	_sampleCH13Value,f
  1534  0176                     l3041:	
  1535                           
  1536                           ;common.c: 147: sampleChannelSelect = 13;
  1537  0176  300D               	movlw	13
  1538  0177  00C8               	movwf	_sampleChannelSelect
  1539                           
  1540                           ;common.c: 158: }
  1541                           ;common.c: 160: for(unsigned char index = 0; index < 6;index++)
  1542  0178  01C7               	clrf	AD_Sample@index
  1543  0179                     l3059:	
  1544                           
  1545                           ;common.c: 161: buffer_Sample_AD_Value[index] = 0;
  1546  0179  1003               	clrc
  1547  017A  0D47               	rlf	AD_Sample@index,w
  1548  017B  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1549  017C  0084               	movwf	4
  1550  017D  3006               	movlw	6
  1551  017E  0180               	clrf	0
  1552  017F  0A84               	incf	4,f
  1553  0180  0180               	clrf	0
  1554  0181  0AC7               	incf	AD_Sample@index,f
  1555  0182  0247               	subwf	AD_Sample@index,w
  1556  0183  1803               	btfsc	3,0
  1557  0184  0008               	return
  1558  0185  2979               	goto	l3059
  1559  0186                     __end_of_AD_Sample:	
  1560  0186                     __ptext483:	
  1561 ;; =============== function _AD_Sample ends ============
  1562                           
  1563                           
  1564 ;; *************** function _getAdOriginalValue *****************
  1565 ;; Defined at:
  1566 ;;		line 76 in file "C:\dev\AK7030-OTP\common.c"
  1567 ;; Parameters:    Size  Location     Type
  1568 ;;		None
  1569 ;; Auto vars:     Size  Location     Type
  1570 ;;		None
  1571 ;; Return value:  Size  Location     Type
  1572 ;;                  2    0[BANK0 ] unsigned int 
  1573 ;; Registers used:
  1574 ;;		wreg
  1575 ;; Tracked objects:
  1576 ;;		On entry : 60/0
  1577 ;;		On exit  : 60/0
  1578 ;;		Unchanged: FFF9F/0
  1579 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1580 ;;      Params:         0       2       0       0       0
  1581 ;;      Locals:         0       0       0       0       0
  1582 ;;      Temps:          0       0       0       0       0
  1583 ;;      Totals:         0       2       0       0       0
  1584 ;;Total ram usage:        2 bytes
  1585 ;; Hardware stack levels used:    1
  1586 ;; Hardware stack levels required when called:    2
  1587 ;; This function calls:
  1588 ;;		Nothing
  1589 ;; This function is called by:
  1590 ;;		_AD_Sample
  1591 ;; This function uses a non-reentrant model
  1592 ;;
  1593  0186                     _getAdOriginalValue:	
  1594                           
  1595                           ;common.c: 77: return adc_original_value;
  1596                           
  1597                           ; Regs used in _getAdOriginalValue: [wreg]
  1598  0186  082F               	movf	_adc_original_value+1,w
  1599  0187  00C4               	movwf	?_getAdOriginalValue+1
  1600  0188  082E               	movf	_adc_original_value,w
  1601  0189  00C3               	movwf	?_getAdOriginalValue
  1602  018A  0008               	return
  1603  018B                     __end_of_getAdOriginalValue:	
  1604  018B                     PL2:	
  1605  018B  1003               	clrc
  1606  018C  0D3A               	rlf	_sampleTimes,w
  1607  018D  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1608  018E  0084               	movwf	4
  1609  018F  0800               	movf	0,w
  1610  0190  00C5               	movwf	??_AD_Sample
  1611  0191  0A84               	incf	4,f
  1612  0192  0800               	movf	0,w
  1613  0193  00C6               	movwf	??_AD_Sample+1
  1614  0194  0008               	return
  1615                           
  1616                           	psect	text486
  1617  025D                     __ptext486:	
  1618 ;; =============== function _getAD_ConvertFlag ends ============
  1619                           
  1620                           
  1621 ;; *************** function _getAdCh13Value *****************
  1622 ;; Defined at:
  1623 ;;		line 176 in file "C:\dev\AK7030-OTP\common.c"
  1624 ;; Parameters:    Size  Location     Type
  1625 ;;		None
  1626 ;; Auto vars:     Size  Location     Type
  1627 ;;		None
  1628 ;; Return value:  Size  Location     Type
  1629 ;;                  2    0[BANK0 ] unsigned int 
  1630 ;; Registers used:
  1631 ;;		wreg
  1632 ;; Tracked objects:
  1633 ;;		On entry : 60/0
  1634 ;;		On exit  : 60/0
  1635 ;;		Unchanged: FFF9F/0
  1636 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1637 ;;      Params:         0       2       0       0       0
  1638 ;;      Locals:         0       0       0       0       0
  1639 ;;      Temps:          0       0       0       0       0
  1640 ;;      Totals:         0       2       0       0       0
  1641 ;;Total ram usage:        2 bytes
  1642 ;; Hardware stack levels used:    1
  1643 ;; Hardware stack levels required when called:    2
  1644 ;; This function calls:
  1645 ;;		Nothing
  1646 ;; This function is called by:
  1647 ;;		_main
  1648 ;; This function uses a non-reentrant model
  1649 ;;
  1650  025D                     _getAdCh13Value:	
  1651                           
  1652                           ;common.c: 177: return sampleCH13Value;
  1653                           
  1654                           ; Regs used in _getAdCh13Value: [wreg]
  1655  025D  0837               	movf	_sampleCH13Value+1,w
  1656  025E  00C4               	movwf	?_getAdCh13Value+1
  1657  025F  0836               	movf	_sampleCH13Value,w
  1658  0260  00C3               	movwf	?_getAdCh13Value
  1659  0261  0008               	return
  1660  0262                     __end_of_getAdCh13Value:	
  1661                           
  1662                           	psect	text487
  1663  0262                     __ptext487:	
  1664 ;; =============== function _getAdCh13Value ends ============
  1665                           
  1666                           
  1667 ;; *************** function _isFinishedSmallTimer *****************
  1668 ;; Defined at:
  1669 ;;		line 217 in file "C:\dev\AK7030-OTP\common.c"
  1670 ;; Parameters:    Size  Location     Type
  1671 ;;		None
  1672 ;; Auto vars:     Size  Location     Type
  1673 ;;		None
  1674 ;; Return value:  Size  Location     Type
  1675 ;;                  1    wreg      unsigned char 
  1676 ;; Registers used:
  1677 ;;		wreg, status,2, status,0
  1678 ;; Tracked objects:
  1679 ;;		On entry : 60/0
  1680 ;;		On exit  : 60/0
  1681 ;;		Unchanged: FFF9F/0
  1682 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1683 ;;      Params:         0       0       0       0       0
  1684 ;;      Locals:         0       0       0       0       0
  1685 ;;      Temps:          0       0       0       0       0
  1686 ;;      Totals:         0       0       0       0       0
  1687 ;;Total ram usage:        0 bytes
  1688 ;; Hardware stack levels used:    1
  1689 ;; Hardware stack levels required when called:    2
  1690 ;; This function calls:
  1691 ;;		Nothing
  1692 ;; This function is called by:
  1693 ;;		_main
  1694 ;; This function uses a non-reentrant model
  1695 ;;
  1696  0262                     _isFinishedSmallTimer:	
  1697                           
  1698                           ;common.c: 218: if(uiSmallTimer == 0)
  1699                           
  1700                           ; Regs used in _isFinishedSmallTimer: [wreg+status,2+status,0]
  1701  0262  0839               	movf	_uiSmallTimer+1,w
  1702  0263  0438               	iorwf	_uiSmallTimer,w
  1703  0264  1903               	btfsc	3,2
  1704                           
  1705                           ;common.c: 219: return 1;
  1706  0265  3401               	retlw	1
  1707                           
  1708                           ;common.c: 220: else
  1709                           ;common.c: 221: return 0;
  1710  0266  3400               	retlw	0
  1711  0267                     __end_of_isFinishedSmallTimer:	
  1712                           
  1713                           	psect	text488
  1714  0267                     __ptext488:	
  1715 ;; =============== function _isFinishedSmallTimer ends ============
  1716                           
  1717                           
  1718 ;; *************** function _isFinishedBigTimer *****************
  1719 ;; Defined at:
  1720 ;;		line 209 in file "C:\dev\AK7030-OTP\common.c"
  1721 ;; Parameters:    Size  Location     Type
  1722 ;;		None
  1723 ;; Auto vars:     Size  Location     Type
  1724 ;;		None
  1725 ;; Return value:  Size  Location     Type
  1726 ;;                  1    wreg      unsigned char 
  1727 ;; Registers used:
  1728 ;;		wreg, status,2, status,0
  1729 ;; Tracked objects:
  1730 ;;		On entry : 60/0
  1731 ;;		On exit  : 60/0
  1732 ;;		Unchanged: FFF9F/0
  1733 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1734 ;;      Params:         0       0       0       0       0
  1735 ;;      Locals:         0       0       0       0       0
  1736 ;;      Temps:          0       0       0       0       0
  1737 ;;      Totals:         0       0       0       0       0
  1738 ;;Total ram usage:        0 bytes
  1739 ;; Hardware stack levels used:    1
  1740 ;; Hardware stack levels required when called:    2
  1741 ;; This function calls:
  1742 ;;		Nothing
  1743 ;; This function is called by:
  1744 ;;		_main
  1745 ;; This function uses a non-reentrant model
  1746 ;;
  1747  0267                     _isFinishedBigTimer:	
  1748                           
  1749                           ;common.c: 210: if(uiBigTimer == 0)
  1750                           
  1751                           ; Regs used in _isFinishedBigTimer: [wreg+status,2+status,0]
  1752  0267  0877               	movf	_uiBigTimer+1,w
  1753  0268  0476               	iorwf	_uiBigTimer,w
  1754  0269  1903               	btfsc	3,2
  1755                           
  1756                           ;common.c: 211: return 1;
  1757  026A  3401               	retlw	1
  1758                           
  1759                           ;common.c: 212: else
  1760                           ;common.c: 213: return 0;
  1761  026B  3400               	retlw	0
  1762  026C                     __end_of_isFinishedBigTimer:	
  1763                           
  1764                           	psect	text489
  1765  0232                     __ptext489:	
  1766 ;; =============== function _isFinishedBigTimer ends ============
  1767                           
  1768                           
  1769 ;; *************** function _startSmallTimer *****************
  1770 ;; Defined at:
  1771 ;;		line 199 in file "C:\dev\AK7030-OTP\common.c"
  1772 ;; Parameters:    Size  Location     Type
  1773 ;;		None
  1774 ;; Auto vars:     Size  Location     Type
  1775 ;;		None
  1776 ;; Return value:  Size  Location     Type
  1777 ;;		None               void
  1778 ;; Registers used:
  1779 ;;		wreg
  1780 ;; Tracked objects:
  1781 ;;		On entry : 60/20
  1782 ;;		On exit  : 60/0
  1783 ;;		Unchanged: FFF9F/0
  1784 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1785 ;;      Params:         0       0       0       0       0
  1786 ;;      Locals:         0       0       0       0       0
  1787 ;;      Temps:          0       0       0       0       0
  1788 ;;      Totals:         0       0       0       0       0
  1789 ;;Total ram usage:        0 bytes
  1790 ;; Hardware stack levels used:    1
  1791 ;; Hardware stack levels required when called:    2
  1792 ;; This function calls:
  1793 ;;		Nothing
  1794 ;; This function is called by:
  1795 ;;		_main
  1796 ;; This function uses a non-reentrant model
  1797 ;;
  1798  0232                     _startSmallTimer:	
  1799                           
  1800                           ;common.c: 200: uiSmallTimer = 10800;
  1801                           
  1802                           ; Regs used in _startSmallTimer: [wreg]
  1803  0232  3030               	movlw	48
  1804  0233  1283               	bcf	3,5	;RP0=0, select bank0
  1805  0234  00B8               	movwf	_uiSmallTimer
  1806  0235  302A               	movlw	42
  1807  0236  00B9               	movwf	_uiSmallTimer+1
  1808                           
  1809                           ;common.c: 203: uiSmallTimer = 180;
  1810  0237  30B4               	movlw	180
  1811  0238  00B8               	movwf	_uiSmallTimer
  1812  0239  01B9               	clrf	_uiSmallTimer+1
  1813  023A  0008               	return
  1814  023B                     __end_of_startSmallTimer:	
  1815                           
  1816                           	psect	text490
  1817  023B                     __ptext490:	
  1818 ;; =============== function _startSmallTimer ends ============
  1819                           
  1820                           
  1821 ;; *************** function _startBigTimer *****************
  1822 ;; Defined at:
  1823 ;;		line 186 in file "C:\dev\AK7030-OTP\common.c"
  1824 ;; Parameters:    Size  Location     Type
  1825 ;;		None
  1826 ;; Auto vars:     Size  Location     Type
  1827 ;;		None
  1828 ;; Return value:  Size  Location     Type
  1829 ;;		None               void
  1830 ;; Registers used:
  1831 ;;		wreg
  1832 ;; Tracked objects:
  1833 ;;		On entry : 40/20
  1834 ;;		On exit  : 60/20
  1835 ;;		Unchanged: FFF9F/0
  1836 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1837 ;;      Params:         0       0       0       0       0
  1838 ;;      Locals:         0       0       0       0       0
  1839 ;;      Temps:          0       0       0       0       0
  1840 ;;      Totals:         0       0       0       0       0
  1841 ;;Total ram usage:        0 bytes
  1842 ;; Hardware stack levels used:    1
  1843 ;; Hardware stack levels required when called:    2
  1844 ;; This function calls:
  1845 ;;		Nothing
  1846 ;; This function is called by:
  1847 ;;		_main
  1848 ;; This function uses a non-reentrant model
  1849 ;;
  1850  023B                     _startBigTimer:	
  1851                           
  1852                           ;common.c: 187: uiBigTimer = 34200;
  1853                           
  1854                           ; Regs used in _startBigTimer: [wreg]
  1855  023B  3098               	movlw	152
  1856  023C  00F6               	movwf	_uiBigTimer
  1857  023D  3085               	movlw	133
  1858  023E  00F7               	movwf	_uiBigTimer+1
  1859                           
  1860                           ;common.c: 191: uiBigTimer = 570;
  1861  023F  303A               	movlw	58
  1862  0240  00F6               	movwf	_uiBigTimer
  1863  0241  3002               	movlw	2
  1864  0242  00F7               	movwf	_uiBigTimer+1
  1865  0243  0008               	return
  1866  0244                     __end_of_startBigTimer:	
  1867                           
  1868                           	psect	text491
  1869  027B                     __ptext491:	
  1870 ;; =============== function _startBigTimer ends ============
  1871                           
  1872                           
  1873 ;; *************** function _setDAC0_ChannelValue *****************
  1874 ;; Defined at:
  1875 ;;		line 181 in file "C:\dev\AK7030-OTP\common.c"
  1876 ;; Parameters:    Size  Location     Type
  1877 ;;  ucValue         1    wreg     unsigned char 
  1878 ;; Auto vars:     Size  Location     Type
  1879 ;;  ucValue         1    0[BANK0 ] unsigned char 
  1880 ;; Return value:  Size  Location     Type
  1881 ;;		None               void
  1882 ;; Registers used:
  1883 ;;		wreg
  1884 ;; Tracked objects:
  1885 ;;		On entry : 60/0
  1886 ;;		On exit  : 60/20
  1887 ;;		Unchanged: FFF9F/0
  1888 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1889 ;;      Params:         0       0       0       0       0
  1890 ;;      Locals:         0       1       0       0       0
  1891 ;;      Temps:          0       0       0       0       0
  1892 ;;      Totals:         0       1       0       0       0
  1893 ;;Total ram usage:        1 bytes
  1894 ;; Hardware stack levels used:    1
  1895 ;; Hardware stack levels required when called:    2
  1896 ;; This function calls:
  1897 ;;		Nothing
  1898 ;; This function is called by:
  1899 ;;		_main
  1900 ;; This function uses a non-reentrant model
  1901 ;;
  1902  027B                     _setDAC0_ChannelValue:	
  1903                           
  1904                           ; Regs used in _setDAC0_ChannelValue: [wreg]
  1905                           ;setDAC0_ChannelValue@ucValue stored from wreg
  1906  027B  00C3               	movwf	setDAC0_ChannelValue@ucValue
  1907                           
  1908                           ;common.c: 182: DACR0=ucValue;
  1909  027C  1683               	bsf	3,5	;RP0=1, select bank1
  1910  027D  0088               	movwf	8	;volatile
  1911  027E  0008               	return
  1912  027F                     __end_of_setDAC0_ChannelValue:	
  1913                           
  1914                           	psect	text492
  1915  026C                     __ptext492:	
  1916 ;; =============== function _setDAC0_ChannelValue ends ============
  1917                           
  1918                           
  1919 ;; *************** function _getAdOriginalCh13Value *****************
  1920 ;; Defined at:
  1921 ;;		line 87 in file "C:\dev\AK7030-OTP\common.c"
  1922 ;; Parameters:    Size  Location     Type
  1923 ;;		None
  1924 ;; Auto vars:     Size  Location     Type
  1925 ;;		None
  1926 ;; Return value:  Size  Location     Type
  1927 ;;                  2    0[BANK0 ] unsigned int 
  1928 ;; Registers used:
  1929 ;;		wreg
  1930 ;; Tracked objects:
  1931 ;;		On entry : 60/0
  1932 ;;		On exit  : 60/0
  1933 ;;		Unchanged: FFF9F/0
  1934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1935 ;;      Params:         0       2       0       0       0
  1936 ;;      Locals:         0       0       0       0       0
  1937 ;;      Temps:          0       0       0       0       0
  1938 ;;      Totals:         0       2       0       0       0
  1939 ;;Total ram usage:        2 bytes
  1940 ;; Hardware stack levels used:    1
  1941 ;; Hardware stack levels required when called:    2
  1942 ;; This function calls:
  1943 ;;		Nothing
  1944 ;; This function is called by:
  1945 ;;		_main
  1946 ;; This function uses a non-reentrant model
  1947 ;;
  1948  026C                     _getAdOriginalCh13Value:	
  1949                           
  1950                           ;common.c: 88: return adc_original_CH13_value;
  1951                           
  1952                           ; Regs used in _getAdOriginalCh13Value: [wreg]
  1953  026C  082D               	movf	_adc_original_CH13_value+1,w
  1954  026D  00C4               	movwf	?_getAdOriginalCh13Value+1
  1955  026E  082C               	movf	_adc_original_CH13_value,w
  1956  026F  00C3               	movwf	?_getAdOriginalCh13Value
  1957  0270  0008               	return
  1958  0271                     __end_of_getAdOriginalCh13Value:	
  1959                           
  1960                           	psect	text493
  1961  0282                     __ptext493:	
  1962 ;; =============== function _getAdOriginalCh13Value ends ============
  1963                           
  1964                           
  1965 ;; *************** function _clrSampeTime *****************
  1966 ;; Defined at:
  1967 ;;		line 235 in file "C:\dev\AK7030-OTP\common.c"
  1968 ;; Parameters:    Size  Location     Type
  1969 ;;		None
  1970 ;; Auto vars:     Size  Location     Type
  1971 ;;		None
  1972 ;; Return value:  Size  Location     Type
  1973 ;;		None               void
  1974 ;; Registers used:
  1975 ;;		status,2
  1976 ;; Tracked objects:
  1977 ;;		On entry : 0/0
  1978 ;;		On exit  : 0/0
  1979 ;;		Unchanged: FFFFF/0
  1980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1981 ;;      Params:         0       0       0       0       0
  1982 ;;      Locals:         0       0       0       0       0
  1983 ;;      Temps:          0       0       0       0       0
  1984 ;;      Totals:         0       0       0       0       0
  1985 ;;Total ram usage:        0 bytes
  1986 ;; Hardware stack levels used:    1
  1987 ;; Hardware stack levels required when called:    2
  1988 ;; This function calls:
  1989 ;;		Nothing
  1990 ;; This function is called by:
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994  0282                     _clrSampeTime:	
  1995                           
  1996                           ;common.c: 236: timer.timer10msStopWatch = 0;
  1997                           
  1998                           ; Regs used in _clrSampeTime: [status,2]
  1999  0282  01FA               	clrf	_timer
  2000  0283  0008               	return
  2001  0284                     __end_of_clrSampeTime:	
  2002                           
  2003                           	psect	text494
  2004  0271                     __ptext494:	
  2005 ;; =============== function _clrSampeTime ends ============
  2006                           
  2007                           
  2008 ;; *************** function _isPermitSampleTime *****************
  2009 ;; Defined at:
  2010 ;;		line 225 in file "C:\dev\AK7030-OTP\common.c"
  2011 ;; Parameters:    Size  Location     Type
  2012 ;;		None
  2013 ;; Auto vars:     Size  Location     Type
  2014 ;;		None
  2015 ;; Return value:  Size  Location     Type
  2016 ;;                  1    wreg      unsigned char 
  2017 ;; Registers used:
  2018 ;;		wreg
  2019 ;; Tracked objects:
  2020 ;;		On entry : 0/0
  2021 ;;		On exit  : 0/0
  2022 ;;		Unchanged: FFFFF/0
  2023 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2024 ;;      Params:         0       0       0       0       0
  2025 ;;      Locals:         0       0       0       0       0
  2026 ;;      Temps:          0       0       0       0       0
  2027 ;;      Totals:         0       0       0       0       0
  2028 ;;Total ram usage:        0 bytes
  2029 ;; Hardware stack levels used:    1
  2030 ;; Hardware stack levels required when called:    2
  2031 ;; This function calls:
  2032 ;;		Nothing
  2033 ;; This function is called by:
  2034 ;;		_main
  2035 ;; This function uses a non-reentrant model
  2036 ;;
  2037  0271                     _isPermitSampleTime:	
  2038                           
  2039                           ;common.c: 226: if(timer.timer10msStopWatch > 10)
  2040                           
  2041                           ; Regs used in _isPermitSampleTime: [wreg]
  2042  0271  300B               	movlw	11
  2043  0272  027A               	subwf	_timer,w
  2044  0273  1803               	btfsc	3,0
  2045                           
  2046                           ;common.c: 227: {
  2047                           ;common.c: 228: return 1;
  2048  0274  3401               	retlw	1
  2049                           
  2050                           ;common.c: 230: else
  2051                           ;common.c: 231: return 0;
  2052  0275  3400               	retlw	0
  2053  0276                     __end_of_isPermitSampleTime:	
  2054                           
  2055                           	psect	text496
  2056  0244                     __ptext496:	
  2057 ;; =============== function _adc_start ends ============
  2058                           
  2059                           
  2060 ;; *************** function _op2_init *****************
  2061 ;; Defined at:
  2062 ;;		line 45 in file "C:\dev\AK7030-OTP\periph.c"
  2063 ;; Parameters:    Size  Location     Type
  2064 ;;		None
  2065 ;; Auto vars:     Size  Location     Type
  2066 ;;		None
  2067 ;; Return value:  Size  Location     Type
  2068 ;;		None               void
  2069 ;; Registers used:
  2070 ;;		wreg, status,2
  2071 ;; Tracked objects:
  2072 ;;		On entry : 17F/20
  2073 ;;		On exit  : 17F/20
  2074 ;;		Unchanged: FFE80/0
  2075 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2076 ;;      Params:         0       0       0       0       0
  2077 ;;      Locals:         0       0       0       0       0
  2078 ;;      Temps:          0       0       0       0       0
  2079 ;;      Totals:         0       0       0       0       0
  2080 ;;Total ram usage:        0 bytes
  2081 ;; Hardware stack levels used:    1
  2082 ;; Hardware stack levels required when called:    2
  2083 ;; This function calls:
  2084 ;;		Nothing
  2085 ;; This function is called by:
  2086 ;;		_main
  2087 ;; This function uses a non-reentrant model
  2088 ;;
  2089  0244                     _op2_init:	
  2090                           
  2091                           ;periph.c: 52: OP2CON1=0x00;
  2092                           
  2093                           ; Regs used in _op2_init: [wreg+status,2]
  2094  0244  019C               	clrf	28	;volatile
  2095                           
  2096                           ;periph.c: 54: OP2CON2=0xA0;
  2097  0245  30A0               	movlw	160
  2098  0246  009D               	movwf	29	;volatile
  2099                           
  2100                           ;periph.c: 55: OP2CON0=0x80;
  2101  0247  3080               	movlw	128
  2102  0248  009B               	movwf	27	;volatile
  2103                           
  2104                           ;periph.c: 58: TRISA7=0;
  2105  0249  1385               	bcf	5,7
  2106                           
  2107                           ;periph.c: 59: TRISB6=1;
  2108  024A  1706               	bsf	6,6
  2109                           
  2110                           ;periph.c: 60: TRISB7 = 1;
  2111  024B  1786               	bsf	6,7
  2112  024C  0008               	return
  2113  024D                     __end_of_op2_init:	
  2114                           
  2115                           	psect	text497
  2116  021C                     __ptext497:	
  2117 ;; =============== function _op2_init ends ============
  2118                           
  2119                           
  2120 ;; *************** function _op1_init *****************
  2121 ;; Defined at:
  2122 ;;		line 26 in file "C:\dev\AK7030-OTP\periph.c"
  2123 ;; Parameters:    Size  Location     Type
  2124 ;;		None
  2125 ;; Auto vars:     Size  Location     Type
  2126 ;;		None
  2127 ;; Return value:  Size  Location     Type
  2128 ;;		None               void
  2129 ;; Registers used:
  2130 ;;		wreg
  2131 ;; Tracked objects:
  2132 ;;		On entry : 17F/20
  2133 ;;		On exit  : 17F/20
  2134 ;;		Unchanged: FFE80/0
  2135 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2136 ;;      Params:         0       0       0       0       0
  2137 ;;      Locals:         0       0       0       0       0
  2138 ;;      Temps:          0       0       0       0       0
  2139 ;;      Totals:         0       0       0       0       0
  2140 ;;Total ram usage:        0 bytes
  2141 ;; Hardware stack levels used:    1
  2142 ;; Hardware stack levels required when called:    2
  2143 ;; This function calls:
  2144 ;;		Nothing
  2145 ;; This function is called by:
  2146 ;;		_main
  2147 ;; This function uses a non-reentrant model
  2148 ;;
  2149  021C                     _op1_init:	
  2150                           
  2151                           ;periph.c: 33: OP1CON1=0x02;
  2152                           
  2153                           ; Regs used in _op1_init: [wreg]
  2154  021C  3002               	movlw	2
  2155  021D  1283               	bcf	3,5	;RP0=0, select bank0
  2156  021E  009C               	movwf	28	;volatile
  2157                           
  2158                           ;periph.c: 34: OP1CON2=0xA0;
  2159  021F  30A0               	movlw	160
  2160  0220  009D               	movwf	29	;volatile
  2161                           
  2162                           ;periph.c: 35: OP1CON0=0x80;
  2163  0221  3080               	movlw	128
  2164  0222  009B               	movwf	27	;volatile
  2165                           
  2166                           ;periph.c: 38: TRISB3=1;
  2167  0223  1683               	bsf	3,5	;RP0=1, select bank1
  2168  0224  1586               	bsf	6,3
  2169                           
  2170                           ;periph.c: 39: TRISB4=1;
  2171  0225  1606               	bsf	6,4
  2172                           
  2173                           ;periph.c: 40: TRISB5=0;
  2174  0226  1286               	bcf	6,5
  2175  0227  0008               	return
  2176  0228                     __end_of_op1_init:	
  2177                           
  2178                           	psect	text498
  2179  0276                     __ptext498:	
  2180 ;; =============== function _op1_init ends ============
  2181                           
  2182                           
  2183 ;; *************** function _dac_init *****************
  2184 ;; Defined at:
  2185 ;;		line 14 in file "C:\dev\AK7030-OTP\periph.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;		None               void
  2192 ;; Registers used:
  2193 ;;		wreg
  2194 ;; Tracked objects:
  2195 ;;		On entry : 17F/20
  2196 ;;		On exit  : 17F/20
  2197 ;;		Unchanged: FFE80/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       0       0       0       0
  2200 ;;      Locals:         0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       0       0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    2
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212  0276                     _dac_init:	
  2213                           
  2214                           ;periph.c: 15: DACCON|=2;
  2215                           
  2216                           ; Regs used in _dac_init: [wreg]
  2217  0276  1487               	bsf	7,1	;volatile
  2218                           
  2219                           ;periph.c: 17: DACR0=0x19;
  2220  0277  3019               	movlw	25
  2221  0278  0088               	movwf	8	;volatile
  2222                           
  2223                           ;periph.c: 18: DACCON|=(1)<<2;
  2224  0279  1507               	bsf	7,2	;volatile
  2225  027A  0008               	return
  2226  027B                     __end_of_dac_init:	
  2227                           
  2228                           	psect	text499
  2229  01F8                     __ptext499:	
  2230 ;; =============== function _dac_init ends ============
  2231                           
  2232                           
  2233 ;; *************** function _adc_test_init *****************
  2234 ;; Defined at:
  2235 ;;		line 85 in file "C:\dev\AK7030-OTP\periph.c"
  2236 ;; Parameters:    Size  Location     Type
  2237 ;;  channel         1    wreg     unsigned char 
  2238 ;;  ref             1    0[BANK0 ] unsigned char 
  2239 ;; Auto vars:     Size  Location     Type
  2240 ;;  channel         1    2[BANK0 ] unsigned char 
  2241 ;; Return value:  Size  Location     Type
  2242 ;;		None               void
  2243 ;; Registers used:
  2244 ;;		wreg, status,2, status,0
  2245 ;; Tracked objects:
  2246 ;;		On entry : 17F/0
  2247 ;;		On exit  : 17F/20
  2248 ;;		Unchanged: FFE80/0
  2249 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2250 ;;      Params:         0       1       0       0       0
  2251 ;;      Locals:         0       1       0       0       0
  2252 ;;      Temps:          0       1       0       0       0
  2253 ;;      Totals:         0       3       0       0       0
  2254 ;;Total ram usage:        3 bytes
  2255 ;; Hardware stack levels used:    1
  2256 ;; Hardware stack levels required when called:    2
  2257 ;; This function calls:
  2258 ;;		Nothing
  2259 ;; This function is called by:
  2260 ;;		_main
  2261 ;; This function uses a non-reentrant model
  2262 ;;
  2263  01F8                     _adc_test_init:	
  2264                           
  2265                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2266                           ;adc_test_init@channel stored from wreg
  2267  01F8  00C5               	movwf	adc_test_init@channel
  2268                           
  2269                           ;periph.c: 86: ADCON0|=channel<<2;
  2270  01F9  00C4               	movwf	??_adc_test_init
  2271  01FA  1003               	clrc
  2272  01FB  0DC4               	rlf	??_adc_test_init,f
  2273  01FC  1003               	clrc
  2274  01FD  0D44               	rlf	??_adc_test_init,w
  2275  01FE  049F               	iorwf	31,f	;volatile
  2276                           
  2277                           ;periph.c: 87: ADCON1|=ref<<6;
  2278  01FF  0843               	movf	adc_test_init@ref,w
  2279  0200  00C4               	movwf	??_adc_test_init
  2280  0201  0CC4               	rrf	??_adc_test_init,f
  2281  0202  0CC4               	rrf	??_adc_test_init,f
  2282  0203  0C44               	rrf	??_adc_test_init,w
  2283  0204  39C0               	andlw	192
  2284  0205  1683               	bsf	3,5	;RP0=1, select bank1
  2285  0206  049F               	iorwf	31,f	;volatile
  2286                           
  2287                           ;periph.c: 88: ADON=1;
  2288  0207  1283               	bcf	3,5	;RP0=0, select bank0
  2289  0208  141F               	bsf	31,0
  2290                           
  2291                           ;periph.c: 89: ADIE=1;
  2292  0209  1683               	bsf	3,5	;RP0=1, select bank1
  2293  020A  150D               	bsf	13,2
  2294  020B  0008               	return
  2295  020C                     __end_of_adc_test_init:	
  2296                           
  2297                           	psect	text500
  2298  027F                     __ptext500:	
  2299 ;; =============== function _adc_test_init ends ============
  2300                           
  2301                           
  2302 ;; *************** function _timer1_interrupt_config *****************
  2303 ;; Defined at:
  2304 ;;		line 56 in file "C:\dev\AK7030-OTP\common.c"
  2305 ;; Parameters:    Size  Location     Type
  2306 ;;		None
  2307 ;; Auto vars:     Size  Location     Type
  2308 ;;		None
  2309 ;; Return value:  Size  Location     Type
  2310 ;;		None               void
  2311 ;; Registers used:
  2312 ;;		None
  2313 ;; Tracked objects:
  2314 ;;		On entry : 17F/20
  2315 ;;		On exit  : 17F/20
  2316 ;;		Unchanged: FFE80/0
  2317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2318 ;;      Params:         0       0       0       0       0
  2319 ;;      Locals:         0       0       0       0       0
  2320 ;;      Temps:          0       0       0       0       0
  2321 ;;      Totals:         0       0       0       0       0
  2322 ;;Total ram usage:        0 bytes
  2323 ;; Hardware stack levels used:    1
  2324 ;; Hardware stack levels required when called:    2
  2325 ;; This function calls:
  2326 ;;		Nothing
  2327 ;; This function is called by:
  2328 ;;		_main
  2329 ;; This function uses a non-reentrant model
  2330 ;;
  2331  027F                     _timer1_interrupt_config:	
  2332                           
  2333                           ;common.c: 57: GIE = 1;
  2334                           
  2335                           ; Regs used in _timer1_interrupt_config: []
  2336  027F  178B               	bsf	11,7
  2337                           
  2338                           ;common.c: 58: PEIE = 1;
  2339  0280  170B               	bsf	11,6
  2340  0281  0008               	return
  2341  0282                     __end_of_timer1_interrupt_config:	
  2342                           
  2343                           	psect	text501
  2344  0228                     __ptext501:	
  2345 ;; =============== function _timer1_interrupt_config ends ============
  2346                           
  2347                           
  2348 ;; *************** function _timer1_config *****************
  2349 ;; Defined at:
  2350 ;;		line 44 in file "C:\dev\AK7030-OTP\common.c"
  2351 ;; Parameters:    Size  Location     Type
  2352 ;;		None
  2353 ;; Auto vars:     Size  Location     Type
  2354 ;;		None
  2355 ;; Return value:  Size  Location     Type
  2356 ;;		None               void
  2357 ;; Registers used:
  2358 ;;		wreg
  2359 ;; Tracked objects:
  2360 ;;		On entry : 17F/40
  2361 ;;		On exit  : 17F/20
  2362 ;;		Unchanged: FFE80/0
  2363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2364 ;;      Params:         0       0       0       0       0
  2365 ;;      Locals:         0       0       0       0       0
  2366 ;;      Temps:          0       0       0       0       0
  2367 ;;      Totals:         0       0       0       0       0
  2368 ;;Total ram usage:        0 bytes
  2369 ;; Hardware stack levels used:    1
  2370 ;; Hardware stack levels required when called:    2
  2371 ;; This function calls:
  2372 ;;		Nothing
  2373 ;; This function is called by:
  2374 ;;		_main
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377  0228                     _timer1_config:	
  2378                           
  2379                           ;common.c: 46: TMR1H=0xCF;
  2380                           
  2381                           ; Regs used in _timer1_config: [wreg]
  2382  0228  30CF               	movlw	207
  2383  0229  1303               	bcf	3,6	;RP1=0, select bank0
  2384  022A  008F               	movwf	15	;volatile
  2385                           
  2386                           ;common.c: 47: TMR1L=0x2C;
  2387  022B  302C               	movlw	44
  2388  022C  008E               	movwf	14	;volatile
  2389                           
  2390                           ;common.c: 48: T1CON=0xE1;
  2391  022D  30E1               	movlw	225
  2392  022E  0090               	movwf	16	;volatile
  2393                           
  2394                           ;common.c: 49: TMR1IE=1;
  2395  022F  1683               	bsf	3,5	;RP0=1, select bank1
  2396  0230  140C               	bsf	12,0
  2397  0231  0008               	return
  2398  0232                     __end_of_timer1_config:	
  2399                           
  2400                           	psect	text502
  2401  0255                     __ptext502:	
  2402 ;; =============== function _timer1_config ends ============
  2403                           
  2404                           
  2405 ;; *************** function _clock_config *****************
  2406 ;; Defined at:
  2407 ;;		line 36 in file "C:\dev\AK7030-OTP\common.c"
  2408 ;; Parameters:    Size  Location     Type
  2409 ;;		None
  2410 ;; Auto vars:     Size  Location     Type
  2411 ;;		None
  2412 ;; Return value:  Size  Location     Type
  2413 ;;		None               void
  2414 ;; Registers used:
  2415 ;;		wreg, status,2
  2416 ;; Tracked objects:
  2417 ;;		On entry : 17F/20
  2418 ;;		On exit  : 17F/40
  2419 ;;		Unchanged: FFE80/0
  2420 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2421 ;;      Params:         0       0       0       0       0
  2422 ;;      Locals:         0       0       0       0       0
  2423 ;;      Temps:          0       0       0       0       0
  2424 ;;      Totals:         0       0       0       0       0
  2425 ;;Total ram usage:        0 bytes
  2426 ;; Hardware stack levels used:    1
  2427 ;; Hardware stack levels required when called:    2
  2428 ;; This function calls:
  2429 ;;		Nothing
  2430 ;; This function is called by:
  2431 ;;		_main
  2432 ;; This function uses a non-reentrant model
  2433 ;;
  2434  0255                     _clock_config:	
  2435                           
  2436                           ;common.c: 38: CLKPR = 0x80;
  2437                           
  2438                           ; Regs used in _clock_config: [wreg+status,2]
  2439  0255  3080               	movlw	128
  2440  0256  1283               	bcf	3,5	;RP0=0, select bank2
  2441  0257  1703               	bsf	3,6	;RP1=1, select bank2
  2442  0258  0088               	movwf	8	;volatile
  2443                           
  2444                           ;common.c: 39: CLKPR = 0x00;
  2445  0259  0188               	clrf	8	;volatile
  2446  025A                     l1389:	
  2447                           ;common.c: 40: while(CLKPCE);
  2448                           
  2449  025A  1F88               	btfss	8,7
  2450  025B  0008               	return
  2451  025C  2A5A               	goto	l1389
  2452  025D                     __end_of_clock_config:	
  2453                           
  2454                           	psect	text503
  2455  0195                     __ptext503:	
  2456 ;; =============== function _clock_config ends ============
  2457                           
  2458                           
  2459 ;; *************** function _ISR *****************
  2460 ;; Defined at:
  2461 ;;		line 240 in file "C:\dev\AK7030-OTP\common.c"
  2462 ;; Parameters:    Size  Location     Type
  2463 ;;		None
  2464 ;; Auto vars:     Size  Location     Type
  2465 ;;		None
  2466 ;; Return value:  Size  Location     Type
  2467 ;;		None               void
  2468 ;; Registers used:
  2469 ;;		wreg, status,2, status,0, pclath, cstack
  2470 ;; Tracked objects:
  2471 ;;		On entry : 0/0
  2472 ;;		On exit  : 40/0
  2473 ;;		Unchanged: FFF9F/0
  2474 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2475 ;;      Params:         0       0       0       0       0
  2476 ;;      Locals:         0       0       0       0       0
  2477 ;;      Temps:          2       0       0       0       0
  2478 ;;      Totals:         2       0       0       0       0
  2479 ;;Total ram usage:        2 bytes
  2480 ;; Hardware stack levels used:    1
  2481 ;; Hardware stack levels required when called:    1
  2482 ;; This function calls:
  2483 ;;		i1_setAD_ConvertFlag
  2484 ;;		_adc_get
  2485 ;; This function is called by:
  2486 ;;		Interrupt level 1
  2487 ;; This function uses a non-reentrant model
  2488 ;;
  2489  0195                     _ISR:	
  2490                           
  2491                           ;common.c: 241: static unsigned char ucTimer1sCnt = 0;
  2492                           ;common.c: 243: if(TMR1IF == 1)
  2493  0195  1283               	bcf	3,5	;RP0=0, select bank0
  2494  0196  1303               	bcf	3,6	;RP1=0, select bank0
  2495  0197  1C0C               	btfss	12,0
  2496  0198  29CF               	goto	i1l1476
  2497  0199  3064               	movlw	100
  2498                           
  2499                           ;common.c: 244: {
  2500                           ;common.c: 245: TMR1IF = 0 ;
  2501  019A  100C               	bcf	12,0
  2502                           
  2503                           ;common.c: 246: timer.timer10msStopWatch++;
  2504  019B  0AFA               	incf	_timer,f
  2505                           
  2506                           ;common.c: 247: ucTimer1sCnt++;
  2507  019C  0AF8               	incf	ISR@ucTimer1sCnt,f
  2508                           
  2509                           ;common.c: 249: if(ucTimer1sCnt >= 100)
  2510  019D  0278               	subwf	ISR@ucTimer1sCnt,w
  2511  019E  1C03               	skipc
  2512  019F  29B5               	goto	i1l2995
  2513                           
  2514                           ;common.c: 250: {
  2515                           ;common.c: 251: ucTimer1sCnt = 0;
  2516  01A0  01F8               	clrf	ISR@ucTimer1sCnt
  2517                           
  2518                           ;common.c: 252: if(uiBigTimer > 0)
  2519  01A1  0877               	movf	_uiBigTimer+1,w
  2520  01A2  0476               	iorwf	_uiBigTimer,w
  2521  01A3  1903               	skipnz
  2522  01A4  29AB               	goto	i1l1471
  2523                           
  2524                           ;common.c: 253: uiBigTimer--;
  2525  01A5  3001               	movlw	1
  2526  01A6  02F6               	subwf	_uiBigTimer,f
  2527  01A7  3000               	movlw	0
  2528  01A8  1C03               	skipc
  2529  01A9  03F7               	decf	_uiBigTimer+1,f
  2530  01AA  02F7               	subwf	_uiBigTimer+1,f
  2531  01AB                     i1l1471:	
  2532                           
  2533                           ;common.c: 255: if(uiSmallTimer)
  2534  01AB  0839               	movf	_uiSmallTimer+1,w
  2535  01AC  0438               	iorwf	_uiSmallTimer,w
  2536  01AD  1903               	skipnz
  2537  01AE  29B5               	goto	i1l2995
  2538                           
  2539                           ;common.c: 256: uiSmallTimer--;
  2540  01AF  3001               	movlw	1
  2541  01B0  02B8               	subwf	_uiSmallTimer,f
  2542  01B1  3000               	movlw	0
  2543  01B2  1C03               	skipc
  2544  01B3  03B9               	decf	_uiSmallTimer+1,f
  2545  01B4  02B9               	subwf	_uiSmallTimer+1,f
  2546  01B5                     i1l2995:	
  2547                           
  2548                           ;common.c: 257: }
  2549                           ;common.c: 259: if(ADIF)
  2550  01B5  1D0D               	btfss	13,2
  2551  01B6  29CF               	goto	i1l1476
  2552  01B7  3001               	movlw	1
  2553                           
  2554                           ;common.c: 260: {
  2555                           ;common.c: 261: ADIF=0;
  2556  01B8  110D               	bcf	13,2
  2557                           
  2558                           ;common.c: 262: setAD_ConvertFlag(1);
  2559  01B9  21E1  118A         	fcall	i1_setAD_ConvertFlag
  2560                           
  2561                           ;common.c: 263: adc_original_value = adc_get();
  2562  01BB  21D6  118A         	fcall	_adc_get
  2563  01BD  0871               	movf	?_adc_get+1,w
  2564  01BE  1283               	bcf	3,5	;RP0=0, select bank0
  2565  01BF  00AF               	movwf	_adc_original_value+1
  2566  01C0  0870               	movf	?_adc_get,w
  2567  01C1  00AE               	movwf	_adc_original_value
  2568                           
  2569                           ;common.c: 264: if(sampleChannelSelect == 12)
  2570  01C2  0848               	movf	_sampleChannelSelect,w
  2571  01C3  3A0C               	xorlw	12
  2572  01C4  1D03               	skipz
  2573  01C5  29C9               	goto	i1l3007
  2574                           
  2575                           ;common.c: 265: adc_original_CH12_value = adc_get();
  2576  01C6  21D6  118A         	fcall	_adc_get
  2577  01C8  29CF               	goto	i1l1476
  2578  01C9                     i1l3007:	
  2579                           
  2580                           ;common.c: 266: else
  2581                           ;common.c: 267: adc_original_CH13_value = adc_get();
  2582  01C9  21D6               	fcall	_adc_get
  2583  01CA  0871               	movf	?_adc_get+1,w
  2584  01CB  1283               	bcf	3,5	;RP0=0, select bank0
  2585  01CC  00AD               	movwf	_adc_original_CH13_value+1
  2586  01CD  0870               	movf	?_adc_get,w
  2587  01CE  00AC               	movwf	_adc_original_CH13_value
  2588  01CF                     i1l1476:	
  2589  01CF  0875               	movf	??_ISR+1,w
  2590  01D0  008A               	movwf	10
  2591  01D1  0E74               	swapf	??_ISR^(0+-128),w
  2592  01D2  0083               	movwf	3
  2593  01D3  0EFE               	swapf	126,f
  2594  01D4  0E7E               	swapf	126,w
  2595  01D5  0009               	retfie
  2596  01D6                     __end_of_ISR:	
  2597  01D6                     __ptext505:	
  2598 ;; =============== function i1_setAD_ConvertFlag ends ============
  2599                           
  2600                           
  2601 ;; *************** function _adc_get *****************
  2602 ;; Defined at:
  2603 ;;		line 104 in file "C:\dev\AK7030-OTP\periph.c"
  2604 ;; Parameters:    Size  Location     Type
  2605 ;;		None
  2606 ;; Auto vars:     Size  Location     Type
  2607 ;;  val             2    2[COMMON] unsigned int 
  2608 ;; Return value:  Size  Location     Type
  2609 ;;                  2    0[COMMON] unsigned int 
  2610 ;; Registers used:
  2611 ;;		wreg
  2612 ;; Tracked objects:
  2613 ;;		On entry : 60/0
  2614 ;;		On exit  : 60/20
  2615 ;;		Unchanged: FFF9F/0
  2616 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2617 ;;      Params:         2       0       0       0       0
  2618 ;;      Locals:         2       0       0       0       0
  2619 ;;      Temps:          0       0       0       0       0
  2620 ;;      Totals:         4       0       0       0       0
  2621 ;;Total ram usage:        4 bytes
  2622 ;; Hardware stack levels used:    1
  2623 ;; This function calls:
  2624 ;;		Nothing
  2625 ;; This function is called by:
  2626 ;;		_ISR
  2627 ;; This function uses a non-reentrant model
  2628 ;;
  2629  01D6                     _adc_get:	
  2630                           
  2631                           ;periph.c: 105: unsigned int val;
  2632                           ;periph.c: 106: val = (ADRESH<<8) | ADRESL;
  2633                           
  2634                           ; Regs used in _adc_get: [wreg]
  2635  01D6  081E               	movf	30,w	;volatile
  2636  01D7  00F3               	movwf	adc_get@val+1
  2637  01D8  01F2               	clrf	adc_get@val
  2638  01D9  1683               	bsf	3,5	;RP0=1, select bank1
  2639  01DA  081E               	movf	30,w	;volatile
  2640  01DB  04F2               	iorwf	adc_get@val,f
  2641                           
  2642                           ;periph.c: 107: return val;
  2643  01DC  0873               	movf	adc_get@val+1,w
  2644  01DD  00F1               	movwf	?_adc_get+1
  2645  01DE  0872               	movf	adc_get@val,w
  2646  01DF  00F0               	movwf	?_adc_get
  2647  01E0  0008               	return
  2648  01E1                     __end_of_adc_get:	
  2649  01E1                     __ptext504:	
  2650 ;; =============== function _ISR ends ============
  2651                           
  2652                           
  2653 ;; *************** function i1_setAD_ConvertFlag *****************
  2654 ;; Defined at:
  2655 ;;		line 70 in file "C:\dev\AK7030-OTP\common.c"
  2656 ;; Parameters:    Size  Location     Type
  2657 ;;  setAD_Conver    1    wreg     unsigned char 
  2658 ;; Auto vars:     Size  Location     Type
  2659 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  2660 ;; Return value:  Size  Location     Type
  2661 ;;		None               void
  2662 ;; Registers used:
  2663 ;;		wreg
  2664 ;; Tracked objects:
  2665 ;;		On entry : 60/0
  2666 ;;		On exit  : 60/0
  2667 ;;		Unchanged: FFF9F/0
  2668 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2669 ;;      Params:         0       0       0       0       0
  2670 ;;      Locals:         1       0       0       0       0
  2671 ;;      Temps:          0       0       0       0       0
  2672 ;;      Totals:         1       0       0       0       0
  2673 ;;Total ram usage:        1 bytes
  2674 ;; Hardware stack levels used:    1
  2675 ;; This function calls:
  2676 ;;		Nothing
  2677 ;; This function is called by:
  2678 ;;		_ISR
  2679 ;; This function uses a non-reentrant model
  2680 ;;
  2681  01E1                     i1_setAD_ConvertFlag:	
  2682                           
  2683                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  2684                           ;i1setAD_ConvertFlag@flag stored from wreg
  2685  01E1  00F0               	movwf	i1setAD_ConvertFlag@flag
  2686                           
  2687                           ;common.c: 71: adc_convert_flag = flag;
  2688  01E2  00F9               	movwf	_adc_convert_flag
  2689  01E3  0008               	return
  2690  01E4                     __end_ofi1_setAD_ConvertFlag:	
  2691                           
  2692                           	psect	intentry
  2693  0004                     __pintentry:	
  2694                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
  2695                           
  2696  0004                     interrupt_function:	
  2697  007E                     saved_w	set	btemp
  2698  0004  00FE               	movwf	btemp
  2699  0005  0E03               	swapf	3,w
  2700  0006  00F4               	movwf	??_ISR
  2701  0007  080A               	movf	10,w
  2702  0008  00F5               	movwf	??_ISR+1
  2703  0009  118A  2995         	ljmp	_ISR
  2704                           
  2705                           	psect	text506
  2706  0000                     __ptext506:	
  2707 ;; =============== function _adc_get ends ============
  2708                           
  2709  007E                     btemp	set	126	;btemp
  2710  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Sun Dec 09 09:33:31 2018

                     ??_clock_config 0043                                    pc 0002  
                                 _GO 00F9                                   fsr 0004  
                ?_getAdOriginalValue 0043             ?_timer1_interrupt_config 0070  
                                l712 00B4                                  l713 00BD  
                                l670 0036                                  l719 00C8  
                                l681 0047                                  l673 003B  
                                l668 00EE                                  l687 0052  
                                l679 0046                                  _PA0 0028  
                                _PA1 0029                                  _GIE 005F  
                                _PA2 002A                                  _PA3 002B  
                                _PB2 0032                                  u515 0125  
                                _ISR 0195                                  u525 0138  
                     _getAdCh13Value 025D                                  fsr0 0004  
                                indf 0000                        _startBigTimer 023B  
                               S3253 01E4                          main@ampStep 003B  
                               ?_ISR 0070                   __size_of_AD_Sample 0083  
                               l2101 0000                                 l2104 0000  
                               l2121 0000                                 l1401 0000  
                               l2115 0000                                 l2107 0000  
                               l1404 0000                                 l1413 0000  
                               l3101 003F                                 l1422 0130  
                               l1407 0000                                 l3031 0000  
                               l1423 0143                                 l3023 011E  
                               l3015 0000                                 l3103 0040  
                               l1440 0000                                 l3041 0176  
                               l3113 004B                                 l1443 0000  
                               l3035 0000                                 l3019 0000  
                               l3123 0054                                 l3115 004C  
                               l1437 0000                                 l3061 0000  
                               l3037 0159                                 l3029 0000  
                               l3125 005E                                 l3133 006A  
                               l1446 0000                                 l3063 0000  
                               l3039 0000                                 l3071 0000  
                               l3151 0087                                 l3143 0000  
                               l3127 0000                                 l1392 0000  
                               l1464 0000                                 l3065 0000  
                               l3145 0000                                 l3137 0000  
                               l3129 0000                                 l3081 0000  
                               l3073 0000                                 l1395 0000  
                               l3059 0179                                 l3163 0000  
                               l3139 0081                                 l3091 0000  
                               l3083 0000                                 l3075 0000  
                               l1389 025A                                 l3069 0000  
                               l3157 0091                                 l3085 0000  
                               l3077 0000                                 l1398 0000  
                               l3167 0099                                 l3159 0092  
                               l3095 0000                                 l3087 0000  
                               l3079 0000                                 l3185 00C1  
                               l3177 00AC                                 l3097 0038  
                               l3089 00D3                                 l3195 00CC  
                               l3187 00C2                                 l3179 0000  
                               l2901 0000                                 l3197 00CD  
                               l2911 0000                                 l2903 0000  
                               l2913 0000                                 l2905 0000  
                               l2907 0000                                 l2915 0100  
                               l2931 0000                                 l2909 0000  
                               l2917 0000                                 l2941 0000  
                               l2935 0000                                 l2873 0000  
                               l2881 0000                                 l2929 0000  
                               l2937 0000                                 l2953 0000  
                               l2875 0000                                 l2883 0000  
                               l2891 0000                                 l2939 0000  
                               l2877 0000                                 l2885 0000  
                               l2893 0000                                 l2965 0000  
                               l2973 0000                                 l2879 0000  
                               l2887 0000                                 l2895 0000  
                               l2975 0000                                 l2889 0000  
                               l2897 0000                                 l2969 0000  
                               l2899 0000                                 _ADIE 046A  
                               _ADIF 006A                                 _ADON 00F8  
                               _PEIE 005E                 ??_getAdOriginalValue 0045  
             ??_isFinishedSmallTimer 0043                                 _main 000D  
                  ??_startSmallTimer 0043                                 btemp 007E  
                               start 000B              ?_getAdOriginalCh13Value 0043  
                              ??_ISR 0074           __end_of_isPermitSampleTime 0276  
             __end_of_getAdCh13Value 0262                  _sampleChannelSelect 0048  
                              ?_main 0070                                _DACR0 0088  
                              _CLKPR 0108                                _T1CON 0010  
                    __end_of_adc_get 01E1                                _TMR1H 000F  
                              _TMR1L 000E                       ?_startBigTimer 0070  
              setAD_ConvertFlag@flag 0043                        main@tDA_timer 003C  
                              _timer 007A                                pclath 000A  
                              status 0003                                wtemp0 007E  
     __end_of_getAdOriginalCh13Value 0271                 __end_of_clrSampeTime 0284  
         __end_of_isFinishedBigTimer 026C                         __end_of_main 00EF  
             __size_of_adc_test_init 0014                    __end_of_AD_Sample 0186  
                    ?_getAdCh13Value 0043                 _setDAC0_ChannelValue 027B  
          main@ucInstalledBatteryCnt 0042                               ??_main 0048  
                    _sampleCH13Value 0036                               _ADCON0 001F  
                             _ADCON1 009F                 __end_of_clock_config 025D  
                             _DACCON 0087                               _ADRESH 001E  
                             _ADRESL 009E                               _CLKPCE 0847  
                             i1l3001 0000                               i1l3003 0000  
                             i1l2124 0000                               i1l1404 0000  
                             i1l3013 0000                               i1l3007 01C9  
                             i1l3009 0000                               i1l1471 01AB  
                             i1l1476 01CF                               i1l2983 0000  
                             i1l2985 0000                               i1l2995 01B5  
                             i1l2979 0000                               i1l2989 0000  
                             i1l2999 0000                     __end_of_dac_init 027B  
                             _TMR1IE 0460                               _TMR1IF 0060  
                  _getAD_ConvertFlag 00F9                    _setAD_ConvertFlag 00FB  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISB1 0431                               _TRISA3 042B  
                             _TRISB2 0432                               _TRISB3 0433  
                             _TRISB4 0434                               _TRISB5 0435  
                             _TRISA7 042F                               _TRISB6 0436  
                             _TRISB7 0437                   ?_getAD_ConvertFlag 0070  
                 ?_setAD_ConvertFlag 0070                     __end_of_op1_init 0228  
                   __end_of_op2_init 024D               main@ucConfirmTimerZptS 003F  
                          ??_adc_get 0072                  ??_getAD_ConvertFlag 0043  
                ??_setAD_ConvertFlag 0043                ?_setDAC0_ChannelValue 0070  
                             clrloop 024E                      ??_startBigTimer 0043  
                             saved_w 007E          ?_process_AD_Converter_Value 0070  
                      _adc_test_init 01F8            __end_of_getAD_ConvertFlag 00FB  
          __end_of_setAD_ConvertFlag 0100                   __size_of_adc_start 0003  
                     __pcstackCOMMON 0070                         __pidataBANK0 0000  
                    _startSmallTimer 0232              _adc_original_CH13_value 002C  
              __end_of_timer1_config 0232                       ?_adc_test_init 0043  
   __size_of_timer1_interrupt_config 0003                __size_of_clrSampeTime 0002  
                         __pbssBANK0 0020         __size_ofi1_setAD_ConvertFlag 0003  
                         adc_get@val 0072                           __pmaintext 000D  
             ??_setDAC0_ChannelValue 0043                           __pintentry 0004  
                          ?_dac_init 0070                __size_of_clock_config 0008  
                            _OP1CON0 001B                              _OP1CON1 001C  
                            _OP1CON2 001D                              _OP2CON0 009B  
                            _OP2CON1 009C                              _OP2CON2 009D  
                       _clrSampeTime 0282                    __end_of_adc_start 0103  
                          ?_op1_init 0070                            ?_op2_init 0070  
                 _isPermitSampleTime 0271               _buffer_Sample_AD_Value 0020  
                 _adc_original_value 002E           __size_of_getAD_ConvertFlag 0002  
         __size_of_setAD_ConvertFlag 0005          __size_of_getAdOriginalValue 0005  
                ?_isPermitSampleTime 0070        __size_of_isFinishedSmallTimer 0005  
                         _uiBigTimer 0076                     ??_getAdCh13Value 0045  
                       _clock_config 0255                              _adc_get 01D6  
            __end_of_startSmallTimer 023B                  _multiFilterMaxValue 0030  
                _multiFilterMinValue 0032                 ??_isPermitSampleTime 0043  
                 _isFinishedBigTimer 0267                           ??_dac_init 0043  
                          _AD_Sample 0103                         __size_of_ISR 0041  
                    ??_adc_test_init 0044                           ??_op1_init 0043  
                         ??_op2_init 0043                  ?_isFinishedBigTimer 0070  
                _multiFilterSumValue 0034                 end_of_initialization 0219  
               ??_isFinishedBigTimer 0043                           ?_AD_Sample 0070  
                   _adc_convert_flag 0079              _timer1_interrupt_config 027F  
                     AD_Sample@index 0047                           main@ucInit 0041  
                   ?_startSmallTimer 0070                  i1_setAD_ConvertFlag 01E1  
              __end_of_startBigTimer 0244                  start_initialization 020C  
                        __end_of_ISR 01D6             ??_getAdOriginalCh13Value 0045  
               ?i1_setAD_ConvertFlag 0070                main@ucCheckBatteryCnt 003D  
                        __pdataBANK0 0048                          ??_AD_Sample 0045  
          ??_timer1_interrupt_config 0043                          __pbssCOMMON 0076  
                  __size_of_dac_init 0005                        __pcstackBANK0 0043  
                          _adc_start 0100                    __size_of_op1_init 000C  
                  __size_of_op2_init 0009                ??i1_setAD_ConvertFlag 0070  
             __size_of_timer1_config 000A                            __ptext500 027F  
                          __ptext501 0228                            __ptext502 0255  
                          __ptext503 0195                            __ptext504 01E1  
                          __ptext505 01D6                            __ptext506 0000  
                          __ptext481 00EF                            __ptext490 023B  
                          __ptext482 0103                            __ptext491 027B  
                          __ptext483 0186                            __ptext492 026C  
                          __ptext484 00FB                            __ptext493 0282  
                          __ptext485 00F9                            __ptext494 0271  
                          __ptext486 025D                            __ptext495 0100  
                          __ptext487 0262                            __ptext496 0244  
                          __ptext488 0267                            __ptext497 021C  
                          __ptext489 0232                            __ptext498 0276  
                          __ptext499 01F8                             ?_adc_get 0070  
      __size_of_setDAC0_ChannelValue 0004         __end_of_isFinishedSmallTimer 0267  
                          __pswtext1 01E4                      ISR@ucTimer1sCnt 0078  
         __end_of_getAdOriginalValue 018B                           ?_adc_start 0070  
    __size_of_getAdOriginalCh13Value 0005                    interrupt_function 0004  
    __end_of_timer1_interrupt_config 0282                 adc_test_init@channel 0045  
        __size_of_isPermitSampleTime 0005                         _uiSmallTimer 0038  
              __end_of_adc_test_init 020C                        _timer1_config 0228  
       ??_process_AD_Converter_Value 0048                 main@ucConfirmTimer1S 003E  
        __size_of_isFinishedBigTimer 0005               _getAdOriginalCh13Value 026C  
                   __size_of_adc_get 000B  __size_of_process_AD_Converter_Value 000A  
                           _dac_init 0276              __size_of_getAdCh13Value 0005  
                     ?_timer1_config 0070                             _op1_init 021C  
                           _op2_init 0244                          ??_adc_start 0043  
                      __size_of_main 00E2                    main@ucConfrimeCnt 0040  
               _isFinishedSmallTimer 0262                             clear_ram 024D  
        setDAC0_ChannelValue@ucValue 0043                        ?_clrSampeTime 0070  
                        _sampleTimes 003A             __size_of_startSmallTimer 0009  
                           intlevel1 0000                ?_isFinishedSmallTimer 0070  
             __size_of_startBigTimer 0009                        ?_clock_config 0070  
            i1setAD_ConvertFlag@flag 0070                       ??_clrSampeTime 0043  
                    ??_timer1_config 0043          __end_ofi1_setAD_ConvertFlag 01E4  
 __end_of_process_AD_Converter_Value 00F9           _process_AD_Converter_Value 00EF  
       __end_of_setDAC0_ChannelValue 027F                     adc_test_init@ref 0043  
                 _getAdOriginalValue 0186  
