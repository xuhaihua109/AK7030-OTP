

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Thu Nov 29 17:20:20 2018

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataCOMMON,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    13                           	psect	maintext,global,class=CODE,delta=2
    14                           	psect	swtext1,local,class=CONST,delta=2
    15                           	psect	text715,local,class=CODE,delta=2
    16                           	psect	text723,local,class=CODE,delta=2
    17                           	psect	text724,local,class=CODE,delta=2
    18                           	psect	text725,local,class=CODE,delta=2
    19                           	psect	text726,local,class=CODE,delta=2
    20                           	psect	text727,local,class=CODE,delta=2
    21                           	psect	text728,local,class=CODE,delta=2
    22                           	psect	text729,local,class=CODE,delta=2
    23                           	psect	text730,local,class=CODE,delta=2
    24                           	psect	text731,local,class=CODE,delta=2
    25                           	psect	text732,local,class=CODE,delta=2
    26                           	psect	text733,local,class=CODE,delta=2
    27                           	psect	text734,local,class=CODE,delta=2
    28                           	psect	text735,local,class=CODE,delta=2
    29                           	psect	text736,local,class=CODE,delta=2
    30                           	psect	text737,local,class=CODE,delta=2
    31                           	psect	text738,local,class=CODE,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	text739,local,class=CODE,delta=2
    34                           	psect	pa_nodes,global,class=CODE,delta=2
    35                           	dabs	1,0x7E,2
    36  000A                     	;#
    37                           
    38                           	psect	config
    39  2000  2FFF               	dw	12287	;#
    40  2001  3FDE               	dw	16350	;#
    41  2002  3FF8               	dw	16376	;#
    42                           
    43                           	psect	idataCOMMON
    44  0000                     __pidataCOMMON:	
    45  001F                     _ADCON0	set	31
    46  001E                     _ADRESH	set	30
    47  001B                     _OP1CON0	set	27
    48  001C                     _OP1CON1	set	28
    49  001D                     _OP1CON2	set	29
    50  0010                     _T1CON	set	16
    51  000F                     _TMR1H	set	15
    52  000E                     _TMR1L	set	14
    53  006A                     _ADIF	set	106
    54  00F8                     _ADON	set	248
    55  00FA                     _CHS0	set	250
    56  00FB                     _CHS1	set	251
    57  00FC                     _CHS2	set	252
    58  00FD                     _CHS3	set	253
    59  005F                     _GIE	set	95
    60  0028                     _PA0	set	40
    61  0029                     _PA1	set	41
    62  002A                     _PA2	set	42
    63  002B                     _PA3	set	43
    64  0032                     _PB2	set	50
    65  005E                     _PEIE	set	94
    66  0060                     _TMR1IF	set	96
    67  0080                     _TMR1ON	set	128
    68  009F                     _ADCON1	set	159
    69  009E                     _ADRESL	set	158
    70  0087                     _DACCON	set	135
    71  0088                     _DACR0	set	136
    72  0089                     _DACR1	set	137
    73  009B                     _OP2CON0	set	155
    74  009C                     _OP2CON1	set	156
    75  009D                     _OP2CON2	set	157
    76  046A                     _ADIE	set	1130
    77  0460                     _TMR1IE	set	1120
    78  0428                     _TRISA0	set	1064
    79  0429                     _TRISA1	set	1065
    80  042A                     _TRISA2	set	1066
    81  042B                     _TRISA3	set	1067
    82  042F                     _TRISA7	set	1071
    83  0430                     _TRISB0	set	1072
    84  0432                     _TRISB2	set	1074
    85  0433                     _TRISB3	set	1075
    86  0434                     _TRISB4	set	1076
    87  0435                     _TRISB5	set	1077
    88  0436                     _TRISB6	set	1078
    89  0108                     _CLKPR	set	264
    90  0847                     _CLKPCE	set	2119
    91                           
    92                           	psect	cinit
    93  05FD                     start_initialization:	
    94  05FD  3020               	movlw	low __pbssBANK0
    95                           
    96                           ; Clear objects allocated to COMMON
    97  05FE  01F8               	clrf	__pbssCOMMON& (0+127)
    98  05FF  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
    99  0600  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   100                           
   101                           ; Clear objects allocated to BANK0
   102  0601  1383               	bcf	3,7	;select IRP bank0
   103  0602  0084               	movwf	4
   104  0603  304B               	movlw	low (__pbssBANK0+43)
   105  0604  118A  25EA         	fcall	clear_ram
   106                           
   107                           ;initializer for _sampleChannelSelect
   108  0606  300D               	movlw	13
   109  0607  00FB               	movwf	__pdataCOMMON& (0+127)
   110  0608                     end_of_initialization:	
   111                           ;End of C runtime variable initialization code
   112                           
   113  0608  0183               	clrf	3
   114  0609  118A  2E3C         	ljmp	_main	;jump to C main() function
   115                           
   116                           	psect	bssCOMMON
   117  0078                     __pbssCOMMON:	
   118  0078                     _sampleCount:	
   119  0078                     	ds	1
   120  0079                     _sampleTimes:	
   121  0079                     	ds	1
   122  007A                     main@ampStep:	
   123  007A                     	ds	1
   124                           
   125                           	psect	dataCOMMON
   126  007B                     __pdataCOMMON:	
   127  007B                     _sampleChannelSelect:	
   128  007B                     	ds	1
   129                           
   130                           	psect	bssBANK0
   131  0020                     __pbssBANK0:	
   132  0020                     _buffer_Sample_AD_Value:	
   133  0020                     	ds	20
   134  0034                     ISR@flashCnt:	
   135  0034                     	ds	2
   136  0036                     _multiFilterMaxValue:	
   137  0036                     	ds	2
   138  0038                     _multiFilterMinValue:	
   139  0038                     	ds	2
   140  003A                     _multiFilterSumValue:	
   141  003A                     	ds	2
   142  003C                     _sampleCH13Value:	
   143  003C                     	ds	2
   144  003E                     _uiBigTimer:	
   145  003E                     	ds	2
   146  0040                     _uiSmallTimer:	
   147  0040                     	ds	2
   148  0042                     _timer:	
   149  0042                     	ds	1
   150  0043                     _ucTimer1sCnt:	
   151  0043                     	ds	1
   152  0044                     main@tDA_timer:	
   153  0044                     	ds	1
   154  0045                     main@ucCheckBatteryCnt:	
   155  0045                     	ds	1
   156  0046                     main@ucConfirmTimer1S:	
   157  0046                     	ds	1
   158  0047                     main@ucConfirmTimerZptS:	
   159  0047                     	ds	1
   160  0048                     main@ucConfrimeCnt:	
   161  0048                     	ds	1
   162  0049                     main@ucInit:	
   163  0049                     	ds	1
   164  004A                     main@ucInstalledBatteryCnt:	
   165  004A                     	ds	1
   166                           
   167                           	psect	clrtext
   168  05EA                     clear_ram:	
   169                           ;	Called with FSR containing the base address, and
   170                           ;	W with the last address+1
   171                           
   172  05EA  0064               	clrwdt	;clear the watchdog before getting into this loop
   173  05EB                     clrloop:	
   174  05EB  0180               	clrf	0	;clear RAM location pointed to by FSR
   175  05EC  0A84               	incf	4,f	;increment pointer
   176  05ED  0604               	xorwf	4,w	;XOR with final address
   177  05EE  1903               	btfsc	3,2	;have we reached the end yet?
   178  05EF  3400               	retlw	0	;all done for this memory range, return
   179  05F0  0604               	xorwf	4,w	;XOR again to restore value
   180  05F1  2DEB               	goto	clrloop	;do the next byte
   181                           
   182                           	psect	cstackCOMMON
   183  0070                     __pcstackCOMMON:	
   184  0070                     ?_clock_config:	
   185  0070                     ?_timer1_interrupt_config:	
   186                           ; 0 bytes @ 0x0
   187                           
   188  0070                     ?_timer1_config:	
   189                           ; 0 bytes @ 0x0
   190                           
   191  0070                     ?_adConverter_config:	
   192                           ; 0 bytes @ 0x0
   193                           
   194  0070                     ?_dac_init:	
   195                           ; 0 bytes @ 0x0
   196                           
   197  0070                     ?_op1_init:	
   198                           ; 0 bytes @ 0x0
   199                           
   200  0070                     ?_op2_init:	
   201                           ; 0 bytes @ 0x0
   202                           
   203  0070                     ?_start_timer1:	
   204                           ; 0 bytes @ 0x0
   205                           
   206  0070                     ?_clrSampeTime:	
   207                           ; 0 bytes @ 0x0
   208                           
   209  0070                     ?_process_AD_Converter_Value:	
   210                           ; 0 bytes @ 0x0
   211                           
   212  0070                     ?_setDAC0_ChannelValue:	
   213                           ; 0 bytes @ 0x0
   214                           
   215  0070                     ?_startBigTimer:	
   216                           ; 0 bytes @ 0x0
   217                           
   218  0070                     ?_startSmallTimer:	
   219                           ; 0 bytes @ 0x0
   220                           
   221  0070                     ?_AD_Sample:	
   222                           ; 0 bytes @ 0x0
   223                           
   224  0070                     ?_SetTempThermistorChannel:	
   225                           ; 0 bytes @ 0x0
   226                           
   227  0070                     ?_main:	
   228                           ; 0 bytes @ 0x0
   229                           
   230  0070                     ?_start_AD_Converter:	
   231                           ; 0 bytes @ 0x0
   232                           
   233  0070                     ?_stop_AD_Converter:	
   234                           ; 0 bytes @ 0x0
   235                           
   236  0070                     ?_clearAdCompleteFalg:	
   237                           ; 0 bytes @ 0x0
   238                           
   239  0070                     ?_ISR:	
   240                           ; 0 bytes @ 0x0
   241                           
   242  0070                     ??_ISR:	
   243                           ; 0 bytes @ 0x0
   244                           
   245  0070                     ?_isPermitSampleTime:	
   246                           ; 0 bytes @ 0x0
   247                           
   248  0070                     ?_isFinishedBigTimer:	
   249                           ; 1 bytes @ 0x0
   250                           
   251  0070                     ?_isFinishedSmallTimer:	
   252                           ; 1 bytes @ 0x0
   253                           
   254  0070                     ?_isAD_Completed:	
   255                           ; 1 bytes @ 0x0
   256                           
   257                           
   258                           ; 1 bytes @ 0x0
   259  0070                     	ds	2
   260  0072                     ??_clock_config:	
   261  0072                     ??_timer1_interrupt_config:	
   262                           ; 0 bytes @ 0x2
   263                           
   264  0072                     ??_timer1_config:	
   265                           ; 0 bytes @ 0x2
   266                           
   267  0072                     ??_adConverter_config:	
   268                           ; 0 bytes @ 0x2
   269                           
   270  0072                     ??_dac_init:	
   271                           ; 0 bytes @ 0x2
   272                           
   273  0072                     ??_op1_init:	
   274                           ; 0 bytes @ 0x2
   275                           
   276  0072                     ??_op2_init:	
   277                           ; 0 bytes @ 0x2
   278                           
   279  0072                     ??_start_timer1:	
   280                           ; 0 bytes @ 0x2
   281                           
   282  0072                     ??_isPermitSampleTime:	
   283                           ; 0 bytes @ 0x2
   284                           
   285  0072                     ??_clrSampeTime:	
   286                           ; 0 bytes @ 0x2
   287                           
   288  0072                     ??_setDAC0_ChannelValue:	
   289                           ; 0 bytes @ 0x2
   290                           
   291  0072                     ??_startBigTimer:	
   292                           ; 0 bytes @ 0x2
   293                           
   294  0072                     ??_startSmallTimer:	
   295                           ; 0 bytes @ 0x2
   296                           
   297  0072                     ??_isFinishedBigTimer:	
   298                           ; 0 bytes @ 0x2
   299                           
   300  0072                     ??_isFinishedSmallTimer:	
   301                           ; 0 bytes @ 0x2
   302                           
   303  0072                     ??_SetTempThermistorChannel:	
   304                           ; 0 bytes @ 0x2
   305                           
   306  0072                     ??_start_AD_Converter:	
   307                           ; 0 bytes @ 0x2
   308                           
   309  0072                     ??_stop_AD_Converter:	
   310                           ; 0 bytes @ 0x2
   311                           
   312  0072                     ??_isAD_Completed:	
   313                           ; 0 bytes @ 0x2
   314                           
   315  0072                     ??_clearAdCompleteFalg:	
   316                           ; 0 bytes @ 0x2
   317                           
   318  0072                     ?_getAdCh13Value:	
   319                           ; 0 bytes @ 0x2
   320                           
   321  0072                     ?_getAdValue:	
   322                           ; 2 bytes @ 0x2
   323                           
   324                           
   325                           ; 2 bytes @ 0x2
   326  0072                     	ds	2
   327  0074                     ??_getAdCh13Value:	
   328  0074                     ??_getAdValue:	
   329                           ; 0 bytes @ 0x4
   330                           
   331  0074                     getAdValue@AdValue:	
   332                           ; 0 bytes @ 0x4
   333                           
   334                           
   335                           ; 2 bytes @ 0x4
   336  0074                     	ds	2
   337  0076                     getAdValue@AdHighValue:	
   338                           
   339                           ; 2 bytes @ 0x6
   340  0076                     	ds	2
   341  0078                     ??_process_AD_Converter_Value:	
   342  0078                     ??_main:	
   343                           ; 0 bytes @ 0x8
   344                           
   345                           
   346                           	psect	cstackBANK0
   347  004B                     __pcstackBANK0:	
   348                           ; 0 bytes @ 0x8
   349                           
   350  004B                     ??_AD_Sample:	
   351                           
   352                           ; 0 bytes @ 0x0
   353  004B                     	ds	2
   354                           
   355                           	psect	maintext
   356  063C                     __pmaintext:	
   357 ;;Data sizes: Strings 0, constant 0, data 1, bss 46, persistent 0 stack 0
   358 ;;Auto spaces:   Size  Autos    Used
   359 ;; COMMON          14      8      12
   360 ;; BANK0           80      2      45
   361 ;; BANK1           80      0       0
   362 ;; BANK3           96      0       0
   363 ;; BANK2           96      0       0
   364 ;;
   365 ;; Pointer list with targets:
   366 ;; ?_getAdCh13Value	unsigned int  size(1) Largest target is 0
   367 ;;
   368 ;; ?_getAdValue	unsigned int  size(1) Largest target is 0
   369 ;;
   370 ;;
   371 ;; Critical Paths under _main in COMMON
   372 ;;
   373 ;;   _AD_Sample->_getAdValue
   374 ;;
   375 ;; Critical Paths under _ISR in COMMON
   376 ;;
   377 ;;   None.
   378 ;;
   379 ;; Critical Paths under _main in BANK0
   380 ;;
   381 ;;   _process_AD_Converter_Value->_AD_Sample
   382 ;;
   383 ;; Critical Paths under _ISR in BANK0
   384 ;;
   385 ;;   None.
   386 ;;
   387 ;; Critical Paths under _main in BANK1
   388 ;;
   389 ;;   None.
   390 ;;
   391 ;; Critical Paths under _ISR in BANK1
   392 ;;
   393 ;;   None.
   394 ;;
   395 ;; Critical Paths under _main in BANK3
   396 ;;
   397 ;;   None.
   398 ;;
   399 ;; Critical Paths under _ISR in BANK3
   400 ;;
   401 ;;   None.
   402 ;;
   403 ;; Critical Paths under _main in BANK2
   404 ;;
   405 ;;   None.
   406 ;;
   407 ;; Critical Paths under _ISR in BANK2
   408 ;;
   409 ;;   None.
   410 ;;
   411 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   412 ;;
   413 ;;
   414 ;;Call Graph Tables:
   415 ;;
   416 ;; ---------------------------------------------------------------------------------
   417 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   418 ;; ---------------------------------------------------------------------------------
   419 ;; (0) _main                                                 0     0      0      50
   420 ;;                       _clock_config
   421 ;;            _timer1_interrupt_config
   422 ;;                      _timer1_config
   423 ;;                 _adConverter_config
   424 ;;                           _dac_init
   425 ;;                           _op1_init
   426 ;;                           _op2_init
   427 ;;                       _start_timer1
   428 ;;                 _isPermitSampleTime
   429 ;;                       _clrSampeTime
   430 ;;         _process_AD_Converter_Value
   431 ;;                     _getAdCh13Value
   432 ;;               _setDAC0_ChannelValue
   433 ;;                      _startBigTimer
   434 ;;                    _startSmallTimer
   435 ;;                 _isFinishedBigTimer
   436 ;;               _isFinishedSmallTimer
   437 ;; ---------------------------------------------------------------------------------
   438 ;; (1) _process_AD_Converter_Value                           0     0      0      50
   439 ;;                          _AD_Sample
   440 ;; ---------------------------------------------------------------------------------
   441 ;; (2) _AD_Sample                                            2     2      0      50
   442 ;;                                              0 BANK0      2     2      0
   443 ;;           _SetTempThermistorChannel
   444 ;;                 _start_AD_Converter
   445 ;;                     _isAD_Completed
   446 ;;                _clearAdCompleteFalg
   447 ;;                  _stop_AD_Converter
   448 ;;                         _getAdValue
   449 ;; ---------------------------------------------------------------------------------
   450 ;; (3) _getAdValue                                           6     4      2      50
   451 ;;                                              2 COMMON     6     4      2
   452 ;;                     _isAD_Completed
   453 ;; ---------------------------------------------------------------------------------
   454 ;; (3) _SetTempThermistorChannel                             0     0      0       0
   455 ;; ---------------------------------------------------------------------------------
   456 ;; (3) _clearAdCompleteFalg                                  0     0      0       0
   457 ;; ---------------------------------------------------------------------------------
   458 ;; (4) _isAD_Completed                                       0     0      0       0
   459 ;; ---------------------------------------------------------------------------------
   460 ;; (3) _stop_AD_Converter                                    0     0      0       0
   461 ;; ---------------------------------------------------------------------------------
   462 ;; (3) _start_AD_Converter                                   0     0      0       0
   463 ;; ---------------------------------------------------------------------------------
   464 ;; (1) _isFinishedSmallTimer                                 0     0      0       0
   465 ;; ---------------------------------------------------------------------------------
   466 ;; (1) _isFinishedBigTimer                                   0     0      0       0
   467 ;; ---------------------------------------------------------------------------------
   468 ;; (1) _startSmallTimer                                      0     0      0       0
   469 ;; ---------------------------------------------------------------------------------
   470 ;; (1) _startBigTimer                                        0     0      0       0
   471 ;; ---------------------------------------------------------------------------------
   472 ;; (1) _setDAC0_ChannelValue                                 0     0      0       0
   473 ;; ---------------------------------------------------------------------------------
   474 ;; (1) _getAdCh13Value                                       2     0      2       0
   475 ;;                                              2 COMMON     2     0      2
   476 ;; ---------------------------------------------------------------------------------
   477 ;; (1) _clrSampeTime                                         0     0      0       0
   478 ;; ---------------------------------------------------------------------------------
   479 ;; (1) _isPermitSampleTime                                   0     0      0       0
   480 ;; ---------------------------------------------------------------------------------
   481 ;; (1) _start_timer1                                         0     0      0       0
   482 ;; ---------------------------------------------------------------------------------
   483 ;; (1) _op2_init                                             0     0      0       0
   484 ;; ---------------------------------------------------------------------------------
   485 ;; (1) _op1_init                                             0     0      0       0
   486 ;; ---------------------------------------------------------------------------------
   487 ;; (1) _dac_init                                             0     0      0       0
   488 ;; ---------------------------------------------------------------------------------
   489 ;; (1) _adConverter_config                                   0     0      0       0
   490 ;; ---------------------------------------------------------------------------------
   491 ;; (1) _timer1_config                                        0     0      0       0
   492 ;; ---------------------------------------------------------------------------------
   493 ;; (1) _timer1_interrupt_config                              0     0      0       0
   494 ;; ---------------------------------------------------------------------------------
   495 ;; (1) _clock_config                                         0     0      0       0
   496 ;; ---------------------------------------------------------------------------------
   497 ;; Estimated maximum stack depth 4
   498 ;; ---------------------------------------------------------------------------------
   499 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   500 ;; ---------------------------------------------------------------------------------
   501 ;; (5) _ISR                                                  2     2      0       0
   502 ;;                                              0 COMMON     2     2      0
   503 ;; ---------------------------------------------------------------------------------
   504 ;; Estimated maximum stack depth 5
   505 ;; ---------------------------------------------------------------------------------
   506 ;; Call Graph Graphs:
   507 ;; _main (ROOT)
   508 ;;   _clock_config
   509 ;;   _timer1_interrupt_config
   510 ;;   _timer1_config
   511 ;;   _adConverter_config
   512 ;;   _dac_init
   513 ;;   _op1_init
   514 ;;   _op2_init
   515 ;;   _start_timer1
   516 ;;   _isPermitSampleTime
   517 ;;   _clrSampeTime
   518 ;;   _process_AD_Converter_Value
   519 ;;     _AD_Sample
   520 ;;       _SetTempThermistorChannel
   521 ;;       _start_AD_Converter
   522 ;;       _isAD_Completed
   523 ;;       _clearAdCompleteFalg
   524 ;;       _stop_AD_Converter
   525 ;;       _getAdValue
   526 ;;         _isAD_Completed
   527 ;;   _getAdCh13Value
   528 ;;   _setDAC0_ChannelValue
   529 ;;   _startBigTimer
   530 ;;   _startSmallTimer
   531 ;;   _isFinishedBigTimer
   532 ;;   _isFinishedSmallTimer
   533 ;;
   534 ;; _ISR (ROOT)
   535 ;;
   536 ;; Address spaces:
   537 ;;Name               Size   Autos  Total    Cost      Usage
   538 ;;BANK3               60      0       0      10        0.0%
   539 ;;BITBANK3            60      0       0       9        0.0%
   540 ;;SFR3                 0      0       0       4        0.0%
   541 ;;BITSFR3              0      0       0       4        0.0%
   542 ;;BANK2               60      0       0      12        0.0%
   543 ;;BITBANK2            60      0       0      11        0.0%
   544 ;;SFR2                 0      0       0       5        0.0%
   545 ;;BITSFR2              0      0       0       5        0.0%
   546 ;;SFR1                 0      0       0       2        0.0%
   547 ;;BITSFR1              0      0       0       2        0.0%
   548 ;;BANK1               50      0       0       8        0.0%
   549 ;;BITBANK1            50      0       0       7        0.0%
   550 ;;CODE                 0      0       0       0        0.0%
   551 ;;DATA                 0      0      3D       6        0.0%
   552 ;;ABS                  0      0      39       3        0.0%
   553 ;;NULL                 0      0       0       0        0.0%
   554 ;;STACK                0      0       4       2        0.0%
   555 ;;BANK0               50      2      2D       5       56.3%
   556 ;;BITBANK0            50      0       0       4        0.0%
   557 ;;SFR0                 0      0       0       1        0.0%
   558 ;;BITSFR0              0      0       0       1        0.0%
   559 ;;COMMON               E      8       C       1       85.7%
   560 ;;BITCOMMON            E      0       0       0        0.0%
   561                           
   562                           
   563 ;; *************** function _main *****************
   564 ;; Defined at:
   565 ;;		line 84 in file "C:\AK7030-OTP\main.c"
   566 ;; Parameters:    Size  Location     Type
   567 ;;		None
   568 ;; Auto vars:     Size  Location     Type
   569 ;;		None
   570 ;; Return value:  Size  Location     Type
   571 ;;		None               void
   572 ;; Registers used:
   573 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, btemp+1, pclath, cstack
   574 ;; Tracked objects:
   575 ;;		On entry : 17F/0
   576 ;;		On exit  : 60/0
   577 ;;		Unchanged: 0/0
   578 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   579 ;;      Params:         0       0       0       0       0
   580 ;;      Locals:         0       0       0       0       0
   581 ;;      Temps:          0       0       0       0       0
   582 ;;      Totals:         0       0       0       0       0
   583 ;;Total ram usage:        0 bytes
   584 ;; Hardware stack levels required when called:    5
   585 ;; This function calls:
   586 ;;		_clock_config
   587 ;;		_timer1_interrupt_config
   588 ;;		_timer1_config
   589 ;;		_adConverter_config
   590 ;;		_dac_init
   591 ;;		_op1_init
   592 ;;		_op2_init
   593 ;;		_start_timer1
   594 ;;		_isPermitSampleTime
   595 ;;		_clrSampeTime
   596 ;;		_process_AD_Converter_Value
   597 ;;		_getAdCh13Value
   598 ;;		_setDAC0_ChannelValue
   599 ;;		_startBigTimer
   600 ;;		_startSmallTimer
   601 ;;		_isFinishedBigTimer
   602 ;;		_isFinishedSmallTimer
   603 ;; This function is called by:
   604 ;;		Startup code after reset
   605 ;; This function uses a non-reentrant model
   606 ;;
   607  063C                     _main:	
   608                           
   609                           ;main.c: 85: enum step
   610                           ;main.c: 86: {
   611                           ;main.c: 87: SENSE_PB2_INPUT_VOLTAGE = 0,
   612                           ;main.c: 88: SENSE_PB2_DURATION_ONE_SECOND,
   613                           ;main.c: 89: SENSE_PB2_INPUT_VOLTAGE__AGAIN,
   614                           ;main.c: 90: SENSE_PB2_DURATION__SECOND,
   615                           ;main.c: 91: SET_PA2_VALUE,
   616                           ;main.c: 92: PROCESS_AD_VALUE,
   617                           ;main.c: 93: WAIT_SET_TIME_FINISHED,
   618                           ;main.c: 94: SET_TIME_BE_FINISHED,
   619                           ;main.c: 95: CHECKING_PULL_OUT_BATTERY,
   620                           ;main.c: 96: CHECKING_INSTALLED_BATTERY,
   621                           ;main.c: 97: };
   622                           ;main.c: 99: enum workTimerType
   623                           ;main.c: 100: {
   624                           ;main.c: 101: BIG_TIMER_WORK = 0,
   625                           
   626                           ; Regs used in _main: [allreg]
   627  063C  118A  25AE  118A   	fcall	_clock_config
   628                           
   629                           ;main.c: 110: timer1_interrupt_config();
   630  063F  118A  25A8  118A   	fcall	_timer1_interrupt_config
   631                           
   632                           ;main.c: 111: timer1_config();
   633  0642  118A  25CA  118A   	fcall	_timer1_config
   634                           
   635                           ;main.c: 113: adConverter_config();
   636  0645  118A  25F2  118A   	fcall	_adConverter_config
   637                           
   638                           ;main.c: 117: TRISB3=1;
   639  0648  1586               	bsf	6,3
   640                           
   641                           ;main.c: 118: TRISB4=1;
   642  0649  1606               	bsf	6,4
   643                           
   644                           ;main.c: 119: TRISB5=0;
   645  064A  1286               	bcf	6,5
   646                           
   647                           ;main.c: 122: TRISA7=0;
   648  064B  1385               	bcf	5,7
   649                           
   650                           ;main.c: 123: TRISB6=1;
   651  064C  1706               	bsf	6,6
   652                           
   653                           ;main.c: 125: TRISA0 = 0;
   654  064D  1005               	bcf	5,0
   655                           
   656                           ;main.c: 126: TRISA1 = 0;
   657  064E  1085               	bcf	5,1
   658                           
   659                           ;main.c: 127: TRISA3 = 0;
   660  064F  1185               	bcf	5,3
   661                           
   662                           ;main.c: 128: TRISA2 = 0;
   663  0650  1105               	bcf	5,2
   664                           
   665                           ;main.c: 129: PA2 = 1;
   666  0651  1283               	bcf	3,5	;RP0=0, select bank0
   667  0652  1505               	bsf	5,2
   668                           
   669                           ;main.c: 131: TRISB2 = 1;
   670  0653  1683               	bsf	3,5	;RP0=1, select bank1
   671  0654  1506               	bsf	6,2
   672                           
   673                           ;main.c: 134: dac_init();
   674  0655  118A  25D2  118A   	fcall	_dac_init
   675                           
   676                           ;main.c: 135: op1_init();
   677  0658  118A  25DA  118A   	fcall	_op1_init
   678                           
   679                           ;main.c: 136: op2_init();
   680  065B  118A  25E2  118A   	fcall	_op2_init
   681                           
   682                           ;main.c: 138: start_timer1();
   683  065E  118A  2596  118A   	fcall	_start_timer1
   684                           
   685                           ;main.c: 149: switch(ampStep)
   686  0661  2EFE               	goto	l3417
   687  0662                     l668:	
   688                           ;main.c: 150: {
   689                           ;main.c: 151: case SENSE_PB2_INPUT_VOLTAGE:
   690                           
   691                           
   692                           ;main.c: 152: {
   693                           ;main.c: 153: if(!PB2)
   694  0662  1906               	btfsc	6,2
   695  0663  2EFE               	goto	l3417
   696  0664                     l3425:	
   697                           
   698                           ;main.c: 154: ampStep++;
   699  0664  0AFA               	incf	main@ampStep,f
   700  0665  2EFE               	goto	l3417
   701  0666                     l671:	
   702                           ;main.c: 156: }
   703                           ;main.c: 158: case SENSE_PB2_DURATION_ONE_SECOND:
   704                           
   705                           
   706                           ;main.c: 159: {
   707                           ;main.c: 160: static unsigned char ucConfirmTimer1S = 0;
   708                           ;main.c: 161: if(!PB2)
   709  0666  1906               	btfsc	6,2
   710  0667  2E6A               	goto	l3429
   711                           
   712                           ;main.c: 162: {
   713                           ;main.c: 163: ucConfirmTimer1S++;
   714  0668  0AC6               	incf	main@ucConfirmTimer1S,f
   715                           
   716                           ;main.c: 164: }
   717  0669  2E6B               	goto	l3431
   718  066A                     l3429:	
   719                           
   720                           ;main.c: 165: else
   721                           ;main.c: 166: {
   722                           ;main.c: 167: ucConfirmTimer1S = 0;
   723  066A  01C6               	clrf	main@ucConfirmTimer1S
   724  066B                     l3431:	
   725                           
   726                           ;main.c: 168: }
   727                           ;main.c: 170: if(ucConfirmTimer1S >= 10)
   728  066B  300A               	movlw	10
   729  066C  0246               	subwf	main@ucConfirmTimer1S,w
   730  066D  1C03               	skipc
   731  066E  2EFE               	goto	l3417
   732                           
   733                           ;main.c: 171: {
   734                           ;main.c: 172: ucConfirmTimer1S = 0;
   735  066F  01C6               	clrf	main@ucConfirmTimer1S
   736  0670  2E64               	goto	l3425
   737  0671                     l677:	
   738                           ;main.c: 177: }
   739                           ;main.c: 179: case SENSE_PB2_INPUT_VOLTAGE__AGAIN:
   740                           
   741                           
   742                           ;main.c: 180: {
   743                           ;main.c: 181: if(!PB2)
   744  0671  2E62               	goto	l668
   745  0672                     l679:	
   746                           ;main.c: 184: }
   747                           ;main.c: 186: case SENSE_PB2_DURATION__SECOND:
   748                           
   749                           
   750                           ;main.c: 187: {
   751                           ;main.c: 188: static unsigned char ucConfirmTimerZptS = 0;
   752                           ;main.c: 189: if(!PB2)
   753  0672  1906               	btfsc	6,2
   754  0673  2E76               	goto	l3441
   755                           
   756                           ;main.c: 190: {
   757                           ;main.c: 191: ucConfirmTimerZptS++;
   758  0674  0AC7               	incf	main@ucConfirmTimerZptS,f
   759                           
   760                           ;main.c: 192: }
   761  0675  2E77               	goto	l3443
   762  0676                     l3441:	
   763                           
   764                           ;main.c: 193: else
   765                           ;main.c: 194: {
   766                           ;main.c: 195: ucConfirmTimerZptS = 0;
   767  0676  01C7               	clrf	main@ucConfirmTimerZptS
   768  0677                     l3443:	
   769                           
   770                           ;main.c: 196: }
   771                           ;main.c: 198: if(ucConfirmTimerZptS >= 3)
   772  0677  3003               	movlw	3
   773  0678  0247               	subwf	main@ucConfirmTimerZptS,w
   774  0679  1C03               	skipc
   775  067A  2EFE               	goto	l3417
   776                           
   777                           ;main.c: 199: {
   778                           ;main.c: 200: ucConfirmTimerZptS = 0;
   779  067B  01C7               	clrf	main@ucConfirmTimerZptS
   780  067C  2E64               	goto	l3425
   781  067D                     l685:	
   782                           ;main.c: 205: }
   783                           ;main.c: 207: case SET_PA2_VALUE:
   784                           
   785                           
   786                           ;main.c: 208: {
   787                           ;main.c: 209: PA2 = 0;
   788  067D  1105               	bcf	5,2
   789  067E  2E64               	goto	l3425
   790  067F                     l3451:	
   791                           
   792                           ;main.c: 215: {
   793                           ;main.c: 216: static unsigned char ucInit = 0;
   794                           ;main.c: 217: if(getAdCh13Value() > 40)
   795  067F  118A  2599  118A   	fcall	_getAdCh13Value
   796  0682  3000               	movlw	0
   797  0683  0273               	subwf	?_getAdCh13Value+1,w
   798  0684  3029               	movlw	41
   799  0685  1903               	skipnz
   800  0686  0272               	subwf	?_getAdCh13Value,w
   801  0687  1C03               	skipc
   802  0688  2E95               	goto	l3461
   803  0689                     l3453:	
   804  0689  301B               	movlw	27
   805                           
   806                           ;main.c: 218: {
   807                           ;main.c: 219: PA0 = 0;
   808  068A  1005               	bcf	5,0
   809                           
   810                           ;main.c: 220: PA1 = 1;
   811  068B  1485               	bsf	5,1
   812                           
   813                           ;main.c: 221: PA3 = 1;
   814  068C  1585               	bsf	5,3
   815                           
   816                           ;main.c: 222: tDA_timer = BIG_TIMER_WORK;
   817  068D  01C4               	clrf	main@tDA_timer
   818                           
   819                           ;main.c: 223: setDAC0_ChannelValue(27);
   820  068E  118A  2000  118A   	fcall	_setDAC0_ChannelValue
   821                           
   822                           ;main.c: 224: startBigTimer();
   823  0691  118A  25BC  118A   	fcall	_startBigTimer
   824                           
   825                           ;main.c: 225: }
   826  0694  2E64               	goto	l3425
   827  0695                     l3461:	
   828                           
   829                           ;main.c: 226: else if(getAdCh13Value() <35)
   830  0695  118A  2599  118A   	fcall	_getAdCh13Value
   831  0698  3000               	movlw	0
   832  0699  0273               	subwf	?_getAdCh13Value+1,w
   833  069A  3023               	movlw	35
   834  069B  1903               	skipnz
   835  069C  0272               	subwf	?_getAdCh13Value,w
   836  069D  1803               	skipnc
   837  069E  2EAC               	goto	l3469
   838  069F  3019               	movlw	25
   839                           
   840                           ;main.c: 227: {
   841                           ;main.c: 228: PA0 = 1;
   842  06A0  1405               	bsf	5,0
   843                           
   844                           ;main.c: 229: PA1 = 0;
   845  06A1  1085               	bcf	5,1
   846                           
   847                           ;main.c: 230: PA3 = 0;
   848  06A2  1185               	bcf	5,3
   849                           
   850                           ;main.c: 231: tDA_timer = SMALL_TIMER_WORK;
   851  06A3  01C4               	clrf	main@tDA_timer
   852  06A4  0AC4               	incf	main@tDA_timer,f
   853                           
   854                           ;main.c: 232: setDAC0_ChannelValue(25);
   855  06A5  118A  2000  118A   	fcall	_setDAC0_ChannelValue
   856                           
   857                           ;main.c: 233: startSmallTimer();
   858  06A8  118A  25C3  118A   	fcall	_startSmallTimer
   859                           
   860                           ;main.c: 234: }
   861  06AB  2E64               	goto	l3425
   862  06AC                     l3469:	
   863                           
   864                           ;main.c: 235: else
   865                           ;main.c: 236: {
   866                           ;main.c: 237: if(!ucInit)
   867  06AC  08C9               	movf	main@ucInit,f
   868  06AD  1D03               	skipz
   869  06AE  2E64               	goto	l3425
   870                           
   871                           ;main.c: 238: {
   872                           ;main.c: 239: ucInit = 1;
   873  06AF  01C9               	clrf	main@ucInit
   874  06B0  0AC9               	incf	main@ucInit,f
   875  06B1  2E89               	goto	l3453
   876  06B2                     l3481:	
   877                           ;main.c: 244: setDAC0_ChannelValue(27);
   878                           
   879                           ;main.c: 243: tDA_timer = BIG_TIMER_WORK;
   880                           
   881                           ;main.c: 242: PA3 = 1;
   882                           
   883                           ;main.c: 241: PA1 = 1;
   884                           
   885                           ;main.c: 240: PA0 = 0;
   886                           
   887                           
   888                           ;main.c: 258: {
   889                           ;main.c: 259: static unsigned char ucConfrimeCnt = 0;
   890                           ;main.c: 260: if(!isFinishedBigTimer())
   891  06B2  118A  259E  118A   	fcall	_isFinishedBigTimer
   892  06B5  3800               	iorlw	0
   893  06B6  1D03               	skipz
   894  06B7  2E64               	goto	l3425
   895                           
   896                           ;main.c: 261: {
   897                           ;main.c: 262: if(!PB2)
   898  06B8  1906               	btfsc	6,2
   899  06B9  2EBC               	goto	l3487
   900                           
   901                           ;main.c: 263: ucConfrimeCnt++;
   902  06BA  0AC8               	incf	main@ucConfrimeCnt,f
   903  06BB  2EBD               	goto	l3489
   904  06BC                     l3487:	
   905                           
   906                           ;main.c: 264: else
   907                           ;main.c: 265: ucConfrimeCnt = 0;
   908  06BC  01C8               	clrf	main@ucConfrimeCnt
   909  06BD                     l3489:	
   910                           
   911                           ;main.c: 267: if(ucConfrimeCnt >=3)
   912  06BD  3003               	movlw	3
   913  06BE  0248               	subwf	main@ucConfrimeCnt,w
   914  06BF  1C03               	skipc
   915  06C0  2EFE               	goto	l3417
   916  06C1  3004               	movlw	4
   917                           
   918                           ;main.c: 268: {
   919                           ;main.c: 269: ucConfrimeCnt = 0;
   920  06C2  01C8               	clrf	main@ucConfrimeCnt
   921                           
   922                           ;main.c: 270: ampStep = SET_PA2_VALUE;
   923  06C3  2ED5               	goto	L1
   924  06C4                     l3497:	
   925                           
   926                           ;main.c: 281: {
   927                           ;main.c: 282: if(!isFinishedSmallTimer())
   928  06C4  118A  25A3  118A   	fcall	_isFinishedSmallTimer
   929  06C7  3800               	iorlw	0
   930  06C8  1D03               	skipz
   931  06C9  2E64               	goto	l3425
   932                           
   933                           ;main.c: 283: {
   934                           ;main.c: 284: if(getAdCh13Value() > 40)
   935  06CA  118A  2599  118A   	fcall	_getAdCh13Value
   936  06CD  3000               	movlw	0
   937  06CE  0273               	subwf	?_getAdCh13Value+1,w
   938  06CF  3029               	movlw	41
   939  06D0  1903               	skipnz
   940  06D1  0272               	subwf	?_getAdCh13Value,w
   941  06D2  1C03               	skipc
   942  06D3  2EFE               	goto	l3417
   943                           
   944                           ;main.c: 285: ampStep = PROCESS_AD_VALUE;
   945  06D4  3005               	movlw	5
   946  06D5                     L1:	
   947  06D5  00FA               	movwf	main@ampStep
   948  06D6  2EFE               	goto	l3417
   949  06D7                     l3507:	
   950  06D7  0844               	movf	main@tDA_timer,w
   951                           
   952                           ; Switch size 1, requested type "space"
   953                           ; Number of cases is 2, Range of values is 0 to 1
   954                           ; switch strategies available:
   955                           ; Name         Instructions Cycles
   956                           ; simple_byte            7     4 (average)
   957                           ; direct_byte           11     7 (fixed)
   958                           ; jumptable            260     6 (fixed)
   959                           ; rangetable             6     6 (fixed)
   960                           ; spacedrange           10     9 (fixed)
   961                           ; locatedrange           2     3 (fixed)
   962                           ;	Chosen strategy is simple_byte
   963  06D8  3A00               	xorlw	0	; case 0
   964  06D9  1903               	skipnz
   965  06DA  2EB2               	goto	l3481
   966  06DB  3A01               	xorlw	1	; case 1
   967  06DC  1903               	skipnz
   968  06DD  2EC4               	goto	l3497
   969  06DE  2F17               	goto	l666
   970  06DF                     l710:	
   971                           ;main.c: 299: }
   972                           ;main.c: 301: case SET_TIME_BE_FINISHED:
   973                           
   974  06DF  3019               	movlw	25
   975                           
   976                           ;main.c: 302: {
   977                           ;main.c: 303: PA2 = 1;
   978  06E0  1505               	bsf	5,2
   979                           
   980                           ;main.c: 304: PA0 = 0;
   981  06E1  1005               	bcf	5,0
   982                           
   983                           ;main.c: 305: PA1 = 0;
   984  06E2  1085               	bcf	5,1
   985                           
   986                           ;main.c: 306: PA2 = 0;
   987  06E3  1105               	bcf	5,2
   988                           
   989                           ;main.c: 307: setDAC0_ChannelValue(25);
   990  06E4  118A  2000  118A   	fcall	_setDAC0_ChannelValue
   991  06E7  2E64               	goto	l3425
   992  06E8                     l711:	
   993                           ;main.c: 310: }
   994                           ;main.c: 312: case CHECKING_PULL_OUT_BATTERY:
   995                           
   996                           
   997                           ;main.c: 313: {
   998                           ;main.c: 314: static unsigned char ucCheckBatteryCnt = 0;
   999                           ;main.c: 315: if(PB2)
  1000  06E8  1D06               	btfss	6,2
  1001  06E9  2EEC               	goto	l3515
  1002                           
  1003                           ;main.c: 316: ucCheckBatteryCnt++;
  1004  06EA  0AC5               	incf	main@ucCheckBatteryCnt,f
  1005  06EB  2EED               	goto	l3517
  1006  06EC                     l3515:	
  1007                           
  1008                           ;main.c: 317: else
  1009                           ;main.c: 318: ucCheckBatteryCnt = 0;
  1010  06EC  01C5               	clrf	main@ucCheckBatteryCnt
  1011  06ED                     l3517:	
  1012                           
  1013                           ;main.c: 320: if(ucCheckBatteryCnt > 2)
  1014  06ED  3003               	movlw	3
  1015  06EE  0245               	subwf	main@ucCheckBatteryCnt,w
  1016  06EF  1C03               	skipc
  1017  06F0  2EFE               	goto	l3417
  1018                           
  1019                           ;main.c: 321: {
  1020                           ;main.c: 322: ucCheckBatteryCnt = 0;
  1021  06F1  01C5               	clrf	main@ucCheckBatteryCnt
  1022  06F2  2E64               	goto	l3425
  1023  06F3                     l717:	
  1024                           ;main.c: 326: }
  1025                           ;main.c: 328: case CHECKING_INSTALLED_BATTERY:
  1026                           
  1027                           
  1028                           ;main.c: 329: {
  1029                           ;main.c: 330: static unsigned char ucInstalledBatteryCnt = 0;
  1030                           ;main.c: 331: if(!PB2)
  1031  06F3  1906               	btfsc	6,2
  1032  06F4  2EF7               	goto	l3525
  1033                           
  1034                           ;main.c: 332: ucInstalledBatteryCnt++;
  1035  06F5  0ACA               	incf	main@ucInstalledBatteryCnt,f
  1036  06F6  2EF8               	goto	l3527
  1037  06F7                     l3525:	
  1038                           
  1039                           ;main.c: 333: else
  1040                           ;main.c: 334: ucInstalledBatteryCnt = 0;
  1041  06F7  01CA               	clrf	main@ucInstalledBatteryCnt
  1042  06F8                     l3527:	
  1043                           
  1044                           ;main.c: 336: if(ucInstalledBatteryCnt > 10)
  1045  06F8  300B               	movlw	11
  1046  06F9  024A               	subwf	main@ucInstalledBatteryCnt,w
  1047  06FA  1C03               	skipc
  1048  06FB  2EFE               	goto	l3417
  1049                           
  1050                           ;main.c: 337: {
  1051                           ;main.c: 338: ucInstalledBatteryCnt = 0;
  1052  06FC  01CA               	clrf	main@ucInstalledBatteryCnt
  1053                           
  1054                           ;main.c: 339: ampStep = SENSE_PB2_INPUT_VOLTAGE;
  1055  06FD  01FA               	clrf	main@ampStep
  1056  06FE                     l3417:	
  1057  06FE  0064               	clrwdt	;#
  1058                           
  1059                           ;main.c: 144: if(isPermitSampleTime())
  1060  06FF  118A  25B5  118A   	fcall	_isPermitSampleTime
  1061  0702  3A00               	xorlw	0
  1062  0703  1903               	skipnz
  1063  0704  2EFE               	goto	l3417
  1064                           
  1065                           ;main.c: 145: {
  1066                           ;main.c: 146: clrSampeTime();
  1067  0705  118A  2594  118A   	fcall	_clrSampeTime
  1068                           
  1069                           ;main.c: 147: process_AD_Converter_Value();
  1070  0708  118A  2718  118A   	fcall	_process_AD_Converter_Value
  1071  070B  087A               	movf	main@ampStep,w
  1072                           
  1073                           ; Switch size 1, requested type "space"
  1074                           ; Number of cases is 10, Range of values is 0 to 9
  1075                           ; switch strategies available:
  1076                           ; Name         Instructions Cycles
  1077                           ; direct_byte           27     7 (fixed)
  1078                           ; simple_byte           31    16 (average)
  1079                           ; jumptable            260     6 (fixed)
  1080                           ; rangetable            14     6 (fixed)
  1081                           ; spacedrange           26     9 (fixed)
  1082                           ; locatedrange          10     3 (fixed)
  1083                           ;	Chosen strategy is direct_byte
  1084  070C  0084               	movwf	4
  1085  070D  300A               	movlw	10
  1086  070E  0204               	subwf	4,w
  1087  070F  1803               	skipnc
  1088  0710  2EFE               	goto	l3417
  1089  0711  3000               	movlw	high S3583
  1090  0712  008A               	movwf	10
  1091  0713  1003               	clrc
  1092  0714  0D04               	rlf	4,w
  1093  0715  3E09               	addlw	low S3583
  1094  0716  0082               	movwf	2
  1095  0717                     l666:	
  1096  0717  2EFE               	goto	l3417
  1097  0718                     __end_of_main:	
  1098                           
  1099                           	psect	swtext1
  1100  0009                     __pswtext1:	
  1101  0009                     S3583:	
  1102  0009  118A  2E62         	ljmp	l668
  1103  000B  118A  2E66         	ljmp	l671
  1104  000D  118A  2E71         	ljmp	l677
  1105  000F  118A  2E72         	ljmp	l679
  1106  0011  118A  2E7D         	ljmp	l685
  1107  0013  118A  2E7F         	ljmp	l3451
  1108  0015  118A  2ED7         	ljmp	l3507
  1109  0017  118A  2EDF         	ljmp	l710
  1110  0019  118A  2EE8         	ljmp	l711
  1111  001B  118A  2EF3         	ljmp	l717
  1112                           
  1113                           	psect	text715
  1114  0718                     __ptext715:	
  1115 ;; =============== function _main ends ============
  1116                           
  1117                           
  1118 ;; *************** function _process_AD_Converter_Value *****************
  1119 ;; Defined at:
  1120 ;;		line 111 in file "C:\AK7030-OTP\common.c"
  1121 ;; Parameters:    Size  Location     Type
  1122 ;;		None
  1123 ;; Auto vars:     Size  Location     Type
  1124 ;;		None
  1125 ;; Return value:  Size  Location     Type
  1126 ;;		None               void
  1127 ;; Registers used:
  1128 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1129 ;; Tracked objects:
  1130 ;;		On entry : 60/0
  1131 ;;		On exit  : 60/0
  1132 ;;		Unchanged: FFE9F/0
  1133 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1134 ;;      Params:         0       0       0       0       0
  1135 ;;      Locals:         0       0       0       0       0
  1136 ;;      Temps:          0       0       0       0       0
  1137 ;;      Totals:         0       0       0       0       0
  1138 ;;Total ram usage:        0 bytes
  1139 ;; Hardware stack levels used:    1
  1140 ;; Hardware stack levels required when called:    4
  1141 ;; This function calls:
  1142 ;;		_AD_Sample
  1143 ;; This function is called by:
  1144 ;;		_main
  1145 ;; This function uses a non-reentrant model
  1146 ;;
  1147  0718                     _process_AD_Converter_Value:	
  1148                           
  1149                           ;common.c: 112: AD_Sample();
  1150                           
  1151                           ; Regs used in _process_AD_Converter_Value: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1152  0718  2F19               	ljmp	l3309
  1153  0719                     __end_of_process_AD_Converter_Value:	
  1154  0719                     __ptext716:	
  1155 ;; =============== function _process_AD_Converter_Value ends ============
  1156                           
  1157                           
  1158 ;; *************** function _AD_Sample *****************
  1159 ;; Defined at:
  1160 ;;		line 125 in file "C:\AK7030-OTP\common.c"
  1161 ;; Parameters:    Size  Location     Type
  1162 ;;		None
  1163 ;; Auto vars:     Size  Location     Type
  1164 ;;		None
  1165 ;; Return value:  Size  Location     Type
  1166 ;;		None               void
  1167 ;; Registers used:
  1168 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1169 ;; Tracked objects:
  1170 ;;		On entry : 60/0
  1171 ;;		On exit  : 60/0
  1172 ;;		Unchanged: FFE9F/0
  1173 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1174 ;;      Params:         0       0       0       0       0
  1175 ;;      Locals:         0       0       0       0       0
  1176 ;;      Temps:          0       2       0       0       0
  1177 ;;      Totals:         0       2       0       0       0
  1178 ;;Total ram usage:        2 bytes
  1179 ;; Hardware stack levels used:    1
  1180 ;; Hardware stack levels required when called:    3
  1181 ;; This function calls:
  1182 ;;		_SetTempThermistorChannel
  1183 ;;		_start_AD_Converter
  1184 ;;		_isAD_Completed
  1185 ;;		_clearAdCompleteFalg
  1186 ;;		_stop_AD_Converter
  1187 ;;		_getAdValue
  1188 ;; This function is called by:
  1189 ;;		_process_AD_Converter_Value
  1190 ;; This function uses a non-reentrant model
  1191 ;;
  1192  0719                     _AD_Sample:	
  1193  0719                     l3309:	
  1194                           ; Regs used in _AD_Sample: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1195                           
  1196                           
  1197                           ;common.c: 126: if(sampleTimes == 0)
  1198  0719  08F9               	movf	_sampleTimes,f
  1199  071A  1D03               	skipz
  1200  071B  2F28               	goto	l3323
  1201                           
  1202                           ;common.c: 127: {
  1203                           ;common.c: 128: SetTempThermistorChannel();
  1204  071C  27D0  118A         	fcall	_SetTempThermistorChannel
  1205                           
  1206                           ;common.c: 129: multiFilterMaxValue = 0;
  1207  071E  01B6               	clrf	_multiFilterMaxValue
  1208  071F  01B7               	clrf	_multiFilterMaxValue+1
  1209                           
  1210                           ;common.c: 130: multiFilterMinValue = 0;
  1211  0720  01B8               	clrf	_multiFilterMinValue
  1212  0721  01B9               	clrf	_multiFilterMinValue+1
  1213                           
  1214                           ;common.c: 131: multiFilterSumValue = 0;
  1215  0722  01BA               	clrf	_multiFilterSumValue
  1216  0723  01BB               	clrf	_multiFilterSumValue+1
  1217                           
  1218                           ;common.c: 132: sampleCount = 1;
  1219  0724  01F8               	clrf	_sampleCount
  1220  0725  0AF8               	incf	_sampleCount,f
  1221                           
  1222                           ;common.c: 133: start_AD_Converter();
  1223  0726  27CC  118A         	fcall	_start_AD_Converter
  1224  0728                     l3323:	
  1225                           
  1226                           ;common.c: 134: }
  1227                           ;common.c: 136: if(sampleTimes < 10)
  1228  0728  300A               	movlw	10
  1229  0729  0279               	subwf	_sampleTimes,w
  1230  072A  1C03               	btfss	3,0
  1231  072B  2F69               	goto	l3337
  1232                           
  1233                           ;common.c: 189: else
  1234                           ;common.c: 190: {
  1235                           ;common.c: 191: sampleTimes = 0;
  1236  072C  01F9               	clrf	_sampleTimes
  1237                           
  1238                           ;common.c: 79: ADON = 0;
  1239                           
  1240                           ; Regs used in _stop_AD_Converter: []
  1241                           
  1242                           ;common.c: 193: stop_AD_Converter();
  1243  072D  101F               	bcf	31,0
  1244                           
  1245                           ;common.c: 195: if(sampleChannelSelect == 13)
  1246  072E  087B               	movf	_sampleChannelSelect,w
  1247  072F  3A0D               	xorlw	13
  1248  0730  1D03               	skipz
  1249  0731  2F52               	goto	l3373
  1250                           
  1251                           ;common.c: 196: {
  1252                           ;common.c: 198: sampleCH13Value = ((multiFilterSumValue - multiFilterMaxValue - multiFil
      +                          terMinValue))>> 3;
  1253  0732  0838               	movf	_multiFilterMinValue,w
  1254  0733  0736               	addwf	_multiFilterMaxValue,w
  1255  0734  00CB               	movwf	??_AD_Sample
  1256  0735  0839               	movf	_multiFilterMinValue+1,w
  1257  0736  1803               	skipnc
  1258  0737  0A39               	incf	_multiFilterMinValue+1,w
  1259  0738  0737               	addwf	_multiFilterMaxValue+1,w
  1260  0739  00CC               	movwf	??_AD_Sample+1
  1261  073A  09CB               	comf	??_AD_Sample,f
  1262  073B  09CC               	comf	??_AD_Sample+1,f
  1263  073C  0ACB               	incf	??_AD_Sample,f
  1264  073D  1903               	skipnz
  1265  073E  0ACC               	incf	??_AD_Sample+1,f
  1266  073F  084B               	movf	??_AD_Sample,w
  1267  0740  00BC               	movwf	_sampleCH13Value
  1268  0741  084C               	movf	??_AD_Sample+1,w
  1269  0742  00BD               	movwf	_sampleCH13Value+1
  1270  0743  083A               	movf	_multiFilterSumValue,w
  1271  0744  07BC               	addwf	_sampleCH13Value,f
  1272  0745  1803               	skipnc
  1273  0746  0ABD               	incf	_sampleCH13Value+1,f
  1274  0747  083B               	movf	_multiFilterSumValue+1,w
  1275  0748  07BD               	addwf	_sampleCH13Value+1,f
  1276  0749  1003               	clrc
  1277  074A  0CBD               	rrf	_sampleCH13Value+1,f
  1278  074B  0CBC               	rrf	_sampleCH13Value,f
  1279  074C  1003               	clrc
  1280  074D  0CBD               	rrf	_sampleCH13Value+1,f
  1281  074E  0CBC               	rrf	_sampleCH13Value,f
  1282  074F  1003               	clrc
  1283  0750  0CBD               	rrf	_sampleCH13Value+1,f
  1284  0751  0CBC               	rrf	_sampleCH13Value,f
  1285  0752                     l3373:	
  1286                           ;common.c: 199: }
  1287                           
  1288                           
  1289                           ;common.c: 203: }
  1290                           ;common.c: 206: if(sampleChannelSelect == 13)
  1291  0752  087B               	movf	_sampleChannelSelect,w
  1292  0753  3A0D               	xorlw	13
  1293  0754  1D03               	skipz
  1294  0755  2FC4               	goto	l3377
  1295                           
  1296                           ;common.c: 207: {
  1297                           ;common.c: 208: sampleChannelSelect = 12;
  1298  0756  300C               	movlw	12
  1299  0757  00FB               	movwf	_sampleChannelSelect
  1300                           
  1301                           ;common.c: 209: }
  1302  0758  0008               	return
  1303  0759                     l3327:	
  1304                           
  1305                           ;common.c: 139: {
  1306                           ;common.c: 140: if(sampleCount <= 10)
  1307  0759  300B               	movlw	11
  1308  075A  0278               	subwf	_sampleCount,w
  1309  075B  1803               	skipnc
  1310  075C  2F66               	goto	l3335
  1311                           
  1312                           ;common.c: 141: {
  1313                           ;common.c: 142: sampleCount ++;
  1314  075D  0AF8               	incf	_sampleCount,f
  1315                           
  1316                           ;common.c: 143: if(isAD_Completed())
  1317  075E  27C9  118A         	fcall	_isAD_Completed
  1318  0760  3A00               	xorlw	0
  1319  0761  1903               	skipnz
  1320  0762  2F69               	goto	l3337
  1321                           
  1322                           ;common.c: 92: ADIF = 0;
  1323                           
  1324                           ; Regs used in _clearAdCompleteFalg: []
  1325                           
  1326                           ;common.c: 144: {
  1327                           ;common.c: 145: clearAdCompleteFalg();
  1328  0763  110D               	bcf	13,2
  1329                           
  1330                           ;common.c: 79: ADON = 0;
  1331                           
  1332                           ; Regs used in _stop_AD_Converter: []
  1333                           
  1334                           ;common.c: 146: stop_AD_Converter();
  1335  0764  101F               	bcf	31,0
  1336                           
  1337                           ;common.c: 147: break;
  1338  0765  2F6E               	goto	l3339
  1339  0766                     l3335:	
  1340                           
  1341                           ;common.c: 150: else
  1342                           ;common.c: 151: {
  1343                           ;common.c: 152: sampleCount = 0;
  1344  0766  01F8               	clrf	_sampleCount
  1345                           
  1346                           ;common.c: 153: sampleTimes = 0;
  1347  0767  01F9               	clrf	_sampleTimes
  1348                           
  1349                           ;common.c: 154: break;
  1350  0768  2F6E               	goto	l3339
  1351  0769                     l3337:	
  1352  0769  27C9  118A         	fcall	_isAD_Completed
  1353  076B  3A00               	xorlw	0
  1354  076C  1903               	skipnz
  1355  076D  2F59               	goto	l3327
  1356  076E                     l3339:	
  1357                           
  1358                           ;common.c: 155: }
  1359                           ;common.c: 156: }
  1360                           ;common.c: 158: if(sampleCount != 0)
  1361  076E  0878               	movf	_sampleCount,w
  1362  076F  1903               	btfsc	3,2
  1363  0770  2F7D               	goto	l3343
  1364                           
  1365                           ;common.c: 159: {
  1366                           ;common.c: 160: buffer_Sample_AD_Value[sampleTimes] = getAdValue();
  1367  0771  27DB  118A         	fcall	_getAdValue
  1368  0773  1003               	clrc
  1369  0774  0D79               	rlf	_sampleTimes,w
  1370  0775  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1371  0776  0084               	movwf	4
  1372  0777  0872               	movf	?_getAdValue,w
  1373  0778  1383               	bcf	3,7	;select IRP bank0
  1374  0779  0080               	movwf	0
  1375  077A  0A84               	incf	4,f
  1376  077B  0873               	movf	?_getAdValue+1,w
  1377  077C  2F85               	goto	L2
  1378  077D                     l3343:	
  1379                           ;common.c: 161: }
  1380                           
  1381                           
  1382                           ;common.c: 162: else
  1383                           ;common.c: 163: {
  1384                           ;common.c: 164: buffer_Sample_AD_Value[sampleTimes] = 2048;
  1385  077D  1003               	clrc
  1386  077E  0D79               	rlf	_sampleTimes,w
  1387  077F  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1388  0780  0084               	movwf	4
  1389  0781  3008               	movlw	8
  1390  0782  1383               	bcf	3,7	;select IRP bank0
  1391  0783  0180               	clrf	0
  1392  0784  0A84               	incf	4,f
  1393  0785                     L2:	
  1394  0785  0080               	movwf	0
  1395                           
  1396                           ;common.c: 165: }
  1397                           ;common.c: 167: if(sampleTimes == 0)
  1398  0786  08F9               	movf	_sampleTimes,f
  1399  0787  1D03               	skipz
  1400  0788  2F91               	goto	l3349
  1401                           
  1402                           ;common.c: 168: {
  1403                           ;common.c: 169: multiFilterMaxValue = buffer_Sample_AD_Value[0];
  1404  0789  0821               	movf	_buffer_Sample_AD_Value+1,w
  1405  078A  00B7               	movwf	_multiFilterMaxValue+1
  1406  078B  0820               	movf	_buffer_Sample_AD_Value,w
  1407  078C  00B6               	movwf	_multiFilterMaxValue
  1408                           
  1409                           ;common.c: 170: multiFilterMinValue = buffer_Sample_AD_Value[0];
  1410  078D  0821               	movf	_buffer_Sample_AD_Value+1,w
  1411  078E  00B9               	movwf	_multiFilterMinValue+1
  1412  078F  0820               	movf	_buffer_Sample_AD_Value,w
  1413  0790  00B8               	movwf	_multiFilterMinValue
  1414  0791                     l3349:	
  1415                           
  1416                           ;common.c: 171: }
  1417                           ;common.c: 172: if(multiFilterMaxValue < buffer_Sample_AD_Value[sampleTimes])
  1418  0791  27F6  118A         	fcall	PL2	;call to abstracted procedure
  1419  0793  0237               	subwf	_multiFilterMaxValue+1,w
  1420  0794  1D03               	skipz
  1421  0795  2F98               	goto	u945
  1422  0796  084B               	movf	??_AD_Sample,w
  1423  0797  0236               	subwf	_multiFilterMaxValue,w
  1424  0798                     u945:	
  1425  0798  1803               	skipnc
  1426  0799  2FA3               	goto	l1431
  1427                           
  1428                           ;common.c: 173: {
  1429                           ;common.c: 174: multiFilterMaxValue = buffer_Sample_AD_Value[sampleTimes];
  1430  079A  1003               	clrc
  1431  079B  0D79               	rlf	_sampleTimes,w
  1432  079C  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1433  079D  0084               	movwf	4
  1434  079E  0800               	movf	0,w
  1435  079F  00B6               	movwf	_multiFilterMaxValue
  1436  07A0  0A84               	incf	4,f
  1437  07A1  0800               	movf	0,w
  1438  07A2  00B7               	movwf	_multiFilterMaxValue+1
  1439  07A3                     l1431:	
  1440                           
  1441                           ;common.c: 175: }
  1442                           ;common.c: 176: if(multiFilterMinValue > buffer_Sample_AD_Value[sampleTimes])
  1443  07A3  27F6  118A         	fcall	PL2	;call to abstracted procedure
  1444  07A5  0839               	movf	_multiFilterMinValue+1,w
  1445  07A6  024C               	subwf	??_AD_Sample+1,w
  1446  07A7  1D03               	skipz
  1447  07A8  2FAB               	goto	u955
  1448  07A9  0838               	movf	_multiFilterMinValue,w
  1449  07AA  024B               	subwf	??_AD_Sample,w
  1450  07AB                     u955:	
  1451  07AB  1803               	skipnc
  1452  07AC  2FB6               	goto	l1432
  1453                           
  1454                           ;common.c: 177: {
  1455                           ;common.c: 178: multiFilterMinValue = buffer_Sample_AD_Value[sampleTimes];
  1456  07AD  1003               	clrc
  1457  07AE  0D79               	rlf	_sampleTimes,w
  1458  07AF  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1459  07B0  0084               	movwf	4
  1460  07B1  0800               	movf	0,w
  1461  07B2  00B8               	movwf	_multiFilterMinValue
  1462  07B3  0A84               	incf	4,f
  1463  07B4  0800               	movf	0,w
  1464  07B5  00B9               	movwf	_multiFilterMinValue+1
  1465  07B6                     l1432:	
  1466                           
  1467                           ;common.c: 179: }
  1468                           ;common.c: 180: multiFilterSumValue = multiFilterSumValue + buffer_Sample_AD_Value[sampl
      +                          eTimes];
  1469  07B6  27F6  118A         	fcall	PL2	;call to abstracted procedure
  1470  07B8  084B               	movf	??_AD_Sample,w
  1471  07B9  07BA               	addwf	_multiFilterSumValue,f
  1472  07BA  1803               	skipnc
  1473  07BB  0ABB               	incf	_multiFilterSumValue+1,f
  1474  07BC  084C               	movf	??_AD_Sample+1,w
  1475  07BD  07BB               	addwf	_multiFilterSumValue+1,f
  1476  07BE  300A               	movlw	10
  1477                           
  1478                           ;common.c: 182: sampleTimes++;
  1479  07BF  0AF9               	incf	_sampleTimes,f
  1480                           
  1481                           ;common.c: 184: if(sampleTimes < 10)
  1482  07C0  0279               	subwf	_sampleTimes,w
  1483  07C1  1803               	skipnc
  1484  07C2  0008               	return
  1485                           
  1486                           ;common.c: 185: {
  1487                           ;common.c: 186: start_AD_Converter();
  1488  07C3  2FCC               	ljmp	l2979
  1489  07C4                     l3377:	
  1490                           
  1491                           ;common.c: 210: else
  1492                           ;common.c: 211: {
  1493                           ;common.c: 212: sampleChannelSelect = 13;
  1494  07C4  300D               	movlw	13
  1495  07C5  00FB               	movwf	_sampleChannelSelect
  1496  07C6  0008               	return
  1497  07C7                     __end_of_AD_Sample:	
  1498  07C7                     __ptext721:	
  1499 ;; =============== function _isAD_Completed ends ============
  1500                           
  1501                           
  1502 ;; *************** function _stop_AD_Converter *****************
  1503 ;; Defined at:
  1504 ;;		line 78 in file "C:\AK7030-OTP\common.c"
  1505 ;; Parameters:    Size  Location     Type
  1506 ;;		None
  1507 ;; Auto vars:     Size  Location     Type
  1508 ;;		None
  1509 ;; Return value:  Size  Location     Type
  1510 ;;		None               void
  1511 ;; Registers used:
  1512 ;;		None
  1513 ;; Tracked objects:
  1514 ;;		On entry : 60/0
  1515 ;;		On exit  : 60/0
  1516 ;;		Unchanged: FFF9F/0
  1517 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1518 ;;      Params:         0       0       0       0       0
  1519 ;;      Locals:         0       0       0       0       0
  1520 ;;      Temps:          0       0       0       0       0
  1521 ;;      Totals:         0       0       0       0       0
  1522 ;;Total ram usage:        0 bytes
  1523 ;; Hardware stack levels used:    1
  1524 ;; Hardware stack levels required when called:    1
  1525 ;; This function calls:
  1526 ;;		Nothing
  1527 ;; This function is called by:
  1528 ;;		_AD_Sample
  1529 ;; This function uses a non-reentrant model
  1530 ;;
  1531  07C7                     _stop_AD_Converter:	
  1532                           
  1533                           ;common.c: 79: ADON = 0;
  1534                           
  1535                           ; Regs used in _stop_AD_Converter: []
  1536  07C7  101F               	bcf	31,0
  1537  07C8  0008               	return
  1538  07C9                     __end_of_stop_AD_Converter:	
  1539  07C9                     __ptext720:	
  1540 ;; =============== function _clearAdCompleteFalg ends ============
  1541                           
  1542                           
  1543 ;; *************** function _isAD_Completed *****************
  1544 ;; Defined at:
  1545 ;;		line 83 in file "C:\AK7030-OTP\common.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;		None
  1548 ;; Auto vars:     Size  Location     Type
  1549 ;;		None
  1550 ;; Return value:  Size  Location     Type
  1551 ;;                  1    wreg      unsigned char 
  1552 ;; Registers used:
  1553 ;;		wreg
  1554 ;; Tracked objects:
  1555 ;;		On entry : 60/0
  1556 ;;		On exit  : 60/0
  1557 ;;		Unchanged: FFF9F/0
  1558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1559 ;;      Params:         0       0       0       0       0
  1560 ;;      Locals:         0       0       0       0       0
  1561 ;;      Temps:          0       0       0       0       0
  1562 ;;      Totals:         0       0       0       0       0
  1563 ;;Total ram usage:        0 bytes
  1564 ;; Hardware stack levels used:    1
  1565 ;; Hardware stack levels required when called:    1
  1566 ;; This function calls:
  1567 ;;		Nothing
  1568 ;; This function is called by:
  1569 ;;		_getAdValue
  1570 ;;		_AD_Sample
  1571 ;; This function uses a non-reentrant model
  1572 ;;
  1573  07C9                     _isAD_Completed:	
  1574                           
  1575                           ;common.c: 84: if(ADIF)
  1576                           
  1577                           ; Regs used in _isAD_Completed: [wreg]
  1578  07C9  190D               	btfsc	13,2
  1579                           
  1580                           ;common.c: 85: return 1;
  1581  07CA  3401               	retlw	1
  1582                           
  1583                           ;common.c: 86: else
  1584                           ;common.c: 87: return 0;
  1585  07CB  3400               	retlw	0
  1586  07CC                     __end_of_isAD_Completed:	
  1587  07CC                     __ptext722:	
  1588 ;; =============== function _stop_AD_Converter ends ============
  1589                           
  1590                           
  1591 ;; *************** function _start_AD_Converter *****************
  1592 ;; Defined at:
  1593 ;;		line 73 in file "C:\AK7030-OTP\common.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;		None
  1596 ;; Auto vars:     Size  Location     Type
  1597 ;;		None
  1598 ;; Return value:  Size  Location     Type
  1599 ;;		None               void
  1600 ;; Registers used:
  1601 ;;		None
  1602 ;; Tracked objects:
  1603 ;;		On entry : 60/0
  1604 ;;		On exit  : 60/0
  1605 ;;		Unchanged: FFF9F/0
  1606 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1607 ;;      Params:         0       0       0       0       0
  1608 ;;      Locals:         0       0       0       0       0
  1609 ;;      Temps:          0       0       0       0       0
  1610 ;;      Totals:         0       0       0       0       0
  1611 ;;Total ram usage:        0 bytes
  1612 ;; Hardware stack levels used:    1
  1613 ;; Hardware stack levels required when called:    1
  1614 ;; This function calls:
  1615 ;;		Nothing
  1616 ;; This function is called by:
  1617 ;;		_AD_Sample
  1618 ;; This function uses a non-reentrant model
  1619 ;;
  1620  07CC                     _start_AD_Converter:	
  1621  07CC                     l2979:	
  1622                           ; Regs used in _start_AD_Converter: []
  1623                           
  1624                           
  1625                           ;common.c: 74: ADON = 1;
  1626  07CC  141F               	bsf	31,0
  1627  07CD  0008               	return
  1628  07CE                     __end_of_start_AD_Converter:	
  1629  07CE                     __ptext719:	
  1630 ;; =============== function _SetTempThermistorChannel ends ============
  1631                           
  1632                           
  1633 ;; *************** function _clearAdCompleteFalg *****************
  1634 ;; Defined at:
  1635 ;;		line 91 in file "C:\AK7030-OTP\common.c"
  1636 ;; Parameters:    Size  Location     Type
  1637 ;;		None
  1638 ;; Auto vars:     Size  Location     Type
  1639 ;;		None
  1640 ;; Return value:  Size  Location     Type
  1641 ;;		None               void
  1642 ;; Registers used:
  1643 ;;		None
  1644 ;; Tracked objects:
  1645 ;;		On entry : 60/0
  1646 ;;		On exit  : 60/0
  1647 ;;		Unchanged: FFF9F/0
  1648 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1649 ;;      Params:         0       0       0       0       0
  1650 ;;      Locals:         0       0       0       0       0
  1651 ;;      Temps:          0       0       0       0       0
  1652 ;;      Totals:         0       0       0       0       0
  1653 ;;Total ram usage:        0 bytes
  1654 ;; Hardware stack levels used:    1
  1655 ;; Hardware stack levels required when called:    1
  1656 ;; This function calls:
  1657 ;;		Nothing
  1658 ;; This function is called by:
  1659 ;;		_AD_Sample
  1660 ;; This function uses a non-reentrant model
  1661 ;;
  1662  07CE                     _clearAdCompleteFalg:	
  1663                           
  1664                           ;common.c: 92: ADIF = 0;
  1665                           
  1666                           ; Regs used in _clearAdCompleteFalg: []
  1667  07CE  110D               	bcf	13,2
  1668  07CF  0008               	return
  1669  07D0                     __end_of_clearAdCompleteFalg:	
  1670  07D0                     __ptext718:	
  1671 ;; =============== function _getAdValue ends ============
  1672                           
  1673                           
  1674 ;; *************** function _SetTempThermistorChannel *****************
  1675 ;; Defined at:
  1676 ;;		line 228 in file "C:\AK7030-OTP\common.c"
  1677 ;; Parameters:    Size  Location     Type
  1678 ;;		None
  1679 ;; Auto vars:     Size  Location     Type
  1680 ;;		None
  1681 ;; Return value:  Size  Location     Type
  1682 ;;		None               void
  1683 ;; Registers used:
  1684 ;;		wreg
  1685 ;; Tracked objects:
  1686 ;;		On entry : 60/0
  1687 ;;		On exit  : 60/0
  1688 ;;		Unchanged: FFF9F/0
  1689 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1690 ;;      Params:         0       0       0       0       0
  1691 ;;      Locals:         0       0       0       0       0
  1692 ;;      Temps:          0       0       0       0       0
  1693 ;;      Totals:         0       0       0       0       0
  1694 ;;Total ram usage:        0 bytes
  1695 ;; Hardware stack levels used:    1
  1696 ;; Hardware stack levels required when called:    1
  1697 ;; This function calls:
  1698 ;;		Nothing
  1699 ;; This function is called by:
  1700 ;;		_AD_Sample
  1701 ;; This function uses a non-reentrant model
  1702 ;;
  1703  07D0                     _SetTempThermistorChannel:	
  1704                           
  1705                           ;common.c: 231: if(sampleChannelSelect == 12)
  1706                           
  1707                           ; Regs used in _SetTempThermistorChannel: [wreg]
  1708  07D0  087B               	movf	_sampleChannelSelect,w
  1709  07D1  3A0C               	xorlw	12
  1710                           
  1711                           ;common.c: 232: {
  1712                           ;common.c: 233: CHS3 = 1;
  1713  07D2  169F               	bsf	31,5
  1714                           
  1715                           ;common.c: 234: CHS2 = 1;
  1716  07D3  161F               	bsf	31,4
  1717                           
  1718                           ;common.c: 235: CHS1 = 0;
  1719  07D4  119F               	bcf	31,3
  1720  07D5  1D03               	skipz
  1721  07D6  2FD9               	goto	L3
  1722                           
  1723                           ;common.c: 236: CHS0 = 0;
  1724  07D7  111F               	bcf	31,2
  1725                           
  1726                           ;common.c: 237: }
  1727  07D8  0008               	return
  1728  07D9                     L3:	
  1729                           ;common.c: 242: CHS1 = 0;
  1730                           
  1731                           ;common.c: 241: CHS2 = 1;
  1732                           
  1733                           ;common.c: 238: else
  1734                           ;common.c: 239: {
  1735                           ;common.c: 240: CHS3 = 1;
  1736                           
  1737                           
  1738                           ;common.c: 243: CHS0 = 1;
  1739  07D9  151F               	bsf	31,2
  1740  07DA  0008               	return
  1741  07DB                     __end_of_SetTempThermistorChannel:	
  1742  07DB                     __ptext717:	
  1743 ;; =============== function _AD_Sample ends ============
  1744                           
  1745                           
  1746 ;; *************** function _getAdValue *****************
  1747 ;; Defined at:
  1748 ;;		line 96 in file "C:\AK7030-OTP\common.c"
  1749 ;; Parameters:    Size  Location     Type
  1750 ;;		None
  1751 ;; Auto vars:     Size  Location     Type
  1752 ;;  AdHighValue     2    6[COMMON] unsigned int 
  1753 ;;  AdValue         2    4[COMMON] unsigned int 
  1754 ;; Return value:  Size  Location     Type
  1755 ;;                  2    2[COMMON] unsigned int 
  1756 ;; Registers used:
  1757 ;;		wreg, status,2, pclath, cstack
  1758 ;; Tracked objects:
  1759 ;;		On entry : 60/0
  1760 ;;		On exit  : 60/0
  1761 ;;		Unchanged: FFF9F/0
  1762 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1763 ;;      Params:         2       0       0       0       0
  1764 ;;      Locals:         4       0       0       0       0
  1765 ;;      Temps:          0       0       0       0       0
  1766 ;;      Totals:         6       0       0       0       0
  1767 ;;Total ram usage:        6 bytes
  1768 ;; Hardware stack levels used:    1
  1769 ;; Hardware stack levels required when called:    2
  1770 ;; This function calls:
  1771 ;;		_isAD_Completed
  1772 ;; This function is called by:
  1773 ;;		_AD_Sample
  1774 ;; This function uses a non-reentrant model
  1775 ;;
  1776  07DB                     _getAdValue:	
  1777                           
  1778                           ;common.c: 97: unsigned int AdValue = 0,AdHighValue = 0;
  1779                           
  1780                           ; Regs used in _getAdValue: [wreg+status,2+pclath+cstack]
  1781  07DB  01F4               	clrf	getAdValue@AdValue
  1782  07DC  01F5               	clrf	getAdValue@AdValue+1
  1783                           
  1784                           ;common.c: 98: if(isAD_Completed()!=0)
  1785  07DD  27C9  118A         	fcall	_isAD_Completed
  1786  07DF  3A00               	xorlw	0
  1787  07E0  1903               	skipnz
  1788  07E1  2FF1               	goto	l1413
  1789                           
  1790                           ;common.c: 99: {
  1791                           ;common.c: 100: ADIF = 0;
  1792  07E2  110D               	bcf	13,2
  1793                           
  1794                           ;common.c: 101: AdValue = ADRESL;
  1795  07E3  1683               	bsf	3,5	;RP0=1, select bank1
  1796  07E4  081E               	movf	30,w	;volatile
  1797  07E5  00F4               	movwf	getAdValue@AdValue
  1798  07E6  01F5               	clrf	getAdValue@AdValue+1
  1799                           
  1800                           ;common.c: 102: AdHighValue = ADRESH;
  1801  07E7  1283               	bcf	3,5	;RP0=0, select bank0
  1802  07E8  081E               	movf	30,w	;volatile
  1803  07E9  00F6               	movwf	getAdValue@AdHighValue
  1804  07EA  01F7               	clrf	getAdValue@AdHighValue+1
  1805                           
  1806                           ;common.c: 103: AdHighValue = AdHighValue << 8;
  1807  07EB  00F7               	movwf	getAdValue@AdHighValue+1
  1808  07EC  01F6               	clrf	getAdValue@AdHighValue
  1809                           
  1810                           ;common.c: 104: AdValue = AdValue | AdHighValue;
  1811  07ED  0876               	movf	getAdValue@AdHighValue,w
  1812  07EE  04F4               	iorwf	getAdValue@AdValue,f
  1813  07EF  0877               	movf	getAdValue@AdHighValue+1,w
  1814  07F0  04F5               	iorwf	getAdValue@AdValue+1,f
  1815  07F1                     l1413:	
  1816                           
  1817                           ;common.c: 105: }
  1818                           ;common.c: 107: return AdValue;
  1819  07F1  0875               	movf	getAdValue@AdValue+1,w
  1820  07F2  00F3               	movwf	?_getAdValue+1
  1821  07F3  0874               	movf	getAdValue@AdValue,w
  1822  07F4  00F2               	movwf	?_getAdValue
  1823  07F5  0008               	return
  1824  07F6                     __end_of_getAdValue:	
  1825  07F6                     PL2:	
  1826  07F6  1003               	clrc
  1827  07F7  0D79               	rlf	_sampleTimes,w
  1828  07F8  3E20               	addlw	_buffer_Sample_AD_Value& (0+255)
  1829  07F9  0084               	movwf	4
  1830  07FA  0800               	movf	0,w
  1831  07FB  00CB               	movwf	??_AD_Sample
  1832  07FC  0A84               	incf	4,f
  1833  07FD  0800               	movf	0,w
  1834  07FE  00CC               	movwf	??_AD_Sample+1
  1835  07FF  0008               	return
  1836                           
  1837                           	psect	text723
  1838  05A3                     __ptext723:	
  1839 ;; =============== function _start_AD_Converter ends ============
  1840                           
  1841                           
  1842 ;; *************** function _isFinishedSmallTimer *****************
  1843 ;; Defined at:
  1844 ;;		line 286 in file "C:\AK7030-OTP\common.c"
  1845 ;; Parameters:    Size  Location     Type
  1846 ;;		None
  1847 ;; Auto vars:     Size  Location     Type
  1848 ;;		None
  1849 ;; Return value:  Size  Location     Type
  1850 ;;                  1    wreg      unsigned char 
  1851 ;; Registers used:
  1852 ;;		wreg, status,2, status,0
  1853 ;; Tracked objects:
  1854 ;;		On entry : 60/0
  1855 ;;		On exit  : 60/0
  1856 ;;		Unchanged: FFF9F/0
  1857 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1858 ;;      Params:         0       0       0       0       0
  1859 ;;      Locals:         0       0       0       0       0
  1860 ;;      Temps:          0       0       0       0       0
  1861 ;;      Totals:         0       0       0       0       0
  1862 ;;Total ram usage:        0 bytes
  1863 ;; Hardware stack levels used:    1
  1864 ;; Hardware stack levels required when called:    1
  1865 ;; This function calls:
  1866 ;;		Nothing
  1867 ;; This function is called by:
  1868 ;;		_main
  1869 ;; This function uses a non-reentrant model
  1870 ;;
  1871  05A3                     _isFinishedSmallTimer:	
  1872                           
  1873                           ;common.c: 287: if(uiSmallTimer == 0)
  1874                           
  1875                           ; Regs used in _isFinishedSmallTimer: [wreg+status,2+status,0]
  1876  05A3  0841               	movf	_uiSmallTimer+1,w
  1877  05A4  0440               	iorwf	_uiSmallTimer,w
  1878  05A5  1903               	btfsc	3,2
  1879                           
  1880                           ;common.c: 288: return 1;
  1881  05A6  3401               	retlw	1
  1882                           
  1883                           ;common.c: 289: else
  1884                           ;common.c: 290: return 0;
  1885  05A7  3400               	retlw	0
  1886  05A8                     __end_of_isFinishedSmallTimer:	
  1887                           
  1888                           	psect	text724
  1889  059E                     __ptext724:	
  1890 ;; =============== function _isFinishedSmallTimer ends ============
  1891                           
  1892                           
  1893 ;; *************** function _isFinishedBigTimer *****************
  1894 ;; Defined at:
  1895 ;;		line 278 in file "C:\AK7030-OTP\common.c"
  1896 ;; Parameters:    Size  Location     Type
  1897 ;;		None
  1898 ;; Auto vars:     Size  Location     Type
  1899 ;;		None
  1900 ;; Return value:  Size  Location     Type
  1901 ;;                  1    wreg      unsigned char 
  1902 ;; Registers used:
  1903 ;;		wreg, status,2, status,0
  1904 ;; Tracked objects:
  1905 ;;		On entry : 60/0
  1906 ;;		On exit  : 60/0
  1907 ;;		Unchanged: FFF9F/0
  1908 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1909 ;;      Params:         0       0       0       0       0
  1910 ;;      Locals:         0       0       0       0       0
  1911 ;;      Temps:          0       0       0       0       0
  1912 ;;      Totals:         0       0       0       0       0
  1913 ;;Total ram usage:        0 bytes
  1914 ;; Hardware stack levels used:    1
  1915 ;; Hardware stack levels required when called:    1
  1916 ;; This function calls:
  1917 ;;		Nothing
  1918 ;; This function is called by:
  1919 ;;		_main
  1920 ;; This function uses a non-reentrant model
  1921 ;;
  1922  059E                     _isFinishedBigTimer:	
  1923                           
  1924                           ;common.c: 279: if(uiBigTimer == 0)
  1925                           
  1926                           ; Regs used in _isFinishedBigTimer: [wreg+status,2+status,0]
  1927  059E  083F               	movf	_uiBigTimer+1,w
  1928  059F  043E               	iorwf	_uiBigTimer,w
  1929  05A0  1903               	btfsc	3,2
  1930                           
  1931                           ;common.c: 280: return 1;
  1932  05A1  3401               	retlw	1
  1933                           
  1934                           ;common.c: 281: else
  1935                           ;common.c: 282: return 0;
  1936  05A2  3400               	retlw	0
  1937  05A3                     __end_of_isFinishedBigTimer:	
  1938                           
  1939                           	psect	text725
  1940  05C3                     __ptext725:	
  1941 ;; =============== function _isFinishedBigTimer ends ============
  1942                           
  1943                           
  1944 ;; *************** function _startSmallTimer *****************
  1945 ;; Defined at:
  1946 ;;		line 272 in file "C:\AK7030-OTP\common.c"
  1947 ;; Parameters:    Size  Location     Type
  1948 ;;		None
  1949 ;; Auto vars:     Size  Location     Type
  1950 ;;		None
  1951 ;; Return value:  Size  Location     Type
  1952 ;;		None               void
  1953 ;; Registers used:
  1954 ;;		wreg
  1955 ;; Tracked objects:
  1956 ;;		On entry : 0/0
  1957 ;;		On exit  : 60/0
  1958 ;;		Unchanged: FFF9F/0
  1959 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1960 ;;      Params:         0       0       0       0       0
  1961 ;;      Locals:         0       0       0       0       0
  1962 ;;      Temps:          0       0       0       0       0
  1963 ;;      Totals:         0       0       0       0       0
  1964 ;;Total ram usage:        0 bytes
  1965 ;; Hardware stack levels used:    1
  1966 ;; Hardware stack levels required when called:    1
  1967 ;; This function calls:
  1968 ;;		Nothing
  1969 ;; This function is called by:
  1970 ;;		_main
  1971 ;; This function uses a non-reentrant model
  1972 ;;
  1973  05C3                     _startSmallTimer:	
  1974                           
  1975                           ;common.c: 273: uiSmallTimer = 10800;
  1976                           
  1977                           ; Regs used in _startSmallTimer: [wreg]
  1978  05C3  3030               	movlw	48
  1979  05C4  1283               	bcf	3,5	;RP0=0, select bank0
  1980  05C5  1303               	bcf	3,6	;RP1=0, select bank0
  1981  05C6  00C0               	movwf	_uiSmallTimer
  1982  05C7  302A               	movlw	42
  1983  05C8  00C1               	movwf	_uiSmallTimer+1
  1984  05C9  0008               	return
  1985  05CA                     __end_of_startSmallTimer:	
  1986                           
  1987                           	psect	text726
  1988  05BC                     __ptext726:	
  1989 ;; =============== function _startSmallTimer ends ============
  1990                           
  1991                           
  1992 ;; *************** function _startBigTimer *****************
  1993 ;; Defined at:
  1994 ;;		line 266 in file "C:\AK7030-OTP\common.c"
  1995 ;; Parameters:    Size  Location     Type
  1996 ;;		None
  1997 ;; Auto vars:     Size  Location     Type
  1998 ;;		None
  1999 ;; Return value:  Size  Location     Type
  2000 ;;		None               void
  2001 ;; Registers used:
  2002 ;;		wreg
  2003 ;; Tracked objects:
  2004 ;;		On entry : 0/0
  2005 ;;		On exit  : 60/0
  2006 ;;		Unchanged: FFF9F/0
  2007 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2008 ;;      Params:         0       0       0       0       0
  2009 ;;      Locals:         0       0       0       0       0
  2010 ;;      Temps:          0       0       0       0       0
  2011 ;;      Totals:         0       0       0       0       0
  2012 ;;Total ram usage:        0 bytes
  2013 ;; Hardware stack levels used:    1
  2014 ;; Hardware stack levels required when called:    1
  2015 ;; This function calls:
  2016 ;;		Nothing
  2017 ;; This function is called by:
  2018 ;;		_main
  2019 ;; This function uses a non-reentrant model
  2020 ;;
  2021  05BC                     _startBigTimer:	
  2022                           
  2023                           ;common.c: 267: uiBigTimer = 34200;
  2024                           
  2025                           ; Regs used in _startBigTimer: [wreg]
  2026  05BC  3098               	movlw	152
  2027  05BD  1283               	bcf	3,5	;RP0=0, select bank0
  2028  05BE  1303               	bcf	3,6	;RP1=0, select bank0
  2029  05BF  00BE               	movwf	_uiBigTimer
  2030  05C0  3085               	movlw	133
  2031  05C1  00BF               	movwf	_uiBigTimer+1
  2032  05C2  0008               	return
  2033  05C3                     __end_of_startBigTimer:	
  2034                           
  2035                           	psect	text727
  2036  0599                     __ptext727:	
  2037 ;; =============== function _startBigTimer ends ============
  2038                           
  2039                           
  2040 ;; *************** function _getAdCh13Value *****************
  2041 ;; Defined at:
  2042 ;;		line 256 in file "C:\AK7030-OTP\common.c"
  2043 ;; Parameters:    Size  Location     Type
  2044 ;;		None
  2045 ;; Auto vars:     Size  Location     Type
  2046 ;;		None
  2047 ;; Return value:  Size  Location     Type
  2048 ;;                  2    2[COMMON] unsigned int 
  2049 ;; Registers used:
  2050 ;;		wreg
  2051 ;; Tracked objects:
  2052 ;;		On entry : 60/0
  2053 ;;		On exit  : 60/0
  2054 ;;		Unchanged: FFF9F/0
  2055 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2056 ;;      Params:         2       0       0       0       0
  2057 ;;      Locals:         0       0       0       0       0
  2058 ;;      Temps:          0       0       0       0       0
  2059 ;;      Totals:         2       0       0       0       0
  2060 ;;Total ram usage:        2 bytes
  2061 ;; Hardware stack levels used:    1
  2062 ;; Hardware stack levels required when called:    1
  2063 ;; This function calls:
  2064 ;;		Nothing
  2065 ;; This function is called by:
  2066 ;;		_main
  2067 ;; This function uses a non-reentrant model
  2068 ;;
  2069  0599                     _getAdCh13Value:	
  2070                           
  2071                           ;common.c: 257: return sampleCH13Value;
  2072                           
  2073                           ; Regs used in _getAdCh13Value: [wreg]
  2074  0599  083D               	movf	_sampleCH13Value+1,w
  2075  059A  00F3               	movwf	?_getAdCh13Value+1
  2076  059B  083C               	movf	_sampleCH13Value,w
  2077  059C  00F2               	movwf	?_getAdCh13Value
  2078  059D  0008               	return
  2079  059E                     __end_of_getAdCh13Value:	
  2080                           
  2081                           	psect	text728
  2082  0594                     __ptext728:	
  2083 ;; =============== function _getAdCh13Value ends ============
  2084                           
  2085                           
  2086 ;; *************** function _clrSampeTime *****************
  2087 ;; Defined at:
  2088 ;;		line 305 in file "C:\AK7030-OTP\common.c"
  2089 ;; Parameters:    Size  Location     Type
  2090 ;;		None
  2091 ;; Auto vars:     Size  Location     Type
  2092 ;;		None
  2093 ;; Return value:  Size  Location     Type
  2094 ;;		None               void
  2095 ;; Registers used:
  2096 ;;		status,2
  2097 ;; Tracked objects:
  2098 ;;		On entry : 60/0
  2099 ;;		On exit  : 60/0
  2100 ;;		Unchanged: FFF9F/0
  2101 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2102 ;;      Params:         0       0       0       0       0
  2103 ;;      Locals:         0       0       0       0       0
  2104 ;;      Temps:          0       0       0       0       0
  2105 ;;      Totals:         0       0       0       0       0
  2106 ;;Total ram usage:        0 bytes
  2107 ;; Hardware stack levels used:    1
  2108 ;; Hardware stack levels required when called:    1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_main
  2113 ;; This function uses a non-reentrant model
  2114 ;;
  2115  0594                     _clrSampeTime:	
  2116                           
  2117                           ;common.c: 306: timer.timer10msStopWatch = 0;
  2118                           
  2119                           ; Regs used in _clrSampeTime: [status,2]
  2120  0594  01C2               	clrf	_timer
  2121  0595  0008               	return
  2122  0596                     __end_of_clrSampeTime:	
  2123                           
  2124                           	psect	text729
  2125  05B5                     __ptext729:	
  2126 ;; =============== function _clrSampeTime ends ============
  2127                           
  2128                           
  2129 ;; *************** function _isPermitSampleTime *****************
  2130 ;; Defined at:
  2131 ;;		line 295 in file "C:\AK7030-OTP\common.c"
  2132 ;; Parameters:    Size  Location     Type
  2133 ;;		None
  2134 ;; Auto vars:     Size  Location     Type
  2135 ;;		None
  2136 ;; Return value:  Size  Location     Type
  2137 ;;                  1    wreg      unsigned char 
  2138 ;; Registers used:
  2139 ;;		wreg
  2140 ;; Tracked objects:
  2141 ;;		On entry : 0/0
  2142 ;;		On exit  : 60/0
  2143 ;;		Unchanged: FFF9F/0
  2144 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2145 ;;      Params:         0       0       0       0       0
  2146 ;;      Locals:         0       0       0       0       0
  2147 ;;      Temps:          0       0       0       0       0
  2148 ;;      Totals:         0       0       0       0       0
  2149 ;;Total ram usage:        0 bytes
  2150 ;; Hardware stack levels used:    1
  2151 ;; Hardware stack levels required when called:    1
  2152 ;; This function calls:
  2153 ;;		Nothing
  2154 ;; This function is called by:
  2155 ;;		_main
  2156 ;; This function uses a non-reentrant model
  2157 ;;
  2158  05B5                     _isPermitSampleTime:	
  2159                           
  2160                           ;common.c: 296: if(timer.timer10msStopWatch > 10)
  2161                           
  2162                           ; Regs used in _isPermitSampleTime: [wreg]
  2163  05B5  300B               	movlw	11
  2164  05B6  1283               	bcf	3,5	;RP0=0, select bank0
  2165  05B7  1303               	bcf	3,6	;RP1=0, select bank0
  2166  05B8  0242               	subwf	_timer,w
  2167  05B9  1803               	btfsc	3,0
  2168                           
  2169                           ;common.c: 297: {
  2170                           ;common.c: 298: return 1;
  2171  05BA  3401               	retlw	1
  2172                           
  2173                           ;common.c: 300: else
  2174                           ;common.c: 301: return 0;
  2175  05BB  3400               	retlw	0
  2176  05BC                     __end_of_isPermitSampleTime:	
  2177                           
  2178                           	psect	text730
  2179  0596                     __ptext730:	
  2180 ;; =============== function _isPermitSampleTime ends ============
  2181                           
  2182                           
  2183 ;; *************** function _start_timer1 *****************
  2184 ;; Defined at:
  2185 ;;		line 51 in file "C:\AK7030-OTP\common.c"
  2186 ;; Parameters:    Size  Location     Type
  2187 ;;		None
  2188 ;; Auto vars:     Size  Location     Type
  2189 ;;		None
  2190 ;; Return value:  Size  Location     Type
  2191 ;;		None               void
  2192 ;; Registers used:
  2193 ;;		None
  2194 ;; Tracked objects:
  2195 ;;		On entry : 17F/20
  2196 ;;		On exit  : 17F/0
  2197 ;;		Unchanged: FFE80/0
  2198 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2199 ;;      Params:         0       0       0       0       0
  2200 ;;      Locals:         0       0       0       0       0
  2201 ;;      Temps:          0       0       0       0       0
  2202 ;;      Totals:         0       0       0       0       0
  2203 ;;Total ram usage:        0 bytes
  2204 ;; Hardware stack levels used:    1
  2205 ;; Hardware stack levels required when called:    1
  2206 ;; This function calls:
  2207 ;;		Nothing
  2208 ;; This function is called by:
  2209 ;;		_main
  2210 ;; This function uses a non-reentrant model
  2211 ;;
  2212  0596                     _start_timer1:	
  2213                           
  2214                           ;common.c: 52: TMR1ON = 1;
  2215                           
  2216                           ; Regs used in _start_timer1: []
  2217  0596  1283               	bcf	3,5	;RP0=0, select bank0
  2218  0597  1410               	bsf	16,0
  2219  0598  0008               	return
  2220  0599                     __end_of_start_timer1:	
  2221                           
  2222                           	psect	text731
  2223  05E2                     __ptext731:	
  2224 ;; =============== function _start_timer1 ends ============
  2225                           
  2226                           
  2227 ;; *************** function _op2_init *****************
  2228 ;; Defined at:
  2229 ;;		line 40 in file "C:\AK7030-OTP\periph.c"
  2230 ;; Parameters:    Size  Location     Type
  2231 ;;		None
  2232 ;; Auto vars:     Size  Location     Type
  2233 ;;		None
  2234 ;; Return value:  Size  Location     Type
  2235 ;;		None               void
  2236 ;; Registers used:
  2237 ;;		wreg
  2238 ;; Tracked objects:
  2239 ;;		On entry : 17F/0
  2240 ;;		On exit  : 17F/20
  2241 ;;		Unchanged: FFE80/0
  2242 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2243 ;;      Params:         0       0       0       0       0
  2244 ;;      Locals:         0       0       0       0       0
  2245 ;;      Temps:          0       0       0       0       0
  2246 ;;      Totals:         0       0       0       0       0
  2247 ;;Total ram usage:        0 bytes
  2248 ;; Hardware stack levels used:    1
  2249 ;; Hardware stack levels required when called:    1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_main
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256  05E2                     _op2_init:	
  2257                           
  2258                           ;periph.c: 47: OP2CON1=0x03;
  2259                           
  2260                           ; Regs used in _op2_init: [wreg]
  2261  05E2  3003               	movlw	3
  2262  05E3  1683               	bsf	3,5	;RP0=1, select bank1
  2263  05E4  009C               	movwf	28	;volatile
  2264                           
  2265                           ;periph.c: 49: OP2CON2=0xB0;
  2266  05E5  30B0               	movlw	176
  2267  05E6  009D               	movwf	29	;volatile
  2268                           
  2269                           ;periph.c: 50: OP2CON0=0x80;
  2270  05E7  3080               	movlw	128
  2271  05E8  009B               	movwf	27	;volatile
  2272  05E9  0008               	return
  2273  05EA                     __end_of_op2_init:	
  2274                           
  2275                           	psect	text732
  2276  05DA                     __ptext732:	
  2277 ;; =============== function _op2_init ends ============
  2278                           
  2279                           
  2280 ;; *************** function _op1_init *****************
  2281 ;; Defined at:
  2282 ;;		line 26 in file "C:\AK7030-OTP\periph.c"
  2283 ;; Parameters:    Size  Location     Type
  2284 ;;		None
  2285 ;; Auto vars:     Size  Location     Type
  2286 ;;		None
  2287 ;; Return value:  Size  Location     Type
  2288 ;;		None               void
  2289 ;; Registers used:
  2290 ;;		wreg
  2291 ;; Tracked objects:
  2292 ;;		On entry : 17F/20
  2293 ;;		On exit  : 17F/0
  2294 ;;		Unchanged: FFE80/0
  2295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2296 ;;      Params:         0       0       0       0       0
  2297 ;;      Locals:         0       0       0       0       0
  2298 ;;      Temps:          0       0       0       0       0
  2299 ;;      Totals:         0       0       0       0       0
  2300 ;;Total ram usage:        0 bytes
  2301 ;; Hardware stack levels used:    1
  2302 ;; Hardware stack levels required when called:    1
  2303 ;; This function calls:
  2304 ;;		Nothing
  2305 ;; This function is called by:
  2306 ;;		_main
  2307 ;; This function uses a non-reentrant model
  2308 ;;
  2309  05DA                     _op1_init:	
  2310                           
  2311                           ;periph.c: 33: OP1CON1=0x02;
  2312                           
  2313                           ; Regs used in _op1_init: [wreg]
  2314  05DA  3002               	movlw	2
  2315  05DB  1283               	bcf	3,5	;RP0=0, select bank0
  2316  05DC  009C               	movwf	28	;volatile
  2317                           
  2318                           ;periph.c: 34: OP1CON2=0xA0;
  2319  05DD  30A0               	movlw	160
  2320  05DE  009D               	movwf	29	;volatile
  2321                           
  2322                           ;periph.c: 35: OP1CON0=0x80;
  2323  05DF  3080               	movlw	128
  2324  05E0  009B               	movwf	27	;volatile
  2325  05E1  0008               	return
  2326  05E2                     __end_of_op1_init:	
  2327                           
  2328                           	psect	text733
  2329  05D2                     __ptext733:	
  2330 ;; =============== function _op1_init ends ============
  2331                           
  2332                           
  2333 ;; *************** function _dac_init *****************
  2334 ;; Defined at:
  2335 ;;		line 14 in file "C:\AK7030-OTP\periph.c"
  2336 ;; Parameters:    Size  Location     Type
  2337 ;;		None
  2338 ;; Auto vars:     Size  Location     Type
  2339 ;;		None
  2340 ;; Return value:  Size  Location     Type
  2341 ;;		None               void
  2342 ;; Registers used:
  2343 ;;		wreg
  2344 ;; Tracked objects:
  2345 ;;		On entry : 17F/20
  2346 ;;		On exit  : 17F/20
  2347 ;;		Unchanged: FFE80/0
  2348 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2349 ;;      Params:         0       0       0       0       0
  2350 ;;      Locals:         0       0       0       0       0
  2351 ;;      Temps:          0       0       0       0       0
  2352 ;;      Totals:         0       0       0       0       0
  2353 ;;Total ram usage:        0 bytes
  2354 ;; Hardware stack levels used:    1
  2355 ;; Hardware stack levels required when called:    1
  2356 ;; This function calls:
  2357 ;;		Nothing
  2358 ;; This function is called by:
  2359 ;;		_main
  2360 ;; This function uses a non-reentrant model
  2361 ;;
  2362  05D2                     _dac_init:	
  2363                           
  2364                           ;periph.c: 15: DACCON|=2;
  2365                           
  2366                           ; Regs used in _dac_init: [wreg]
  2367  05D2  1487               	bsf	7,1	;volatile
  2368                           
  2369                           ;periph.c: 17: DACR0=0x19;
  2370  05D3  3019               	movlw	25
  2371  05D4  0088               	movwf	8	;volatile
  2372                           
  2373                           ;periph.c: 18: DACCON|=(1)<<2;
  2374  05D5  1507               	bsf	7,2	;volatile
  2375                           
  2376                           ;periph.c: 20: DACR1=0x06;
  2377  05D6  3006               	movlw	6
  2378  05D7  0089               	movwf	9	;volatile
  2379                           
  2380                           ;periph.c: 21: DACCON|=(1)<<3;
  2381  05D8  1587               	bsf	7,3	;volatile
  2382  05D9  0008               	return
  2383  05DA                     __end_of_dac_init:	
  2384                           
  2385                           	psect	text734
  2386  05F2                     __ptext734:	
  2387 ;; =============== function _dac_init ends ============
  2388                           
  2389                           
  2390 ;; *************** function _adConverter_config *****************
  2391 ;; Defined at:
  2392 ;;		line 63 in file "C:\AK7030-OTP\common.c"
  2393 ;; Parameters:    Size  Location     Type
  2394 ;;		None
  2395 ;; Auto vars:     Size  Location     Type
  2396 ;;		None
  2397 ;; Return value:  Size  Location     Type
  2398 ;;		None               void
  2399 ;; Registers used:
  2400 ;;		wreg
  2401 ;; Tracked objects:
  2402 ;;		On entry : 17F/0
  2403 ;;		On exit  : 17F/20
  2404 ;;		Unchanged: FFE80/0
  2405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2406 ;;      Params:         0       0       0       0       0
  2407 ;;      Locals:         0       0       0       0       0
  2408 ;;      Temps:          0       0       0       0       0
  2409 ;;      Totals:         0       0       0       0       0
  2410 ;;Total ram usage:        0 bytes
  2411 ;; Hardware stack levels used:    1
  2412 ;; Hardware stack levels required when called:    1
  2413 ;; This function calls:
  2414 ;;		Nothing
  2415 ;; This function is called by:
  2416 ;;		_main
  2417 ;; This function uses a non-reentrant model
  2418 ;;
  2419  05F2                     _adConverter_config:	
  2420                           
  2421                           ;common.c: 64: TRISB0 = 1;
  2422                           
  2423                           ; Regs used in _adConverter_config: [wreg]
  2424  05F2  1683               	bsf	3,5	;RP0=1, select bank1
  2425  05F3  30C4               	movlw	196
  2426  05F4  1406               	bsf	6,0
  2427                           
  2428                           ;common.c: 65: TRISB2 = 1;
  2429  05F5  1506               	bsf	6,2
  2430                           
  2431                           ;common.c: 66: ADCON0 = 0xC4;
  2432  05F6  1283               	bcf	3,5	;RP0=0, select bank0
  2433  05F7  009F               	movwf	31	;volatile
  2434                           
  2435                           ;common.c: 67: ADCON1 = 0xFE;
  2436  05F8  30FE               	movlw	254
  2437  05F9  1683               	bsf	3,5	;RP0=1, select bank1
  2438  05FA  009F               	movwf	31	;volatile
  2439                           
  2440                           ;common.c: 68: ADIE = 0;
  2441  05FB  110D               	bcf	13,2
  2442  05FC  0008               	return
  2443  05FD                     __end_of_adConverter_config:	
  2444                           
  2445                           	psect	text735
  2446  05CA                     __ptext735:	
  2447 ;; =============== function _adConverter_config ends ============
  2448                           
  2449                           
  2450 ;; *************** function _timer1_config *****************
  2451 ;; Defined at:
  2452 ;;		line 43 in file "C:\AK7030-OTP\common.c"
  2453 ;; Parameters:    Size  Location     Type
  2454 ;;		None
  2455 ;; Auto vars:     Size  Location     Type
  2456 ;;		None
  2457 ;; Return value:  Size  Location     Type
  2458 ;;		None               void
  2459 ;; Registers used:
  2460 ;;		wreg
  2461 ;; Tracked objects:
  2462 ;;		On entry : 17F/20
  2463 ;;		On exit  : 17F/0
  2464 ;;		Unchanged: FFE80/0
  2465 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2466 ;;      Params:         0       0       0       0       0
  2467 ;;      Locals:         0       0       0       0       0
  2468 ;;      Temps:          0       0       0       0       0
  2469 ;;      Totals:         0       0       0       0       0
  2470 ;;Total ram usage:        0 bytes
  2471 ;; Hardware stack levels used:    1
  2472 ;; Hardware stack levels required when called:    1
  2473 ;; This function calls:
  2474 ;;		Nothing
  2475 ;; This function is called by:
  2476 ;;		_main
  2477 ;; This function uses a non-reentrant model
  2478 ;;
  2479  05CA                     _timer1_config:	
  2480                           
  2481                           ;common.c: 44: T1CON = 0xC4;
  2482                           
  2483                           ; Regs used in _timer1_config: [wreg]
  2484  05CA  30C4               	movlw	196
  2485  05CB  1283               	bcf	3,5	;RP0=0, select bank0
  2486  05CC  0090               	movwf	16	;volatile
  2487                           
  2488                           ;common.c: 45: TMR1H = 0xC3;
  2489  05CD  30C3               	movlw	195
  2490  05CE  008F               	movwf	15	;volatile
  2491                           
  2492                           ;common.c: 46: TMR1L = 0x50;
  2493  05CF  3050               	movlw	80
  2494  05D0  008E               	movwf	14	;volatile
  2495  05D1  0008               	return
  2496  05D2                     __end_of_timer1_config:	
  2497                           
  2498                           	psect	text736
  2499  05A8                     __ptext736:	
  2500 ;; =============== function _timer1_config ends ============
  2501                           
  2502                           
  2503 ;; *************** function _timer1_interrupt_config *****************
  2504 ;; Defined at:
  2505 ;;		line 56 in file "C:\AK7030-OTP\common.c"
  2506 ;; Parameters:    Size  Location     Type
  2507 ;;		None
  2508 ;; Auto vars:     Size  Location     Type
  2509 ;;		None
  2510 ;; Return value:  Size  Location     Type
  2511 ;;		None               void
  2512 ;; Registers used:
  2513 ;;		None
  2514 ;; Tracked objects:
  2515 ;;		On entry : 17F/40
  2516 ;;		On exit  : 17F/20
  2517 ;;		Unchanged: FFE80/0
  2518 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2519 ;;      Params:         0       0       0       0       0
  2520 ;;      Locals:         0       0       0       0       0
  2521 ;;      Temps:          0       0       0       0       0
  2522 ;;      Totals:         0       0       0       0       0
  2523 ;;Total ram usage:        0 bytes
  2524 ;; Hardware stack levels used:    1
  2525 ;; Hardware stack levels required when called:    1
  2526 ;; This function calls:
  2527 ;;		Nothing
  2528 ;; This function is called by:
  2529 ;;		_main
  2530 ;; This function uses a non-reentrant model
  2531 ;;
  2532  05A8                     _timer1_interrupt_config:	
  2533                           
  2534                           ;common.c: 57: GIE = 1;
  2535                           
  2536                           ; Regs used in _timer1_interrupt_config: []
  2537  05A8  178B               	bsf	11,7
  2538                           
  2539                           ;common.c: 58: PEIE = 1;
  2540  05A9  170B               	bsf	11,6
  2541                           
  2542                           ;common.c: 59: TMR1IE = 1;
  2543  05AA  1683               	bsf	3,5	;RP0=1, select bank1
  2544  05AB  1303               	bcf	3,6	;RP1=0, select bank1
  2545  05AC  140C               	bsf	12,0
  2546  05AD  0008               	return
  2547  05AE                     __end_of_timer1_interrupt_config:	
  2548                           
  2549                           	psect	text737
  2550  05AE                     __ptext737:	
  2551 ;; =============== function _timer1_interrupt_config ends ============
  2552                           
  2553                           
  2554 ;; *************** function _clock_config *****************
  2555 ;; Defined at:
  2556 ;;		line 35 in file "C:\AK7030-OTP\common.c"
  2557 ;; Parameters:    Size  Location     Type
  2558 ;;		None
  2559 ;; Auto vars:     Size  Location     Type
  2560 ;;		None
  2561 ;; Return value:  Size  Location     Type
  2562 ;;		None               void
  2563 ;; Registers used:
  2564 ;;		wreg, status,2
  2565 ;; Tracked objects:
  2566 ;;		On entry : 17F/0
  2567 ;;		On exit  : 17F/40
  2568 ;;		Unchanged: FFE80/0
  2569 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2570 ;;      Params:         0       0       0       0       0
  2571 ;;      Locals:         0       0       0       0       0
  2572 ;;      Temps:          0       0       0       0       0
  2573 ;;      Totals:         0       0       0       0       0
  2574 ;;Total ram usage:        0 bytes
  2575 ;; Hardware stack levels used:    1
  2576 ;; Hardware stack levels required when called:    1
  2577 ;; This function calls:
  2578 ;;		Nothing
  2579 ;; This function is called by:
  2580 ;;		_main
  2581 ;; This function uses a non-reentrant model
  2582 ;;
  2583  05AE                     _clock_config:	
  2584                           
  2585                           ;common.c: 37: CLKPR = 0x80;
  2586                           
  2587                           ; Regs used in _clock_config: [wreg+status,2]
  2588  05AE  3080               	movlw	128
  2589  05AF  1703               	bsf	3,6	;RP1=1, select bank2
  2590  05B0  0088               	movwf	8	;volatile
  2591                           
  2592                           ;common.c: 38: CLKPR = 0x00;
  2593  05B1  0188               	clrf	8	;volatile
  2594  05B2                     l1381:	
  2595                           ;common.c: 39: while(CLKPCE);
  2596                           
  2597  05B2  1F88               	btfss	8,7
  2598  05B3  0008               	return
  2599  05B4  2DB2               	goto	l1381
  2600  05B5                     __end_of_clock_config:	
  2601                           
  2602                           	psect	text738
  2603  060B                     __ptext738:	
  2604 ;; =============== function _clock_config ends ============
  2605                           
  2606                           
  2607 ;; *************** function _ISR *****************
  2608 ;; Defined at:
  2609 ;;		line 310 in file "C:\AK7030-OTP\common.c"
  2610 ;; Parameters:    Size  Location     Type
  2611 ;;		None
  2612 ;; Auto vars:     Size  Location     Type
  2613 ;;		None
  2614 ;; Return value:  Size  Location     Type
  2615 ;;		None               void
  2616 ;; Registers used:
  2617 ;;		wreg, status,2, status,0
  2618 ;; Tracked objects:
  2619 ;;		On entry : 0/0
  2620 ;;		On exit  : 60/0
  2621 ;;		Unchanged: FFF9F/0
  2622 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2623 ;;      Params:         0       0       0       0       0
  2624 ;;      Locals:         0       0       0       0       0
  2625 ;;      Temps:          2       0       0       0       0
  2626 ;;      Totals:         2       0       0       0       0
  2627 ;;Total ram usage:        2 bytes
  2628 ;; Hardware stack levels used:    1
  2629 ;; This function calls:
  2630 ;;		Nothing
  2631 ;; This function is called by:
  2632 ;;		Interrupt level 1
  2633 ;; This function uses a non-reentrant model
  2634 ;;
  2635  060B                     _ISR:	
  2636                           
  2637                           ;common.c: 311: if(TMR1IF == 1)
  2638  060B  1283               	bcf	3,5	;RP0=0, select bank0
  2639  060C  1303               	bcf	3,6	;RP1=0, select bank0
  2640  060D  1C0C               	btfss	12,0
  2641  060E  2E35               	goto	i1l1488
  2642  060F  3064               	movlw	100
  2643                           
  2644                           ;common.c: 312: {
  2645                           ;common.c: 313: TMR1IF = 0 ;
  2646  0610  100C               	bcf	12,0
  2647                           
  2648                           ;common.c: 314: timer.timer10msStopWatch++;
  2649  0611  0AC2               	incf	_timer,f
  2650                           
  2651                           ;common.c: 315: ucTimer1sCnt++;
  2652  0612  0AC3               	incf	_ucTimer1sCnt,f
  2653                           
  2654                           ;common.c: 317: if(ucTimer1sCnt >= 100)
  2655  0613  0243               	subwf	_ucTimer1sCnt,w
  2656  0614  1C03               	skipc
  2657  0615  2E27               	goto	i1l3017
  2658                           
  2659                           ;common.c: 318: {
  2660                           ;common.c: 319: ucTimer1sCnt = 0;
  2661  0616  01C3               	clrf	_ucTimer1sCnt
  2662                           
  2663                           ;common.c: 320: if(uiBigTimer > 0)
  2664  0617  083F               	movf	_uiBigTimer+1,w
  2665  0618  043E               	iorwf	_uiBigTimer,w
  2666  0619  1903               	skipnz
  2667  061A  2E1F               	goto	i1l1483
  2668                           
  2669                           ;common.c: 321: uiBigTimer--;
  2670  061B  3001               	movlw	1
  2671  061C  02BE               	subwf	_uiBigTimer,f
  2672  061D  1C03               	skipc
  2673  061E  03BF               	decf	_uiBigTimer+1,f
  2674  061F                     i1l1483:	
  2675                           
  2676                           ;common.c: 323: if(uiSmallTimer)
  2677  061F  0841               	movf	_uiSmallTimer+1,w
  2678  0620  0440               	iorwf	_uiSmallTimer,w
  2679  0621  1903               	skipnz
  2680  0622  2E27               	goto	i1l3017
  2681                           
  2682                           ;common.c: 324: uiSmallTimer--;
  2683  0623  3001               	movlw	1
  2684  0624  02C0               	subwf	_uiSmallTimer,f
  2685  0625  1C03               	skipc
  2686  0626  03C1               	decf	_uiSmallTimer+1,f
  2687  0627                     i1l3017:	
  2688                           
  2689                           ;common.c: 325: }
  2690                           ;common.c: 328: static unsigned int flashCnt = 0;
  2691                           ;common.c: 329: flashCnt++;
  2692  0627  0AB4               	incf	ISR@flashCnt,f
  2693  0628  1903               	skipnz
  2694  0629  0AB5               	incf	ISR@flashCnt+1,f
  2695                           
  2696                           ;common.c: 330: if(flashCnt > 100)
  2697  062A  3000               	movlw	0
  2698  062B  0235               	subwf	ISR@flashCnt+1,w
  2699  062C  3065               	movlw	101
  2700  062D  1903               	skipnz
  2701  062E  0234               	subwf	ISR@flashCnt,w
  2702  062F  1C03               	skipc
  2703  0630  2E35               	goto	i1l1488
  2704                           
  2705                           ;common.c: 331: {
  2706                           ;common.c: 332: PA0 = ~PA0;
  2707  0631  3001               	movlw	1
  2708  0632  0685               	xorwf	5,f
  2709                           
  2710                           ;common.c: 333: flashCnt = 0;
  2711  0633  01B4               	clrf	ISR@flashCnt
  2712  0634  01B5               	clrf	ISR@flashCnt+1
  2713  0635                     i1l1488:	
  2714  0635  0871               	movf	??_ISR+1,w
  2715  0636  008A               	movwf	10
  2716  0637  0E70               	swapf	??_ISR^(0+-128),w
  2717  0638  0083               	movwf	3
  2718  0639  0EFE               	swapf	126,f
  2719  063A  0E7E               	swapf	126,w
  2720  063B  0009               	retfie
  2721  063C                     __end_of_ISR:	
  2722                           
  2723                           	psect	intentry
  2724  0000                     __pintentry:	
  2725                           ; Regs used in _ISR: [wreg+status,2+status,0]
  2726                           
  2727  0000                     interrupt_function:	
  2728  007E                     saved_w	set	btemp
  2729  0000  00FE               	movwf	btemp
  2730  0001  0E03               	swapf	3,w
  2731  0002  00F0               	movwf	??_ISR
  2732  0003  080A               	movf	10,w
  2733  0004  00F1               	movwf	??_ISR+1
  2734  0005  118A  2E0B         	ljmp	_ISR
  2735                           
  2736                           	psect	text739
  2737  0000                     __ptext739:	
  2738 ;; =============== function _ISR ends ============
  2739                           
  2740  007E                     btemp	set	126	;btemp
  2741  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Thu Nov 29 17:20:20 2018

                     ??_clock_config 0072                __size_of_start_timer1 0003  
                                  pc 0002                  ?_start_AD_Converter 0070  
                                 fsr 0004             ?_timer1_interrupt_config 0070  
                   ??_isAD_Completed 0072                                  l710 06DF  
                                l711 06E8                                  l717 06F3  
                                l671 0666                                  l666 0717  
                                l668 0662                                  l685 067D  
                                l677 0671                                  l679 0672  
                                _PA0 0028                                  _PA1 0029  
                                _GIE 005F                                  _PA2 002A  
                                _PA3 002B                                  _PB2 0032  
                                _ISR 060B                       _getAdCh13Value 0599  
        __size_of_adConverter_config 000B                                  u945 0798  
                                u955 07AB           __size_of_stop_AD_Converter 0002  
                                fsr0 0004                                  indf 0000  
                      _startBigTimer 05BC                                 S3583 0009  
                        main@ampStep 007A                                 ?_ISR 0070  
               ??_start_AD_Converter 0072                   __size_of_AD_Sample 00AE  
                               l2113 0000                                 l1402 0000  
                               l1410 0000                                 l2116 0000  
                               l1413 07F1                                 l1414 0000  
                               l2119 0000                                 l3031 0000  
                               l1431 07A3                                 l1432 07B6  
                               l3025 0000                                 l1417 0000  
                               l1451 0000                                 l3027 0000  
                               l1460 0000                                 l1381 05B2  
                               l1390 0000                                 l1384 0000  
                               l1393 0000                                 l1457 0000  
                               l3321 0000                                 l3313 0000  
                               l3401 0000                                 l1387 0000  
                               l3331 0000                                 l3315 0000  
                               l3323 0728                                 l3411 0000  
                               l3403 0000                                 l1396 0000  
                               l3341 0000                                 l3317 0000  
                               l3309 0719                                 l3413 0000  
                               l3405 0000                                 l1478 0000  
                               l1399 0000                                 l3343 077D  
                               l3335 0766                                 l3327 0759  
                               l3319 0000                                 l3431 066B  
                               l3423 0000                                 l3415 0000  
                               l3407 0000                                 l3337 0769  
                               l3441 0676                                 l3425 0664  
                               l3417 06FE                                 l3409 0000  
                               l3363 0000                                 l3355 0000  
                               l3339 076E                                 l3515 06EC  
                               l3507 06D7                                 l3451 067F  
                               l3443 0677                                 l3419 0000  
                               l2901 0000                                 l3373 0752  
                               l3365 0000                                 l3357 0000  
                               l3349 0791                                 l3525 06F7  
                               l3517 06ED                                 l3509 0000  
                               l3453 0689                                 l3461 0695  
                               l3429 066A                                 l3381 0000  
                               l2903 0000                                 l2911 0000  
                               l3527 06F8                                 l3455 0000  
                               l3391 0000                                 l3383 0000  
                               l2905 0000                                 l2913 0000  
                               l2921 0000                                 l3377 07C4  
                               l3369 0000                                 l3481 06B2  
                               l3473 0000                                 l3465 0000  
                               l3457 0000                                 l3393 0000  
                               l3385 0000                                 l2907 0000  
                               l2915 0000                                 l2923 0000  
                               l3379 0000                                 l3475 0000  
                               l3467 0000                                 l3395 0000  
                               l3387 0000                                 l2909 0000  
                               l2917 0000                                 l2925 0000  
                               l2941 0000                                 l3493 0000  
                               l3469 06AC                                 l3397 0000  
                               l3389 0000                                 l2919 0000  
                               l2927 0000                                 l2943 0000  
                               l2951 0000                                 l3487 06BC  
                               l3399 0000                                 l2929 0000  
                               l3497 06C4                                 l3489 06BD  
                               l2947 0000                                 l2963 0000  
                               l2949 0000                                 l2981 0000  
                               l2983 0000                                 l2979 07CC  
                               l2995 0000                                 l2997 0000  
                               _ADIE 046A                                 _ADIF 006A  
                               _ADON 00F8                                 _CHS0 00FA  
                               _CHS1 00FB                                 _CHS2 00FC  
                               _CHS3 00FD                                 _PEIE 005E  
             ??_isFinishedSmallTimer 0072                                 _main 063C  
                  ??_startSmallTimer 0072                                 btemp 007E  
                       _start_timer1 0596                                 start 0007  
                              ??_ISR 0070           __end_of_isPermitSampleTime 05BC  
             __end_of_getAdCh13Value 059E                  _sampleChannelSelect 007B  
                              ?_main 0070                                _DACR0 0088  
                              _DACR1 0089                                _CLKPR 0108  
                              _T1CON 0010                                _TMR1H 000F  
                              _TMR1L 000E                       ?_startBigTimer 0070  
                      main@tDA_timer 0044                                _timer 0042  
                              pclath 000A                                status 0003  
                              wtemp0 007E                 __end_of_clrSampeTime 0596  
         __end_of_isFinishedBigTimer 05A3                         __end_of_main 0718  
                  __end_of_AD_Sample 07C7                      ?_getAdCh13Value 0072  
               _setDAC0_ChannelValue 0000            main@ucInstalledBatteryCnt 004A  
                             ??_main 0078                      _sampleCH13Value 003C  
                             _ADCON0 001F                               _ADCON1 009F  
               __end_of_clock_config 05B5                               _DACCON 0087  
                             _ADRESH 001E                               _ADRESL 009E  
                             _CLKPCE 0847                               i1l3001 0000  
                             i1l3011 0000                               i1l3005 0000  
                             i1l3023 0000                               i1l3007 0000  
                             i1l3017 0627                               i1l3019 0000  
                             i1l1483 061F                               i1l1488 0635  
                   __end_of_dac_init 05DA                               _TMR1IE 0460  
                             _TMR1IF 0060                               _TMR1ON 0080  
                             _TRISA0 0428                               _TRISA1 0429  
                             _TRISB0 0430                               _TRISA2 042A  
                             _TRISA3 042B                               _TRISB2 0432  
                             _TRISB3 0433                               _TRISB4 0434  
                             _TRISB5 0435                               _TRISA7 042F  
                             _TRISB6 0436          __end_of_clearAdCompleteFalg 07D0  
                   __end_of_op1_init 05E2                     __end_of_op2_init 05EA  
             main@ucConfirmTimerZptS 0047                ?_setDAC0_ChannelValue 0070  
                             clrloop 05EB                      ??_startBigTimer 0072  
                       __pdataCOMMON 007B                               saved_w 007E  
                  getAdValue@AdValue 0074          ?_process_AD_Converter_Value 0070  
                     __pcstackCOMMON 0070                          ISR@flashCnt 0034  
                    _startSmallTimer 05C3                __end_of_timer1_config 05D2  
   __size_of_timer1_interrupt_config 0006                __size_of_clrSampeTime 0002  
                         __pbssBANK0 0020                           _getAdValue 07DB  
                         __pmaintext 063C               ??_setDAC0_ChannelValue 0072  
                         __pintentry 0000           __end_of_adConverter_config 05FD  
  __size_of_SetTempThermistorChannel 000B            ?_SetTempThermistorChannel 0070  
                          ?_dac_init 0070                __size_of_clock_config 0007  
                            _OP1CON0 001B                              _OP1CON1 001C  
                            _OP1CON2 001D                              _OP2CON0 009B  
                            _OP2CON1 009C                              _OP2CON2 009D  
                       _clrSampeTime 0594                            ?_op1_init 0070  
                          ?_op2_init 0070                   _isPermitSampleTime 05B5  
             _buffer_Sample_AD_Value 0020          __size_of_start_AD_Converter 0002  
                ?_isPermitSampleTime 0070        __size_of_isFinishedSmallTimer 0005  
                         _uiBigTimer 003E                     ??_getAdCh13Value 0074  
                       _clock_config 05AE              __end_of_startSmallTimer 05CA  
                _multiFilterMaxValue 0036                  _multiFilterMinValue 0038  
               ??_isPermitSampleTime 0072                   _isFinishedBigTimer 059E  
                         ??_dac_init 0072                            _AD_Sample 0719  
                       __size_of_ISR 0031                           ??_op1_init 0072  
                         ??_op2_init 0072                  ?_isFinishedBigTimer 0070  
                _multiFilterSumValue 003A              __size_of_isAD_Completed 0003  
               end_of_initialization 0608                          ?_getAdValue 0072  
               ??_isFinishedBigTimer 0072                           ?_AD_Sample 0070  
            _timer1_interrupt_config 05A8                           main@ucInit 0049  
       __size_of_clearAdCompleteFalg 0002                        __pidataCOMMON 0000  
                   ?_startSmallTimer 0070                __end_of_startBigTimer 05C3  
                __size_of_getAdValue 001B                  start_initialization 05FD  
                        __end_of_ISR 063C                        ?_start_timer1 0070  
   __end_of_SetTempThermistorChannel 07DB                main@ucCheckBatteryCnt 0045  
                        ??_AD_Sample 004B            ??_timer1_interrupt_config 0072  
                        __pbssCOMMON 0078                    __size_of_dac_init 0008  
                      __pcstackBANK0 004B                   _adConverter_config 05F2  
                     _isAD_Completed 07C9                    __size_of_op1_init 0008  
                  __size_of_op2_init 0008                       ??_start_timer1 0072  
                ?_adConverter_config 0070                         _ucTimer1sCnt 0043  
             __size_of_timer1_config 0008                            __ptext720 07C9  
                          __ptext721 07C7                            __ptext730 0596  
                          __ptext722 07CC                            __ptext731 05E2  
                          __ptext723 05A3                            __ptext715 0718  
                          __ptext732 05DA                            __ptext724 059E  
                          __ptext716 0719                            __ptext733 05D2  
                          __ptext725 05C3                            __ptext717 07DB  
                          __ptext734 05F2                            __ptext726 05BC  
                          __ptext718 07D0                            __ptext735 05CA  
                          __ptext727 0599                            __ptext719 07CE  
                          __ptext736 05A8                            __ptext728 0594  
                          __ptext737 05AE                            __ptext729 05B5  
                          __ptext738 060B                            __ptext739 0000  
       __end_of_isFinishedSmallTimer 05A8                            __pswtext1 0009  
               ??_adConverter_config 0072               __end_of_isAD_Completed 07CC  
         __end_of_start_AD_Converter 07CE                getAdValue@AdHighValue 0076  
                  interrupt_function 0000                         ??_getAdValue 0074  
    __end_of_timer1_interrupt_config 05AE             _SetTempThermistorChannel 07D0  
        __size_of_isPermitSampleTime 0007                         _uiSmallTimer 0040  
                 __end_of_getAdValue 07F6                      ?_isAD_Completed 0070  
                      _timer1_config 05CA         ??_process_AD_Converter_Value 0078  
                _clearAdCompleteFalg 07CE                 main@ucConfirmTimer1S 0046  
        __size_of_isFinishedBigTimer 0005                 ?_clearAdCompleteFalg 0070  
               __end_of_start_timer1 0599  __size_of_process_AD_Converter_Value 0001  
                           _dac_init 05D2              __size_of_getAdCh13Value 0005  
                     ?_timer1_config 0070                    _stop_AD_Converter 07C7  
                           _op1_init 05DA                             _op2_init 05E2  
                 ?_stop_AD_Converter 0070                        __size_of_main 00DC  
                  main@ucConfrimeCnt 0048                 _isFinishedSmallTimer 05A3  
                ??_stop_AD_Converter 0072                             clear_ram 05EA  
              ??_clearAdCompleteFalg 0072                        ?_clrSampeTime 0070  
          __end_of_stop_AD_Converter 07C9                          _sampleCount 0078  
                        _sampleTimes 0079             __size_of_startSmallTimer 0007  
                           intlevel1 0000                ?_isFinishedSmallTimer 0070  
             __size_of_startBigTimer 0007                        ?_clock_config 0070  
                     ??_clrSampeTime 0072                      ??_timer1_config 0072  
 __end_of_process_AD_Converter_Value 0719           _process_AD_Converter_Value 0718  
         ??_SetTempThermistorChannel 0072                   _start_AD_Converter 07CC  
