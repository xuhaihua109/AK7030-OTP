

HI-TECH Software PIC PRO Macro Assembler V9.83 build 10920 
                                                                                               Tue Nov 19 23:12:03 2019

HI-TECH Software Omniscient Code Generator (PRO mode) build 10920
     1                           	processor	16C77
     2                           	opt	pw 120
     3                           	opt	pm
     4                           	psect	config,global,class=CONFIG,delta=2
     5                           	psect	idataBANK0,global,class=CODE,delta=2
     6                           	psect	cinit,global,class=CODE,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    13                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    14                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    15                           	psect	maintext,global,class=CODE,delta=2
    16                           	psect	text1231,local,class=CODE,delta=2
    17                           	psect	text1232,local,class=CODE,delta=2
    18                           	psect	text1233,local,class=CODE,delta=2
    19                           	psect	text1234,local,class=CODE,delta=2
    20                           	psect	text1239,local,class=CODE,delta=2
    21                           	psect	text1240,local,class=CODE,delta=2
    22                           	psect	text1241,local,class=CODE,delta=2
    23                           	psect	text1242,local,class=CODE,delta=2
    24                           	psect	text1243,local,class=CODE,delta=2
    25                           	psect	text1244,local,class=CODE,delta=2
    26                           	psect	text1245,local,class=CODE,delta=2
    27                           	psect	text1246,local,class=CODE,delta=2
    28                           	psect	text1247,local,class=CODE,delta=2
    29                           	psect	text1248,local,class=CODE,delta=2
    30                           	psect	text1249,local,class=CODE,delta=2
    31                           	psect	text1250,local,class=CODE,delta=2
    32                           	psect	text1251,local,class=CODE,delta=2
    33                           	psect	text1253,local,class=CODE,delta=2
    34                           	psect	text1255,local,class=CODE,delta=2
    35                           	psect	text1256,local,class=CODE,delta=2
    36                           	psect	text1257,local,class=CODE,delta=2
    37                           	psect	text1258,local,class=CODE,delta=2
    38                           	psect	text1259,local,class=CODE,delta=2
    39                           	psect	text1260,local,class=CODE,delta=2
    40                           	psect	text1268,local,class=CODE,delta=2
    41                           	psect	intentry,global,class=CODE,delta=2
    42                           	psect	text1275,local,class=CODE,delta=2
    43                           	psect	pa_nodes,global,class=CODE,delta=2
    44                           	dabs	1,0x7E,2
    45  000A                     	;#
    46                           
    47                           	psect	config
    48  2000  0FFF               	dw	4095	;#
    49  2001  3FDE               	dw	16350	;#
    50  2002  3FF8               	dw	16376	;#
    51                           
    52                           	psect	idataBANK0
    53  0000                     __pidataBANK0:	
    54  001F                     _ADCON0	set	31
    55  001E                     _ADRESH	set	30
    56  0017                     _CCP1CON	set	23
    57  0015                     _CCPR1L	set	21
    58  0010                     _T1CON	set	16
    59  0012                     _T2CON	set	18
    60  000F                     _TMR1H	set	15
    61  000E                     _TMR1L	set	14
    62  006A                     _ADIF	set	106
    63  00F8                     _ADON	set	248
    64  005F                     _GIE	set	95
    65  00F9                     _GO	set	249
    66  0032                     _PB2	set	50
    67  0033                     _PB3	set	51
    68  0034                     _PB4	set	52
    69  0035                     _PB5	set	53
    70  005E                     _PEIE	set	94
    71  0060                     _TMR1IF	set	96
    72  009F                     _ADCON1	set	159
    73  009E                     _ADRESL	set	158
    74  0092                     _PR2	set	146
    75  046A                     _ADIE	set	1130
    76  0460                     _TMR1IE	set	1120
    77  0430                     _TRISB0	set	1072
    78  0431                     _TRISB1	set	1073
    79  0432                     _TRISB2	set	1074
    80  0433                     _TRISB3	set	1075
    81  0434                     _TRISB4	set	1076
    82  0435                     _TRISB5	set	1077
    83  0108                     _CLKPR	set	264
    84  0847                     _CLKPCE	set	2119
    85  0C42                     _PBOD2	set	3138
    86                           
    87                           	psect	cinit
    88  053B                     start_initialization:	
    89  053B  303D               	movlw	low __pbssBANK0
    90                           
    91                           ; Clear objects allocated to COMMON
    92  053C  01FD               	clrf	__pbssCOMMON& (0+127)
    93                           
    94                           ; Clear objects allocated to BANK0
    95  053D  1383               	bcf	3,7	;select IRP bank0
    96  053E  0084               	movwf	4
    97  053F  3059               	movlw	low (__pbssBANK0+28)
    98  0540  118A  25BA  118A   	fcall	clear_ram
    99                           
   100                           ; Clear objects allocated to BANK1
   101  0543  30A0               	movlw	low __pbssBANK1
   102  0544  0084               	movwf	4
   103  0545  30BE               	movlw	low (__pbssBANK1+30)
   104  0546  118A  25BA         	fcall	clear_ram
   105                           
   106                           ;initializer for _sampleChannelSelect
   107  0548  300C               	movlw	12
   108  0549  00D9               	movwf	__pdataBANK0& (0+127)
   109                           
   110                           ;initializer for vPutSampleDataIntoTable@uiInitWidth
   111  054A  304B               	movlw	75
   112  054B  00DA               	movwf	(__pdataBANK0+1)& (0+127)
   113  054C                     end_of_initialization:	
   114                           ;End of C runtime variable initialization code
   115                           
   116  054C  0183               	clrf	3
   117  054D  118A  2A17         	ljmp	_main	;jump to C main() function
   118                           
   119                           	psect	bssCOMMON
   120  007D                     __pbssCOMMON:	
   121  007D                     vPutSampleDataIntoTable@ucCh12Length:	
   122  007D                     	ds	1
   123                           
   124                           	psect	bssBANK0
   125  003D                     __pbssBANK0:	
   126  003D                     _uiBigTimer:	
   127  003D                     	ds	2
   128  003F                     _uiOneHourTimer:	
   129  003F                     	ds	2
   130  0041                     _uiSmallTimer:	
   131  0041                     	ds	2
   132  0043                     _uiTwentyMinTimer:	
   133  0043                     	ds	2
   134  0045                     vPutSampleDataIntoTable@uiCalWidthArrayNew:	
   135  0045                     	ds	2
   136  0047                     vPutSampleDataIntoTable@uiCalWidthArrayOld:	
   137  0047                     	ds	2
   138  0049                     ISR@ucTimer1sCnt:	
   139  0049                     	ds	1
   140  004A                     _adc_convert_flag:	
   141  004A                     	ds	1
   142  004B                     _bBigTimerStartFlag:	
   143  004B                     	ds	1
   144  004C                     _bOneHourTimerStartFlag:	
   145  004C                     	ds	1
   146  004D                     _bSmallTimerStartFlag:	
   147  004D                     	ds	1
   148  004E                     _bTwentyMinStartFlag:	
   149  004E                     	ds	1
   150  004F                     _bWaitResetFlag:	
   151  004F                     	ds	1
   152  0050                     _sampleTimes:	
   153  0050                     	ds	1
   154  0051                     _timer:	
   155  0051                     	ds	1
   156  0052                     main@cTimerP5s_781:	
   157  0052                     	ds	1
   158  0053                     main@cTimerP5s_787:	
   159  0053                     	ds	1
   160  0054                     main@ucStep:	
   161  0054                     	ds	1
   162  0055                     main@ucTimerP3s:	
   163  0055                     	ds	1
   164  0056                     main@ucTimerP5s:	
   165  0056                     	ds	1
   166  0057                     vPutSampleDataIntoTable@ucCh13Length:	
   167  0057                     	ds	1
   168  0058                     vPutSampleDataIntoTable@ucChannelFourteenthLength:	
   169  0058                     	ds	1
   170                           
   171                           	psect	dataBANK0
   172  0059                     __pdataBANK0:	
   173  0059                     _sampleChannelSelect:	
   174  0059                     	ds	1
   175  005A                     vPutSampleDataIntoTable@uiInitWidth:	
   176  005A                     	ds	1
   177                           
   178                           	psect	bssBANK1
   179  00A0                     __pbssBANK1:	
   180  00A0                     _uiTwentySecondsTimer:	
   181  00A0                     	ds	2
   182  00A2                     main@ucDelay1s:	
   183  00A2                     	ds	2
   184  00A4                     main@uiTimerOneP5s:	
   185  00A4                     	ds	2
   186  00A6                     main@uiTimerThreeP5s:	
   187  00A6                     	ds	2
   188  00A8                     main@uiTimerTwoP5s:	
   189  00A8                     	ds	2
   190  00AA                     vPutSampleDataIntoTable@uiCalWidthCnt:	
   191  00AA                     	ds	2
   192  00AC                     _uiSampleCh12:	
   193  00AC                     	ds	6
   194  00B2                     _uiSampleCh13:	
   195  00B2                     	ds	6
   196  00B8                     _uiSampleChannelFourteenth:	
   197  00B8                     	ds	6
   198                           
   199                           	psect	clrtext
   200  05BA                     clear_ram:	
   201                           ;	Called with FSR containing the base address, and
   202                           ;	W with the last address+1
   203                           
   204  05BA  0064               	clrwdt	;clear the watchdog before getting into this loop
   205  05BB                     clrloop:	
   206  05BB  0180               	clrf	0	;clear RAM location pointed to by FSR
   207  05BC  0A84               	incf	4,f	;increment pointer
   208  05BD  0604               	xorwf	4,w	;XOR with final address
   209  05BE  1903               	btfsc	3,2	;have we reached the end yet?
   210  05BF  3400               	retlw	0	;all done for this memory range, return
   211  05C0  0604               	xorwf	4,w	;XOR again to restore value
   212  05C1  2DBB               	goto	clrloop	;do the next byte
   213                           
   214                           	psect	cstackBANK1
   215  00BE                     __pcstackBANK1:	
   216  00BE                     FilterCh13@tmpValue:	
   217                           
   218                           ; 1 bytes @ 0x0
   219  00BE                     	ds	1
   220  00BF                     FilterCh13@filter_temp:	
   221                           
   222                           ; 2 bytes @ 0x1
   223  00BF                     	ds	2
   224  00C1                     FilterCh13@filter_sum:	
   225                           
   226                           ; 2 bytes @ 0x3
   227  00C1                     	ds	2
   228  00C3                     FilterCh13@filter_buf:	
   229                           
   230                           ; 6 bytes @ 0x5
   231  00C3                     	ds	6
   232  00C9                     FilterCh13@cir:	
   233                           
   234                           ; 2 bytes @ 0xB
   235  00C9                     	ds	2
   236  00CB                     FilterCh13@j:	
   237                           
   238                           ; 1 bytes @ 0xD
   239  00CB                     	ds	1
   240  00CC                     FilterCh13@i:	
   241                           
   242                           ; 1 bytes @ 0xE
   243  00CC                     	ds	1
   244  00CD                     ??_main:	
   245                           
   246                           ; 0 bytes @ 0xF
   247  00CD                     	ds	1
   248  00CE                     main@ucChValue:	
   249                           
   250                           ; 2 bytes @ 0x10
   251  00CE                     	ds	2
   252  00D0                     main@uiCh13Value:	
   253                           
   254                           ; 2 bytes @ 0x12
   255  00D0                     	ds	2
   256                           
   257                           	psect	cstackCOMMON
   258  0070                     __pcstackCOMMON:	
   259  0070                     ?_clock_config:	
   260  0070                     ?_timer1_config:	
   261                           ; 0 bytes @ 0x0
   262                           
   263  0070                     ?_timer1_interrupt_config:	
   264                           ; 0 bytes @ 0x0
   265                           
   266  0070                     ?_adc_start:	
   267                           ; 0 bytes @ 0x0
   268                           
   269  0070                     ?_process_AD_Converter_Value:	
   270                           ; 0 bytes @ 0x0
   271                           
   272  0070                     ?_clrSampeTime:	
   273                           ; 0 bytes @ 0x0
   274                           
   275  0070                     ?_clearTwentyMinTimer:	
   276                           ; 0 bytes @ 0x0
   277                           
   278  0070                     ?_clearTwelveHoursTimer:	
   279                           ; 0 bytes @ 0x0
   280                           
   281  0070                     ?_clearThreeHoursTimer:	
   282                           ; 0 bytes @ 0x0
   283                           
   284  0070                     ?_setWaitResetFlag:	
   285                           ; 0 bytes @ 0x0
   286                           
   287  0070                     ?_AD_Sample:	
   288                           ; 0 bytes @ 0x0
   289                           
   290  0070                     ?_initPB3:	
   291                           ; 0 bytes @ 0x0
   292                           
   293  0070                     ?_setPB3:	
   294                           ; 0 bytes @ 0x0
   295                           
   296  0070                     ?_initPB4:	
   297                           ; 0 bytes @ 0x0
   298                           
   299  0070                     ?_setPB4:	
   300                           ; 0 bytes @ 0x0
   301                           
   302  0070                     ?_initPB5:	
   303                           ; 0 bytes @ 0x0
   304                           
   305  0070                     ?_setPB5:	
   306                           ; 0 bytes @ 0x0
   307                           
   308  0070                     ?_initPB2_AsHighResistence:	
   309                           ; 0 bytes @ 0x0
   310                           
   311  0070                     ?_initPin:	
   312                           ; 0 bytes @ 0x0
   313                           
   314  0070                     ?_setPinInitVaule:	
   315                           ; 0 bytes @ 0x0
   316                           
   317  0070                     ?_selectAdChannel:	
   318                           ; 0 bytes @ 0x0
   319                           
   320  0070                     ?_reset:	
   321                           ; 0 bytes @ 0x0
   322                           
   323  0070                     ??_getWaitResetFlag:	
   324                           ; 0 bytes @ 0x0
   325                           
   326  0070                     ?_setPWM_Width:	
   327                           ; 0 bytes @ 0x0
   328                           
   329  0070                     ??_setPWM_Width:	
   330                           ; 0 bytes @ 0x0
   331                           
   332  0070                     ?_setAD_ConvertFlag:	
   333                           ; 0 bytes @ 0x0
   334                           
   335  0070                     ?_ISR:	
   336                           ; 0 bytes @ 0x0
   337                           
   338  0070                     ?i1_setAD_ConvertFlag:	
   339                           ; 0 bytes @ 0x0
   340                           
   341  0070                     ??i1_setAD_ConvertFlag:	
   342                           ; 0 bytes @ 0x0
   343                           
   344  0070                     ?_isPermitSampleTime:	
   345                           ; 0 bytes @ 0x0
   346                           
   347  0070                     ?_isFinishedTwentyMinTimer:	
   348                           ; 1 bytes @ 0x0
   349                           
   350  0070                     ?_isFinishedTwelveHoursTimer:	
   351                           ; 1 bytes @ 0x0
   352                           
   353  0070                     ?_isFinishedThreeHoursTimer:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ?_isFinishedOneHoursTimer:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_getWaitResetFlag:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ?_getAD_ConvertFlag:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_adc_get:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_main:	
   369                           ; 2 bytes @ 0x0
   370                           
   371  0070                     ?_Filter:	
   372                           ; 2 bytes @ 0x0
   373                           
   374  0070                     setPWM_Width@ucWidth:	
   375                           ; 2 bytes @ 0x0
   376                           
   377  0070                     i1setAD_ConvertFlag@flag:	
   378                           ; 1 bytes @ 0x0
   379                           
   380                           
   381                           ; 1 bytes @ 0x0
   382  0070                     	ds	2
   383  0072                     ??_adc_get:	
   384  0072                     ??_Filter:	
   385                           ; 0 bytes @ 0x2
   386                           
   387  0072                     adc_get@val:	
   388                           ; 0 bytes @ 0x2
   389                           
   390                           
   391                           ; 2 bytes @ 0x2
   392  0072                     	ds	4
   393  0076                     ?_vPutSampleDataIntoTable:	
   394  0076                     vPutSampleDataIntoTable@uiSampleData:	
   395                           ; 0 bytes @ 0x6
   396                           
   397                           
   398                           ; 2 bytes @ 0x6
   399  0076                     	ds	2
   400  0078                     vPutSampleDataIntoTable@channel:	
   401                           
   402                           ; 1 bytes @ 0x8
   403  0078                     	ds	1
   404  0079                     ??_vPutSampleDataIntoTable:	
   405  0079                     ??_ISR:	
   406                           ; 0 bytes @ 0x9
   407                           
   408                           
   409                           ; 0 bytes @ 0x9
   410  0079                     	ds	4
   411                           
   412                           	psect	cstackBANK0
   413  0020                     __pcstackBANK0:	
   414  0020                     Filter@filter_temp:	
   415                           
   416                           ; 2 bytes @ 0x0
   417  0020                     	ds	2
   418  0022                     Filter@filter_sum:	
   419                           
   420                           ; 2 bytes @ 0x2
   421  0022                     	ds	2
   422  0024                     Filter@tmpValue:	
   423                           
   424                           ; 1 bytes @ 0x4
   425  0024                     	ds	1
   426  0025                     Filter@filter_buf:	
   427                           
   428                           ; 6 bytes @ 0x5
   429  0025                     	ds	6
   430  002B                     Filter@cir:	
   431                           
   432                           ; 2 bytes @ 0xB
   433  002B                     	ds	2
   434  002D                     Filter@j:	
   435                           
   436                           ; 1 bytes @ 0xD
   437  002D                     	ds	1
   438  002E                     Filter@i:	
   439                           
   440                           ; 1 bytes @ 0xE
   441  002E                     	ds	1
   442  002F                     vPutSampleDataIntoTable@uiAbstractValue:	
   443                           
   444                           ; 2 bytes @ 0xF
   445  002F                     	ds	2
   446  0031                     vPutSampleDataIntoTable@uiDeviationValue:	
   447                           
   448                           ; 2 bytes @ 0x11
   449  0031                     	ds	2
   450  0033                     vPutSampleDataIntoTable@i:	
   451                           
   452                           ; 2 bytes @ 0x13
   453  0033                     	ds	2
   454  0035                     ??_clock_config:	
   455  0035                     ??_timer1_config:	
   456                           ; 0 bytes @ 0x15
   457                           
   458  0035                     ??_timer1_interrupt_config:	
   459                           ; 0 bytes @ 0x15
   460                           
   461  0035                     ?_adc_test_init:	
   462                           ; 0 bytes @ 0x15
   463                           
   464  0035                     ?_startTwentyMinTimer:	
   465                           ; 0 bytes @ 0x15
   466                           
   467  0035                     ??_adc_start:	
   468                           ; 0 bytes @ 0x15
   469                           
   470  0035                     ??_isPermitSampleTime:	
   471                           ; 0 bytes @ 0x15
   472                           
   473  0035                     ??_clrSampeTime:	
   474                           ; 0 bytes @ 0x15
   475                           
   476  0035                     ??_isFinishedTwentyMinTimer:	
   477                           ; 0 bytes @ 0x15
   478                           
   479  0035                     ??_clearTwentyMinTimer:	
   480                           ; 0 bytes @ 0x15
   481                           
   482  0035                     ?_startTwelveHourTimer:	
   483                           ; 0 bytes @ 0x15
   484                           
   485  0035                     ??_isFinishedTwelveHoursTimer:	
   486                           ; 0 bytes @ 0x15
   487                           
   488  0035                     ??_clearTwelveHoursTimer:	
   489                           ; 0 bytes @ 0x15
   490                           
   491  0035                     ?_startThreeHoursTimer:	
   492                           ; 0 bytes @ 0x15
   493                           
   494  0035                     ??_isFinishedThreeHoursTimer:	
   495                           ; 0 bytes @ 0x15
   496                           
   497  0035                     ??_clearThreeHoursTimer:	
   498                           ; 0 bytes @ 0x15
   499                           
   500  0035                     ?_startOneHoursTimer:	
   501                           ; 0 bytes @ 0x15
   502                           
   503  0035                     ??_isFinishedOneHoursTimer:	
   504                           ; 0 bytes @ 0x15
   505                           
   506  0035                     ??_setWaitResetFlag:	
   507                           ; 0 bytes @ 0x15
   508                           
   509  0035                     ??_AD_Sample:	
   510                           ; 0 bytes @ 0x15
   511                           
   512  0035                     ??_initPB3:	
   513                           ; 0 bytes @ 0x15
   514                           
   515  0035                     ??_setPB3:	
   516                           ; 0 bytes @ 0x15
   517                           
   518  0035                     ??_initPB4:	
   519                           ; 0 bytes @ 0x15
   520                           
   521  0035                     ??_setPB4:	
   522                           ; 0 bytes @ 0x15
   523                           
   524  0035                     ??_initPB5:	
   525                           ; 0 bytes @ 0x15
   526                           
   527  0035                     ??_setPB5:	
   528                           ; 0 bytes @ 0x15
   529                           
   530  0035                     ??_initPB2_AsHighResistence:	
   531                           ; 0 bytes @ 0x15
   532                           
   533  0035                     ?_pwm_start:	
   534                           ; 0 bytes @ 0x15
   535                           
   536  0035                     ??_selectAdChannel:	
   537                           ; 0 bytes @ 0x15
   538                           
   539  0035                     ??_reset:	
   540                           ; 0 bytes @ 0x15
   541                           
   542  0035                     ??_getAD_ConvertFlag:	
   543                           ; 0 bytes @ 0x15
   544                           
   545  0035                     ??_setAD_ConvertFlag:	
   546                           ; 0 bytes @ 0x15
   547                           
   548  0035                     ?_FilterCh13:	
   549                           ; 0 bytes @ 0x15
   550                           
   551  0035                     initPB3@bValue:	
   552                           ; 2 bytes @ 0x15
   553                           
   554  0035                     setPB3@bValue:	
   555                           ; 1 bytes @ 0x15
   556                           
   557  0035                     initPB4@bValue:	
   558                           ; 1 bytes @ 0x15
   559                           
   560  0035                     setPB4@bValue:	
   561                           ; 1 bytes @ 0x15
   562                           
   563  0035                     initPB5@bValue:	
   564                           ; 1 bytes @ 0x15
   565                           
   566  0035                     setPB5@bValue:	
   567                           ; 1 bytes @ 0x15
   568                           
   569  0035                     pwm_start@ucPulseFrequency:	
   570                           ; 1 bytes @ 0x15
   571                           
   572  0035                     setWaitResetFlag@bValue:	
   573                           ; 1 bytes @ 0x15
   574                           
   575  0035                     setAD_ConvertFlag@flag:	
   576                           ; 1 bytes @ 0x15
   577                           
   578  0035                     adc_test_init@ref:	
   579                           ; 1 bytes @ 0x15
   580                           
   581  0035                     startTwelveHourTimer@uiSetTime:	
   582                           ; 1 bytes @ 0x15
   583                           
   584  0035                     startThreeHoursTimer@uiSetTime:	
   585                           ; 2 bytes @ 0x15
   586                           
   587  0035                     startOneHoursTimer@uiSetTime:	
   588                           ; 2 bytes @ 0x15
   589                           
   590  0035                     startTwentyMinTimer@uiSetValue:	
   591                           ; 2 bytes @ 0x15
   592                           
   593                           
   594                           ; 2 bytes @ 0x15
   595  0035                     	ds	1
   596  0036                     ??_adc_test_init:	
   597  0036                     ??_pwm_start:	
   598                           ; 0 bytes @ 0x16
   599                           
   600  0036                     ??_initPin:	
   601                           ; 0 bytes @ 0x16
   602                           
   603  0036                     ??_setPinInitVaule:	
   604                           ; 0 bytes @ 0x16
   605                           
   606  0036                     pwm_start@ucPulseWidth:	
   607                           ; 0 bytes @ 0x16
   608                           
   609                           
   610                           ; 1 bytes @ 0x16
   611  0036                     	ds	1
   612  0037                     ??_startTwentyMinTimer:	
   613  0037                     ??_startTwelveHourTimer:	
   614                           ; 0 bytes @ 0x17
   615                           
   616  0037                     ??_startThreeHoursTimer:	
   617                           ; 0 bytes @ 0x17
   618                           
   619  0037                     ??_startOneHoursTimer:	
   620                           ; 0 bytes @ 0x17
   621                           
   622  0037                     ??_FilterCh13:	
   623                           ; 0 bytes @ 0x17
   624                           
   625  0037                     adc_test_init@channel:	
   626                           ; 0 bytes @ 0x17
   627                           
   628                           
   629                           ; 1 bytes @ 0x17
   630  0037                     	ds	1
   631  0038                     ??_process_AD_Converter_Value:	
   632                           
   633                           ; 0 bytes @ 0x18
   634  0038                     	ds	3
   635  003B                     ?_getAdOriginalCh13Value:	
   636                           
   637                           ; 2 bytes @ 0x1B
   638  003B                     	ds	2
   639  003D                     ??_getAdOriginalCh13Value:	
   640                           
   641                           	psect	maintext
   642  0217                     __pmaintext:	
   643                           ; 0 bytes @ 0x1D
   644 ;;Data sizes: Strings 0, constant 0, data 2, bss 59, persistent 0 stack 0
   645 ;;Auto spaces:   Size  Autos    Used
   646 ;; COMMON          14     13      14
   647 ;; BANK0           80     29      59
   648 ;; BANK1           80     20      50
   649 ;; BANK3           96      0       0
   650 ;; BANK2           96      0       0
   651 ;;
   652 ;; Pointer list with targets:
   653 ;; ?_adc_get	unsigned int  size(1) Largest target is 0
   654 ;;
   655 ;; ?_getAdOriginalCh13Value	unsigned int  size(1) Largest target is 0
   656 ;;
   657 ;; ?_Filter	unsigned int  size(1) Largest target is 0
   658 ;;
   659 ;; ?_FilterCh13	unsigned int  size(1) Largest target is 0
   660 ;;
   661 ;; Filter@tmpValue	PTR unsigned int  size(1) Largest target is 6
   662 ;;		 -> uiSampleChannelFourteenth(BANK1[6]), uiSampleCh12(BANK1[6]), 
   663 ;;
   664 ;; FilterCh13@tmpValue	PTR unsigned int  size(1) Largest target is 6
   665 ;;		 -> uiSampleCh13(BANK1[6]), 
   666 ;;
   667 ;;
   668 ;; Critical Paths under _main in COMMON
   669 ;;
   670 ;;   None.
   671 ;;
   672 ;; Critical Paths under _ISR in COMMON
   673 ;;
   674 ;;   _ISR->_vPutSampleDataIntoTable
   675 ;;   _vPutSampleDataIntoTable->_Filter
   676 ;;
   677 ;; Critical Paths under _main in BANK0
   678 ;;
   679 ;;   _main->_getAdOriginalCh13Value
   680 ;;   _getAdOriginalCh13Value->_FilterCh13
   681 ;;   _process_AD_Converter_Value->_adc_test_init
   682 ;;   _setPinInitVaule->_setPB3
   683 ;;   _setPinInitVaule->_setPB4
   684 ;;   _setPinInitVaule->_setPB5
   685 ;;   _initPin->_initPB3
   686 ;;   _initPin->_initPB4
   687 ;;   _initPin->_initPB5
   688 ;;
   689 ;; Critical Paths under _ISR in BANK0
   690 ;;
   691 ;;   _ISR->_vPutSampleDataIntoTable
   692 ;;   _vPutSampleDataIntoTable->_Filter
   693 ;;
   694 ;; Critical Paths under _main in BANK1
   695 ;;
   696 ;;   _getAdOriginalCh13Value->_FilterCh13
   697 ;;
   698 ;; Critical Paths under _ISR in BANK1
   699 ;;
   700 ;;   None.
   701 ;;
   702 ;; Critical Paths under _main in BANK3
   703 ;;
   704 ;;   None.
   705 ;;
   706 ;; Critical Paths under _ISR in BANK3
   707 ;;
   708 ;;   None.
   709 ;;
   710 ;; Critical Paths under _main in BANK2
   711 ;;
   712 ;;   None.
   713 ;;
   714 ;; Critical Paths under _ISR in BANK2
   715 ;;
   716 ;;   None.
   717 ;;
   718 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   719 ;;
   720 ;;
   721 ;;Call Graph Tables:
   722 ;;
   723 ;; ---------------------------------------------------------------------------------
   724 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   725 ;; ---------------------------------------------------------------------------------
   726 ;; (0) _main                                                 5     5      0    1696
   727 ;;                                             15 BANK1      5     5      0
   728 ;;                            _initPin
   729 ;;                    _setPinInitVaule
   730 ;;                    _selectAdChannel
   731 ;;                       _clock_config
   732 ;;                      _timer1_config
   733 ;;            _timer1_interrupt_config
   734 ;;                      _adc_test_init
   735 ;;                _startTwentyMinTimer
   736 ;;                          _adc_start
   737 ;;         _process_AD_Converter_Value
   738 ;;                 _isPermitSampleTime
   739 ;;                       _clrSampeTime
   740 ;;           _isFinishedTwentyMinTimer
   741 ;;             _getAdOriginalCh13Value
   742 ;;                          _pwm_start
   743 ;;                             _setPB3
   744 ;;                             _setPB4
   745 ;;                             _setPB5
   746 ;;                _clearTwentyMinTimer
   747 ;;               _startTwelveHourTimer
   748 ;;         _isFinishedTwelveHoursTimer
   749 ;;              _clearTwelveHoursTimer
   750 ;;               _startThreeHoursTimer
   751 ;;          _isFinishedThreeHoursTimer
   752 ;;               _clearThreeHoursTimer
   753 ;;                 _startOneHoursTimer
   754 ;;            _isFinishedOneHoursTimer
   755 ;;                              _reset
   756 ;;                   _setWaitResetFlag
   757 ;; ---------------------------------------------------------------------------------
   758 ;; (1) _getAdOriginalCh13Value                               2     0      2     915
   759 ;;                                             27 BANK0      2     0      2
   760 ;;                         _FilterCh13
   761 ;; ---------------------------------------------------------------------------------
   762 ;; (1) _process_AD_Converter_Value                           0     0      0      93
   763 ;;                  _getAD_ConvertFlag
   764 ;;                  _setAD_ConvertFlag
   765 ;;                          _AD_Sample
   766 ;;                      _adc_test_init
   767 ;;                          _adc_start
   768 ;; ---------------------------------------------------------------------------------
   769 ;; (1) _setPinInitVaule                                      0     0      0      93
   770 ;;                             _setPB3
   771 ;;                             _setPB4
   772 ;;                             _setPB5
   773 ;; ---------------------------------------------------------------------------------
   774 ;; (1) _initPin                                              0     0      0      93
   775 ;;           _initPB2_AsHighResistence
   776 ;;                            _initPB3
   777 ;;                            _initPB4
   778 ;;                            _initPB5
   779 ;; ---------------------------------------------------------------------------------
   780 ;; (2) _AD_Sample                                            0     0      0       0
   781 ;; ---------------------------------------------------------------------------------
   782 ;; (2) _setAD_ConvertFlag                                    1     1      0      31
   783 ;;                                             21 BANK0      1     1      0
   784 ;; ---------------------------------------------------------------------------------
   785 ;; (2) _getAD_ConvertFlag                                    0     0      0       0
   786 ;; ---------------------------------------------------------------------------------
   787 ;; (2) _FilterCh13                                          21    19      2     915
   788 ;;                                             21 BANK0      6     4      2
   789 ;;                                              0 BANK1     15    15      0
   790 ;; ---------------------------------------------------------------------------------
   791 ;; (1) _setWaitResetFlag                                     1     1      0      31
   792 ;;                                             21 BANK0      1     1      0
   793 ;; ---------------------------------------------------------------------------------
   794 ;; (1) _isFinishedOneHoursTimer                              0     0      0       0
   795 ;; ---------------------------------------------------------------------------------
   796 ;; (1) _startOneHoursTimer                                   2     0      2      31
   797 ;;                                             21 BANK0      2     0      2
   798 ;; ---------------------------------------------------------------------------------
   799 ;; (1) _clearThreeHoursTimer                                 0     0      0       0
   800 ;; ---------------------------------------------------------------------------------
   801 ;; (1) _isFinishedThreeHoursTimer                            0     0      0       0
   802 ;; ---------------------------------------------------------------------------------
   803 ;; (1) _startThreeHoursTimer                                 2     0      2      31
   804 ;;                                             21 BANK0      2     0      2
   805 ;; ---------------------------------------------------------------------------------
   806 ;; (1) _clearTwelveHoursTimer                                0     0      0       0
   807 ;; ---------------------------------------------------------------------------------
   808 ;; (1) _isFinishedTwelveHoursTimer                           0     0      0       0
   809 ;; ---------------------------------------------------------------------------------
   810 ;; (1) _startTwelveHourTimer                                 2     0      2      31
   811 ;;                                             21 BANK0      2     0      2
   812 ;; ---------------------------------------------------------------------------------
   813 ;; (1) _clearTwentyMinTimer                                  0     0      0       0
   814 ;; ---------------------------------------------------------------------------------
   815 ;; (1) _isFinishedTwentyMinTimer                             0     0      0       0
   816 ;; ---------------------------------------------------------------------------------
   817 ;; (1) _clrSampeTime                                         0     0      0       0
   818 ;; ---------------------------------------------------------------------------------
   819 ;; (1) _isPermitSampleTime                                   0     0      0       0
   820 ;; ---------------------------------------------------------------------------------
   821 ;; (2) _adc_start                                            0     0      0       0
   822 ;; ---------------------------------------------------------------------------------
   823 ;; (1) _startTwentyMinTimer                                  2     0      2      31
   824 ;;                                             21 BANK0      2     0      2
   825 ;; ---------------------------------------------------------------------------------
   826 ;; (2) _adc_test_init                                        3     2      1      62
   827 ;;                                             21 BANK0      3     2      1
   828 ;; ---------------------------------------------------------------------------------
   829 ;; (1) _timer1_interrupt_config                              0     0      0       0
   830 ;; ---------------------------------------------------------------------------------
   831 ;; (1) _timer1_config                                        0     0      0       0
   832 ;; ---------------------------------------------------------------------------------
   833 ;; (1) _clock_config                                         0     0      0       0
   834 ;; ---------------------------------------------------------------------------------
   835 ;; (1) _reset                                                0     0      0       0
   836 ;; ---------------------------------------------------------------------------------
   837 ;; (1) _selectAdChannel                                      0     0      0       0
   838 ;; ---------------------------------------------------------------------------------
   839 ;; (1) _pwm_start                                            2     1      1      62
   840 ;;                                             21 BANK0      2     1      1
   841 ;; ---------------------------------------------------------------------------------
   842 ;; (2) _initPB2_AsHighResistence                             0     0      0       0
   843 ;; ---------------------------------------------------------------------------------
   844 ;; (1) _setPB5                                               1     1      0      31
   845 ;;                                             21 BANK0      1     1      0
   846 ;; ---------------------------------------------------------------------------------
   847 ;; (2) _initPB5                                              1     1      0      31
   848 ;;                                             21 BANK0      1     1      0
   849 ;; ---------------------------------------------------------------------------------
   850 ;; (1) _setPB4                                               1     1      0      31
   851 ;;                                             21 BANK0      1     1      0
   852 ;; ---------------------------------------------------------------------------------
   853 ;; (2) _initPB4                                              1     1      0      31
   854 ;;                                             21 BANK0      1     1      0
   855 ;; ---------------------------------------------------------------------------------
   856 ;; (1) _setPB3                                               1     1      0      31
   857 ;;                                             21 BANK0      1     1      0
   858 ;; ---------------------------------------------------------------------------------
   859 ;; (2) _initPB3                                              1     1      0      31
   860 ;;                                             21 BANK0      1     1      0
   861 ;; ---------------------------------------------------------------------------------
   862 ;; Estimated maximum stack depth 2
   863 ;; ---------------------------------------------------------------------------------
   864 ;; (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
   865 ;; ---------------------------------------------------------------------------------
   866 ;; (3) _ISR                                                  4     4      0    1163
   867 ;;                                              9 COMMON     4     4      0
   868 ;;                i1_setAD_ConvertFlag
   869 ;;                            _adc_get
   870 ;;            _vPutSampleDataIntoTable
   871 ;; ---------------------------------------------------------------------------------
   872 ;; (4) _vPutSampleDataIntoTable                              9     6      3    1066
   873 ;;                                              6 COMMON     3     0      3
   874 ;;                                             15 BANK0      6     6      0
   875 ;;                             _Filter
   876 ;;                   _getWaitResetFlag
   877 ;;                       _setPWM_Width
   878 ;;                            _adc_get (ARG)
   879 ;; ---------------------------------------------------------------------------------
   880 ;; (4) i1_setAD_ConvertFlag                                  1     1      0      73
   881 ;;                                              0 COMMON     1     1      0
   882 ;; ---------------------------------------------------------------------------------
   883 ;; (4) _adc_get                                              4     2      2      24
   884 ;;                                              0 COMMON     4     2      2
   885 ;; ---------------------------------------------------------------------------------
   886 ;; (5) _Filter                                              21    19      2     620
   887 ;;                                              0 COMMON     6     4      2
   888 ;;                                              0 BANK0     15    15      0
   889 ;; ---------------------------------------------------------------------------------
   890 ;; (5) _setPWM_Width                                         1     1      0      33
   891 ;;                                              0 COMMON     1     1      0
   892 ;; ---------------------------------------------------------------------------------
   893 ;; (5) _getWaitResetFlag                                     0     0      0       0
   894 ;; ---------------------------------------------------------------------------------
   895 ;; Estimated maximum stack depth 5
   896 ;; ---------------------------------------------------------------------------------
   897 ;; Call Graph Graphs:
   898 ;; _main (ROOT)
   899 ;;   _initPin
   900 ;;     _initPB2_AsHighResistence
   901 ;;     _initPB3
   902 ;;     _initPB4
   903 ;;     _initPB5
   904 ;;   _setPinInitVaule
   905 ;;     _setPB3
   906 ;;     _setPB4
   907 ;;     _setPB5
   908 ;;   _selectAdChannel
   909 ;;   _clock_config
   910 ;;   _timer1_config
   911 ;;   _timer1_interrupt_config
   912 ;;   _adc_test_init
   913 ;;   _startTwentyMinTimer
   914 ;;   _adc_start
   915 ;;   _process_AD_Converter_Value
   916 ;;     _getAD_ConvertFlag
   917 ;;     _setAD_ConvertFlag
   918 ;;     _AD_Sample
   919 ;;     _adc_test_init
   920 ;;     _adc_start
   921 ;;   _isPermitSampleTime
   922 ;;   _clrSampeTime
   923 ;;   _isFinishedTwentyMinTimer
   924 ;;   _getAdOriginalCh13Value
   925 ;;     _FilterCh13
   926 ;;   _pwm_start
   927 ;;   _setPB3
   928 ;;   _setPB4
   929 ;;   _setPB5
   930 ;;   _clearTwentyMinTimer
   931 ;;   _startTwelveHourTimer
   932 ;;   _isFinishedTwelveHoursTimer
   933 ;;   _clearTwelveHoursTimer
   934 ;;   _startThreeHoursTimer
   935 ;;   _isFinishedThreeHoursTimer
   936 ;;   _clearThreeHoursTimer
   937 ;;   _startOneHoursTimer
   938 ;;   _isFinishedOneHoursTimer
   939 ;;   _reset
   940 ;;   _setWaitResetFlag
   941 ;;
   942 ;; _ISR (ROOT)
   943 ;;   i1_setAD_ConvertFlag
   944 ;;   _adc_get
   945 ;;   _vPutSampleDataIntoTable
   946 ;;     _Filter
   947 ;;     _getWaitResetFlag
   948 ;;     _setPWM_Width
   949 ;;     _adc_get (ARG)
   950 ;;
   951 ;; Address spaces:
   952 ;;Name               Size   Autos  Total    Cost      Usage
   953 ;;BANK3               60      0       0      10        0.0%
   954 ;;BITBANK3            60      0       0       9        0.0%
   955 ;;SFR3                 0      0       0       4        0.0%
   956 ;;BITSFR3              0      0       0       4        0.0%
   957 ;;BANK2               60      0       0      12        0.0%
   958 ;;BITBANK2            60      0       0      11        0.0%
   959 ;;SFR2                 0      0       0       5        0.0%
   960 ;;BITSFR2              0      0       0       5        0.0%
   961 ;;SFR1                 0      0       0       2        0.0%
   962 ;;BITSFR1              0      0       0       2        0.0%
   963 ;;BANK1               50     14      32       8       62.5%
   964 ;;BITBANK1            50      0       0       7        0.0%
   965 ;;CODE                 0      0       0       0        0.0%
   966 ;;DATA                 0      0      83       6        0.0%
   967 ;;ABS                  0      0      7B       3        0.0%
   968 ;;NULL                 0      0       0       0        0.0%
   969 ;;STACK                0      0       8       2        0.0%
   970 ;;BANK0               50     1D      3B       5       73.8%
   971 ;;BITBANK0            50      0       0       4        0.0%
   972 ;;SFR0                 0      0       0       1        0.0%
   973 ;;BITSFR0              0      0       0       1        0.0%
   974 ;;COMMON               E      D       E       1      100.0%
   975 ;;BITCOMMON            E      0       0       0        0.0%
   976                           
   977                           
   978 ;; *************** function _main *****************
   979 ;; Defined at:
   980 ;;		line 498 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;  ucChValue       2   16[BANK1 ] unsigned int 
   985 ;;  uiCh13Value     2   18[BANK1 ] unsigned int 
   986 ;; Return value:  Size  Location     Type
   987 ;;                  2  727[COMMON] int 
   988 ;; Registers used:
   989 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   990 ;; Tracked objects:
   991 ;;		On entry : 17F/0
   992 ;;		On exit  : 60/0
   993 ;;		Unchanged: 0/0
   994 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   995 ;;      Params:         0       0       0       0       0
   996 ;;      Locals:         0       0       4       0       0
   997 ;;      Temps:          0       0       1       0       0
   998 ;;      Totals:         0       0       5       0       0
   999 ;;Total ram usage:        5 bytes
  1000 ;; Hardware stack levels required when called:    5
  1001 ;; This function calls:
  1002 ;;		_initPin
  1003 ;;		_setPinInitVaule
  1004 ;;		_selectAdChannel
  1005 ;;		_clock_config
  1006 ;;		_timer1_config
  1007 ;;		_timer1_interrupt_config
  1008 ;;		_adc_test_init
  1009 ;;		_startTwentyMinTimer
  1010 ;;		_adc_start
  1011 ;;		_process_AD_Converter_Value
  1012 ;;		_isPermitSampleTime
  1013 ;;		_clrSampeTime
  1014 ;;		_isFinishedTwentyMinTimer
  1015 ;;		_getAdOriginalCh13Value
  1016 ;;		_pwm_start
  1017 ;;		_setPB3
  1018 ;;		_setPB4
  1019 ;;		_setPB5
  1020 ;;		_clearTwentyMinTimer
  1021 ;;		_startTwelveHourTimer
  1022 ;;		_isFinishedTwelveHoursTimer
  1023 ;;		_clearTwelveHoursTimer
  1024 ;;		_startThreeHoursTimer
  1025 ;;		_isFinishedThreeHoursTimer
  1026 ;;		_clearThreeHoursTimer
  1027 ;;		_startOneHoursTimer
  1028 ;;		_isFinishedOneHoursTimer
  1029 ;;		_reset
  1030 ;;		_setWaitResetFlag
  1031 ;; This function is called by:
  1032 ;;		Startup code after reset
  1033 ;; This function uses a non-reentrant model
  1034 ;;
  1035  0217                     _main:	
  1036                           
  1037                           ;main.c: 499: enum systemStep {
  1038                           ;main.c: 500: INIT_STEP = 0,
  1039                           ;main.c: 501: START_UP_PWM_STEP,
  1040                           ;main.c: 502: CHECK_10_HOUR_TIMER_STEP,
  1041                           ;main.c: 503: STARTUP_3_HOUR_TIMER_STEP,
  1042                           ;main.c: 504: CHECK_3_HOUR_TIMER_STEP,
  1043                           ;main.c: 505: STARTUP_1_HOUR_TIMER_STEP,
  1044                           ;main.c: 506: CHECK_1_HOUR_TIMER_STEP,
  1045                           ;main.c: 507: READY_FOR_RESET_STEP = 99,
  1046                           ;main.c: 508: DELAY_ONE_SECOND_FOR_PWM,
  1047                           ;main.c: 509: MEET_RESET_CONDITION_STEP,
  1048                           ;main.c: 510: RESET_STEP,
  1049                           ;main.c: 511: };
  1050                           ;main.c: 513: static enum systemStep ucStep = INIT_STEP;
  1051                           
  1052                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1053  0217  118A  24D4  118A   	fcall	_initPin
  1054                           
  1055                           ;main.c: 527: setPinInitVaule();
  1056  021A  118A  2505  118A   	fcall	_setPinInitVaule
  1057                           
  1058                           ;main.c: 528: selectAdChannel();
  1059  021D  118A  25DB  118A   	fcall	_selectAdChannel
  1060                           
  1061                           ;main.c: 530: clock_config();
  1062  0220  118A  25C2  118A   	fcall	_clock_config
  1063                           
  1064                           ;main.c: 531: timer1_config();
  1065  0223  118A  25B0  118A   	fcall	_timer1_config
  1066                           
  1067                           ;main.c: 532: timer1_interrupt_config();
  1068  0226  118A  25E2  118A   	fcall	_timer1_interrupt_config
  1069                           
  1070                           ;main.c: 534: adc_test_init(12,3);
  1071  0229  3003               	movlw	3
  1072  022A  1283               	bcf	3,5	;RP0=0, select bank0
  1073  022B  00B5               	movwf	?_adc_test_init
  1074  022C  300C               	movlw	12
  1075  022D  118A  24B5  118A   	fcall	_adc_test_init
  1076                           
  1077                           ;main.c: 540: startTwentyMinTimer( 60 );
  1078  0230  303C               	movlw	60
  1079  0231  1283               	bcf	3,5	;RP0=0, select bank0
  1080  0232  00B5               	movwf	?_startTwentyMinTimer
  1081  0233  01B6               	clrf	?_startTwentyMinTimer+1
  1082  0234  118A  2579  118A   	fcall	_startTwentyMinTimer
  1083                           
  1084                           ;main.c: 541: _delay(1000);
  1085  0237  30F9               	movlw	249
  1086  0238  1683               	bsf	3,5	;RP0=1, select bank1
  1087  0239  00CD               	movwf	??_main^(0+128)
  1088  023A                     u2277:	
  1089  023A  0064               	clrwdt
  1090  023B  0BCD               	decfsz	??_main^(0+128),f
  1091  023C  2A3A               	goto	u2277
  1092  023D  2A3E               	nop2	;nop
  1093  023E  0064               	clrwdt
  1094                           
  1095                           ;main.c: 542: adc_start();
  1096  023F  118A  24D0  118A   	fcall	_adc_start
  1097  0242                     l4270:	
  1098  0242  0064               	clrwdt	;#
  1099                           
  1100                           ;main.c: 555: process_AD_Converter_Value();
  1101  0243  118A  2484  118A   	fcall	_process_AD_Converter_Value
  1102                           
  1103                           ;main.c: 557: if( isPermitSampleTime() )
  1104  0246  118A  25CA  118A   	fcall	_isPermitSampleTime
  1105  0249  3A00               	xorlw	0
  1106  024A  1903               	skipnz
  1107  024B  2A42               	goto	l4270
  1108                           
  1109                           ;main.c: 558: {
  1110                           ;main.c: 561: clrSampeTime();
  1111  024C  118A  25E5  118A   	fcall	_clrSampeTime
  1112                           
  1113                           ;main.c: 570: switch(ucStep)
  1114  024F  2BA7               	goto	l4430
  1115  0250                     l4278:	
  1116                           
  1117                           ;main.c: 574: {
  1118                           ;main.c: 579: static unsigned char ucTimerP3s = 0;
  1119                           ;main.c: 581: if( isFinishedTwentyMinTimer() )
  1120  0250  118A  25A6  118A   	fcall	_isFinishedTwentyMinTimer
  1121  0253  3A00               	xorlw	0
  1122  0254  1903               	skipnz
  1123  0255  2A5A               	goto	l4284
  1124                           
  1125                           ;main.c: 582: {
  1126                           ;main.c: 583: ucStep = READY_FOR_RESET_STEP;
  1127  0256  3063               	movlw	99
  1128  0257  00D4               	movwf	main@ucStep
  1129                           
  1130                           ;main.c: 584: ucTimerP3s = 0;
  1131  0258  01D5               	clrf	main@ucTimerP3s
  1132                           
  1133                           ;main.c: 585: }
  1134  0259  2A42               	goto	l4270
  1135  025A                     l4284:	
  1136                           
  1137                           ;main.c: 586: else
  1138                           ;main.c: 587: {
  1139                           ;main.c: 588: if( getAdOriginalCh13Value() > 90 )
  1140  025A  118A  23CC  118A   	fcall	_getAdOriginalCh13Value
  1141  025D  3000               	movlw	0
  1142  025E  023C               	subwf	?_getAdOriginalCh13Value+1,w
  1143  025F  305B               	movlw	91
  1144  0260  1903               	skipnz
  1145  0261  023B               	subwf	?_getAdOriginalCh13Value,w
  1146  0262  1C03               	skipc
  1147  0263  2A66               	goto	l4288
  1148                           
  1149                           ;main.c: 589: {
  1150                           ;main.c: 590: ucTimerP3s++;
  1151  0264  0AD5               	incf	main@ucTimerP3s,f
  1152                           
  1153                           ;main.c: 591: }
  1154  0265  2A67               	goto	l4290
  1155  0266                     l4288:	
  1156                           
  1157                           ;main.c: 592: else
  1158                           ;main.c: 593: ucTimerP3s = 0;
  1159  0266  01D5               	clrf	main@ucTimerP3s
  1160  0267                     l4290:	
  1161                           
  1162                           ;main.c: 595: if( ucTimerP3s >= 3)
  1163  0267  3003               	movlw	3
  1164  0268  0255               	subwf	main@ucTimerP3s,w
  1165  0269  1C03               	skipc
  1166  026A  2A42               	goto	l4270
  1167                           
  1168                           ;main.c: 596: {
  1169                           ;main.c: 597: ucTimerP3s = 0;
  1170  026B  01D5               	clrf	main@ucTimerP3s
  1171                           
  1172                           ;main.c: 598: ucStep = START_UP_PWM_STEP;
  1173  026C  01D4               	clrf	main@ucStep
  1174  026D  0AD4               	incf	main@ucStep,f
  1175  026E                     l737:	
  1176                           
  1177                           ;main.c: 599: }
  1178                           ;main.c: 601: }
  1179                           ;main.c: 605: break;
  1180  026E  2A42               	goto	l4270
  1181  026F                     l4296:	
  1182                           
  1183                           ;main.c: 609: {
  1184                           ;main.c: 614: pwm_start(75,249);
  1185  026F  30F9               	movlw	249
  1186  0270  00B5               	movwf	?_pwm_start
  1187  0271  304B               	movlw	75
  1188  0272  118A  2526  118A   	fcall	_pwm_start
  1189                           
  1190                           ;main.c: 616: setPB3(0);
  1191  0275  3000               	movlw	0
  1192  0276  118A  250D  118A   	fcall	_setPB3
  1193                           
  1194                           ;main.c: 617: setPB4(1);
  1195  0279  3001               	movlw	1
  1196  027A  118A  2516  118A   	fcall	_setPB4
  1197                           
  1198                           ;main.c: 618: setPB5(0);
  1199  027D  3000               	movlw	0
  1200  027E  118A  251E  118A   	fcall	_setPB5
  1201                           
  1202                           ;main.c: 619: clearTwentyMinTimer();
  1203  0281  118A  25D7  118A   	fcall	_clearTwentyMinTimer
  1204                           
  1205                           ;main.c: 620: startTwelveHourTimer( 240);
  1206  0284  30F0               	movlw	240
  1207  0285  00B5               	movwf	?_startTwelveHourTimer
  1208  0286  01B6               	clrf	?_startTwelveHourTimer+1
  1209  0287  118A  256B  118A   	fcall	_startTwelveHourTimer
  1210                           
  1211                           ;main.c: 621: ucStep = CHECK_10_HOUR_TIMER_STEP;
  1212  028A  3002               	movlw	2
  1213  028B  2BA3               	goto	L8
  1214  028C                     l4304:	
  1215                           ;main.c: 622: break;
  1216                           
  1217                           
  1218                           ;main.c: 626: {
  1219                           ;main.c: 631: static unsigned char ucTimerP5s = 0;
  1220                           ;main.c: 633: if( isFinishedTwelveHoursTimer () )
  1221  028C  118A  259C  118A   	fcall	_isFinishedTwelveHoursTimer
  1222  028F  3A00               	xorlw	0
  1223  0290  1903               	skipnz
  1224  0291  2A94               	goto	l4308
  1225  0292                     l4306:	
  1226                           
  1227                           ;main.c: 634: ucStep = READY_FOR_RESET_STEP;
  1228  0292  3063               	movlw	99
  1229  0293  2BA3               	goto	L8
  1230  0294                     l4308:	
  1231                           
  1232                           ;main.c: 635: else
  1233                           ;main.c: 636: {
  1234                           ;main.c: 637: if( getAdOriginalCh13Value() < 200 )
  1235  0294  118A  23CC  118A   	fcall	_getAdOriginalCh13Value
  1236  0297  3000               	movlw	0
  1237  0298  023C               	subwf	?_getAdOriginalCh13Value+1,w
  1238  0299  30C8               	movlw	200
  1239  029A  1903               	skipnz
  1240  029B  023B               	subwf	?_getAdOriginalCh13Value,w
  1241  029C  1803               	skipnc
  1242  029D  2AA0               	goto	l4312
  1243                           
  1244                           ;main.c: 638: ucTimerP5s++;
  1245  029E  0AD6               	incf	main@ucTimerP5s,f
  1246  029F  2AA1               	goto	l4314
  1247  02A0                     l4312:	
  1248                           
  1249                           ;main.c: 639: else
  1250                           ;main.c: 640: ucTimerP5s = 0;
  1251  02A0  01D6               	clrf	main@ucTimerP5s
  1252  02A1                     l4314:	
  1253                           
  1254                           ;main.c: 642: if( ucTimerP5s >= 1)
  1255  02A1  0856               	movf	main@ucTimerP5s,w
  1256  02A2  1903               	btfsc	3,2
  1257  02A3  2A42               	goto	l4270
  1258  02A4  3003               	movlw	3
  1259                           
  1260                           ;main.c: 643: {
  1261                           ;main.c: 644: ucTimerP5s = 0;
  1262  02A5  01D6               	clrf	main@ucTimerP5s
  1263                           
  1264                           ;main.c: 645: ucStep = STARTUP_3_HOUR_TIMER_STEP;
  1265  02A6  2BA3               	goto	L8
  1266  02A7                     l4320:	
  1267                           
  1268                           ;main.c: 653: {
  1269                           ;main.c: 654: clearTwelveHoursTimer();
  1270  02A7  118A  25D3  118A   	fcall	_clearTwelveHoursTimer
  1271                           
  1272                           ;main.c: 655: startThreeHoursTimer(180);
  1273  02AA  30B4               	movlw	180
  1274  02AB  00B5               	movwf	?_startThreeHoursTimer
  1275  02AC  01B6               	clrf	?_startThreeHoursTimer+1
  1276  02AD  118A  255D  118A   	fcall	_startThreeHoursTimer
  1277                           
  1278                           ;main.c: 656: ucStep = CHECK_3_HOUR_TIMER_STEP;
  1279  02B0  3004               	movlw	4
  1280  02B1  2BA3               	goto	L8
  1281  02B2                     l4324:	
  1282                           ;main.c: 657: break;
  1283                           
  1284                           
  1285                           ;main.c: 661: {
  1286                           ;main.c: 662: static unsigned char ucTimerP5s = 0;
  1287                           ;main.c: 664: if( isFinishedThreeHoursTimer() )
  1288  02B2  118A  2592  118A   	fcall	_isFinishedThreeHoursTimer
  1289  02B5  3A00               	xorlw	0
  1290  02B6  1D03               	btfss	3,2
  1291  02B7  2A92               	goto	l4306
  1292                           
  1293                           ;main.c: 666: else
  1294                           ;main.c: 667: {
  1295                           ;main.c: 668: if( getAdOriginalCh13Value() < 75 )
  1296  02B8  118A  23CC  118A   	fcall	_getAdOriginalCh13Value
  1297  02BB  3000               	movlw	0
  1298  02BC  023C               	subwf	?_getAdOriginalCh13Value+1,w
  1299  02BD  304B               	movlw	75
  1300  02BE  1903               	skipnz
  1301  02BF  023B               	subwf	?_getAdOriginalCh13Value,w
  1302  02C0  1803               	skipnc
  1303  02C1  2AC4               	goto	l4332
  1304                           
  1305                           ;main.c: 669: ucTimerP5s++;
  1306  02C2  0AD2               	incf	main@cTimerP5s_781,f
  1307  02C3  2AC5               	goto	l4334
  1308  02C4                     l4332:	
  1309                           
  1310                           ;main.c: 670: else
  1311                           ;main.c: 671: ucTimerP5s = 0;
  1312  02C4  01D2               	clrf	main@cTimerP5s_781
  1313  02C5                     l4334:	
  1314                           
  1315                           ;main.c: 673: if( ucTimerP5s >= 1)
  1316  02C5  0852               	movf	main@cTimerP5s_781,w
  1317  02C6  1903               	btfsc	3,2
  1318  02C7  2A42               	goto	l4270
  1319  02C8  3005               	movlw	5
  1320                           
  1321                           ;main.c: 674: {
  1322                           ;main.c: 675: ucTimerP5s = 0;
  1323  02C9  01D2               	clrf	main@cTimerP5s_781
  1324                           
  1325                           ;main.c: 676: ucStep = STARTUP_1_HOUR_TIMER_STEP;
  1326  02CA  2BA3               	goto	L8
  1327  02CB                     l4340:	
  1328                           
  1329                           ;main.c: 683: {
  1330                           ;main.c: 684: clearThreeHoursTimer();
  1331  02CB  118A  25CF  118A   	fcall	_clearThreeHoursTimer
  1332                           
  1333                           ;main.c: 685: startOneHoursTimer( 120 );
  1334  02CE  3078               	movlw	120
  1335  02CF  00B5               	movwf	?_startOneHoursTimer
  1336  02D0  01B6               	clrf	?_startOneHoursTimer+1
  1337  02D1  118A  254F  118A   	fcall	_startOneHoursTimer
  1338                           
  1339                           ;main.c: 686: setPB3(1);
  1340  02D4  3001               	movlw	1
  1341  02D5  118A  250D  118A   	fcall	_setPB3
  1342                           
  1343                           ;main.c: 687: setPB4(0);
  1344  02D8  3000               	movlw	0
  1345  02D9  118A  2516  118A   	fcall	_setPB4
  1346                           
  1347                           ;main.c: 688: setPB5(1);
  1348  02DC  3001               	movlw	1
  1349  02DD  118A  251E  118A   	fcall	_setPB5
  1350                           
  1351                           ;main.c: 689: ucStep = CHECK_1_HOUR_TIMER_STEP;
  1352  02E0  3006               	movlw	6
  1353  02E1  2BA3               	goto	L8
  1354  02E2                     l4352:	
  1355                           ;main.c: 690: break;
  1356                           
  1357                           
  1358                           ;main.c: 694: {
  1359                           ;main.c: 699: static unsigned int uiTimerOneP5s = 0;
  1360                           ;main.c: 700: static unsigned int uiTimerTwoP5s = 0;
  1361                           ;main.c: 701: static unsigned int uiTimerThreeP5s = 0;
  1362                           ;main.c: 703: unsigned int uiCh13Value = getAdOriginalCh13Value();
  1363  02E2  118A  23CC  118A   	fcall	_getAdOriginalCh13Value
  1364  02E5  083C               	movf	?_getAdOriginalCh13Value+1,w
  1365  02E6  1683               	bsf	3,5	;RP0=1, select bank1
  1366  02E7  00D1               	movwf	(main@uiCh13Value+1)^(0+128)
  1367  02E8  1283               	bcf	3,5	;RP0=0, select bank0
  1368  02E9  083B               	movf	?_getAdOriginalCh13Value,w
  1369  02EA  1683               	bsf	3,5	;RP0=1, select bank1
  1370  02EB  00D0               	movwf	main@uiCh13Value^(0+128)
  1371                           
  1372                           ;main.c: 706: if( isFinishedOneHoursTimer() )
  1373  02EC  118A  2587  118A   	fcall	_isFinishedOneHoursTimer
  1374  02EF  3A00               	xorlw	0
  1375  02F0  1D03               	btfss	3,2
  1376  02F1  2A92               	goto	l4306
  1377                           
  1378                           ;main.c: 708: else
  1379                           ;main.c: 709: {
  1380                           ;main.c: 710: if( uiCh13Value > 85 )
  1381  02F2  3000               	movlw	0
  1382  02F3  1683               	bsf	3,5	;RP0=1, select bank1
  1383  02F4  0251               	subwf	(main@uiCh13Value+1)^(0+128),w
  1384  02F5  3056               	movlw	86
  1385  02F6  1903               	skipnz
  1386  02F7  0250               	subwf	main@uiCh13Value^(0+128),w
  1387  02F8  1C03               	skipc
  1388  02F9  2B09               	goto	l4368
  1389                           
  1390                           ;main.c: 711: {
  1391                           ;main.c: 712: if( uiTimerOneP5s <= 1 )
  1392  02FA  3000               	movlw	0
  1393  02FB  0225               	subwf	(main@uiTimerOneP5s+1)^(0+128),w
  1394  02FC  3002               	movlw	2
  1395  02FD  1903               	skipnz
  1396  02FE  0224               	subwf	main@uiTimerOneP5s^(0+128),w
  1397  02FF  1803               	skipnc
  1398  0300  2B04               	goto	l4364
  1399                           
  1400                           ;main.c: 713: uiTimerOneP5s++;
  1401  0301  0AA4               	incf	main@uiTimerOneP5s^(0+128),f
  1402  0302  1903               	skipnz
  1403  0303  0AA5               	incf	(main@uiTimerOneP5s+1)^(0+128),f
  1404  0304                     l4364:	
  1405                           
  1406                           ;main.c: 714: uiTimerTwoP5s = 0;
  1407  0304  01A8               	clrf	main@uiTimerTwoP5s^(0+128)
  1408  0305  01A9               	clrf	(main@uiTimerTwoP5s+1)^(0+128)
  1409                           
  1410                           ;main.c: 715: uiTimerThreeP5s = 0;
  1411  0306  01A6               	clrf	main@uiTimerThreeP5s^(0+128)
  1412  0307  01A7               	clrf	(main@uiTimerThreeP5s+1)^(0+128)
  1413                           
  1414                           ;main.c: 716: }
  1415  0308  2B0B               	goto	l4370
  1416  0309                     l4368:	
  1417                           
  1418                           ;main.c: 717: else
  1419                           ;main.c: 718: {
  1420                           ;main.c: 719: uiTimerOneP5s = 0;
  1421  0309  01A4               	clrf	main@uiTimerOneP5s^(0+128)
  1422  030A  01A5               	clrf	(main@uiTimerOneP5s+1)^(0+128)
  1423  030B                     l4370:	
  1424                           
  1425                           ;main.c: 720: }
  1426                           ;main.c: 723: if(uiTimerOneP5s > 1)
  1427  030B  3000               	movlw	0
  1428  030C  0225               	subwf	(main@uiTimerOneP5s+1)^(0+128),w
  1429  030D  3002               	movlw	2
  1430  030E  1903               	skipnz
  1431  030F  0224               	subwf	main@uiTimerOneP5s^(0+128),w
  1432                           
  1433                           ;main.c: 724: {
  1434                           ;main.c: 725: setPB3(0);
  1435  0310  3000               	movlw	0
  1436  0311  1C03               	skipc
  1437  0312  2B24               	goto	L9
  1438  0313  118A  250D  118A   	fcall	_setPB3
  1439                           
  1440                           ;main.c: 726: setPB4(1);
  1441  0316  3001               	movlw	1
  1442  0317  118A  2516  118A   	fcall	_setPB4
  1443                           
  1444                           ;main.c: 727: setPB5(0);
  1445  031A  3000               	movlw	0
  1446  031B  118A  251E  118A   	fcall	_setPB5
  1447                           
  1448                           ;main.c: 729: uiTimerOneP5s = 0;
  1449  031E  1683               	bsf	3,5	;RP0=1, select bank1
  1450  031F  01A4               	clrf	main@uiTimerOneP5s^(0+128)
  1451  0320  01A5               	clrf	(main@uiTimerOneP5s+1)^(0+128)
  1452                           
  1453                           ;main.c: 730: uiTimerTwoP5s = 0;
  1454  0321  01A8               	clrf	main@uiTimerTwoP5s^(0+128)
  1455  0322  01A9               	clrf	(main@uiTimerTwoP5s+1)^(0+128)
  1456                           
  1457                           ;main.c: 731: }
  1458  0323  2A42               	goto	l4270
  1459  0324                     L9:	
  1460                           ;main.c: 732: else
  1461                           ;main.c: 733: {
  1462                           ;main.c: 734: if( uiCh13Value < 75 )
  1463                           
  1464  0324  0251               	subwf	(main@uiCh13Value+1)^(0+128),w
  1465  0325  304B               	movlw	75
  1466  0326  1903               	skipnz
  1467  0327  0250               	subwf	main@uiCh13Value^(0+128),w
  1468  0328  1803               	skipnc
  1469  0329  2B35               	goto	l4384
  1470                           
  1471                           ;main.c: 735: {
  1472                           ;main.c: 736: if( uiTimerTwoP5s <= 1)
  1473  032A  3000               	movlw	0
  1474  032B  0229               	subwf	(main@uiTimerTwoP5s+1)^(0+128),w
  1475  032C  3002               	movlw	2
  1476  032D  1903               	skipnz
  1477  032E  0228               	subwf	main@uiTimerTwoP5s^(0+128),w
  1478  032F  1803               	skipnc
  1479  0330  2B39               	goto	l4386
  1480                           
  1481                           ;main.c: 737: uiTimerTwoP5s++;
  1482  0331  0AA8               	incf	main@uiTimerTwoP5s^(0+128),f
  1483  0332  1903               	skipnz
  1484  0333  0AA9               	incf	(main@uiTimerTwoP5s+1)^(0+128),f
  1485  0334  2B39               	goto	l4386
  1486  0335                     l4384:	
  1487                           
  1488                           ;main.c: 739: else
  1489                           ;main.c: 740: {
  1490                           ;main.c: 741: uiTimerTwoP5s = 0;
  1491  0335  01A8               	clrf	main@uiTimerTwoP5s^(0+128)
  1492  0336  01A9               	clrf	(main@uiTimerTwoP5s+1)^(0+128)
  1493                           
  1494                           ;main.c: 742: uiTimerThreeP5s = 0;
  1495  0337  01A6               	clrf	main@uiTimerThreeP5s^(0+128)
  1496  0338  01A7               	clrf	(main@uiTimerThreeP5s+1)^(0+128)
  1497  0339                     l4386:	
  1498                           
  1499                           ;main.c: 743: }
  1500                           ;main.c: 745: if(uiTimerTwoP5s > 1)
  1501  0339  3000               	movlw	0
  1502  033A  0229               	subwf	(main@uiTimerTwoP5s+1)^(0+128),w
  1503  033B  3002               	movlw	2
  1504  033C  1903               	skipnz
  1505  033D  0228               	subwf	main@uiTimerTwoP5s^(0+128),w
  1506  033E  1C03               	skipc
  1507  033F  2A42               	goto	l4270
  1508                           
  1509                           ;main.c: 746: {
  1510                           ;main.c: 747: setPB3(1);
  1511  0340  3001               	movlw	1
  1512  0341  118A  250D  118A   	fcall	_setPB3
  1513                           
  1514                           ;main.c: 748: setPB4(0);
  1515  0344  3000               	movlw	0
  1516  0345  118A  2516  118A   	fcall	_setPB4
  1517                           
  1518                           ;main.c: 749: setPB5(1);
  1519  0348  3001               	movlw	1
  1520  0349  118A  251E  118A   	fcall	_setPB5
  1521                           
  1522                           ;main.c: 751: if(uiCh13Value < 25)
  1523  034C  3000               	movlw	0
  1524  034D  1683               	bsf	3,5	;RP0=1, select bank1
  1525  034E  0251               	subwf	(main@uiCh13Value+1)^(0+128),w
  1526  034F  3019               	movlw	25
  1527  0350  1903               	skipnz
  1528  0351  0250               	subwf	main@uiCh13Value^(0+128),w
  1529  0352  1803               	skipnc
  1530  0353  2B58               	goto	l4394
  1531                           
  1532                           ;main.c: 752: uiTimerThreeP5s++;
  1533  0354  0AA6               	incf	main@uiTimerThreeP5s^(0+128),f
  1534  0355  1903               	skipnz
  1535  0356  0AA7               	incf	(main@uiTimerThreeP5s+1)^(0+128),f
  1536  0357  2B5A               	goto	l4396
  1537  0358                     l4394:	
  1538                           
  1539                           ;main.c: 753: else
  1540                           ;main.c: 754: uiTimerThreeP5s = 0;
  1541  0358  01A6               	clrf	main@uiTimerThreeP5s^(0+128)
  1542  0359  01A7               	clrf	(main@uiTimerThreeP5s+1)^(0+128)
  1543  035A                     l4396:	
  1544                           
  1545                           ;main.c: 756: if(uiTimerThreeP5s > 5)
  1546  035A  3000               	movlw	0
  1547  035B  0227               	subwf	(main@uiTimerThreeP5s+1)^(0+128),w
  1548  035C  3006               	movlw	6
  1549  035D  1903               	skipnz
  1550  035E  0226               	subwf	main@uiTimerThreeP5s^(0+128),w
  1551  035F  1C03               	skipc
  1552  0360  2A42               	goto	l4270
  1553  0361                     l4398:	
  1554                           
  1555                           ;main.c: 757: reset();
  1556  0361  118A  25E7  118A   	fcall	_reset
  1557  0364  2A42               	goto	l4270
  1558  0365                     l4400:	
  1559                           
  1560                           ;main.c: 766: {
  1561                           ;main.c: 767: setPB3(0);
  1562  0365  3000               	movlw	0
  1563  0366  118A  250D  118A   	fcall	_setPB3
  1564                           
  1565                           ;main.c: 768: setPB4(0);
  1566  0369  3000               	movlw	0
  1567  036A  118A  2516  118A   	fcall	_setPB4
  1568                           
  1569                           ;main.c: 769: setPB5(1);
  1570  036D  3001               	movlw	1
  1571  036E  118A  251E  118A   	fcall	_setPB5
  1572                           
  1573                           ;main.c: 772: setWaitResetFlag(1);
  1574  0371  3001               	movlw	1
  1575  0372  118A  25DF  118A   	fcall	_setWaitResetFlag
  1576                           
  1577                           ;main.c: 778: ucStep = DELAY_ONE_SECOND_FOR_PWM;
  1578  0375  3064               	movlw	100
  1579  0376  2BA3               	goto	L8
  1580  0377                     l4404:	
  1581                           ;main.c: 779: break;
  1582                           
  1583                           
  1584                           ;main.c: 783: {
  1585                           ;main.c: 784: static unsigned ucDelay1s = 0;
  1586                           ;main.c: 785: if(ucDelay1s <= 5)
  1587  0377  3000               	movlw	0
  1588  0378  1683               	bsf	3,5	;RP0=1, select bank1
  1589  0379  0223               	subwf	(main@ucDelay1s+1)^(0+128),w
  1590  037A  3006               	movlw	6
  1591  037B  1903               	skipnz
  1592  037C  0222               	subwf	main@ucDelay1s^(0+128),w
  1593  037D  1803               	skipnc
  1594  037E  2B83               	goto	l4408
  1595                           
  1596                           ;main.c: 786: ucDelay1s++;
  1597  037F  0AA2               	incf	main@ucDelay1s^(0+128),f
  1598  0380  1903               	skipnz
  1599  0381  0AA3               	incf	(main@ucDelay1s+1)^(0+128),f
  1600  0382  2A42               	goto	l4270
  1601  0383                     l4408:	
  1602  0383  3065               	movlw	101
  1603                           
  1604                           ;main.c: 787: else
  1605                           ;main.c: 788: {
  1606                           ;main.c: 789: ucDelay1s = 0;
  1607  0384  01A2               	clrf	main@ucDelay1s^(0+128)
  1608  0385  01A3               	clrf	(main@ucDelay1s+1)^(0+128)
  1609                           
  1610                           ;main.c: 790: ucStep = MEET_RESET_CONDITION_STEP;
  1611  0386  1283               	bcf	3,5	;RP0=0, select bank0
  1612  0387  2BA3               	goto	L8
  1613  0388                     l4412:	
  1614                           
  1615                           ;main.c: 800: {
  1616                           ;main.c: 801: static unsigned char ucTimerP5s = 0;
  1617                           ;main.c: 802: unsigned int ucChValue = getAdOriginalCh13Value();
  1618  0388  118A  23CC  118A   	fcall	_getAdOriginalCh13Value
  1619  038B  083C               	movf	?_getAdOriginalCh13Value+1,w
  1620  038C  1683               	bsf	3,5	;RP0=1, select bank1
  1621  038D  00CF               	movwf	(main@ucChValue+1)^(0+128)
  1622  038E  1283               	bcf	3,5	;RP0=0, select bank0
  1623  038F  083B               	movf	?_getAdOriginalCh13Value,w
  1624  0390  1683               	bsf	3,5	;RP0=1, select bank1
  1625  0391  00CE               	movwf	main@ucChValue^(0+128)
  1626                           
  1627                           ;main.c: 804: if( ucChValue > 50 )
  1628  0392  3000               	movlw	0
  1629  0393  024F               	subwf	(main@ucChValue+1)^(0+128),w
  1630  0394  3033               	movlw	51
  1631  0395  1903               	skipnz
  1632  0396  024E               	subwf	main@ucChValue^(0+128),w
  1633  0397  1C03               	skipc
  1634  0398  2B9C               	goto	l4418
  1635                           
  1636                           ;main.c: 805: ucTimerP5s++;
  1637  0399  1283               	bcf	3,5	;RP0=0, select bank0
  1638  039A  0AD3               	incf	main@cTimerP5s_787,f
  1639  039B  2B9E               	goto	l4420
  1640  039C                     l4418:	
  1641                           
  1642                           ;main.c: 806: else
  1643                           ;main.c: 807: ucTimerP5s = 0;
  1644  039C  1283               	bcf	3,5	;RP0=0, select bank0
  1645  039D  01D3               	clrf	main@cTimerP5s_787
  1646  039E                     l4420:	
  1647                           
  1648                           ;main.c: 809: if(ucTimerP5s >= 5)
  1649  039E  3005               	movlw	5
  1650  039F  0253               	subwf	main@cTimerP5s_787,w
  1651  03A0  1C03               	skipc
  1652  03A1  2A42               	goto	l4270
  1653                           
  1654                           ;main.c: 810: ucStep = RESET_STEP;
  1655  03A2  3066               	movlw	102
  1656  03A3                     L8:	
  1657  03A3  00D4               	movwf	main@ucStep
  1658  03A4  2A42               	goto	l4270
  1659  03A5                     l4424:	
  1660                           
  1661                           ;main.c: 815: {
  1662                           ;main.c: 816: ucStep = INIT_STEP;
  1663  03A5  01D4               	clrf	main@ucStep
  1664  03A6  2B61               	goto	l4398
  1665  03A7                     l4430:	
  1666  03A7  0854               	movf	main@ucStep,w
  1667                           
  1668                           ; Switch size 1, requested type "space"
  1669                           ; Number of cases is 11, Range of values is 0 to 102
  1670                           ; switch strategies available:
  1671                           ; Name         Instructions Cycles
  1672                           ; simple_byte           34    18 (average)
  1673                           ; direct_byte          213     7 (fixed)
  1674                           ; jumptable            260     6 (fixed)
  1675                           ; rangetable           107     6 (fixed)
  1676                           ; spacedrange          212     9 (fixed)
  1677                           ; locatedrange         103     3 (fixed)
  1678                           ;	Chosen strategy is simple_byte
  1679  03A8  3A00               	xorlw	0	; case 0
  1680  03A9  1903               	skipnz
  1681  03AA  2A50               	goto	l4278
  1682  03AB  3A01               	xorlw	1	; case 1
  1683  03AC  1903               	skipnz
  1684  03AD  2A6F               	goto	l4296
  1685  03AE  3A03               	xorlw	3	; case 2
  1686  03AF  1903               	skipnz
  1687  03B0  2A8C               	goto	l4304
  1688  03B1  3A01               	xorlw	1	; case 3
  1689  03B2  1903               	skipnz
  1690  03B3  2AA7               	goto	l4320
  1691  03B4  3A07               	xorlw	7	; case 4
  1692  03B5  1903               	skipnz
  1693  03B6  2AB2               	goto	l4324
  1694  03B7  3A01               	xorlw	1	; case 5
  1695  03B8  1903               	skipnz
  1696  03B9  2ACB               	goto	l4340
  1697  03BA  3A03               	xorlw	3	; case 6
  1698  03BB  1903               	skipnz
  1699  03BC  2AE2               	goto	l4352
  1700  03BD  3A65               	xorlw	101	; case 99
  1701  03BE  1903               	skipnz
  1702  03BF  2B65               	goto	l4400
  1703  03C0  3A07               	xorlw	7	; case 100
  1704  03C1  1903               	skipnz
  1705  03C2  2B77               	goto	l4404
  1706  03C3  3A01               	xorlw	1	; case 101
  1707  03C4  1903               	skipnz
  1708  03C5  2B88               	goto	l4412
  1709  03C6  3A03               	xorlw	3	; case 102
  1710  03C7  1903               	skipnz
  1711  03C8  2BA5               	goto	l4424
  1712  03C9  2A6E               	goto	l737
  1713  03CA  118A  2811         	ljmp	start
  1714  03CC                     __end_of_main:	
  1715                           
  1716                           	psect	text1231
  1717  03CC                     __ptext1231:	
  1718 ;; =============== function _main ends ============
  1719                           
  1720                           
  1721 ;; *************** function _getAdOriginalCh13Value *****************
  1722 ;; Defined at:
  1723 ;;		line 370 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  1724 ;; Parameters:    Size  Location     Type
  1725 ;;		None
  1726 ;; Auto vars:     Size  Location     Type
  1727 ;;		None
  1728 ;; Return value:  Size  Location     Type
  1729 ;;                  2   27[BANK0 ] unsigned int 
  1730 ;; Registers used:
  1731 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1732 ;; Tracked objects:
  1733 ;;		On entry : 60/0
  1734 ;;		On exit  : 160/0
  1735 ;;		Unchanged: FFE00/0
  1736 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1737 ;;      Params:         0       2       0       0       0
  1738 ;;      Locals:         0       0       0       0       0
  1739 ;;      Temps:          0       0       0       0       0
  1740 ;;      Totals:         0       2       0       0       0
  1741 ;;Total ram usage:        2 bytes
  1742 ;; Hardware stack levels used:    1
  1743 ;; Hardware stack levels required when called:    4
  1744 ;; This function calls:
  1745 ;;		_FilterCh13
  1746 ;; This function is called by:
  1747 ;;		_main
  1748 ;; This function uses a non-reentrant model
  1749 ;;
  1750  03CC                     _getAdOriginalCh13Value:	
  1751                           
  1752                           ;common.c: 372: return FilterCh13(uiSampleCh13);
  1753                           
  1754                           ; Regs used in _getAdOriginalCh13Value: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cst
      +                          ack]
  1755  03CC  30B2               	movlw	_uiSampleCh13& (0+255)
  1756  03CD  23D3               	fcall	_FilterCh13
  1757  03CE  0836               	movf	?_FilterCh13+1,w
  1758  03CF  00BC               	movwf	?_getAdOriginalCh13Value+1
  1759  03D0  0835               	movf	?_FilterCh13,w
  1760  03D1  00BB               	movwf	?_getAdOriginalCh13Value
  1761  03D2  0008               	return
  1762  03D3                     __end_of_getAdOriginalCh13Value:	
  1763  03D3                     __ptext1238:	
  1764 ;; =============== function _getAD_ConvertFlag ends ============
  1765                           
  1766                           
  1767 ;; *************** function _FilterCh13 *****************
  1768 ;; Defined at:
  1769 ;;		line 76 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  1770 ;; Parameters:    Size  Location     Type
  1771 ;;  tmpValue        1    wreg     PTR unsigned int 
  1772 ;;		 -> uiSampleCh13(6), 
  1773 ;; Auto vars:     Size  Location     Type
  1774 ;;  tmpValue        1    0[BANK1 ] PTR unsigned int 
  1775 ;;		 -> uiSampleCh13(6), 
  1776 ;;  cir             2   11[BANK1 ] int 
  1777 ;;  filter_buf      6    5[BANK1 ] unsigned int [3]
  1778 ;;  filter_sum      2    3[BANK1 ] unsigned int 
  1779 ;;  filter_temp     2    1[BANK1 ] unsigned int 
  1780 ;;  i               1   14[BANK1 ] unsigned char 
  1781 ;;  j               1   13[BANK1 ] unsigned char 
  1782 ;; Return value:  Size  Location     Type
  1783 ;;                  2   21[BANK0 ] unsigned int 
  1784 ;; Registers used:
  1785 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  1786 ;; Tracked objects:
  1787 ;;		On entry : 60/0
  1788 ;;		On exit  : 160/0
  1789 ;;		Unchanged: FFE00/0
  1790 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1791 ;;      Params:         0       2       0       0       0
  1792 ;;      Locals:         0       0      15       0       0
  1793 ;;      Temps:          0       4       0       0       0
  1794 ;;      Totals:         0       6      15       0       0
  1795 ;;Total ram usage:       21 bytes
  1796 ;; Hardware stack levels used:    1
  1797 ;; Hardware stack levels required when called:    3
  1798 ;; This function calls:
  1799 ;;		Nothing
  1800 ;; This function is called by:
  1801 ;;		_getAdOriginalCh13Value
  1802 ;; This function uses a non-reentrant model
  1803 ;;
  1804  03D3                     _FilterCh13:	
  1805                           
  1806                           ; Regs used in _FilterCh13: [wreg-fsr0h+status,2+status,0+btemp+1]
  1807                           ;FilterCh13@tmpValue stored from wreg
  1808  03D3  1683               	bsf	3,5	;RP0=1, select bank1
  1809  03D4  00BE               	movwf	FilterCh13@tmpValue^(0+128)
  1810  03D5  01CB               	clrf	FilterCh13@j^(0+128)
  1811                           
  1812                           ;common.c: 79: unsigned int filter_temp = 0, filter_sum = 0;
  1813  03D6  01BF               	clrf	FilterCh13@filter_temp^(0+128)
  1814  03D7  01C0               	clrf	(FilterCh13@filter_temp+1)^(0+128)
  1815  03D8  01C1               	clrf	FilterCh13@filter_sum^(0+128)
  1816  03D9  01C2               	clrf	(FilterCh13@filter_sum+1)^(0+128)
  1817                           
  1818                           ;common.c: 81: unsigned int filter_buf[3];
  1819                           ;common.c: 83: for(int cir = 0;cir < 3; cir++)
  1820  03DA  01C9               	clrf	FilterCh13@cir^(0+128)
  1821  03DB  01CA               	clrf	(FilterCh13@cir+1)^(0+128)
  1822  03DC                     l4170:	
  1823                           
  1824                           ;common.c: 84: filter_buf[cir] = *tmpValue++;
  1825  03DC  1683               	bsf	3,5	;RP0=1, select bank1
  1826  03DD  1303               	bcf	3,6	;RP1=0, select bank1
  1827  03DE  083E               	movf	FilterCh13@tmpValue^(0+128),w
  1828  03DF  0084               	movwf	4
  1829  03E0  1383               	bcf	3,7	;select IRP bank0
  1830  03E1  2468  118A         	fcall	PL4	;call to abstracted procedure
  1831  03E3  1683               	bsf	3,5	;RP0=1, select bank1
  1832  03E4  1003               	clrc
  1833  03E5  0D49               	rlf	FilterCh13@cir^(0+128),w
  1834  03E6  2474  118A         	fcall	PL7	;call to abstracted procedure
  1835  03E8  0ABE               	incf	FilterCh13@tmpValue^(0+128),f
  1836  03E9  0ABE               	incf	FilterCh13@tmpValue^(0+128),f
  1837  03EA  0AC9               	incf	FilterCh13@cir^(0+128),f
  1838  03EB  1903               	skipnz
  1839  03EC  0ACA               	incf	(FilterCh13@cir+1)^(0+128),f
  1840  03ED  084A               	movf	(FilterCh13@cir+1)^(0+128),w
  1841  03EE  3A80               	xorlw	128
  1842  03EF  00FF               	movwf	127
  1843  03F0  3080               	movlw	128
  1844  03F1  027F               	subwf	127,w
  1845  03F2  1D03               	skipz
  1846  03F3  2BF6               	goto	u1955
  1847  03F4  3003               	movlw	3
  1848  03F5  0249               	subwf	FilterCh13@cir^(0+128),w
  1849  03F6                     u1955:	
  1850  03F6  1C03               	skipc
  1851  03F7  2BDC               	goto	l4170
  1852                           
  1853                           ;common.c: 88: for(j = 0; j < 3 - 1; j++)
  1854  03F8  1683               	bsf	3,5	;RP0=1, select bank1
  1855  03F9  1303               	bcf	3,6	;RP1=0, select bank1
  1856  03FA  01CB               	clrf	FilterCh13@j^(0+128)
  1857                           
  1858                           ;common.c: 89: {
  1859                           ;common.c: 90: for(i = 0; i < 3 - 1 - j; i++)
  1860  03FB  01CC               	clrf	FilterCh13@i^(0+128)
  1861  03FC                     l4192:	
  1862  03FC  1283               	bcf	3,5	;RP0=0, select bank0
  1863  03FD  01B8               	clrf	??_FilterCh13+1
  1864  03FE  1683               	bsf	3,5	;RP0=1, select bank1
  1865  03FF  084B               	movf	FilterCh13@j^(0+128),w
  1866  0400  3C02               	sublw	2
  1867  0401  1283               	bcf	3,5	;RP0=0, select bank0
  1868  0402  00B7               	movwf	??_FilterCh13
  1869  0403  1C03               	skipc
  1870  0404  03B8               	decf	??_FilterCh13+1,f
  1871  0405  0838               	movf	??_FilterCh13+1,w
  1872  0406  3A80               	xorlw	128
  1873  0407  3C80               	sublw	128
  1874  0408  1D03               	skipz
  1875  0409  2C0D               	goto	u1975
  1876  040A  0837               	movf	??_FilterCh13,w
  1877  040B  1683               	bsf	3,5	;RP0=1, select bank1
  1878  040C  024C               	subwf	FilterCh13@i^(0+128),w
  1879  040D                     u1975:	
  1880  040D  1803               	btfsc	3,0
  1881  040E  2C44               	goto	l4194
  1882                           
  1883                           ;common.c: 91: {
  1884                           ;common.c: 92: if(filter_buf[i] > filter_buf[i + 1])
  1885  040F  1683               	bsf	3,5	;RP0=1, select bank1
  1886  0410  1303               	bcf	3,6	;RP1=0, select bank1
  1887  0411  1003               	clrc
  1888  0412  246F  118A         	fcall	PL6	;call to abstracted procedure
  1889  0414  2468  118A         	fcall	PL4	;call to abstracted procedure
  1890  0416  1683               	bsf	3,5	;RP0=1, select bank1
  1891  0417  247E  118A         	fcall	PL9	;call to abstracted procedure
  1892  0419  0800               	movf	0,w
  1893  041A  1283               	bcf	3,5	;RP0=0, select bank0
  1894  041B  00B9               	movwf	??_FilterCh13+2
  1895  041C  0A84               	incf	4,f
  1896  041D  0800               	movf	0,w
  1897  041E  00BA               	movwf	??_FilterCh13+3
  1898  041F  0838               	movf	??_FilterCh13+1,w
  1899  0420  023A               	subwf	??_FilterCh13+3,w
  1900  0421  1D03               	skipz
  1901  0422  2C25               	goto	u1965
  1902  0423  0837               	movf	??_FilterCh13,w
  1903  0424  0239               	subwf	??_FilterCh13+2,w
  1904  0425                     u1965:	
  1905  0425  1803               	skipnc
  1906  0426  2C41               	goto	l4190
  1907                           
  1908                           ;common.c: 93: {
  1909                           ;common.c: 95: filter_temp = filter_buf[i];
  1910  0427  1683               	bsf	3,5	;RP0=1, select bank1
  1911  0428  1003               	clrc
  1912  0429  0D4C               	rlf	FilterCh13@i^(0+128),w
  1913  042A  3EC3               	addlw	FilterCh13@filter_buf& (0+255)
  1914  042B  0084               	movwf	4
  1915  042C  0800               	movf	0,w
  1916  042D  00BF               	movwf	FilterCh13@filter_temp^(0+128)
  1917  042E  0A84               	incf	4,f
  1918  042F  0800               	movf	0,w
  1919  0430  00C0               	movwf	(FilterCh13@filter_temp+1)^(0+128)
  1920                           
  1921                           ;common.c: 97: filter_buf[i] = filter_buf[i + 1];
  1922  0431  247E  118A         	fcall	PL9	;call to abstracted procedure
  1923  0433  2468  118A         	fcall	PL4	;call to abstracted procedure
  1924  0435  1683               	bsf	3,5	;RP0=1, select bank1
  1925  0436  1003               	clrc
  1926  0437  0D4C               	rlf	FilterCh13@i^(0+128),w
  1927                           
  1928                           ;common.c: 99: filter_buf[i + 1] = filter_temp;
  1929  0438  2474  118A         	fcall	PL7	;call to abstracted procedure
  1930  043A  247E  118A         	fcall	PL9	;call to abstracted procedure
  1931  043C  083F               	movf	FilterCh13@filter_temp^(0+128),w
  1932  043D  0080               	movwf	0
  1933  043E  0A84               	incf	4,f
  1934  043F  0840               	movf	(FilterCh13@filter_temp+1)^(0+128),w
  1935  0440  0080               	movwf	0
  1936  0441                     l4190:	
  1937  0441  1683               	bsf	3,5	;RP0=1, select bank1
  1938  0442  0ACC               	incf	FilterCh13@i^(0+128),f
  1939  0443  2BFC               	goto	l4192
  1940  0444                     l4194:	
  1941  0444  1683               	bsf	3,5	;RP0=1, select bank1
  1942  0445  3002               	movlw	2
  1943  0446  1303               	bcf	3,6	;RP1=0, select bank1
  1944  0447  0ACB               	incf	FilterCh13@j^(0+128),f
  1945  0448  024B               	subwf	FilterCh13@j^(0+128),w
  1946                           
  1947                           ;common.c: 100: }
  1948                           ;common.c: 101: }
  1949                           ;common.c: 102: }
  1950                           ;common.c: 104: for(i = 1; i < 3 - 1; i++)
  1951  0449  01CC               	clrf	FilterCh13@i^(0+128)
  1952  044A  1C03               	skipc
  1953  044B  2BFC               	goto	l4192
  1954  044C  0ACC               	incf	FilterCh13@i^(0+128),f
  1955                           
  1956                           ;common.c: 105: {
  1957                           ;common.c: 106: filter_sum += filter_buf[i];
  1958  044D  1003               	clrc
  1959  044E                     L12:	
  1960  044E  246F  118A         	fcall	PL6	;call to abstracted procedure
  1961  0450  2468  118A         	fcall	PL4	;call to abstracted procedure
  1962  0452  0837               	movf	??_FilterCh13,w
  1963  0453  1683               	bsf	3,5	;RP0=1, select bank1
  1964  0454  07C1               	addwf	FilterCh13@filter_sum^(0+128),f
  1965  0455  1803               	skipnc
  1966  0456  0AC2               	incf	(FilterCh13@filter_sum+1)^(0+128),f
  1967  0457  1283               	bcf	3,5	;RP0=0, select bank0
  1968  0458  0838               	movf	??_FilterCh13+1,w
  1969  0459  1683               	bsf	3,5	;RP0=1, select bank1
  1970  045A  07C2               	addwf	(FilterCh13@filter_sum+1)^(0+128),f
  1971  045B  3002               	movlw	2
  1972  045C  0ACC               	incf	FilterCh13@i^(0+128),f
  1973  045D  024C               	subwf	FilterCh13@i^(0+128),w
  1974  045E  1C03               	skipc
  1975  045F  2C4E               	goto	L12
  1976                           
  1977                           ;common.c: 107: }
  1978                           ;common.c: 110: return (filter_sum >> 0 );
  1979  0460  0842               	movf	(FilterCh13@filter_sum+1)^(0+128),w
  1980  0461  1283               	bcf	3,5	;RP0=0, select bank0
  1981  0462  00B6               	movwf	?_FilterCh13+1
  1982  0463  1683               	bsf	3,5	;RP0=1, select bank1
  1983  0464  0841               	movf	FilterCh13@filter_sum^(0+128),w
  1984  0465  1283               	bcf	3,5	;RP0=0, select bank0
  1985  0466  00B5               	movwf	?_FilterCh13
  1986  0467  0008               	return
  1987  0468                     __end_of_FilterCh13:	
  1988  0468                     PL4:	
  1989  0468  0800               	movf	0,w
  1990  0469  1283               	bcf	3,5	;RP0=0, select bank0
  1991  046A  00B7               	movwf	??_FilterCh13
  1992  046B  0A84               	incf	4,f
  1993  046C  0800               	movf	0,w
  1994  046D  00B8               	movwf	??_FilterCh13+1
  1995  046E  0008               	return
  1996  046F                     PL6:	
  1997  046F  0D4C               	rlf	FilterCh13@i^(0+128),w
  1998  0470  3EC3               	addlw	FilterCh13@filter_buf& (0+255)
  1999  0471  0084               	movwf	4
  2000  0472  1383               	bcf	3,7	;select IRP bank1
  2001  0473  0008               	return
  2002  0474                     PL7:	
  2003  0474  3EC3               	addlw	FilterCh13@filter_buf& (0+255)
  2004  0475  0084               	movwf	4
  2005  0476  1283               	bcf	3,5	;RP0=0, select bank0
  2006  0477  0837               	movf	??_FilterCh13,w
  2007  0478  0080               	movwf	0
  2008  0479  0A84               	incf	4,f
  2009  047A  0838               	movf	??_FilterCh13+1,w
  2010  047B  0080               	movwf	0
  2011  047C  1683               	bsf	3,5	;RP0=1, select bank1
  2012  047D  0008               	return
  2013  047E                     PL9:	
  2014  047E  1003               	clrc
  2015  047F  0D4C               	rlf	FilterCh13@i^(0+128),w
  2016  0480  3E02               	addlw	2
  2017  0481  3EC3               	addlw	FilterCh13@filter_buf& (0+255)
  2018  0482  0084               	movwf	4
  2019  0483  0008               	return
  2020                           
  2021                           	psect	text1232
  2022  0484                     __ptext1232:	
  2023 ;; =============== function _getAdOriginalCh13Value ends ============
  2024                           
  2025                           
  2026 ;; *************** function _process_AD_Converter_Value *****************
  2027 ;; Defined at:
  2028 ;;		line 392 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2029 ;; Parameters:    Size  Location     Type
  2030 ;;		None
  2031 ;; Auto vars:     Size  Location     Type
  2032 ;;		None
  2033 ;; Return value:  Size  Location     Type
  2034 ;;		None               void
  2035 ;; Registers used:
  2036 ;;		wreg, status,2, status,0, pclath, cstack
  2037 ;; Tracked objects:
  2038 ;;		On entry : 0/0
  2039 ;;		On exit  : 60/0
  2040 ;;		Unchanged: FFF9F/0
  2041 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2042 ;;      Params:         0       0       0       0       0
  2043 ;;      Locals:         0       0       0       0       0
  2044 ;;      Temps:          0       0       0       0       0
  2045 ;;      Totals:         0       0       0       0       0
  2046 ;;Total ram usage:        0 bytes
  2047 ;; Hardware stack levels used:    1
  2048 ;; Hardware stack levels required when called:    4
  2049 ;; This function calls:
  2050 ;;		_getAD_ConvertFlag
  2051 ;;		_setAD_ConvertFlag
  2052 ;;		_AD_Sample
  2053 ;;		_adc_test_init
  2054 ;;		_adc_start
  2055 ;; This function is called by:
  2056 ;;		_main
  2057 ;; This function uses a non-reentrant model
  2058 ;;
  2059  0484                     _process_AD_Converter_Value:	
  2060                           
  2061                           ;common.c: 393: if(getAD_ConvertFlag())
  2062                           
  2063                           ; Regs used in _process_AD_Converter_Value: [wreg+status,2+status,0+pclath+cstack]
  2064  0484  249A  118A         	fcall	_getAD_ConvertFlag
  2065  0486  3A00               	xorlw	0
  2066  0487  1903               	skipnz
  2067  0488  0008               	return
  2068                           
  2069                           ;common.c: 394: {
  2070                           ;common.c: 395: setAD_ConvertFlag(0);
  2071  0489  3000               	movlw	0
  2072  048A  249E  118A         	fcall	_setAD_ConvertFlag
  2073                           
  2074                           ;common.c: 396: AD_Sample();
  2075  048C  24A1  118A         	fcall	_AD_Sample
  2076                           
  2077                           ;common.c: 397: if(12 == sampleChannelSelect)
  2078  048E  0859               	movf	_sampleChannelSelect,w
  2079  048F  3A0C               	xorlw	12
  2080                           
  2081                           ;common.c: 398: adc_test_init(12,3);
  2082  0490  3003               	movlw	3
  2083  0491  00B5               	movwf	?_adc_test_init
  2084  0492  1D03               	skipz
  2085  0493  2C96               	goto	L11
  2086  0494  300C               	movlw	12
  2087  0495  2C97               	goto	L10
  2088  0496                     L11:	
  2089                           ;common.c: 399: else
  2090                           ;common.c: 400: adc_test_init(13,3);
  2091                           
  2092  0496  300D               	movlw	13
  2093  0497                     L10:	
  2094  0497  24B5  118A         	fcall	_adc_test_init
  2095                           
  2096                           ;common.c: 401: adc_start();
  2097  0499  2CD0               	ljmp	l4052
  2098  049A                     __end_of_process_AD_Converter_Value:	
  2099  049A                     __ptext1237:	
  2100 ;; =============== function _setAD_ConvertFlag ends ============
  2101                           
  2102                           
  2103 ;; *************** function _getAD_ConvertFlag *****************
  2104 ;; Defined at:
  2105 ;;		line 341 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2106 ;; Parameters:    Size  Location     Type
  2107 ;;		None
  2108 ;; Auto vars:     Size  Location     Type
  2109 ;;		None
  2110 ;; Return value:  Size  Location     Type
  2111 ;;                  1    wreg      unsigned char 
  2112 ;; Registers used:
  2113 ;;		wreg
  2114 ;; Tracked objects:
  2115 ;;		On entry : 0/0
  2116 ;;		On exit  : 60/0
  2117 ;;		Unchanged: FFF9F/0
  2118 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2119 ;;      Params:         0       0       0       0       0
  2120 ;;      Locals:         0       0       0       0       0
  2121 ;;      Temps:          0       0       0       0       0
  2122 ;;      Totals:         0       0       0       0       0
  2123 ;;Total ram usage:        0 bytes
  2124 ;; Hardware stack levels used:    1
  2125 ;; Hardware stack levels required when called:    3
  2126 ;; This function calls:
  2127 ;;		Nothing
  2128 ;; This function is called by:
  2129 ;;		_process_AD_Converter_Value
  2130 ;; This function uses a non-reentrant model
  2131 ;;
  2132  049A                     _getAD_ConvertFlag:	
  2133                           
  2134                           ;common.c: 342: return adc_convert_flag;
  2135                           
  2136                           ; Regs used in _getAD_ConvertFlag: [wreg]
  2137  049A  1283               	bcf	3,5	;RP0=0, select bank0
  2138  049B  1303               	bcf	3,6	;RP1=0, select bank0
  2139  049C  084A               	movf	_adc_convert_flag,w
  2140  049D  0008               	return
  2141  049E                     __end_of_getAD_ConvertFlag:	
  2142  049E                     __ptext1236:	
  2143 ;; =============== function _AD_Sample ends ============
  2144                           
  2145                           
  2146 ;; *************** function _setAD_ConvertFlag *****************
  2147 ;; Defined at:
  2148 ;;		line 347 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2149 ;; Parameters:    Size  Location     Type
  2150 ;;  flag            1    wreg     unsigned char 
  2151 ;; Auto vars:     Size  Location     Type
  2152 ;;  flag            1   21[BANK0 ] unsigned char 
  2153 ;; Return value:  Size  Location     Type
  2154 ;;		None               void
  2155 ;; Registers used:
  2156 ;;		wreg
  2157 ;; Tracked objects:
  2158 ;;		On entry : 60/0
  2159 ;;		On exit  : 60/0
  2160 ;;		Unchanged: FFF9F/0
  2161 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2162 ;;      Params:         0       0       0       0       0
  2163 ;;      Locals:         0       1       0       0       0
  2164 ;;      Temps:          0       0       0       0       0
  2165 ;;      Totals:         0       1       0       0       0
  2166 ;;Total ram usage:        1 bytes
  2167 ;; Hardware stack levels used:    1
  2168 ;; Hardware stack levels required when called:    3
  2169 ;; This function calls:
  2170 ;;		Nothing
  2171 ;; This function is called by:
  2172 ;;		_process_AD_Converter_Value
  2173 ;; This function uses a non-reentrant model
  2174 ;;
  2175  049E                     _setAD_ConvertFlag:	
  2176                           
  2177                           ; Regs used in _setAD_ConvertFlag: [wreg]
  2178                           ;setAD_ConvertFlag@flag stored from wreg
  2179  049E  00B5               	movwf	setAD_ConvertFlag@flag
  2180                           
  2181                           ;common.c: 348: adc_convert_flag = flag;
  2182  049F  00CA               	movwf	_adc_convert_flag
  2183  04A0  0008               	return
  2184  04A1                     __end_of_setAD_ConvertFlag:	
  2185  04A1                     __ptext1235:	
  2186 ;; =============== function _initPin ends ============
  2187                           
  2188                           
  2189 ;; *************** function _AD_Sample *****************
  2190 ;; Defined at:
  2191 ;;		line 415 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2192 ;; Parameters:    Size  Location     Type
  2193 ;;		None
  2194 ;; Auto vars:     Size  Location     Type
  2195 ;;		None
  2196 ;; Return value:  Size  Location     Type
  2197 ;;		None               void
  2198 ;; Registers used:
  2199 ;;		wreg, status,2, status,0
  2200 ;; Tracked objects:
  2201 ;;		On entry : 60/0
  2202 ;;		On exit  : 60/0
  2203 ;;		Unchanged: FFF9F/0
  2204 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2205 ;;      Params:         0       0       0       0       0
  2206 ;;      Locals:         0       0       0       0       0
  2207 ;;      Temps:          0       0       0       0       0
  2208 ;;      Totals:         0       0       0       0       0
  2209 ;;Total ram usage:        0 bytes
  2210 ;; Hardware stack levels used:    1
  2211 ;; Hardware stack levels required when called:    3
  2212 ;; This function calls:
  2213 ;;		Nothing
  2214 ;; This function is called by:
  2215 ;;		_process_AD_Converter_Value
  2216 ;; This function uses a non-reentrant model
  2217 ;;
  2218  04A1                     _AD_Sample:	
  2219                           
  2220                           ;common.c: 416: if(sampleTimes < 3)
  2221                           
  2222                           ; Regs used in _AD_Sample: [wreg+status,2+status,0]
  2223  04A1  3003               	movlw	3
  2224  04A2  0250               	subwf	_sampleTimes,w
  2225  04A3  1803               	skipnc
  2226  04A4  0008               	return
  2227  04A5  3003               	movlw	3
  2228                           
  2229                           ;common.c: 417: {
  2230                           ;common.c: 418: sampleTimes++;
  2231  04A6  0AD0               	incf	_sampleTimes,f
  2232                           
  2233                           ;common.c: 420: if(sampleTimes >= 3)
  2234  04A7  0250               	subwf	_sampleTimes,w
  2235  04A8  1C03               	skipc
  2236  04A9  0008               	return
  2237                           
  2238                           ;common.c: 421: {
  2239                           ;common.c: 422: sampleTimes = 0;
  2240  04AA  01D0               	clrf	_sampleTimes
  2241                           
  2242                           ;common.c: 424: if(sampleChannelSelect == 12)
  2243  04AB  0859               	movf	_sampleChannelSelect,w
  2244  04AC  3A0C               	xorlw	12
  2245  04AD  1D03               	skipz
  2246  04AE  2CB2               	goto	l4230
  2247                           
  2248                           ;common.c: 425: {
  2249                           ;common.c: 426: sampleChannelSelect = 13;
  2250  04AF  300D               	movlw	13
  2251  04B0  00D9               	movwf	_sampleChannelSelect
  2252                           
  2253                           ;common.c: 427: }
  2254  04B1  0008               	return
  2255  04B2                     l4230:	
  2256                           
  2257                           ;common.c: 429: else
  2258                           ;common.c: 430: {
  2259                           ;common.c: 431: sampleChannelSelect = 12;
  2260  04B2  300C               	movlw	12
  2261  04B3  00D9               	movwf	_sampleChannelSelect
  2262  04B4  0008               	return
  2263  04B5                     __end_of_AD_Sample:	
  2264  04B5                     __ptext1254:	
  2265 ;; =============== function _startTwentyMinTimer ends ============
  2266                           
  2267                           
  2268 ;; *************** function _adc_test_init *****************
  2269 ;; Defined at:
  2270 ;;		line 85 in file "D:\develop\AK7030-good\AK7030-OTP\periph.c"
  2271 ;; Parameters:    Size  Location     Type
  2272 ;;  channel         1    wreg     unsigned char 
  2273 ;;  ref             1   21[BANK0 ] unsigned char 
  2274 ;; Auto vars:     Size  Location     Type
  2275 ;;  channel         1   23[BANK0 ] unsigned char 
  2276 ;; Return value:  Size  Location     Type
  2277 ;;		None               void
  2278 ;; Registers used:
  2279 ;;		wreg, status,2, status,0
  2280 ;; Tracked objects:
  2281 ;;		On entry : 60/0
  2282 ;;		On exit  : 60/20
  2283 ;;		Unchanged: FFF9F/0
  2284 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2285 ;;      Params:         0       1       0       0       0
  2286 ;;      Locals:         0       1       0       0       0
  2287 ;;      Temps:          0       1       0       0       0
  2288 ;;      Totals:         0       3       0       0       0
  2289 ;;Total ram usage:        3 bytes
  2290 ;; Hardware stack levels used:    1
  2291 ;; Hardware stack levels required when called:    3
  2292 ;; This function calls:
  2293 ;;		Nothing
  2294 ;; This function is called by:
  2295 ;;		_main
  2296 ;;		_process_AD_Converter_Value
  2297 ;; This function uses a non-reentrant model
  2298 ;;
  2299  04B5                     _adc_test_init:	
  2300                           
  2301                           ; Regs used in _adc_test_init: [wreg+status,2+status,0]
  2302                           ;adc_test_init@channel stored from wreg
  2303  04B5  00B7               	movwf	adc_test_init@channel
  2304                           
  2305                           ;periph.c: 86: ADCON0 = 0x40;
  2306  04B6  3040               	movlw	64
  2307  04B7  009F               	movwf	31	;volatile
  2308                           
  2309                           ;periph.c: 87: ADCON0|=channel<<2;
  2310  04B8  0837               	movf	adc_test_init@channel,w
  2311  04B9  00B6               	movwf	??_adc_test_init
  2312  04BA  1003               	clrc
  2313  04BB  0DB6               	rlf	??_adc_test_init,f
  2314  04BC  1003               	clrc
  2315  04BD  0D36               	rlf	??_adc_test_init,w
  2316  04BE  049F               	iorwf	31,f	;volatile
  2317                           
  2318                           ;periph.c: 88: ADCON1 = 0x35;
  2319  04BF  3035               	movlw	53
  2320  04C0  1683               	bsf	3,5	;RP0=1, select bank1
  2321  04C1  009F               	movwf	31	;volatile
  2322                           
  2323                           ;periph.c: 89: ADCON1|=ref<<6;
  2324  04C2  1283               	bcf	3,5	;RP0=0, select bank0
  2325  04C3  0835               	movf	adc_test_init@ref,w
  2326  04C4  00B6               	movwf	??_adc_test_init
  2327  04C5  0CB6               	rrf	??_adc_test_init,f
  2328  04C6  0CB6               	rrf	??_adc_test_init,f
  2329  04C7  0C36               	rrf	??_adc_test_init,w
  2330  04C8  39C0               	andlw	192
  2331  04C9  1683               	bsf	3,5	;RP0=1, select bank1
  2332  04CA  049F               	iorwf	31,f	;volatile
  2333                           
  2334                           ;periph.c: 90: ADON=1;
  2335  04CB  1283               	bcf	3,5	;RP0=0, select bank0
  2336  04CC  141F               	bsf	31,0
  2337                           
  2338                           ;periph.c: 91: ADIE=1;
  2339  04CD  1683               	bsf	3,5	;RP0=1, select bank1
  2340  04CE  150D               	bsf	13,2
  2341  04CF  0008               	return
  2342  04D0                     __end_of_adc_test_init:	
  2343  04D0                     __ptext1252:	
  2344 ;; =============== function _isPermitSampleTime ends ============
  2345                           
  2346                           
  2347 ;; *************** function _adc_start *****************
  2348 ;; Defined at:
  2349 ;;		line 101 in file "D:\develop\AK7030-good\AK7030-OTP\periph.c"
  2350 ;; Parameters:    Size  Location     Type
  2351 ;;		None
  2352 ;; Auto vars:     Size  Location     Type
  2353 ;;		None
  2354 ;; Return value:  Size  Location     Type
  2355 ;;		None               void
  2356 ;; Registers used:
  2357 ;;		None
  2358 ;; Tracked objects:
  2359 ;;		On entry : 0/0
  2360 ;;		On exit  : 60/0
  2361 ;;		Unchanged: FFF9F/0
  2362 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2363 ;;      Params:         0       0       0       0       0
  2364 ;;      Locals:         0       0       0       0       0
  2365 ;;      Temps:          0       0       0       0       0
  2366 ;;      Totals:         0       0       0       0       0
  2367 ;;Total ram usage:        0 bytes
  2368 ;; Hardware stack levels used:    1
  2369 ;; Hardware stack levels required when called:    3
  2370 ;; This function calls:
  2371 ;;		Nothing
  2372 ;; This function is called by:
  2373 ;;		_main
  2374 ;;		_process_AD_Converter_Value
  2375 ;; This function uses a non-reentrant model
  2376 ;;
  2377  04D0                     _adc_start:	
  2378  04D0                     l4052:	
  2379                           ; Regs used in _adc_start: []
  2380                           
  2381                           
  2382                           ;periph.c: 102: GO=1;
  2383  04D0  1283               	bcf	3,5	;RP0=0, select bank0
  2384  04D1  1303               	bcf	3,6	;RP1=0, select bank0
  2385  04D2  149F               	bsf	31,1
  2386  04D3  0008               	return
  2387  04D4                     __end_of_adc_start:	
  2388                           
  2389                           	psect	text1233
  2390  0505                     __ptext1233:	
  2391 ;; =============== function _process_AD_Converter_Value ends ============
  2392                           
  2393                           
  2394 ;; *************** function _setPinInitVaule *****************
  2395 ;; Defined at:
  2396 ;;		line 272 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2397 ;; Parameters:    Size  Location     Type
  2398 ;;		None
  2399 ;; Auto vars:     Size  Location     Type
  2400 ;;		None
  2401 ;; Return value:  Size  Location     Type
  2402 ;;		None               void
  2403 ;; Registers used:
  2404 ;;		wreg, status,2, status,0, pclath, cstack
  2405 ;; Tracked objects:
  2406 ;;		On entry : 17F/20
  2407 ;;		On exit  : 17F/0
  2408 ;;		Unchanged: FFE80/0
  2409 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2410 ;;      Params:         0       0       0       0       0
  2411 ;;      Locals:         0       0       0       0       0
  2412 ;;      Temps:          0       0       0       0       0
  2413 ;;      Totals:         0       0       0       0       0
  2414 ;;Total ram usage:        0 bytes
  2415 ;; Hardware stack levels used:    1
  2416 ;; Hardware stack levels required when called:    4
  2417 ;; This function calls:
  2418 ;;		_setPB3
  2419 ;;		_setPB4
  2420 ;;		_setPB5
  2421 ;; This function is called by:
  2422 ;;		_main
  2423 ;; This function uses a non-reentrant model
  2424 ;;
  2425  0505                     _setPinInitVaule:	
  2426                           
  2427                           ;main.c: 274: setPB3(1);
  2428                           
  2429                           ; Regs used in _setPinInitVaule: [wreg+status,2+status,0+pclath+cstack]
  2430  0505  3001               	movlw	1
  2431  0506  250D  118A         	fcall	_setPB3
  2432                           
  2433                           ;main.c: 275: setPB4(0);
  2434  0508  3000               	movlw	0
  2435  0509  2516  118A         	fcall	_setPB4
  2436                           
  2437                           ;main.c: 276: setPB5(1);
  2438  050B  3001               	movlw	1
  2439  050C  2D1E               	ljmp	_setPB5
  2440  050D                     __end_of_setPinInitVaule:	
  2441  050D                     __ptext1266:	
  2442 ;; =============== function _initPB4 ends ============
  2443                           
  2444                           
  2445 ;; *************** function _setPB3 *****************
  2446 ;; Defined at:
  2447 ;;		line 133 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2448 ;; Parameters:    Size  Location     Type
  2449 ;;  bValue          1    wreg     unsigned char 
  2450 ;; Auto vars:     Size  Location     Type
  2451 ;;  bValue          1   21[BANK0 ] unsigned char 
  2452 ;; Return value:  Size  Location     Type
  2453 ;;		None               void
  2454 ;; Registers used:
  2455 ;;		wreg
  2456 ;; Tracked objects:
  2457 ;;		On entry : 40/0
  2458 ;;		On exit  : 60/0
  2459 ;;		Unchanged: FFF9F/0
  2460 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2461 ;;      Params:         0       0       0       0       0
  2462 ;;      Locals:         0       1       0       0       0
  2463 ;;      Temps:          0       0       0       0       0
  2464 ;;      Totals:         0       1       0       0       0
  2465 ;;Total ram usage:        1 bytes
  2466 ;; Hardware stack levels used:    1
  2467 ;; Hardware stack levels required when called:    3
  2468 ;; This function calls:
  2469 ;;		Nothing
  2470 ;; This function is called by:
  2471 ;;		_setPinInitVaule
  2472 ;;		_main
  2473 ;; This function uses a non-reentrant model
  2474 ;;
  2475  050D                     _setPB3:	
  2476                           
  2477                           ; Regs used in _setPB3: [wreg]
  2478                           ;setPB3@bValue stored from wreg
  2479  050D  1283               	bcf	3,5	;RP0=0, select bank0
  2480  050E  00B5               	movwf	setPB3@bValue
  2481                           
  2482                           ;main.c: 134: if( bValue )
  2483  050F  0835               	movf	setPB3@bValue,w
  2484  0510  1903               	btfsc	3,2
  2485  0511  2D14               	goto	l682
  2486                           
  2487                           ;main.c: 136: PB3 = 1;
  2488  0512  1586               	bsf	6,3
  2489  0513  0008               	return
  2490  0514                     l682:	
  2491                           
  2492                           ;main.c: 140: else
  2493                           ;main.c: 142: PB3= 0;
  2494  0514  1186               	bcf	6,3
  2495  0515  0008               	return
  2496  0516                     __end_of_setPB3:	
  2497  0516                     __ptext1264:	
  2498 ;; =============== function _initPB5 ends ============
  2499                           
  2500                           
  2501 ;; *************** function _setPB4 *****************
  2502 ;; Defined at:
  2503 ;;		line 168 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2504 ;; Parameters:    Size  Location     Type
  2505 ;;  bValue          1    wreg     unsigned char 
  2506 ;; Auto vars:     Size  Location     Type
  2507 ;;  bValue          1   21[BANK0 ] unsigned char 
  2508 ;; Return value:  Size  Location     Type
  2509 ;;		None               void
  2510 ;; Registers used:
  2511 ;;		wreg
  2512 ;; Tracked objects:
  2513 ;;		On entry : 60/0
  2514 ;;		On exit  : 60/0
  2515 ;;		Unchanged: FFF9F/0
  2516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2517 ;;      Params:         0       0       0       0       0
  2518 ;;      Locals:         0       1       0       0       0
  2519 ;;      Temps:          0       0       0       0       0
  2520 ;;      Totals:         0       1       0       0       0
  2521 ;;Total ram usage:        1 bytes
  2522 ;; Hardware stack levels used:    1
  2523 ;; Hardware stack levels required when called:    3
  2524 ;; This function calls:
  2525 ;;		Nothing
  2526 ;; This function is called by:
  2527 ;;		_setPinInitVaule
  2528 ;;		_main
  2529 ;; This function uses a non-reentrant model
  2530 ;;
  2531  0516                     _setPB4:	
  2532                           
  2533                           ; Regs used in _setPB4: [wreg]
  2534                           ;setPB4@bValue stored from wreg
  2535  0516  00B5               	movwf	setPB4@bValue
  2536                           
  2537                           ;main.c: 169: if( bValue )
  2538  0517  0835               	movf	setPB4@bValue,w
  2539  0518  1903               	btfsc	3,2
  2540  0519  2D1C               	goto	l692
  2541                           
  2542                           ;main.c: 171: PB4 = 1;
  2543  051A  1606               	bsf	6,4
  2544  051B  0008               	return
  2545  051C                     l692:	
  2546                           
  2547                           ;main.c: 175: else
  2548                           ;main.c: 177: PB4= 0;
  2549  051C  1206               	bcf	6,4
  2550  051D  0008               	return
  2551  051E                     __end_of_setPB4:	
  2552  051E                     __ptext1262:	
  2553 ;; =============== function _initPB2_AsHighResistence ends ============
  2554                           
  2555                           
  2556 ;; *************** function _setPB5 *****************
  2557 ;; Defined at:
  2558 ;;		line 202 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2559 ;; Parameters:    Size  Location     Type
  2560 ;;  bValue          1    wreg     unsigned char 
  2561 ;; Auto vars:     Size  Location     Type
  2562 ;;  bValue          1   21[BANK0 ] unsigned char 
  2563 ;; Return value:  Size  Location     Type
  2564 ;;		None               void
  2565 ;; Registers used:
  2566 ;;		wreg
  2567 ;; Tracked objects:
  2568 ;;		On entry : 60/0
  2569 ;;		On exit  : 60/0
  2570 ;;		Unchanged: FFF9F/0
  2571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2572 ;;      Params:         0       0       0       0       0
  2573 ;;      Locals:         0       1       0       0       0
  2574 ;;      Temps:          0       0       0       0       0
  2575 ;;      Totals:         0       1       0       0       0
  2576 ;;Total ram usage:        1 bytes
  2577 ;; Hardware stack levels used:    1
  2578 ;; Hardware stack levels required when called:    3
  2579 ;; This function calls:
  2580 ;;		Nothing
  2581 ;; This function is called by:
  2582 ;;		_setPinInitVaule
  2583 ;;		_main
  2584 ;; This function uses a non-reentrant model
  2585 ;;
  2586  051E                     _setPB5:	
  2587                           
  2588                           ; Regs used in _setPB5: [wreg]
  2589                           ;setPB5@bValue stored from wreg
  2590  051E  00B5               	movwf	setPB5@bValue
  2591                           
  2592                           ;main.c: 203: if( bValue )
  2593  051F  0835               	movf	setPB5@bValue,w
  2594  0520  1903               	btfsc	3,2
  2595  0521  2D24               	goto	l702
  2596                           
  2597                           ;main.c: 205: PB5 = 1;
  2598  0522  1686               	bsf	6,5
  2599  0523  0008               	return
  2600  0524                     l702:	
  2601                           
  2602                           ;main.c: 209: else
  2603                           ;main.c: 211: PB5= 0;
  2604  0524  1286               	bcf	6,5
  2605  0525  0008               	return
  2606  0526                     __end_of_setPB5:	
  2607                           
  2608                           	psect	text1234
  2609  04D4                     __ptext1234:	
  2610 ;; =============== function _setPinInitVaule ends ============
  2611                           
  2612                           
  2613 ;; *************** function _initPin *****************
  2614 ;; Defined at:
  2615 ;;		line 256 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2616 ;; Parameters:    Size  Location     Type
  2617 ;;		None
  2618 ;; Auto vars:     Size  Location     Type
  2619 ;;		None
  2620 ;; Return value:  Size  Location     Type
  2621 ;;		None               void
  2622 ;; Registers used:
  2623 ;;		wreg, status,2, status,0, pclath, cstack
  2624 ;; Tracked objects:
  2625 ;;		On entry : 17F/0
  2626 ;;		On exit  : 17F/20
  2627 ;;		Unchanged: FFE80/0
  2628 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2629 ;;      Params:         0       0       0       0       0
  2630 ;;      Locals:         0       0       0       0       0
  2631 ;;      Temps:          0       0       0       0       0
  2632 ;;      Totals:         0       0       0       0       0
  2633 ;;Total ram usage:        0 bytes
  2634 ;; Hardware stack levels used:    1
  2635 ;; Hardware stack levels required when called:    4
  2636 ;; This function calls:
  2637 ;;		_initPB2_AsHighResistence
  2638 ;;		_initPB3
  2639 ;;		_initPB4
  2640 ;;		_initPB5
  2641 ;; This function is called by:
  2642 ;;		_main
  2643 ;; This function uses a non-reentrant model
  2644 ;;
  2645  04D4                     _initPin:	
  2646                           
  2647                           ;main.c: 258: initPB2_AsHighResistence();
  2648                           
  2649                           ; Regs used in _initPin: [wreg+status,2+status,0+pclath+cstack]
  2650  04D4  24EA  118A         	fcall	_initPB2_AsHighResistence
  2651                           
  2652                           ;main.c: 260: initPB3(0);
  2653  04D6  3000               	movlw	0
  2654  04D7  24DE  118A         	fcall	_initPB3
  2655                           
  2656                           ;main.c: 262: initPB4(0);
  2657  04D9  3000               	movlw	0
  2658  04DA  24EF  118A         	fcall	_initPB4
  2659                           
  2660                           ;main.c: 264: initPB5(0);
  2661  04DC  3000               	movlw	0
  2662  04DD  2CFA               	ljmp	_initPB5
  2663  04DE                     __end_of_initPin:	
  2664  04DE                     __ptext1267:	
  2665 ;; =============== function _setPB3 ends ============
  2666                           
  2667                           
  2668 ;; *************** function _initPB3 *****************
  2669 ;; Defined at:
  2670 ;;		line 116 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2671 ;; Parameters:    Size  Location     Type
  2672 ;;  bValue          1    wreg     unsigned char 
  2673 ;; Auto vars:     Size  Location     Type
  2674 ;;  bValue          1   21[BANK0 ] unsigned char 
  2675 ;; Return value:  Size  Location     Type
  2676 ;;		None               void
  2677 ;; Registers used:
  2678 ;;		wreg
  2679 ;; Tracked objects:
  2680 ;;		On entry : 17F/60
  2681 ;;		On exit  : 17F/20
  2682 ;;		Unchanged: FFE80/0
  2683 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2684 ;;      Params:         0       0       0       0       0
  2685 ;;      Locals:         0       1       0       0       0
  2686 ;;      Temps:          0       0       0       0       0
  2687 ;;      Totals:         0       1       0       0       0
  2688 ;;Total ram usage:        1 bytes
  2689 ;; Hardware stack levels used:    1
  2690 ;; Hardware stack levels required when called:    3
  2691 ;; This function calls:
  2692 ;;		Nothing
  2693 ;; This function is called by:
  2694 ;;		_initPin
  2695 ;; This function uses a non-reentrant model
  2696 ;;
  2697  04DE                     _initPB3:	
  2698                           
  2699                           ; Regs used in _initPB3: [wreg]
  2700                           ;initPB3@bValue stored from wreg
  2701  04DE  1283               	bcf	3,5	;RP0=0, select bank0
  2702  04DF  1303               	bcf	3,6	;RP1=0, select bank0
  2703  04E0  00B5               	movwf	initPB3@bValue
  2704                           
  2705                           ;main.c: 117: if( bValue )
  2706  04E1  0835               	movf	initPB3@bValue,w
  2707  04E2  1903               	btfsc	3,2
  2708  04E3  2CE7               	goto	l677
  2709                           
  2710                           ;main.c: 119: TRISB3 = 1;
  2711  04E4  1683               	bsf	3,5	;RP0=1, select bank1
  2712  04E5  1586               	bsf	6,3
  2713  04E6  0008               	return
  2714  04E7                     l677:	
  2715                           
  2716                           ;main.c: 123: else
  2717                           ;main.c: 125: TRISB3 = 0;
  2718  04E7  1683               	bsf	3,5	;RP0=1, select bank1
  2719  04E8  1186               	bcf	6,3
  2720  04E9  0008               	return
  2721  04EA                     __end_of_initPB3:	
  2722  04EA                     __ptext1261:	
  2723 ;; =============== function _pwm_start ends ============
  2724                           
  2725                           
  2726 ;; *************** function _initPB2_AsHighResistence *****************
  2727 ;; Defined at:
  2728 ;;		line 219 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2729 ;; Parameters:    Size  Location     Type
  2730 ;;		None
  2731 ;; Auto vars:     Size  Location     Type
  2732 ;;		None
  2733 ;; Return value:  Size  Location     Type
  2734 ;;		None               void
  2735 ;; Registers used:
  2736 ;;		None
  2737 ;; Tracked objects:
  2738 ;;		On entry : 17F/0
  2739 ;;		On exit  : 17F/60
  2740 ;;		Unchanged: FFE80/0
  2741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2742 ;;      Params:         0       0       0       0       0
  2743 ;;      Locals:         0       0       0       0       0
  2744 ;;      Temps:          0       0       0       0       0
  2745 ;;      Totals:         0       0       0       0       0
  2746 ;;Total ram usage:        0 bytes
  2747 ;; Hardware stack levels used:    1
  2748 ;; Hardware stack levels required when called:    3
  2749 ;; This function calls:
  2750 ;;		Nothing
  2751 ;; This function is called by:
  2752 ;;		_initPin
  2753 ;; This function uses a non-reentrant model
  2754 ;;
  2755  04EA                     _initPB2_AsHighResistence:	
  2756                           
  2757                           ;main.c: 221: PB2 = 1;
  2758                           
  2759                           ; Regs used in _initPB2_AsHighResistence: []
  2760  04EA  1506               	bsf	6,2
  2761                           
  2762                           ;main.c: 222: PBOD2 = 1;
  2763  04EB  1683               	bsf	3,5	;RP0=1, select bank3
  2764  04EC  1703               	bsf	3,6	;RP1=1, select bank3
  2765  04ED  1508               	bsf	8,2
  2766  04EE  0008               	return
  2767  04EF                     __end_of_initPB2_AsHighResistence:	
  2768  04EF                     __ptext1265:	
  2769 ;; =============== function _setPB4 ends ============
  2770                           
  2771                           
  2772 ;; *************** function _initPB4 *****************
  2773 ;; Defined at:
  2774 ;;		line 151 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2775 ;; Parameters:    Size  Location     Type
  2776 ;;  bValue          1    wreg     unsigned char 
  2777 ;; Auto vars:     Size  Location     Type
  2778 ;;  bValue          1   21[BANK0 ] unsigned char 
  2779 ;; Return value:  Size  Location     Type
  2780 ;;		None               void
  2781 ;; Registers used:
  2782 ;;		wreg
  2783 ;; Tracked objects:
  2784 ;;		On entry : 17F/20
  2785 ;;		On exit  : 17F/20
  2786 ;;		Unchanged: FFE80/0
  2787 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2788 ;;      Params:         0       0       0       0       0
  2789 ;;      Locals:         0       1       0       0       0
  2790 ;;      Temps:          0       0       0       0       0
  2791 ;;      Totals:         0       1       0       0       0
  2792 ;;Total ram usage:        1 bytes
  2793 ;; Hardware stack levels used:    1
  2794 ;; Hardware stack levels required when called:    3
  2795 ;; This function calls:
  2796 ;;		Nothing
  2797 ;; This function is called by:
  2798 ;;		_initPin
  2799 ;; This function uses a non-reentrant model
  2800 ;;
  2801  04EF                     _initPB4:	
  2802                           
  2803                           ; Regs used in _initPB4: [wreg]
  2804                           ;initPB4@bValue stored from wreg
  2805  04EF  1283               	bcf	3,5	;RP0=0, select bank0
  2806  04F0  00B5               	movwf	initPB4@bValue
  2807                           
  2808                           ;main.c: 152: if( bValue )
  2809  04F1  0835               	movf	initPB4@bValue,w
  2810  04F2  1903               	btfsc	3,2
  2811  04F3  2CF7               	goto	l687
  2812                           
  2813                           ;main.c: 154: TRISB4 = 1;
  2814  04F4  1683               	bsf	3,5	;RP0=1, select bank1
  2815  04F5  1606               	bsf	6,4
  2816  04F6  0008               	return
  2817  04F7                     l687:	
  2818                           
  2819                           ;main.c: 158: else
  2820                           ;main.c: 160: TRISB4= 0;
  2821  04F7  1683               	bsf	3,5	;RP0=1, select bank1
  2822  04F8  1206               	bcf	6,4
  2823  04F9  0008               	return
  2824  04FA                     __end_of_initPB4:	
  2825  04FA                     __ptext1263:	
  2826 ;; =============== function _setPB5 ends ============
  2827                           
  2828                           
  2829 ;; *************** function _initPB5 *****************
  2830 ;; Defined at:
  2831 ;;		line 185 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  2832 ;; Parameters:    Size  Location     Type
  2833 ;;  bValue          1    wreg     unsigned char 
  2834 ;; Auto vars:     Size  Location     Type
  2835 ;;  bValue          1   21[BANK0 ] unsigned char 
  2836 ;; Return value:  Size  Location     Type
  2837 ;;		None               void
  2838 ;; Registers used:
  2839 ;;		wreg
  2840 ;; Tracked objects:
  2841 ;;		On entry : 17F/20
  2842 ;;		On exit  : 17F/20
  2843 ;;		Unchanged: FFE80/0
  2844 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2845 ;;      Params:         0       0       0       0       0
  2846 ;;      Locals:         0       1       0       0       0
  2847 ;;      Temps:          0       0       0       0       0
  2848 ;;      Totals:         0       1       0       0       0
  2849 ;;Total ram usage:        1 bytes
  2850 ;; Hardware stack levels used:    1
  2851 ;; Hardware stack levels required when called:    3
  2852 ;; This function calls:
  2853 ;;		Nothing
  2854 ;; This function is called by:
  2855 ;;		_initPin
  2856 ;; This function uses a non-reentrant model
  2857 ;;
  2858  04FA                     _initPB5:	
  2859                           
  2860                           ; Regs used in _initPB5: [wreg]
  2861                           ;initPB5@bValue stored from wreg
  2862  04FA  1283               	bcf	3,5	;RP0=0, select bank0
  2863  04FB  00B5               	movwf	initPB5@bValue
  2864                           
  2865                           ;main.c: 186: if( bValue )
  2866  04FC  0835               	movf	initPB5@bValue,w
  2867  04FD  1903               	btfsc	3,2
  2868  04FE  2D02               	goto	l697
  2869                           
  2870                           ;main.c: 188: TRISB5 = 1;
  2871  04FF  1683               	bsf	3,5	;RP0=1, select bank1
  2872  0500  1686               	bsf	6,5
  2873  0501  0008               	return
  2874  0502                     l697:	
  2875                           
  2876                           ;main.c: 192: else
  2877                           ;main.c: 194: TRISB5= 0;
  2878  0502  1683               	bsf	3,5	;RP0=1, select bank1
  2879  0503  1286               	bcf	6,5
  2880  0504  0008               	return
  2881  0505                     __end_of_initPB5:	
  2882                           
  2883                           	psect	text1239
  2884  05DF                     __ptext1239:	
  2885 ;; =============== function _FilterCh13 ends ============
  2886                           
  2887                           
  2888 ;; *************** function _setWaitResetFlag *****************
  2889 ;; Defined at:
  2890 ;;		line 55 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2891 ;; Parameters:    Size  Location     Type
  2892 ;;  bValue          1    wreg     unsigned char 
  2893 ;; Auto vars:     Size  Location     Type
  2894 ;;  bValue          1   21[BANK0 ] unsigned char 
  2895 ;; Return value:  Size  Location     Type
  2896 ;;		None               void
  2897 ;; Registers used:
  2898 ;;		wreg
  2899 ;; Tracked objects:
  2900 ;;		On entry : 60/0
  2901 ;;		On exit  : 60/0
  2902 ;;		Unchanged: FFF9F/0
  2903 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2904 ;;      Params:         0       0       0       0       0
  2905 ;;      Locals:         0       1       0       0       0
  2906 ;;      Temps:          0       0       0       0       0
  2907 ;;      Totals:         0       1       0       0       0
  2908 ;;Total ram usage:        1 bytes
  2909 ;; Hardware stack levels used:    1
  2910 ;; Hardware stack levels required when called:    3
  2911 ;; This function calls:
  2912 ;;		Nothing
  2913 ;; This function is called by:
  2914 ;;		_main
  2915 ;; This function uses a non-reentrant model
  2916 ;;
  2917  05DF                     _setWaitResetFlag:	
  2918                           
  2919                           ; Regs used in _setWaitResetFlag: [wreg]
  2920                           ;setWaitResetFlag@bValue stored from wreg
  2921  05DF  00B5               	movwf	setWaitResetFlag@bValue
  2922                           
  2923                           ;common.c: 56: bWaitResetFlag = bValue;
  2924  05E0  00CF               	movwf	_bWaitResetFlag
  2925  05E1  0008               	return
  2926  05E2                     __end_of_setWaitResetFlag:	
  2927                           
  2928                           	psect	text1240
  2929  0587                     __ptext1240:	
  2930 ;; =============== function _setWaitResetFlag ends ============
  2931                           
  2932                           
  2933 ;; *************** function _isFinishedOneHoursTimer *****************
  2934 ;; Defined at:
  2935 ;;		line 581 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2936 ;; Parameters:    Size  Location     Type
  2937 ;;		None
  2938 ;; Auto vars:     Size  Location     Type
  2939 ;;		None
  2940 ;; Return value:  Size  Location     Type
  2941 ;;                  1    wreg      unsigned char 
  2942 ;; Registers used:
  2943 ;;		wreg, status,2, status,0
  2944 ;; Tracked objects:
  2945 ;;		On entry : 160/20
  2946 ;;		On exit  : 160/0
  2947 ;;		Unchanged: FFE9F/0
  2948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2949 ;;      Params:         0       0       0       0       0
  2950 ;;      Locals:         0       0       0       0       0
  2951 ;;      Temps:          0       0       0       0       0
  2952 ;;      Totals:         0       0       0       0       0
  2953 ;;Total ram usage:        0 bytes
  2954 ;; Hardware stack levels used:    1
  2955 ;; Hardware stack levels required when called:    3
  2956 ;; This function calls:
  2957 ;;		Nothing
  2958 ;; This function is called by:
  2959 ;;		_main
  2960 ;; This function uses a non-reentrant model
  2961 ;;
  2962  0587                     _isFinishedOneHoursTimer:	
  2963                           
  2964                           ;common.c: 582: if((uiOneHourTimer == 0) && bOneHourTimerStartFlag)
  2965                           
  2966                           ; Regs used in _isFinishedOneHoursTimer: [wreg+status,2+status,0]
  2967  0587  1283               	bcf	3,5	;RP0=0, select bank0
  2968  0588  0840               	movf	_uiOneHourTimer+1,w
  2969  0589  043F               	iorwf	_uiOneHourTimer,w
  2970  058A  1D03               	skipz
  2971  058B  3400               	retlw	0
  2972  058C  084C               	movf	_bOneHourTimerStartFlag,w
  2973  058D  1903               	btfsc	3,2
  2974  058E  3400               	retlw	0
  2975  058F  3001               	movlw	1
  2976                           
  2977                           ;common.c: 583: {
  2978                           ;common.c: 584: bOneHourTimerStartFlag = 0;
  2979  0590  01CC               	clrf	_bOneHourTimerStartFlag
  2980                           
  2981                           ;common.c: 585: return 1;
  2982  0591  0008               	return
  2983  0592                     __end_of_isFinishedOneHoursTimer:	
  2984                           ;common.c: 587: else
  2985                           ;common.c: 588: return 0;
  2986                           
  2987                           
  2988                           	psect	text1241
  2989  054F                     __ptext1241:	
  2990 ;; =============== function _isFinishedOneHoursTimer ends ============
  2991                           
  2992                           
  2993 ;; *************** function _startOneHoursTimer *****************
  2994 ;; Defined at:
  2995 ;;		line 498 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  2996 ;; Parameters:    Size  Location     Type
  2997 ;;  uiSetTime       2   21[BANK0 ] unsigned int 
  2998 ;; Auto vars:     Size  Location     Type
  2999 ;;		None
  3000 ;; Return value:  Size  Location     Type
  3001 ;;		None               void
  3002 ;; Registers used:
  3003 ;;		wreg, status,2, status,0
  3004 ;; Tracked objects:
  3005 ;;		On entry : 60/0
  3006 ;;		On exit  : 60/0
  3007 ;;		Unchanged: FFF9F/0
  3008 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3009 ;;      Params:         0       2       0       0       0
  3010 ;;      Locals:         0       0       0       0       0
  3011 ;;      Temps:          0       0       0       0       0
  3012 ;;      Totals:         0       2       0       0       0
  3013 ;;Total ram usage:        2 bytes
  3014 ;; Hardware stack levels used:    1
  3015 ;; Hardware stack levels required when called:    3
  3016 ;; This function calls:
  3017 ;;		Nothing
  3018 ;; This function is called by:
  3019 ;;		_main
  3020 ;; This function uses a non-reentrant model
  3021 ;;
  3022  054F                     _startOneHoursTimer:	
  3023                           
  3024                           ;common.c: 499: if(( 0 == uiOneHourTimer ) && ( 0 == bOneHourTimerStartFlag ))
  3025                           
  3026                           ; Regs used in _startOneHoursTimer: [wreg+status,2+status,0]
  3027  054F  0840               	movf	_uiOneHourTimer+1,w
  3028  0550  043F               	iorwf	_uiOneHourTimer,w
  3029  0551  1D03               	skipz
  3030  0552  0008               	return
  3031  0553  08CC               	movf	_bOneHourTimerStartFlag,f
  3032  0554  1D03               	skipz
  3033  0555  0008               	return
  3034                           
  3035                           ;common.c: 500: {
  3036                           ;common.c: 501: uiOneHourTimer = uiSetTime;
  3037  0556  0836               	movf	startOneHoursTimer@uiSetTime+1,w
  3038  0557  00C0               	movwf	_uiOneHourTimer+1
  3039  0558  0835               	movf	startOneHoursTimer@uiSetTime,w
  3040  0559  00BF               	movwf	_uiOneHourTimer
  3041                           
  3042                           ;common.c: 502: bOneHourTimerStartFlag = 1;
  3043  055A  01CC               	clrf	_bOneHourTimerStartFlag
  3044  055B  0ACC               	incf	_bOneHourTimerStartFlag,f
  3045  055C  0008               	return
  3046  055D                     __end_of_startOneHoursTimer:	
  3047                           
  3048                           	psect	text1242
  3049  05CF                     __ptext1242:	
  3050 ;; =============== function _startOneHoursTimer ends ============
  3051                           
  3052                           
  3053 ;; *************** function _clearThreeHoursTimer *****************
  3054 ;; Defined at:
  3055 ;;		line 465 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3056 ;; Parameters:    Size  Location     Type
  3057 ;;		None
  3058 ;; Auto vars:     Size  Location     Type
  3059 ;;		None
  3060 ;; Return value:  Size  Location     Type
  3061 ;;		None               void
  3062 ;; Registers used:
  3063 ;;		status,2
  3064 ;; Tracked objects:
  3065 ;;		On entry : 60/0
  3066 ;;		On exit  : 60/0
  3067 ;;		Unchanged: FFF9F/0
  3068 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3069 ;;      Params:         0       0       0       0       0
  3070 ;;      Locals:         0       0       0       0       0
  3071 ;;      Temps:          0       0       0       0       0
  3072 ;;      Totals:         0       0       0       0       0
  3073 ;;Total ram usage:        0 bytes
  3074 ;; Hardware stack levels used:    1
  3075 ;; Hardware stack levels required when called:    3
  3076 ;; This function calls:
  3077 ;;		Nothing
  3078 ;; This function is called by:
  3079 ;;		_main
  3080 ;; This function uses a non-reentrant model
  3081 ;;
  3082  05CF                     _clearThreeHoursTimer:	
  3083                           
  3084                           ;common.c: 466: uiSmallTimer = 0;
  3085                           
  3086                           ; Regs used in _clearThreeHoursTimer: [status,2]
  3087  05CF  01C1               	clrf	_uiSmallTimer
  3088  05D0  01C2               	clrf	_uiSmallTimer+1
  3089                           
  3090                           ;common.c: 467: bSmallTimerStartFlag = 0;
  3091  05D1  01CD               	clrf	_bSmallTimerStartFlag
  3092  05D2  0008               	return
  3093  05D3                     __end_of_clearThreeHoursTimer:	
  3094                           
  3095                           	psect	text1243
  3096  0592                     __ptext1243:	
  3097 ;; =============== function _clearThreeHoursTimer ends ============
  3098                           
  3099                           
  3100 ;; *************** function _isFinishedThreeHoursTimer *****************
  3101 ;; Defined at:
  3102 ;;		line 568 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3103 ;; Parameters:    Size  Location     Type
  3104 ;;		None
  3105 ;; Auto vars:     Size  Location     Type
  3106 ;;		None
  3107 ;; Return value:  Size  Location     Type
  3108 ;;                  1    wreg      unsigned char 
  3109 ;; Registers used:
  3110 ;;		wreg, status,2, status,0
  3111 ;; Tracked objects:
  3112 ;;		On entry : 60/0
  3113 ;;		On exit  : 60/0
  3114 ;;		Unchanged: FFF9F/0
  3115 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3116 ;;      Params:         0       0       0       0       0
  3117 ;;      Locals:         0       0       0       0       0
  3118 ;;      Temps:          0       0       0       0       0
  3119 ;;      Totals:         0       0       0       0       0
  3120 ;;Total ram usage:        0 bytes
  3121 ;; Hardware stack levels used:    1
  3122 ;; Hardware stack levels required when called:    3
  3123 ;; This function calls:
  3124 ;;		Nothing
  3125 ;; This function is called by:
  3126 ;;		_main
  3127 ;; This function uses a non-reentrant model
  3128 ;;
  3129  0592                     _isFinishedThreeHoursTimer:	
  3130                           
  3131                           ;common.c: 569: if((uiSmallTimer == 0) && bSmallTimerStartFlag)
  3132                           
  3133                           ; Regs used in _isFinishedThreeHoursTimer: [wreg+status,2+status,0]
  3134  0592  0842               	movf	_uiSmallTimer+1,w
  3135  0593  0441               	iorwf	_uiSmallTimer,w
  3136  0594  1D03               	skipz
  3137  0595  3400               	retlw	0
  3138  0596  084D               	movf	_bSmallTimerStartFlag,w
  3139  0597  1903               	btfsc	3,2
  3140  0598  3400               	retlw	0
  3141  0599  3001               	movlw	1
  3142                           
  3143                           ;common.c: 570: {
  3144                           ;common.c: 571: bSmallTimerStartFlag = 0;
  3145  059A  01CD               	clrf	_bSmallTimerStartFlag
  3146                           
  3147                           ;common.c: 572: return 1;
  3148  059B  0008               	return
  3149  059C                     __end_of_isFinishedThreeHoursTimer:	
  3150                           ;common.c: 574: else
  3151                           ;common.c: 575: return 0;
  3152                           
  3153                           
  3154                           	psect	text1244
  3155  055D                     __ptext1244:	
  3156 ;; =============== function _isFinishedThreeHoursTimer ends ============
  3157                           
  3158                           
  3159 ;; *************** function _startThreeHoursTimer *****************
  3160 ;; Defined at:
  3161 ;;		line 485 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  uiSetTime       2   21[BANK0 ] unsigned int 
  3164 ;; Auto vars:     Size  Location     Type
  3165 ;;		None
  3166 ;; Return value:  Size  Location     Type
  3167 ;;		None               void
  3168 ;; Registers used:
  3169 ;;		wreg, status,2, status,0
  3170 ;; Tracked objects:
  3171 ;;		On entry : 60/0
  3172 ;;		On exit  : 60/0
  3173 ;;		Unchanged: FFF9F/0
  3174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3175 ;;      Params:         0       2       0       0       0
  3176 ;;      Locals:         0       0       0       0       0
  3177 ;;      Temps:          0       0       0       0       0
  3178 ;;      Totals:         0       2       0       0       0
  3179 ;;Total ram usage:        2 bytes
  3180 ;; Hardware stack levels used:    1
  3181 ;; Hardware stack levels required when called:    3
  3182 ;; This function calls:
  3183 ;;		Nothing
  3184 ;; This function is called by:
  3185 ;;		_main
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188  055D                     _startThreeHoursTimer:	
  3189                           
  3190                           ;common.c: 486: if(( 0 == uiSmallTimer ) && ( 0 == bSmallTimerStartFlag ))
  3191                           
  3192                           ; Regs used in _startThreeHoursTimer: [wreg+status,2+status,0]
  3193  055D  0842               	movf	_uiSmallTimer+1,w
  3194  055E  0441               	iorwf	_uiSmallTimer,w
  3195  055F  1D03               	skipz
  3196  0560  0008               	return
  3197  0561  08CD               	movf	_bSmallTimerStartFlag,f
  3198  0562  1D03               	skipz
  3199  0563  0008               	return
  3200                           
  3201                           ;common.c: 487: {
  3202                           ;common.c: 488: uiSmallTimer = uiSetTime;
  3203  0564  0836               	movf	startThreeHoursTimer@uiSetTime+1,w
  3204  0565  00C2               	movwf	_uiSmallTimer+1
  3205  0566  0835               	movf	startThreeHoursTimer@uiSetTime,w
  3206  0567  00C1               	movwf	_uiSmallTimer
  3207                           
  3208                           ;common.c: 489: bSmallTimerStartFlag = 1;
  3209  0568  01CD               	clrf	_bSmallTimerStartFlag
  3210  0569  0ACD               	incf	_bSmallTimerStartFlag,f
  3211  056A  0008               	return
  3212  056B                     __end_of_startThreeHoursTimer:	
  3213                           
  3214                           	psect	text1245
  3215  05D3                     __ptext1245:	
  3216 ;; =============== function _startThreeHoursTimer ends ============
  3217                           
  3218                           
  3219 ;; *************** function _clearTwelveHoursTimer *****************
  3220 ;; Defined at:
  3221 ;;		line 458 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3222 ;; Parameters:    Size  Location     Type
  3223 ;;		None
  3224 ;; Auto vars:     Size  Location     Type
  3225 ;;		None
  3226 ;; Return value:  Size  Location     Type
  3227 ;;		None               void
  3228 ;; Registers used:
  3229 ;;		status,2
  3230 ;; Tracked objects:
  3231 ;;		On entry : 60/0
  3232 ;;		On exit  : 60/0
  3233 ;;		Unchanged: FFF9F/0
  3234 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3235 ;;      Params:         0       0       0       0       0
  3236 ;;      Locals:         0       0       0       0       0
  3237 ;;      Temps:          0       0       0       0       0
  3238 ;;      Totals:         0       0       0       0       0
  3239 ;;Total ram usage:        0 bytes
  3240 ;; Hardware stack levels used:    1
  3241 ;; Hardware stack levels required when called:    3
  3242 ;; This function calls:
  3243 ;;		Nothing
  3244 ;; This function is called by:
  3245 ;;		_main
  3246 ;; This function uses a non-reentrant model
  3247 ;;
  3248  05D3                     _clearTwelveHoursTimer:	
  3249                           
  3250                           ;common.c: 459: uiBigTimer = 0;
  3251                           
  3252                           ; Regs used in _clearTwelveHoursTimer: [status,2]
  3253  05D3  01BD               	clrf	_uiBigTimer
  3254  05D4  01BE               	clrf	_uiBigTimer+1
  3255                           
  3256                           ;common.c: 460: bBigTimerStartFlag = 0;
  3257  05D5  01CB               	clrf	_bBigTimerStartFlag
  3258  05D6  0008               	return
  3259  05D7                     __end_of_clearTwelveHoursTimer:	
  3260                           
  3261                           	psect	text1246
  3262  059C                     __ptext1246:	
  3263 ;; =============== function _clearTwelveHoursTimer ends ============
  3264                           
  3265                           
  3266 ;; *************** function _isFinishedTwelveHoursTimer *****************
  3267 ;; Defined at:
  3268 ;;		line 557 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3269 ;; Parameters:    Size  Location     Type
  3270 ;;		None
  3271 ;; Auto vars:     Size  Location     Type
  3272 ;;		None
  3273 ;; Return value:  Size  Location     Type
  3274 ;;                  1    wreg      unsigned char 
  3275 ;; Registers used:
  3276 ;;		wreg, status,2, status,0
  3277 ;; Tracked objects:
  3278 ;;		On entry : 60/0
  3279 ;;		On exit  : 60/0
  3280 ;;		Unchanged: FFF9F/0
  3281 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3282 ;;      Params:         0       0       0       0       0
  3283 ;;      Locals:         0       0       0       0       0
  3284 ;;      Temps:          0       0       0       0       0
  3285 ;;      Totals:         0       0       0       0       0
  3286 ;;Total ram usage:        0 bytes
  3287 ;; Hardware stack levels used:    1
  3288 ;; Hardware stack levels required when called:    3
  3289 ;; This function calls:
  3290 ;;		Nothing
  3291 ;; This function is called by:
  3292 ;;		_main
  3293 ;; This function uses a non-reentrant model
  3294 ;;
  3295  059C                     _isFinishedTwelveHoursTimer:	
  3296                           
  3297                           ;common.c: 558: if(( uiBigTimer == 0 ) && bBigTimerStartFlag )
  3298                           
  3299                           ; Regs used in _isFinishedTwelveHoursTimer: [wreg+status,2+status,0]
  3300  059C  083E               	movf	_uiBigTimer+1,w
  3301  059D  043D               	iorwf	_uiBigTimer,w
  3302  059E  1D03               	skipz
  3303  059F  3400               	retlw	0
  3304  05A0  084B               	movf	_bBigTimerStartFlag,w
  3305  05A1  1903               	btfsc	3,2
  3306  05A2  3400               	retlw	0
  3307  05A3  3001               	movlw	1
  3308                           
  3309                           ;common.c: 559: {
  3310                           ;common.c: 560: bBigTimerStartFlag = 0;
  3311  05A4  01CB               	clrf	_bBigTimerStartFlag
  3312                           
  3313                           ;common.c: 561: return 1;
  3314  05A5  0008               	return
  3315  05A6                     __end_of_isFinishedTwelveHoursTimer:	
  3316                           ;common.c: 563: else
  3317                           ;common.c: 564: return 0;
  3318                           
  3319                           
  3320                           	psect	text1247
  3321  056B                     __ptext1247:	
  3322 ;; =============== function _isFinishedTwelveHoursTimer ends ============
  3323                           
  3324                           
  3325 ;; *************** function _startTwelveHourTimer *****************
  3326 ;; Defined at:
  3327 ;;		line 444 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3328 ;; Parameters:    Size  Location     Type
  3329 ;;  uiSetTime       2   21[BANK0 ] unsigned int 
  3330 ;; Auto vars:     Size  Location     Type
  3331 ;;		None
  3332 ;; Return value:  Size  Location     Type
  3333 ;;		None               void
  3334 ;; Registers used:
  3335 ;;		wreg, status,2, status,0
  3336 ;; Tracked objects:
  3337 ;;		On entry : 60/0
  3338 ;;		On exit  : 60/0
  3339 ;;		Unchanged: FFF9F/0
  3340 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3341 ;;      Params:         0       2       0       0       0
  3342 ;;      Locals:         0       0       0       0       0
  3343 ;;      Temps:          0       0       0       0       0
  3344 ;;      Totals:         0       2       0       0       0
  3345 ;;Total ram usage:        2 bytes
  3346 ;; Hardware stack levels used:    1
  3347 ;; Hardware stack levels required when called:    3
  3348 ;; This function calls:
  3349 ;;		Nothing
  3350 ;; This function is called by:
  3351 ;;		_main
  3352 ;; This function uses a non-reentrant model
  3353 ;;
  3354  056B                     _startTwelveHourTimer:	
  3355                           
  3356                           ;common.c: 445: if((0 == uiBigTimer) && ( 0 == bBigTimerStartFlag))
  3357                           
  3358                           ; Regs used in _startTwelveHourTimer: [wreg+status,2+status,0]
  3359  056B  083E               	movf	_uiBigTimer+1,w
  3360  056C  043D               	iorwf	_uiBigTimer,w
  3361  056D  1D03               	skipz
  3362  056E  0008               	return
  3363  056F  08CB               	movf	_bBigTimerStartFlag,f
  3364  0570  1D03               	skipz
  3365  0571  0008               	return
  3366                           
  3367                           ;common.c: 446: {
  3368                           ;common.c: 447: uiBigTimer = uiSetTime;
  3369  0572  0836               	movf	startTwelveHourTimer@uiSetTime+1,w
  3370  0573  00BE               	movwf	_uiBigTimer+1
  3371  0574  0835               	movf	startTwelveHourTimer@uiSetTime,w
  3372  0575  00BD               	movwf	_uiBigTimer
  3373                           
  3374                           ;common.c: 448: bBigTimerStartFlag = 1;
  3375  0576  01CB               	clrf	_bBigTimerStartFlag
  3376  0577  0ACB               	incf	_bBigTimerStartFlag,f
  3377  0578  0008               	return
  3378  0579                     __end_of_startTwelveHourTimer:	
  3379                           
  3380                           	psect	text1248
  3381  05D7                     __ptext1248:	
  3382 ;; =============== function _startTwelveHourTimer ends ============
  3383                           
  3384                           
  3385 ;; *************** function _clearTwentyMinTimer *****************
  3386 ;; Defined at:
  3387 ;;		line 478 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3388 ;; Parameters:    Size  Location     Type
  3389 ;;		None
  3390 ;; Auto vars:     Size  Location     Type
  3391 ;;		None
  3392 ;; Return value:  Size  Location     Type
  3393 ;;		None               void
  3394 ;; Registers used:
  3395 ;;		status,2
  3396 ;; Tracked objects:
  3397 ;;		On entry : 60/0
  3398 ;;		On exit  : 60/0
  3399 ;;		Unchanged: FFF9F/0
  3400 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3401 ;;      Params:         0       0       0       0       0
  3402 ;;      Locals:         0       0       0       0       0
  3403 ;;      Temps:          0       0       0       0       0
  3404 ;;      Totals:         0       0       0       0       0
  3405 ;;Total ram usage:        0 bytes
  3406 ;; Hardware stack levels used:    1
  3407 ;; Hardware stack levels required when called:    3
  3408 ;; This function calls:
  3409 ;;		Nothing
  3410 ;; This function is called by:
  3411 ;;		_main
  3412 ;; This function uses a non-reentrant model
  3413 ;;
  3414  05D7                     _clearTwentyMinTimer:	
  3415                           
  3416                           ;common.c: 479: uiTwentyMinTimer = 0;
  3417                           
  3418                           ; Regs used in _clearTwentyMinTimer: [status,2]
  3419  05D7  01C3               	clrf	_uiTwentyMinTimer
  3420  05D8  01C4               	clrf	_uiTwentyMinTimer+1
  3421                           
  3422                           ;common.c: 480: bTwentyMinStartFlag = 0;
  3423  05D9  01CE               	clrf	_bTwentyMinStartFlag
  3424  05DA  0008               	return
  3425  05DB                     __end_of_clearTwentyMinTimer:	
  3426                           
  3427                           	psect	text1249
  3428  05A6                     __ptext1249:	
  3429 ;; =============== function _clearTwentyMinTimer ends ============
  3430                           
  3431                           
  3432 ;; *************** function _isFinishedTwentyMinTimer *****************
  3433 ;; Defined at:
  3434 ;;		line 533 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3435 ;; Parameters:    Size  Location     Type
  3436 ;;		None
  3437 ;; Auto vars:     Size  Location     Type
  3438 ;;		None
  3439 ;; Return value:  Size  Location     Type
  3440 ;;                  1    wreg      unsigned char 
  3441 ;; Registers used:
  3442 ;;		wreg, status,2, status,0
  3443 ;; Tracked objects:
  3444 ;;		On entry : 60/0
  3445 ;;		On exit  : 60/0
  3446 ;;		Unchanged: FFF9F/0
  3447 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3448 ;;      Params:         0       0       0       0       0
  3449 ;;      Locals:         0       0       0       0       0
  3450 ;;      Temps:          0       0       0       0       0
  3451 ;;      Totals:         0       0       0       0       0
  3452 ;;Total ram usage:        0 bytes
  3453 ;; Hardware stack levels used:    1
  3454 ;; Hardware stack levels required when called:    3
  3455 ;; This function calls:
  3456 ;;		Nothing
  3457 ;; This function is called by:
  3458 ;;		_main
  3459 ;; This function uses a non-reentrant model
  3460 ;;
  3461  05A6                     _isFinishedTwentyMinTimer:	
  3462                           
  3463                           ;common.c: 534: if(( 0 == uiTwentyMinTimer ) && bTwentyMinStartFlag )
  3464                           
  3465                           ; Regs used in _isFinishedTwentyMinTimer: [wreg+status,2+status,0]
  3466  05A6  0844               	movf	_uiTwentyMinTimer+1,w
  3467  05A7  0443               	iorwf	_uiTwentyMinTimer,w
  3468  05A8  1D03               	skipz
  3469  05A9  3400               	retlw	0
  3470  05AA  084E               	movf	_bTwentyMinStartFlag,w
  3471  05AB  1903               	btfsc	3,2
  3472  05AC  3400               	retlw	0
  3473  05AD  3001               	movlw	1
  3474                           
  3475                           ;common.c: 535: {
  3476                           ;common.c: 536: bTwentyMinStartFlag = 0;
  3477  05AE  01CE               	clrf	_bTwentyMinStartFlag
  3478                           
  3479                           ;common.c: 537: return 1;
  3480  05AF  0008               	return
  3481  05B0                     __end_of_isFinishedTwentyMinTimer:	
  3482                           ;common.c: 539: else
  3483                           ;common.c: 540: return 0;
  3484                           
  3485                           
  3486                           	psect	text1250
  3487  05E5                     __ptext1250:	
  3488 ;; =============== function _isFinishedTwentyMinTimer ends ============
  3489                           
  3490                           
  3491 ;; *************** function _clrSampeTime *****************
  3492 ;; Defined at:
  3493 ;;		line 603 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3494 ;; Parameters:    Size  Location     Type
  3495 ;;		None
  3496 ;; Auto vars:     Size  Location     Type
  3497 ;;		None
  3498 ;; Return value:  Size  Location     Type
  3499 ;;		None               void
  3500 ;; Registers used:
  3501 ;;		status,2
  3502 ;; Tracked objects:
  3503 ;;		On entry : 60/0
  3504 ;;		On exit  : 60/0
  3505 ;;		Unchanged: FFF9F/0
  3506 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3507 ;;      Params:         0       0       0       0       0
  3508 ;;      Locals:         0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0
  3510 ;;      Totals:         0       0       0       0       0
  3511 ;;Total ram usage:        0 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; Hardware stack levels required when called:    3
  3514 ;; This function calls:
  3515 ;;		Nothing
  3516 ;; This function is called by:
  3517 ;;		_main
  3518 ;; This function uses a non-reentrant model
  3519 ;;
  3520  05E5                     _clrSampeTime:	
  3521                           
  3522                           ;common.c: 604: timer.timer10msStopWatch = 0;
  3523                           
  3524                           ; Regs used in _clrSampeTime: [status,2]
  3525  05E5  01D1               	clrf	_timer
  3526  05E6  0008               	return
  3527  05E7                     __end_of_clrSampeTime:	
  3528                           
  3529                           	psect	text1251
  3530  05CA                     __ptext1251:	
  3531 ;; =============== function _clrSampeTime ends ============
  3532                           
  3533                           
  3534 ;; *************** function _isPermitSampleTime *****************
  3535 ;; Defined at:
  3536 ;;		line 593 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3537 ;; Parameters:    Size  Location     Type
  3538 ;;		None
  3539 ;; Auto vars:     Size  Location     Type
  3540 ;;		None
  3541 ;; Return value:  Size  Location     Type
  3542 ;;                  1    wreg      unsigned char 
  3543 ;; Registers used:
  3544 ;;		wreg
  3545 ;; Tracked objects:
  3546 ;;		On entry : 60/0
  3547 ;;		On exit  : 60/0
  3548 ;;		Unchanged: FFF9F/0
  3549 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3550 ;;      Params:         0       0       0       0       0
  3551 ;;      Locals:         0       0       0       0       0
  3552 ;;      Temps:          0       0       0       0       0
  3553 ;;      Totals:         0       0       0       0       0
  3554 ;;Total ram usage:        0 bytes
  3555 ;; Hardware stack levels used:    1
  3556 ;; Hardware stack levels required when called:    3
  3557 ;; This function calls:
  3558 ;;		Nothing
  3559 ;; This function is called by:
  3560 ;;		_main
  3561 ;; This function uses a non-reentrant model
  3562 ;;
  3563  05CA                     _isPermitSampleTime:	
  3564                           
  3565                           ;common.c: 594: if(timer.timer10msStopWatch >= 10)
  3566                           
  3567                           ; Regs used in _isPermitSampleTime: [wreg]
  3568  05CA  300A               	movlw	10
  3569  05CB  0251               	subwf	_timer,w
  3570  05CC  1803               	btfsc	3,0
  3571                           
  3572                           ;common.c: 595: {
  3573                           ;common.c: 596: return 1;
  3574  05CD  3401               	retlw	1
  3575                           
  3576                           ;common.c: 598: else
  3577                           ;common.c: 599: return 0;
  3578  05CE  3400               	retlw	0
  3579  05CF                     __end_of_isPermitSampleTime:	
  3580                           
  3581                           	psect	text1253
  3582  0579                     __ptext1253:	
  3583 ;; =============== function _adc_start ends ============
  3584                           
  3585                           
  3586 ;; *************** function _startTwentyMinTimer *****************
  3587 ;; Defined at:
  3588 ;;		line 523 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3589 ;; Parameters:    Size  Location     Type
  3590 ;;  uiSetValue      2   21[BANK0 ] unsigned int 
  3591 ;; Auto vars:     Size  Location     Type
  3592 ;;		None
  3593 ;; Return value:  Size  Location     Type
  3594 ;;		None               void
  3595 ;; Registers used:
  3596 ;;		wreg, status,2, status,0
  3597 ;; Tracked objects:
  3598 ;;		On entry : 17F/0
  3599 ;;		On exit  : 17F/0
  3600 ;;		Unchanged: FFE80/0
  3601 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3602 ;;      Params:         0       2       0       0       0
  3603 ;;      Locals:         0       0       0       0       0
  3604 ;;      Temps:          0       0       0       0       0
  3605 ;;      Totals:         0       2       0       0       0
  3606 ;;Total ram usage:        2 bytes
  3607 ;; Hardware stack levels used:    1
  3608 ;; Hardware stack levels required when called:    3
  3609 ;; This function calls:
  3610 ;;		Nothing
  3611 ;; This function is called by:
  3612 ;;		_main
  3613 ;; This function uses a non-reentrant model
  3614 ;;
  3615  0579                     _startTwentyMinTimer:	
  3616                           
  3617                           ;common.c: 524: if(( 0 == uiTwentyMinTimer) && ( 0 == bTwentyMinStartFlag))
  3618                           
  3619                           ; Regs used in _startTwentyMinTimer: [wreg+status,2+status,0]
  3620  0579  0844               	movf	_uiTwentyMinTimer+1,w
  3621  057A  0443               	iorwf	_uiTwentyMinTimer,w
  3622  057B  1D03               	skipz
  3623  057C  0008               	return
  3624  057D  08CE               	movf	_bTwentyMinStartFlag,f
  3625  057E  1D03               	skipz
  3626  057F  0008               	return
  3627                           
  3628                           ;common.c: 525: {
  3629                           ;common.c: 526: uiTwentyMinTimer = uiSetValue;
  3630  0580  0836               	movf	startTwentyMinTimer@uiSetValue+1,w
  3631  0581  00C4               	movwf	_uiTwentyMinTimer+1
  3632  0582  0835               	movf	startTwentyMinTimer@uiSetValue,w
  3633  0583  00C3               	movwf	_uiTwentyMinTimer
  3634                           
  3635                           ;common.c: 527: bTwentyMinStartFlag = 1;
  3636  0584  01CE               	clrf	_bTwentyMinStartFlag
  3637  0585  0ACE               	incf	_bTwentyMinStartFlag,f
  3638  0586  0008               	return
  3639  0587                     __end_of_startTwentyMinTimer:	
  3640                           
  3641                           	psect	text1255
  3642  05E2                     __ptext1255:	
  3643 ;; =============== function _adc_test_init ends ============
  3644                           
  3645                           
  3646 ;; *************** function _timer1_interrupt_config *****************
  3647 ;; Defined at:
  3648 ;;		line 333 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;		None
  3651 ;; Auto vars:     Size  Location     Type
  3652 ;;		None
  3653 ;; Return value:  Size  Location     Type
  3654 ;;		None               void
  3655 ;; Registers used:
  3656 ;;		None
  3657 ;; Tracked objects:
  3658 ;;		On entry : 17F/20
  3659 ;;		On exit  : 17F/20
  3660 ;;		Unchanged: FFE80/0
  3661 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3662 ;;      Params:         0       0       0       0       0
  3663 ;;      Locals:         0       0       0       0       0
  3664 ;;      Temps:          0       0       0       0       0
  3665 ;;      Totals:         0       0       0       0       0
  3666 ;;Total ram usage:        0 bytes
  3667 ;; Hardware stack levels used:    1
  3668 ;; Hardware stack levels required when called:    3
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		_main
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675  05E2                     _timer1_interrupt_config:	
  3676                           
  3677                           ;common.c: 334: GIE = 1;
  3678                           
  3679                           ; Regs used in _timer1_interrupt_config: []
  3680  05E2  178B               	bsf	11,7
  3681                           
  3682                           ;common.c: 335: PEIE = 1;
  3683  05E3  170B               	bsf	11,6
  3684  05E4  0008               	return
  3685  05E5                     __end_of_timer1_interrupt_config:	
  3686                           
  3687                           	psect	text1256
  3688  05B0                     __ptext1256:	
  3689 ;; =============== function _timer1_interrupt_config ends ============
  3690                           
  3691                           
  3692 ;; *************** function _timer1_config *****************
  3693 ;; Defined at:
  3694 ;;		line 321 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3695 ;; Parameters:    Size  Location     Type
  3696 ;;		None
  3697 ;; Auto vars:     Size  Location     Type
  3698 ;;		None
  3699 ;; Return value:  Size  Location     Type
  3700 ;;		None               void
  3701 ;; Registers used:
  3702 ;;		wreg
  3703 ;; Tracked objects:
  3704 ;;		On entry : 17F/40
  3705 ;;		On exit  : 17F/20
  3706 ;;		Unchanged: FFE80/0
  3707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3708 ;;      Params:         0       0       0       0       0
  3709 ;;      Locals:         0       0       0       0       0
  3710 ;;      Temps:          0       0       0       0       0
  3711 ;;      Totals:         0       0       0       0       0
  3712 ;;Total ram usage:        0 bytes
  3713 ;; Hardware stack levels used:    1
  3714 ;; Hardware stack levels required when called:    3
  3715 ;; This function calls:
  3716 ;;		Nothing
  3717 ;; This function is called by:
  3718 ;;		_main
  3719 ;; This function uses a non-reentrant model
  3720 ;;
  3721  05B0                     _timer1_config:	
  3722                           
  3723                           ;common.c: 323: TMR1H=0xCF;
  3724                           
  3725                           ; Regs used in _timer1_config: [wreg]
  3726  05B0  30CF               	movlw	207
  3727  05B1  1303               	bcf	3,6	;RP1=0, select bank0
  3728  05B2  008F               	movwf	15	;volatile
  3729                           
  3730                           ;common.c: 324: TMR1L=0x2C;
  3731  05B3  302C               	movlw	44
  3732  05B4  008E               	movwf	14	;volatile
  3733                           
  3734                           ;common.c: 325: T1CON=0xE1;
  3735  05B5  30E1               	movlw	225
  3736  05B6  0090               	movwf	16	;volatile
  3737                           
  3738                           ;common.c: 326: TMR1IE=1;
  3739  05B7  1683               	bsf	3,5	;RP0=1, select bank1
  3740  05B8  140C               	bsf	12,0
  3741  05B9  0008               	return
  3742  05BA                     __end_of_timer1_config:	
  3743                           
  3744                           	psect	text1257
  3745  05C2                     __ptext1257:	
  3746 ;; =============== function _timer1_config ends ============
  3747                           
  3748                           
  3749 ;; *************** function _clock_config *****************
  3750 ;; Defined at:
  3751 ;;		line 313 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3752 ;; Parameters:    Size  Location     Type
  3753 ;;		None
  3754 ;; Auto vars:     Size  Location     Type
  3755 ;;		None
  3756 ;; Return value:  Size  Location     Type
  3757 ;;		None               void
  3758 ;; Registers used:
  3759 ;;		wreg, status,2
  3760 ;; Tracked objects:
  3761 ;;		On entry : 17F/20
  3762 ;;		On exit  : 17F/40
  3763 ;;		Unchanged: FFE80/0
  3764 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3765 ;;      Params:         0       0       0       0       0
  3766 ;;      Locals:         0       0       0       0       0
  3767 ;;      Temps:          0       0       0       0       0
  3768 ;;      Totals:         0       0       0       0       0
  3769 ;;Total ram usage:        0 bytes
  3770 ;; Hardware stack levels used:    1
  3771 ;; Hardware stack levels required when called:    3
  3772 ;; This function calls:
  3773 ;;		Nothing
  3774 ;; This function is called by:
  3775 ;;		_main
  3776 ;; This function uses a non-reentrant model
  3777 ;;
  3778  05C2                     _clock_config:	
  3779                           
  3780                           ;common.c: 315: CLKPR = 0x80;
  3781                           
  3782                           ; Regs used in _clock_config: [wreg+status,2]
  3783  05C2  3080               	movlw	128
  3784  05C3  1283               	bcf	3,5	;RP0=0, select bank2
  3785  05C4  1703               	bsf	3,6	;RP1=1, select bank2
  3786  05C5  0088               	movwf	8	;volatile
  3787                           
  3788                           ;common.c: 316: CLKPR = 0x00;
  3789  05C6  0188               	clrf	8	;volatile
  3790  05C7                     l1558:	
  3791                           ;common.c: 317: while(CLKPCE);
  3792                           
  3793  05C7  1F88               	btfss	8,7
  3794  05C8  0008               	return
  3795  05C9  2DC7               	goto	l1558
  3796  05CA                     __end_of_clock_config:	
  3797                           
  3798                           	psect	text1258
  3799  05E7                     __ptext1258:	
  3800 ;; =============== function _clock_config ends ============
  3801                           
  3802                           
  3803 ;; *************** function _reset *****************
  3804 ;; Defined at:
  3805 ;;		line 294 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  3806 ;; Parameters:    Size  Location     Type
  3807 ;;		None
  3808 ;; Auto vars:     Size  Location     Type
  3809 ;;		None
  3810 ;; Return value:  Size  Location     Type
  3811 ;;		None               void
  3812 ;; Registers used:
  3813 ;;		None
  3814 ;; Tracked objects:
  3815 ;;		On entry : 40/20
  3816 ;;		On exit  : 40/20
  3817 ;;		Unchanged: FFFFFFBF/0
  3818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3819 ;;      Params:         0       0       0       0       0
  3820 ;;      Locals:         0       0       0       0       0
  3821 ;;      Temps:          0       0       0       0       0
  3822 ;;      Totals:         0       0       0       0       0
  3823 ;;Total ram usage:        0 bytes
  3824 ;; Hardware stack levels used:    1
  3825 ;; Hardware stack levels required when called:    3
  3826 ;; This function calls:
  3827 ;;		Nothing
  3828 ;; This function is called by:
  3829 ;;		_main
  3830 ;; This function uses a non-reentrant model
  3831 ;;
  3832  05E7                     _reset:	
  3833  05E7                     l722:	
  3834                           ; Regs used in _reset: []
  3835                           ;main.c: 296: while(1);
  3836                           
  3837  05E7  2DE7               	goto	l722
  3838                           
  3839                           	psect	text1259
  3840  05DB                     __ptext1259:	
  3841  05DB                     __end_of_reset:	
  3842                           
  3843 ;; =============== function _reset ends ============
  3844 ;; *************** function _selectAdChannel *****************
  3845 ;; Defined at:
  3846 ;;		line 283 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  3847 ;; Parameters:    Size  Location     Type
  3848 ;;		None
  3849 ;; Auto vars:     Size  Location     Type
  3850 ;;		None
  3851 ;; Return value:  Size  Location     Type
  3852 ;;		None               void
  3853 ;; Registers used:
  3854 ;;		None
  3855 ;; Tracked objects:
  3856 ;;		On entry : 17F/0
  3857 ;;		On exit  : 17F/20
  3858 ;;		Unchanged: FFE80/0
  3859 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3860 ;;      Params:         0       0       0       0       0
  3861 ;;      Locals:         0       0       0       0       0
  3862 ;;      Temps:          0       0       0       0       0
  3863 ;;      Totals:         0       0       0       0       0
  3864 ;;Total ram usage:        0 bytes
  3865 ;; Hardware stack levels used:    1
  3866 ;; Hardware stack levels required when called:    3
  3867 ;; This function calls:
  3868 ;;		Nothing
  3869 ;; This function is called by:
  3870 ;;		_main
  3871 ;; This function uses a non-reentrant model
  3872 ;;
  3873  05DB                     _selectAdChannel:	
  3874                           
  3875                           ;main.c: 285: TRISB0 = 1;
  3876                           
  3877                           ; Regs used in _selectAdChannel: []
  3878  05DB  1683               	bsf	3,5	;RP0=1, select bank1
  3879  05DC  1406               	bsf	6,0
  3880                           
  3881                           ;main.c: 286: TRISB1 = 1;
  3882  05DD  1486               	bsf	6,1
  3883  05DE  0008               	return
  3884  05DF                     __end_of_selectAdChannel:	
  3885                           
  3886                           	psect	text1260
  3887  0526                     __ptext1260:	
  3888 ;; =============== function _selectAdChannel ends ============
  3889                           
  3890                           
  3891 ;; *************** function _pwm_start *****************
  3892 ;; Defined at:
  3893 ;;		line 231 in file "D:\develop\AK7030-good\AK7030-OTP\main.c"
  3894 ;; Parameters:    Size  Location     Type
  3895 ;;  ucPulseWidth    1    wreg     unsigned char 
  3896 ;;  ucPulseFrequ    1   21[BANK0 ] unsigned char 
  3897 ;; Auto vars:     Size  Location     Type
  3898 ;;  ucPulseWidth    1   22[BANK0 ] unsigned char 
  3899 ;; Return value:  Size  Location     Type
  3900 ;;		None               void
  3901 ;; Registers used:
  3902 ;;		wreg, status,2, status,0
  3903 ;; Tracked objects:
  3904 ;;		On entry : 60/0
  3905 ;;		On exit  : 60/0
  3906 ;;		Unchanged: FFF9F/0
  3907 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3908 ;;      Params:         0       1       0       0       0
  3909 ;;      Locals:         0       1       0       0       0
  3910 ;;      Temps:          0       0       0       0       0
  3911 ;;      Totals:         0       2       0       0       0
  3912 ;;Total ram usage:        2 bytes
  3913 ;; Hardware stack levels used:    1
  3914 ;; Hardware stack levels required when called:    3
  3915 ;; This function calls:
  3916 ;;		Nothing
  3917 ;; This function is called by:
  3918 ;;		_main
  3919 ;; This function uses a non-reentrant model
  3920 ;;
  3921  0526                     _pwm_start:	
  3922                           
  3923                           ; Regs used in _pwm_start: [wreg+status,2+status,0]
  3924                           ;pwm_start@ucPulseWidth stored from wreg
  3925  0526  00B6               	movwf	pwm_start@ucPulseWidth
  3926                           
  3927                           ;main.c: 233: CCP1CON&= 0xf0;
  3928  0527  30F0               	movlw	240
  3929  0528  0597               	andwf	23,f	;volatile
  3930                           
  3931                           ;main.c: 235: T2CON=0x04;
  3932  0529  3004               	movlw	4
  3933  052A  0092               	movwf	18	;volatile
  3934                           
  3935                           ;main.c: 236: PR2 = ucPulseFrequency;
  3936  052B  0835               	movf	pwm_start@ucPulseFrequency,w
  3937  052C  1683               	bsf	3,5	;RP0=1, select bank1
  3938  052D  0092               	movwf	18	;volatile
  3939                           
  3940                           ;main.c: 237: CCPR1L = ucPulseWidth;
  3941  052E  1283               	bcf	3,5	;RP0=0, select bank0
  3942  052F  0836               	movf	pwm_start@ucPulseWidth,w
  3943  0530  0095               	movwf	21	;volatile
  3944                           
  3945                           ;main.c: 238: CCP1CON=0x00;
  3946  0531  0197               	clrf	23	;volatile
  3947                           
  3948                           ;main.c: 240: TRISB2=0;
  3949  0532  1683               	bsf	3,5	;RP0=1, select bank1
  3950  0533  300C               	movlw	12
  3951  0534  1106               	bcf	6,2
  3952                           
  3953                           ;main.c: 241: PBOD2 = 0;
  3954  0535  1703               	bsf	3,6	;RP1=1, select bank3
  3955  0536  1108               	bcf	8,2
  3956                           
  3957                           ;main.c: 243: CCP1CON|= 0x0c;
  3958  0537  1283               	bcf	3,5	;RP0=0, select bank0
  3959  0538  1303               	bcf	3,6	;RP1=0, select bank0
  3960  0539  0497               	iorwf	23,f	;volatile
  3961  053A  0008               	return
  3962  053B                     __end_of_pwm_start:	
  3963                           
  3964                           	psect	text1268
  3965  0013                     __ptext1268:	
  3966 ;; =============== function _initPB3 ends ============
  3967                           
  3968                           
  3969 ;; *************** function _ISR *****************
  3970 ;; Defined at:
  3971 ;;		line 611 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  3972 ;; Parameters:    Size  Location     Type
  3973 ;;		None
  3974 ;; Auto vars:     Size  Location     Type
  3975 ;;		None
  3976 ;; Return value:  Size  Location     Type
  3977 ;;		None               void
  3978 ;; Registers used:
  3979 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  3980 ;; Tracked objects:
  3981 ;;		On entry : 0/0
  3982 ;;		On exit  : 60/0
  3983 ;;		Unchanged: FFE00/0
  3984 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  3985 ;;      Params:         0       0       0       0       0
  3986 ;;      Locals:         0       0       0       0       0
  3987 ;;      Temps:          4       0       0       0       0
  3988 ;;      Totals:         4       0       0       0       0
  3989 ;;Total ram usage:        4 bytes
  3990 ;; Hardware stack levels used:    1
  3991 ;; Hardware stack levels required when called:    2
  3992 ;; This function calls:
  3993 ;;		i1_setAD_ConvertFlag
  3994 ;;		_adc_get
  3995 ;;		_vPutSampleDataIntoTable
  3996 ;; This function is called by:
  3997 ;;		Interrupt level 1
  3998 ;; This function uses a non-reentrant model
  3999 ;;
  4000  0013                     _ISR:	
  4001                           
  4002                           ;common.c: 612: static unsigned char ucTimer1sCnt = 0;
  4003                           ;common.c: 615: if(TMR1IF == 1)
  4004  0013  1C0C               	btfss	12,0
  4005  0014  2851               	goto	i1l3762
  4006  0015  3064               	movlw	100
  4007                           
  4008                           ;common.c: 616: {
  4009                           ;common.c: 617: TMR1IF = 0 ;
  4010  0016  100C               	bcf	12,0
  4011                           
  4012                           ;common.c: 618: timer.timer10msStopWatch++;
  4013  0017  0AD1               	incf	_timer,f
  4014                           
  4015                           ;common.c: 619: ucTimer1sCnt++;
  4016  0018  0AC9               	incf	ISR@ucTimer1sCnt,f
  4017                           
  4018                           ;common.c: 623: if(ucTimer1sCnt >= 100)
  4019  0019  0249               	subwf	ISR@ucTimer1sCnt,w
  4020  001A  1C03               	skipc
  4021  001B  2851               	goto	i1l3762
  4022                           
  4023                           ;common.c: 624: {
  4024                           ;common.c: 625: ucTimer1sCnt = 0;
  4025  001C  01C9               	clrf	ISR@ucTimer1sCnt
  4026                           
  4027                           ;common.c: 626: if(uiBigTimer > 0)
  4028  001D  083E               	movf	_uiBigTimer+1,w
  4029  001E  043D               	iorwf	_uiBigTimer,w
  4030  001F  1903               	skipnz
  4031  0020  2827               	goto	i1l1661
  4032                           
  4033                           ;common.c: 627: uiBigTimer--;
  4034  0021  3001               	movlw	1
  4035  0022  02BD               	subwf	_uiBigTimer,f
  4036  0023  3000               	movlw	0
  4037  0024  1C03               	skipc
  4038  0025  03BE               	decf	_uiBigTimer+1,f
  4039  0026  02BE               	subwf	_uiBigTimer+1,f
  4040  0027                     i1l1661:	
  4041                           
  4042                           ;common.c: 629: if(uiSmallTimer)
  4043  0027  0842               	movf	_uiSmallTimer+1,w
  4044  0028  0441               	iorwf	_uiSmallTimer,w
  4045  0029  1903               	skipnz
  4046  002A  2831               	goto	i1l1662
  4047                           
  4048                           ;common.c: 630: uiSmallTimer--;
  4049  002B  3001               	movlw	1
  4050  002C  02C1               	subwf	_uiSmallTimer,f
  4051  002D  3000               	movlw	0
  4052  002E  1C03               	skipc
  4053  002F  03C2               	decf	_uiSmallTimer+1,f
  4054  0030  02C2               	subwf	_uiSmallTimer+1,f
  4055  0031                     i1l1662:	
  4056                           
  4057                           ;common.c: 632: if(uiTwentySecondsTimer)
  4058  0031  1683               	bsf	3,5	;RP0=1, select bank1
  4059  0032  0821               	movf	(_uiTwentySecondsTimer+1)^(0+128),w
  4060  0033  0420               	iorwf	_uiTwentySecondsTimer^(0+128),w
  4061  0034  1903               	skipnz
  4062  0035  283C               	goto	i1l1663
  4063                           
  4064                           ;common.c: 633: uiTwentySecondsTimer--;
  4065  0036  3001               	movlw	1
  4066  0037  02A0               	subwf	_uiTwentySecondsTimer^(0+128),f
  4067  0038  3000               	movlw	0
  4068  0039  1C03               	skipc
  4069  003A  03A1               	decf	(_uiTwentySecondsTimer+1)^(0+128),f
  4070  003B  02A1               	subwf	(_uiTwentySecondsTimer+1)^(0+128),f
  4071  003C                     i1l1663:	
  4072                           
  4073                           ;common.c: 635: if(uiTwentyMinTimer)
  4074  003C  1283               	bcf	3,5	;RP0=0, select bank0
  4075  003D  0844               	movf	_uiTwentyMinTimer+1,w
  4076  003E  0443               	iorwf	_uiTwentyMinTimer,w
  4077  003F  1903               	skipnz
  4078  0040  2847               	goto	i1l1664
  4079                           
  4080                           ;common.c: 636: uiTwentyMinTimer--;
  4081  0041  3001               	movlw	1
  4082  0042  02C3               	subwf	_uiTwentyMinTimer,f
  4083  0043  3000               	movlw	0
  4084  0044  1C03               	skipc
  4085  0045  03C4               	decf	_uiTwentyMinTimer+1,f
  4086  0046  02C4               	subwf	_uiTwentyMinTimer+1,f
  4087  0047                     i1l1664:	
  4088                           
  4089                           ;common.c: 638: if( uiOneHourTimer )
  4090  0047  0840               	movf	_uiOneHourTimer+1,w
  4091  0048  043F               	iorwf	_uiOneHourTimer,w
  4092  0049  1903               	skipnz
  4093  004A  2851               	goto	i1l3762
  4094                           
  4095                           ;common.c: 639: uiOneHourTimer--;
  4096  004B  3001               	movlw	1
  4097  004C  02BF               	subwf	_uiOneHourTimer,f
  4098  004D  3000               	movlw	0
  4099  004E  1C03               	skipc
  4100  004F  03C0               	decf	_uiOneHourTimer+1,f
  4101  0050  02C0               	subwf	_uiOneHourTimer+1,f
  4102  0051                     i1l3762:	
  4103                           
  4104                           ;common.c: 640: }
  4105                           ;common.c: 641: }
  4106                           ;common.c: 643: if(ADIF)
  4107  0051  1D0D               	btfss	13,2
  4108  0052  286C               	goto	i1l1669
  4109  0053  3001               	movlw	1
  4110                           
  4111                           ;common.c: 644: {
  4112                           ;common.c: 646: ADIF=0;
  4113  0054  110D               	bcf	13,2
  4114                           
  4115                           ;common.c: 647: setAD_ConvertFlag(1);
  4116  0055  2084  118A         	fcall	i1_setAD_ConvertFlag
  4117                           
  4118                           ;common.c: 649: if(sampleChannelSelect == 12)
  4119  0057  0859               	movf	_sampleChannelSelect,w
  4120  0058  3A0C               	xorlw	12
  4121  0059  1D03               	skipz
  4122  005A  2863               	goto	i1l3772
  4123                           
  4124                           ;common.c: 650: {
  4125                           ;common.c: 653: vPutSampleDataIntoTable(adc_get(),12);
  4126  005B  2079  118A         	fcall	_adc_get
  4127  005D  0871               	movf	?_adc_get+1,w
  4128  005E  00F7               	movwf	?_vPutSampleDataIntoTable+1
  4129  005F  0870               	movf	?_adc_get,w
  4130  0060  00F6               	movwf	?_vPutSampleDataIntoTable
  4131  0061  300C               	movlw	12
  4132  0062  286A               	goto	L13
  4133  0063                     i1l3772:	
  4134                           ;common.c: 657: }
  4135                           
  4136                           
  4137                           ;common.c: 658: else
  4138                           ;common.c: 659: {
  4139                           ;common.c: 663: vPutSampleDataIntoTable(adc_get(),13);
  4140  0063  2079  118A         	fcall	_adc_get
  4141  0065  0871               	movf	?_adc_get+1,w
  4142  0066  00F7               	movwf	?_vPutSampleDataIntoTable+1
  4143  0067  0870               	movf	?_adc_get,w
  4144  0068  00F6               	movwf	?_vPutSampleDataIntoTable
  4145  0069  300D               	movlw	13
  4146  006A                     L13:	
  4147  006A  00F8               	movwf	?_vPutSampleDataIntoTable+2
  4148  006B  2087               	fcall	_vPutSampleDataIntoTable
  4149  006C                     i1l1669:	
  4150  006C  087C               	movf	??_ISR+3,w
  4151  006D  1283               	bcf	3,5	;RP0=0, select bank0
  4152  006E  1303               	bcf	3,6	;RP1=0, select bank0
  4153  006F  00FF               	movwf	127
  4154  0070  087B               	movf	??_ISR+2,w
  4155  0071  008A               	movwf	10
  4156  0072  087A               	movf	??_ISR+1,w
  4157  0073  0084               	movwf	4
  4158  0074  0E79               	swapf	??_ISR^(0+-128),w
  4159  0075  0083               	movwf	3
  4160  0076  0EFE               	swapf	126,f
  4161  0077  0E7E               	swapf	126,w
  4162  0078  0009               	retfie
  4163  0079                     __end_of_ISR:	
  4164  0079                     __ptext1271:	
  4165 ;; =============== function i1_setAD_ConvertFlag ends ============
  4166                           
  4167                           
  4168 ;; *************** function _adc_get *****************
  4169 ;; Defined at:
  4170 ;;		line 106 in file "D:\develop\AK7030-good\AK7030-OTP\periph.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;  val             2    2[COMMON] unsigned int 
  4175 ;; Return value:  Size  Location     Type
  4176 ;;                  2    0[COMMON] unsigned int 
  4177 ;; Registers used:
  4178 ;;		wreg
  4179 ;; Tracked objects:
  4180 ;;		On entry : 60/0
  4181 ;;		On exit  : 60/20
  4182 ;;		Unchanged: FFF9F/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4184 ;;      Params:         2       0       0       0       0
  4185 ;;      Locals:         2       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0
  4187 ;;      Totals:         4       0       0       0       0
  4188 ;;Total ram usage:        4 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; This function calls:
  4191 ;;		Nothing
  4192 ;; This function is called by:
  4193 ;;		_ISR
  4194 ;; This function uses a non-reentrant model
  4195 ;;
  4196  0079                     _adc_get:	
  4197                           
  4198                           ;periph.c: 107: unsigned int val;
  4199                           ;periph.c: 108: val = (ADRESH<<8) | ADRESL;
  4200                           
  4201                           ; Regs used in _adc_get: [wreg]
  4202  0079  081E               	movf	30,w	;volatile
  4203  007A  00F3               	movwf	adc_get@val+1
  4204  007B  01F2               	clrf	adc_get@val
  4205  007C  1683               	bsf	3,5	;RP0=1, select bank1
  4206  007D  081E               	movf	30,w	;volatile
  4207  007E  04F2               	iorwf	adc_get@val,f
  4208                           
  4209                           ;periph.c: 109: return val;
  4210  007F  0873               	movf	adc_get@val+1,w
  4211  0080  00F1               	movwf	?_adc_get+1
  4212  0081  0872               	movf	adc_get@val,w
  4213  0082  00F0               	movwf	?_adc_get
  4214  0083  0008               	return
  4215  0084                     __end_of_adc_get:	
  4216  0084                     __ptext1270:	
  4217 ;; =============== function _vPutSampleDataIntoTable ends ============
  4218                           
  4219                           
  4220 ;; *************** function i1_setAD_ConvertFlag *****************
  4221 ;; Defined at:
  4222 ;;		line 347 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  4223 ;; Parameters:    Size  Location     Type
  4224 ;;  setAD_Conver    1    wreg     unsigned char 
  4225 ;; Auto vars:     Size  Location     Type
  4226 ;;  setAD_Conver    1    0[COMMON] unsigned char 
  4227 ;; Return value:  Size  Location     Type
  4228 ;;		None               void
  4229 ;; Registers used:
  4230 ;;		wreg
  4231 ;; Tracked objects:
  4232 ;;		On entry : 60/0
  4233 ;;		On exit  : 60/0
  4234 ;;		Unchanged: FFF9F/0
  4235 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4236 ;;      Params:         0       0       0       0       0
  4237 ;;      Locals:         1       0       0       0       0
  4238 ;;      Temps:          0       0       0       0       0
  4239 ;;      Totals:         1       0       0       0       0
  4240 ;;Total ram usage:        1 bytes
  4241 ;; Hardware stack levels used:    1
  4242 ;; This function calls:
  4243 ;;		Nothing
  4244 ;; This function is called by:
  4245 ;;		_ISR
  4246 ;; This function uses a non-reentrant model
  4247 ;;
  4248  0084                     i1_setAD_ConvertFlag:	
  4249                           
  4250                           ; Regs used in i1_setAD_ConvertFlag: [wreg]
  4251                           ;i1setAD_ConvertFlag@flag stored from wreg
  4252  0084  00F0               	movwf	i1setAD_ConvertFlag@flag
  4253                           
  4254                           ;common.c: 348: adc_convert_flag = flag;
  4255  0085  00CA               	movwf	_adc_convert_flag
  4256  0086  0008               	return
  4257  0087                     __end_ofi1_setAD_ConvertFlag:	
  4258  0087                     __ptext1269:	
  4259 ;; =============== function _ISR ends ============
  4260                           
  4261                           
  4262 ;; *************** function _vPutSampleDataIntoTable *****************
  4263 ;; Defined at:
  4264 ;;		line 165 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  4265 ;; Parameters:    Size  Location     Type
  4266 ;;  uiSampleData    2    6[COMMON] unsigned int 
  4267 ;;  channel         1    8[COMMON] unsigned char 
  4268 ;; Auto vars:     Size  Location     Type
  4269 ;;  uiDeviationV    2   17[BANK0 ] unsigned int 
  4270 ;;  uiAbstractVa    2   15[BANK0 ] unsigned int 
  4271 ;;  i               2   19[BANK0 ] int 
  4272 ;; Return value:  Size  Location     Type
  4273 ;;		None               void
  4274 ;; Registers used:
  4275 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  4276 ;; Tracked objects:
  4277 ;;		On entry : 60/20
  4278 ;;		On exit  : 0/0
  4279 ;;		Unchanged: FFE00/0
  4280 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4281 ;;      Params:         3       0       0       0       0
  4282 ;;      Locals:         0       6       0       0       0
  4283 ;;      Temps:          0       0       0       0       0
  4284 ;;      Totals:         3       6       0       0       0
  4285 ;;Total ram usage:        9 bytes
  4286 ;; Hardware stack levels used:    1
  4287 ;; Hardware stack levels required when called:    1
  4288 ;; This function calls:
  4289 ;;		_Filter
  4290 ;;		_getWaitResetFlag
  4291 ;;		_setPWM_Width
  4292 ;; This function is called by:
  4293 ;;		_ISR
  4294 ;; This function uses a non-reentrant model
  4295 ;;
  4296  0087                     _vPutSampleDataIntoTable:	
  4297                           
  4298                           ;common.c: 167: static unsigned char ucCh12Length = 0;
  4299                           ;common.c: 169: static unsigned char ucCh13Length = 0;
  4300                           ;common.c: 171: static unsigned char ucChannelFourteenthLength = 0;
  4301                           ;common.c: 172: static unsigned int uiCalWidthArrayNew = 0;
  4302                           ;common.c: 173: static unsigned int uiCalWidthArrayOld = 0;
  4303                           ;common.c: 174: if(channel == 12)
  4304                           
  4305                           ; Regs used in _vPutSampleDataIntoTable: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cs
      +                          tack]
  4306  0087  0878               	movf	vPutSampleDataIntoTable@channel,w
  4307  0088  3A0C               	xorlw	12
  4308  0089  1D03               	skipz
  4309  008A  2909               	goto	i1l3684
  4310                           
  4311                           ;common.c: 175: {
  4312                           ;common.c: 176: if(ucCh12Length < 3)
  4313  008B  3003               	movlw	3
  4314  008C  027D               	subwf	vPutSampleDataIntoTable@ucCh12Length,w
  4315  008D  1803               	skipnc
  4316  008E  2903               	goto	i1l3680
  4317                           
  4318                           ;common.c: 177: {
  4319                           ;common.c: 178: uiSampleCh12[ucCh12Length] = uiSampleData;
  4320  008F  1003               	clrc
  4321  0090  0D7D               	rlf	vPutSampleDataIntoTable@ucCh12Length,w
  4322  0091  3EAC               	addlw	_uiSampleCh12& (0+255)
  4323  0092  21E5  118A         	fcall	PL2	;call to abstracted procedure
  4324                           
  4325                           ;common.c: 180: ucCh12Length++;
  4326  0094  0AFD               	incf	vPutSampleDataIntoTable@ucCh12Length,f
  4327                           
  4328                           ;common.c: 182: if( 3 == ucCh12Length )
  4329  0095  087D               	movf	vPutSampleDataIntoTable@ucCh12Length,w
  4330  0096  3A03               	xorlw	3
  4331  0097  1D03               	skipz
  4332  0098  0008               	return
  4333  0099  30AC               	movlw	_uiSampleCh12& (0+255)
  4334                           
  4335                           ;common.c: 183: {
  4336                           ;common.c: 184: ucCh12Length = 0;
  4337  009A  01FD               	clrf	vPutSampleDataIntoTable@ucCh12Length
  4338                           
  4339                           ;common.c: 188: static unsigned char bInitArrayFlag = 0;
  4340                           ;common.c: 190: static unsigned int uiCalWidthArray[1],uiCalWidthCnt = 0;
  4341                           ;common.c: 192: static unsigned char uiInitWidth = 75;
  4342                           ;common.c: 194: uiCalWidthArrayNew = Filter(uiSampleCh12);
  4343  009B  215C  118A         	fcall	_Filter
  4344  009D  0871               	movf	?_Filter+1,w
  4345  009E  00C6               	movwf	vPutSampleDataIntoTable@uiCalWidthArrayNew+1
  4346  009F  0870               	movf	?_Filter,w
  4347  00A0  00C5               	movwf	vPutSampleDataIntoTable@uiCalWidthArrayNew
  4348                           
  4349                           ;common.c: 198: if( uiCalWidthArrayNew >= uiCalWidthArrayOld)
  4350  00A1  0848               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld+1,w
  4351  00A2  0246               	subwf	vPutSampleDataIntoTable@uiCalWidthArrayNew+1,w
  4352  00A3  1D03               	skipz
  4353  00A4  28A7               	goto	u123_25
  4354  00A5  0847               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld,w
  4355  00A6  0245               	subwf	vPutSampleDataIntoTable@uiCalWidthArrayNew,w
  4356  00A7                     u123_25:	
  4357  00A7  1C03               	skipc
  4358  00A8  28BC               	goto	i1l3652
  4359                           
  4360                           ;common.c: 199: {
  4361                           ;common.c: 200: uiAbstractValue = uiCalWidthArrayNew - uiCalWidthArrayOld;
  4362  00A9  0846               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew+1,w
  4363  00AA  00B0               	movwf	vPutSampleDataIntoTable@uiAbstractValue+1
  4364  00AB  0845               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew,w
  4365  00AC  00AF               	movwf	vPutSampleDataIntoTable@uiAbstractValue
  4366  00AD  0847               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld,w
  4367  00AE  02AF               	subwf	vPutSampleDataIntoTable@uiAbstractValue,f
  4368  00AF  0848               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld+1,w
  4369  00B0  1C03               	skipc
  4370  00B1  03B0               	decf	vPutSampleDataIntoTable@uiAbstractValue+1,f
  4371  00B2  02B0               	subwf	vPutSampleDataIntoTable@uiAbstractValue+1,f
  4372                           
  4373                           ;common.c: 201: uiDeviationValue = ((uiCalWidthArrayNew+uiCalWidthArrayOld)>>1) + uiAbst
      +                          ractValue;
  4374  00B3  0846               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew+1,w
  4375  00B4  21ED  118A         	fcall	PL3	;call to abstracted procedure
  4376  00B6  07B1               	addwf	vPutSampleDataIntoTable@uiDeviationValue,f
  4377  00B7  1803               	skipnc
  4378  00B8  0AB2               	incf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4379  00B9  0830               	movf	vPutSampleDataIntoTable@uiAbstractValue+1,w
  4380  00BA  07B2               	addwf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4381                           
  4382                           ;common.c: 202: }
  4383  00BB  28CD               	goto	i1l3658
  4384  00BC                     i1l3652:	
  4385                           
  4386                           ;common.c: 203: else
  4387                           ;common.c: 204: {
  4388                           ;common.c: 205: uiAbstractValue = uiCalWidthArrayOld - uiCalWidthArrayNew;
  4389  00BC  0848               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld+1,w
  4390  00BD  00B0               	movwf	vPutSampleDataIntoTable@uiAbstractValue+1
  4391  00BE  0847               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld,w
  4392  00BF  00AF               	movwf	vPutSampleDataIntoTable@uiAbstractValue
  4393  00C0  0845               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew,w
  4394  00C1  02AF               	subwf	vPutSampleDataIntoTable@uiAbstractValue,f
  4395  00C2  0846               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew+1,w
  4396  00C3  1C03               	skipc
  4397  00C4  03B0               	decf	vPutSampleDataIntoTable@uiAbstractValue+1,f
  4398  00C5  02B0               	subwf	vPutSampleDataIntoTable@uiAbstractValue+1,f
  4399                           
  4400                           ;common.c: 206: uiDeviationValue = ((uiCalWidthArrayNew+uiCalWidthArrayOld)>>1) - uiAbst
      +                          ractValue;
  4401  00C6  21ED  118A         	fcall	PL3	;call to abstracted procedure
  4402  00C8  02B1               	subwf	vPutSampleDataIntoTable@uiDeviationValue,f
  4403  00C9  0830               	movf	vPutSampleDataIntoTable@uiAbstractValue+1,w
  4404  00CA  1C03               	skipc
  4405  00CB  03B2               	decf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4406  00CC  02B2               	subwf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4407  00CD                     i1l3658:	
  4408                           
  4409                           ;common.c: 208: }
  4410                           ;common.c: 212: if(uiCalWidthCnt>400)
  4411  00CD  3001               	movlw	1
  4412  00CE  1683               	bsf	3,5	;RP0=1, select bank1
  4413  00CF  022B               	subwf	(vPutSampleDataIntoTable@uiCalWidthCnt+1)^(0+128),w
  4414  00D0  3091               	movlw	145
  4415  00D1  1903               	skipnz
  4416  00D2  022A               	subwf	vPutSampleDataIntoTable@uiCalWidthCnt^(0+128),w
  4417  00D3  1C03               	skipc
  4418  00D4  28DA               	goto	i1l1534
  4419                           
  4420                           ;common.c: 213: uiDeviationValue =400;
  4421  00D5  3090               	movlw	144
  4422  00D6  1283               	bcf	3,5	;RP0=0, select bank0
  4423  00D7  00B1               	movwf	vPutSampleDataIntoTable@uiDeviationValue
  4424  00D8  3001               	movlw	1
  4425  00D9  00B2               	movwf	vPutSampleDataIntoTable@uiDeviationValue+1
  4426  00DA                     i1l1534:	
  4427                           
  4428                           ;common.c: 216: uiCalWidthArrayOld=uiCalWidthArrayNew;
  4429  00DA  1283               	bcf	3,5	;RP0=0, select bank0
  4430  00DB  0846               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew+1,w
  4431  00DC  00C8               	movwf	vPutSampleDataIntoTable@uiCalWidthArrayOld+1
  4432  00DD  0845               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew,w
  4433  00DE  00C7               	movwf	vPutSampleDataIntoTable@uiCalWidthArrayOld
  4434                           
  4435                           ;common.c: 221: if(uiDeviationValue > (312))
  4436  00DF  3001               	movlw	1
  4437  00E0  0232               	subwf	vPutSampleDataIntoTable@uiDeviationValue+1,w
  4438  00E1  3039               	movlw	57
  4439  00E2  1903               	skipnz
  4440  00E3  0231               	subwf	vPutSampleDataIntoTable@uiDeviationValue,w
  4441  00E4  1C03               	skipc
  4442  00E5  28E8               	goto	i1l3664
  4443                           
  4444                           ;common.c: 222: {
  4445                           ;common.c: 225: uiInitWidth++;
  4446  00E6  0ADA               	incf	vPutSampleDataIntoTable@uiInitWidth,f
  4447                           
  4448                           ;common.c: 227: }
  4449  00E7  28EF               	goto	i1l3668
  4450  00E8                     i1l3664:	
  4451                           
  4452                           ;common.c: 228: else if(uiDeviationValue < (312))
  4453  00E8  3001               	movlw	1
  4454  00E9  0232               	subwf	vPutSampleDataIntoTable@uiDeviationValue+1,w
  4455  00EA  3038               	movlw	56
  4456  00EB  1903               	skipnz
  4457  00EC  0231               	subwf	vPutSampleDataIntoTable@uiDeviationValue,w
  4458  00ED  1C03               	btfss	3,0
  4459                           
  4460                           ;common.c: 229: {
  4461                           ;common.c: 232: uiInitWidth--;
  4462  00EE  03DA               	decf	vPutSampleDataIntoTable@uiInitWidth,f
  4463  00EF                     i1l3668:	
  4464                           ;common.c: 234: }
  4465                           
  4466                           
  4467                           ;common.c: 238: if(uiInitWidth > 249)
  4468  00EF  30FA               	movlw	250
  4469  00F0  025A               	subwf	vPutSampleDataIntoTable@uiInitWidth,w
  4470  00F1  1C03               	skipc
  4471  00F2  28F5               	goto	i1l1539
  4472                           
  4473                           ;common.c: 239: uiInitWidth = 249;
  4474  00F3  30F9               	movlw	249
  4475  00F4  00DA               	movwf	vPutSampleDataIntoTable@uiInitWidth
  4476  00F5                     i1l1539:	
  4477                           
  4478                           ;common.c: 241: if(uiInitWidth < 75)
  4479  00F5  304B               	movlw	75
  4480  00F6  025A               	subwf	vPutSampleDataIntoTable@uiInitWidth,w
  4481  00F7  1803               	skipnc
  4482  00F8  28FB               	goto	i1l3674
  4483                           
  4484                           ;common.c: 242: uiInitWidth = 75;
  4485  00F9  304B               	movlw	75
  4486  00FA  00DA               	movwf	vPutSampleDataIntoTable@uiInitWidth
  4487  00FB                     i1l3674:	
  4488                           
  4489                           ;common.c: 61: return bWaitResetFlag;
  4490                           
  4491                           ; Regs used in _getWaitResetFlag: [wreg]
  4492                           
  4493                           ;common.c: 246: if( 1 == getWaitResetFlag())
  4494  00FB  084F               	movf	_bWaitResetFlag,w
  4495  00FC  3A01               	xorlw	1
  4496  00FD  1D03               	skipz
  4497  00FE  2901               	goto	i1l3678
  4498                           
  4499                           ;common.c: 247: uiInitWidth = 150;
  4500  00FF  3096               	movlw	150
  4501  0100  00DA               	movwf	vPutSampleDataIntoTable@uiInitWidth
  4502  0101                     i1l3678:	
  4503                           
  4504                           ;common.c: 249: setPWM_Width(uiInitWidth);
  4505  0101  085A               	movf	vPutSampleDataIntoTable@uiInitWidth,w
  4506  0102  29E2               	ljmp	_setPWM_Width
  4507  0103                     i1l3680:	
  4508                           
  4509                           ;common.c: 254: else
  4510                           ;common.c: 255: {
  4511                           ;common.c: 256: ucCh12Length = 0;
  4512  0103  01FD               	clrf	vPutSampleDataIntoTable@ucCh12Length
  4513                           
  4514                           ;common.c: 258: uiSampleCh12[ucCh12Length] = uiSampleData;
  4515  0104  1003               	clrc
  4516  0105  0D7D               	rlf	vPutSampleDataIntoTable@ucCh12Length,w
  4517  0106  3EAC               	addlw	_uiSampleCh12& (0+255)
  4518  0107  21E5               	fcall	PL2	;call to abstracted procedure
  4519  0108  0008               	return
  4520  0109                     i1l3684:	
  4521                           
  4522                           ;common.c: 261: else if(channel == 13)
  4523  0109  0878               	movf	vPutSampleDataIntoTable@channel,w
  4524  010A  3A0D               	xorlw	13
  4525  010B  1D03               	skipz
  4526  010C  291E               	goto	i1l3696
  4527                           
  4528                           ;common.c: 262: {
  4529                           ;common.c: 263: if(ucCh13Length < 3)
  4530  010D  3003               	movlw	3
  4531  010E  1283               	bcf	3,5	;RP0=0, select bank0
  4532  010F  0257               	subwf	vPutSampleDataIntoTable@ucCh13Length,w
  4533  0110  1803               	skipnc
  4534  0111  2918               	goto	i1l3692
  4535                           
  4536                           ;common.c: 264: {
  4537                           ;common.c: 265: uiSampleCh13[ucCh13Length] = uiSampleData;
  4538  0112  1003               	clrc
  4539  0113  0D57               	rlf	vPutSampleDataIntoTable@ucCh13Length,w
  4540  0114  3EB2               	addlw	_uiSampleCh13& (0+255)
  4541  0115  21E5               	fcall	PL2	;call to abstracted procedure
  4542                           
  4543                           ;common.c: 267: ucCh13Length++;
  4544  0116  0AD7               	incf	vPutSampleDataIntoTable@ucCh13Length,f
  4545                           
  4546                           ;common.c: 268: }
  4547  0117  0008               	return
  4548  0118                     i1l3692:	
  4549                           
  4550                           ;common.c: 269: else
  4551                           ;common.c: 270: {
  4552                           ;common.c: 271: ucCh13Length = 0;
  4553  0118  01D7               	clrf	vPutSampleDataIntoTable@ucCh13Length
  4554                           
  4555                           ;common.c: 273: uiSampleCh13[ucCh13Length] = uiSampleData;
  4556  0119  1003               	clrc
  4557  011A  0D57               	rlf	vPutSampleDataIntoTable@ucCh13Length,w
  4558  011B  3EB2               	addlw	_uiSampleCh13& (0+255)
  4559  011C  21E5               	fcall	PL2	;call to abstracted procedure
  4560  011D  0008               	return
  4561  011E                     i1l3696:	
  4562                           
  4563                           ;common.c: 276: else if(channel == 14)
  4564  011E  0878               	movf	vPutSampleDataIntoTable@channel,w
  4565  011F  3A0E               	xorlw	14
  4566  0120  1D03               	skipz
  4567  0121  2933               	goto	i1l3708
  4568                           
  4569                           ;common.c: 277: {
  4570                           ;common.c: 278: if(ucChannelFourteenthLength < 3)
  4571  0122  3003               	movlw	3
  4572  0123  1283               	bcf	3,5	;RP0=0, select bank0
  4573  0124  0258               	subwf	vPutSampleDataIntoTable@ucChannelFourteenthLength,w
  4574  0125  1803               	skipnc
  4575  0126  292D               	goto	i1l3704
  4576                           
  4577                           ;common.c: 279: {
  4578                           ;common.c: 280: uiSampleChannelFourteenth[ucChannelFourteenthLength] = uiSampleData;
  4579  0127  1003               	clrc
  4580  0128  0D58               	rlf	vPutSampleDataIntoTable@ucChannelFourteenthLength,w
  4581  0129  3EB8               	addlw	_uiSampleChannelFourteenth& (0+255)
  4582  012A  21E5               	fcall	PL2	;call to abstracted procedure
  4583                           
  4584                           ;common.c: 282: ucChannelFourteenthLength++;
  4585  012B  0AD8               	incf	vPutSampleDataIntoTable@ucChannelFourteenthLength,f
  4586                           
  4587                           ;common.c: 283: }
  4588  012C  0008               	return
  4589  012D                     i1l3704:	
  4590                           
  4591                           ;common.c: 284: else
  4592                           ;common.c: 285: {
  4593                           ;common.c: 286: ucChannelFourteenthLength = 0;
  4594  012D  01D8               	clrf	vPutSampleDataIntoTable@ucChannelFourteenthLength
  4595                           
  4596                           ;common.c: 288: uiSampleCh13[ucChannelFourteenthLength] = uiSampleData;
  4597  012E  1003               	clrc
  4598  012F  0D58               	rlf	vPutSampleDataIntoTable@ucChannelFourteenthLength,w
  4599  0130  3EB2               	addlw	_uiSampleCh13& (0+255)
  4600  0131  21E5               	fcall	PL2	;call to abstracted procedure
  4601  0132  0008               	return
  4602  0133                     i1l3708:	
  4603                           
  4604                           ;common.c: 291: else
  4605                           ;common.c: 292: {
  4606                           ;common.c: 293: ucCh12Length = 0;
  4607  0133  01FD               	clrf	vPutSampleDataIntoTable@ucCh12Length
  4608                           
  4609                           ;common.c: 295: ucCh13Length = 0;
  4610  0134  1283               	bcf	3,5	;RP0=0, select bank0
  4611  0135  01D7               	clrf	vPutSampleDataIntoTable@ucCh13Length
  4612                           
  4613                           ;common.c: 297: ucChannelFourteenthLength = 0;
  4614  0136  01D8               	clrf	vPutSampleDataIntoTable@ucChannelFourteenthLength
  4615                           
  4616                           ;common.c: 299: for(int i = 0;i < 3; i++)
  4617  0137  01B3               	clrf	vPutSampleDataIntoTable@i
  4618  0138  01B4               	clrf	vPutSampleDataIntoTable@i+1
  4619  0139                     i1l3714:	
  4620                           
  4621                           ;common.c: 300: {
  4622                           ;common.c: 301: uiSampleCh12[i] = 0;
  4623  0139  1283               	bcf	3,5	;RP0=0, select bank0
  4624  013A  1303               	bcf	3,6	;RP1=0, select bank0
  4625  013B  1003               	clrc
  4626  013C  0D33               	rlf	vPutSampleDataIntoTable@i,w
  4627  013D  3EAC               	addlw	_uiSampleCh12& (0+255)
  4628  013E  0084               	movwf	4
  4629  013F  1383               	bcf	3,7	;select IRP bank1
  4630                           
  4631                           ;common.c: 303: uiSampleCh13[i] = 0;
  4632  0140  2211  118A         	fcall	PL11	;call to abstracted procedure
  4633  0142  3EB2               	addlw	_uiSampleCh13& (0+255)
  4634  0143  0084               	movwf	4
  4635                           
  4636                           ;common.c: 305: uiSampleChannelFourteenth[i] = 0;
  4637  0144  2211  118A         	fcall	PL11	;call to abstracted procedure
  4638  0146  3EB8               	addlw	_uiSampleChannelFourteenth& (0+255)
  4639  0147  0084               	movwf	4
  4640  0148  0180               	clrf	0
  4641  0149  0A84               	incf	4,f
  4642  014A  0180               	clrf	0
  4643  014B  0AB3               	incf	vPutSampleDataIntoTable@i,f
  4644  014C  1903               	skipnz
  4645  014D  0AB4               	incf	vPutSampleDataIntoTable@i+1,f
  4646  014E  0834               	movf	vPutSampleDataIntoTable@i+1,w
  4647  014F  3A80               	xorlw	128
  4648  0150  00FF               	movwf	127
  4649  0151  3080               	movlw	128
  4650  0152  027F               	subwf	127,w
  4651  0153  1D03               	skipz
  4652  0154  2957               	goto	u134_25
  4653  0155  3003               	movlw	3
  4654  0156  0233               	subwf	vPutSampleDataIntoTable@i,w
  4655  0157                     u134_25:	
  4656  0157  1803               	btfsc	3,0
  4657  0158  0008               	return
  4658  0159  2939               	goto	i1l3714
  4659  015A                     __end_of_vPutSampleDataIntoTable:	
  4660  015A                     __ptext1274:	
  4661 ;; =============== function _setPWM_Width ends ============
  4662                           
  4663                           
  4664 ;; *************** function _getWaitResetFlag *****************
  4665 ;; Defined at:
  4666 ;;		line 60 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  4667 ;; Parameters:    Size  Location     Type
  4668 ;;		None
  4669 ;; Auto vars:     Size  Location     Type
  4670 ;;		None
  4671 ;; Return value:  Size  Location     Type
  4672 ;;                  1    wreg      unsigned char 
  4673 ;; Registers used:
  4674 ;;		wreg
  4675 ;; Tracked objects:
  4676 ;;		On entry : 160/0
  4677 ;;		On exit  : 160/0
  4678 ;;		Unchanged: FFE9F/0
  4679 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4680 ;;      Params:         0       0       0       0       0
  4681 ;;      Locals:         0       0       0       0       0
  4682 ;;      Temps:          0       0       0       0       0
  4683 ;;      Totals:         0       0       0       0       0
  4684 ;;Total ram usage:        0 bytes
  4685 ;; Hardware stack levels used:    1
  4686 ;; This function calls:
  4687 ;;		Nothing
  4688 ;; This function is called by:
  4689 ;;		_vPutSampleDataIntoTable
  4690 ;; This function uses a non-reentrant model
  4691 ;;
  4692  015A                     _getWaitResetFlag:	
  4693                           
  4694                           ;common.c: 61: return bWaitResetFlag;
  4695                           
  4696                           ; Regs used in _getWaitResetFlag: [wreg]
  4697  015A  084F               	movf	_bWaitResetFlag,w
  4698  015B  0008               	return
  4699  015C                     __end_of_getWaitResetFlag:	
  4700  015C                     __ptext1272:	
  4701 ;; =============== function _adc_get ends ============
  4702                           
  4703                           
  4704 ;; *************** function _Filter *****************
  4705 ;; Defined at:
  4706 ;;		line 117 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  4707 ;; Parameters:    Size  Location     Type
  4708 ;;  tmpValue        1    wreg     PTR unsigned int 
  4709 ;;		 -> uiSampleChannelFourteenth(6), uiSampleCh12(6), 
  4710 ;; Auto vars:     Size  Location     Type
  4711 ;;  tmpValue        1    4[BANK0 ] PTR unsigned int 
  4712 ;;		 -> uiSampleChannelFourteenth(6), uiSampleCh12(6), 
  4713 ;;  cir             2   11[BANK0 ] int 
  4714 ;;  filter_buf      6    5[BANK0 ] unsigned int [3]
  4715 ;;  filter_sum      2    2[BANK0 ] unsigned int 
  4716 ;;  filter_temp     2    0[BANK0 ] unsigned int 
  4717 ;;  i               1   14[BANK0 ] unsigned char 
  4718 ;;  j               1   13[BANK0 ] unsigned char 
  4719 ;; Return value:  Size  Location     Type
  4720 ;;                  2    0[COMMON] unsigned int 
  4721 ;; Registers used:
  4722 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1
  4723 ;; Tracked objects:
  4724 ;;		On entry : 160/20
  4725 ;;		On exit  : 160/0
  4726 ;;		Unchanged: FFE00/0
  4727 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4728 ;;      Params:         2       0       0       0       0
  4729 ;;      Locals:         0      15       0       0       0
  4730 ;;      Temps:          4       0       0       0       0
  4731 ;;      Totals:         6      15       0       0       0
  4732 ;;Total ram usage:       21 bytes
  4733 ;; Hardware stack levels used:    1
  4734 ;; This function calls:
  4735 ;;		Nothing
  4736 ;; This function is called by:
  4737 ;;		_vPutSampleDataIntoTable
  4738 ;; This function uses a non-reentrant model
  4739 ;;
  4740  015C                     _Filter:	
  4741                           
  4742                           ; Regs used in _Filter: [wreg-fsr0h+status,2+status,0+btemp+1]
  4743                           ;Filter@tmpValue stored from wreg
  4744  015C  1283               	bcf	3,5	;RP0=0, select bank0
  4745  015D  00A4               	movwf	Filter@tmpValue
  4746  015E  01AD               	clrf	Filter@j
  4747                           
  4748                           ;common.c: 121: unsigned int filter_temp = 0, filter_sum = 0;
  4749  015F  01A0               	clrf	Filter@filter_temp
  4750  0160  01A1               	clrf	Filter@filter_temp+1
  4751  0161  01A2               	clrf	Filter@filter_sum
  4752  0162  01A3               	clrf	Filter@filter_sum+1
  4753                           
  4754                           ;common.c: 123: unsigned int filter_buf[3];
  4755                           ;common.c: 125: for(int cir = 0;cir < 3; cir++)
  4756  0163  01AB               	clrf	Filter@cir
  4757  0164  01AC               	clrf	Filter@cir+1
  4758  0165                     i1l3584:	
  4759                           
  4760                           ;common.c: 126: filter_buf[cir] = *tmpValue++;
  4761  0165  1283               	bcf	3,5	;RP0=0, select bank0
  4762  0166  1303               	bcf	3,6	;RP1=0, select bank0
  4763  0167  0824               	movf	Filter@tmpValue,w
  4764  0168  21FB  118A         	fcall	PL5	;call to abstracted procedure
  4765  016A  1003               	clrc
  4766  016B  0D2B               	rlf	Filter@cir,w
  4767  016C  2203  118A         	fcall	PL8	;call to abstracted procedure
  4768  016E  0AA4               	incf	Filter@tmpValue,f
  4769  016F  0AA4               	incf	Filter@tmpValue,f
  4770  0170  0AAB               	incf	Filter@cir,f
  4771  0171  1903               	skipnz
  4772  0172  0AAC               	incf	Filter@cir+1,f
  4773  0173  082C               	movf	Filter@cir+1,w
  4774  0174  3A80               	xorlw	128
  4775  0175  00FF               	movwf	127
  4776  0176  3080               	movlw	128
  4777  0177  027F               	subwf	127,w
  4778  0178  1D03               	skipz
  4779  0179  297C               	goto	u115_25
  4780  017A  3003               	movlw	3
  4781  017B  022B               	subwf	Filter@cir,w
  4782  017C                     u115_25:	
  4783  017C  1C03               	skipc
  4784  017D  2965               	goto	i1l3584
  4785                           
  4786                           ;common.c: 130: for(j = 0; j < 3 - 1; j++)
  4787  017E  1283               	bcf	3,5	;RP0=0, select bank0
  4788  017F  1303               	bcf	3,6	;RP1=0, select bank0
  4789  0180  01AD               	clrf	Filter@j
  4790                           
  4791                           ;common.c: 131: {
  4792                           ;common.c: 132: for(i = 0; i < 3 - 1 - j; i++)
  4793  0181  01AE               	clrf	Filter@i
  4794  0182                     i1l3606:	
  4795  0182  01F3               	clrf	??_Filter+1
  4796  0183  082D               	movf	Filter@j,w
  4797  0184  3C02               	sublw	2
  4798  0185  00F2               	movwf	??_Filter
  4799  0186  1C03               	skipc
  4800  0187  03F3               	decf	??_Filter+1,f
  4801  0188  0873               	movf	??_Filter+1,w
  4802  0189  3A80               	xorlw	128
  4803  018A  3C80               	sublw	128
  4804  018B  1D03               	skipz
  4805  018C  298F               	goto	u117_25
  4806  018D  0872               	movf	??_Filter,w
  4807  018E  022E               	subwf	Filter@i,w
  4808  018F                     u117_25:	
  4809  018F  1803               	btfsc	3,0
  4810  0190  29C4               	goto	i1l3608
  4811                           
  4812                           ;common.c: 133: {
  4813                           ;common.c: 134: if(filter_buf[i] > filter_buf[i + 1])
  4814  0191  1283               	bcf	3,5	;RP0=0, select bank0
  4815  0192  1303               	bcf	3,6	;RP1=0, select bank0
  4816  0193  1003               	clrc
  4817  0194  0D2E               	rlf	Filter@i,w
  4818  0195  3E25               	addlw	Filter@filter_buf& (0+255)
  4819  0196  21FB  118A         	fcall	PL5	;call to abstracted procedure
  4820  0198  220B  118A         	fcall	PL10	;call to abstracted procedure
  4821  019A  0800               	movf	0,w
  4822  019B  00F4               	movwf	??_Filter+2
  4823  019C  0A84               	incf	4,f
  4824  019D  0800               	movf	0,w
  4825  019E  00F5               	movwf	??_Filter+3
  4826  019F  0873               	movf	??_Filter+1,w
  4827  01A0  0275               	subwf	??_Filter+3,w
  4828  01A1  1D03               	skipz
  4829  01A2  29A5               	goto	u116_25
  4830  01A3  0872               	movf	??_Filter,w
  4831  01A4  0274               	subwf	??_Filter+2,w
  4832  01A5                     u116_25:	
  4833  01A5  1803               	skipnc
  4834  01A6  29C2               	goto	i1l3604
  4835                           
  4836                           ;common.c: 135: {
  4837                           ;common.c: 137: filter_temp = filter_buf[i];
  4838  01A7  1003               	clrc
  4839  01A8  0D2E               	rlf	Filter@i,w
  4840  01A9  3E25               	addlw	Filter@filter_buf& (0+255)
  4841  01AA  0084               	movwf	4
  4842  01AB  0800               	movf	0,w
  4843  01AC  00A0               	movwf	Filter@filter_temp
  4844  01AD  0A84               	incf	4,f
  4845  01AE  0800               	movf	0,w
  4846  01AF  00A1               	movwf	Filter@filter_temp+1
  4847                           
  4848                           ;common.c: 139: filter_buf[i] = filter_buf[i + 1];
  4849  01B0  220B  118A         	fcall	PL10	;call to abstracted procedure
  4850  01B2  0800               	movf	0,w
  4851  01B3  00F2               	movwf	??_Filter
  4852  01B4  0A84               	incf	4,f
  4853  01B5  0800               	movf	0,w
  4854  01B6  00F3               	movwf	??_Filter+1
  4855  01B7  1003               	clrc
  4856  01B8  0D2E               	rlf	Filter@i,w
  4857  01B9  2203  118A         	fcall	PL8	;call to abstracted procedure
  4858                           
  4859                           ;common.c: 141: filter_buf[i + 1] = filter_temp;
  4860  01BB  220B  118A         	fcall	PL10	;call to abstracted procedure
  4861  01BD  0820               	movf	Filter@filter_temp,w
  4862  01BE  0080               	movwf	0
  4863  01BF  0A84               	incf	4,f
  4864  01C0  0821               	movf	Filter@filter_temp+1,w
  4865  01C1  0080               	movwf	0
  4866  01C2                     i1l3604:	
  4867  01C2  0AAE               	incf	Filter@i,f
  4868  01C3  2982               	goto	i1l3606
  4869  01C4                     i1l3608:	
  4870  01C4  1283               	bcf	3,5	;RP0=0, select bank0
  4871  01C5  3002               	movlw	2
  4872  01C6  1303               	bcf	3,6	;RP1=0, select bank0
  4873  01C7  0AAD               	incf	Filter@j,f
  4874  01C8  022D               	subwf	Filter@j,w
  4875                           
  4876                           ;common.c: 142: }
  4877                           ;common.c: 143: }
  4878                           ;common.c: 144: }
  4879                           ;common.c: 146: for(i = 1; i < 3 - 1; i++)
  4880  01C9  01AE               	clrf	Filter@i
  4881  01CA  1C03               	skipc
  4882  01CB  2982               	goto	i1l3606
  4883  01CC  0AAE               	incf	Filter@i,f
  4884                           
  4885                           ;common.c: 147: {
  4886                           ;common.c: 148: filter_sum += filter_buf[i];
  4887  01CD  1003               	clrc
  4888  01CE                     L14:	
  4889  01CE  0D2E               	rlf	Filter@i,w
  4890  01CF  3E25               	addlw	Filter@filter_buf& (0+255)
  4891  01D0  21FB  118A         	fcall	PL5	;call to abstracted procedure
  4892  01D2  0872               	movf	??_Filter,w
  4893  01D3  07A2               	addwf	Filter@filter_sum,f
  4894  01D4  1803               	skipnc
  4895  01D5  0AA3               	incf	Filter@filter_sum+1,f
  4896  01D6  0873               	movf	??_Filter+1,w
  4897  01D7  07A3               	addwf	Filter@filter_sum+1,f
  4898  01D8  3002               	movlw	2
  4899  01D9  0AAE               	incf	Filter@i,f
  4900  01DA  022E               	subwf	Filter@i,w
  4901  01DB  1C03               	skipc
  4902  01DC  29CE               	goto	L14
  4903                           
  4904                           ;common.c: 149: }
  4905                           ;common.c: 152: return (filter_sum );
  4906  01DD  0823               	movf	Filter@filter_sum+1,w
  4907  01DE  00F1               	movwf	?_Filter+1
  4908  01DF  0822               	movf	Filter@filter_sum,w
  4909  01E0  00F0               	movwf	?_Filter
  4910  01E1  0008               	return
  4911  01E2                     __end_of_Filter:	
  4912  01E2                     __ptext1273:	
  4913 ;; =============== function _Filter ends ============
  4914                           
  4915                           
  4916 ;; *************** function _setPWM_Width *****************
  4917 ;; Defined at:
  4918 ;;		line 65 in file "D:\develop\AK7030-good\AK7030-OTP\common.c"
  4919 ;; Parameters:    Size  Location     Type
  4920 ;;  ucWidth         1    wreg     unsigned char 
  4921 ;; Auto vars:     Size  Location     Type
  4922 ;;  ucWidth         1    0[COMMON] unsigned char 
  4923 ;; Return value:  Size  Location     Type
  4924 ;;		None               void
  4925 ;; Registers used:
  4926 ;;		wreg
  4927 ;; Tracked objects:
  4928 ;;		On entry : 160/0
  4929 ;;		On exit  : 160/0
  4930 ;;		Unchanged: FFE9F/0
  4931 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  4932 ;;      Params:         0       0       0       0       0
  4933 ;;      Locals:         1       0       0       0       0
  4934 ;;      Temps:          0       0       0       0       0
  4935 ;;      Totals:         1       0       0       0       0
  4936 ;;Total ram usage:        1 bytes
  4937 ;; Hardware stack levels used:    1
  4938 ;; This function calls:
  4939 ;;		Nothing
  4940 ;; This function is called by:
  4941 ;;		_vPutSampleDataIntoTable
  4942 ;; This function uses a non-reentrant model
  4943 ;;
  4944  01E2                     _setPWM_Width:	
  4945                           
  4946                           ; Regs used in _setPWM_Width: [wreg]
  4947                           ;setPWM_Width@ucWidth stored from wreg
  4948  01E2  00F0               	movwf	setPWM_Width@ucWidth
  4949                           
  4950                           ;common.c: 71: ucOldWidth = ucWidth;
  4951  01E3  0095               	movwf	21	;volatile
  4952  01E4  0008               	return
  4953  01E5                     __end_of_setPWM_Width:	
  4954  01E5                     PL2:	
  4955  01E5  0084               	movwf	4
  4956  01E6  0876               	movf	vPutSampleDataIntoTable@uiSampleData,w
  4957  01E7  1383               	bcf	3,7	;select IRP bank1
  4958  01E8  0080               	movwf	0
  4959  01E9  0A84               	incf	4,f
  4960  01EA  0877               	movf	vPutSampleDataIntoTable@uiSampleData+1,w
  4961  01EB  0080               	movwf	0
  4962  01EC  0008               	return
  4963  01ED                     PL3:	
  4964  01ED  00B2               	movwf	vPutSampleDataIntoTable@uiDeviationValue+1
  4965  01EE  0845               	movf	vPutSampleDataIntoTable@uiCalWidthArrayNew,w
  4966  01EF  00B1               	movwf	vPutSampleDataIntoTable@uiDeviationValue
  4967  01F0  0847               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld,w
  4968  01F1  07B1               	addwf	vPutSampleDataIntoTable@uiDeviationValue,f
  4969  01F2  1803               	skipnc
  4970  01F3  0AB2               	incf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4971  01F4  0848               	movf	vPutSampleDataIntoTable@uiCalWidthArrayOld+1,w
  4972  01F5  07B2               	addwf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4973  01F6  1003               	clrc
  4974  01F7  0CB2               	rrf	vPutSampleDataIntoTable@uiDeviationValue+1,f
  4975  01F8  0CB1               	rrf	vPutSampleDataIntoTable@uiDeviationValue,f
  4976  01F9  082F               	movf	vPutSampleDataIntoTable@uiAbstractValue,w
  4977  01FA  0008               	return
  4978  01FB                     PL5:	
  4979  01FB  0084               	movwf	4
  4980  01FC  1383               	bcf	3,7	;select IRP bank0
  4981  01FD  0800               	movf	0,w
  4982  01FE  00F2               	movwf	??_Filter
  4983  01FF  0A84               	incf	4,f
  4984  0200  0800               	movf	0,w
  4985  0201  00F3               	movwf	??_Filter+1
  4986  0202  0008               	return
  4987  0203                     PL8:	
  4988  0203  3E25               	addlw	Filter@filter_buf& (0+255)
  4989  0204  0084               	movwf	4
  4990  0205  0872               	movf	??_Filter,w
  4991  0206  0080               	movwf	0
  4992  0207  0A84               	incf	4,f
  4993  0208  0873               	movf	??_Filter+1,w
  4994  0209  0080               	movwf	0
  4995  020A  0008               	return
  4996  020B                     PL10:	
  4997  020B  1003               	clrc
  4998  020C  0D2E               	rlf	Filter@i,w
  4999  020D  3E02               	addlw	2
  5000  020E  3E25               	addlw	Filter@filter_buf& (0+255)
  5001  020F  0084               	movwf	4
  5002  0210  0008               	return
  5003  0211                     PL11:	
  5004  0211  0180               	clrf	0
  5005  0212  0A84               	incf	4,f
  5006  0213  0180               	clrf	0
  5007  0214  1003               	clrc
  5008  0215  0D33               	rlf	vPutSampleDataIntoTable@i,w
  5009  0216  0008               	return
  5010                           
  5011                           	psect	intentry
  5012  0004                     __pintentry:	
  5013                           ; Regs used in _ISR: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  5014                           
  5015  0004                     interrupt_function:	
  5016  007E                     saved_w	set	btemp
  5017  0004  00FE               	movwf	btemp
  5018  0005  0E03               	swapf	3,w
  5019  0006  00F9               	movwf	??_ISR
  5020  0007  0804               	movf	4,w
  5021  0008  00FA               	movwf	??_ISR+1
  5022  0009  080A               	movf	10,w
  5023  000A  00FB               	movwf	??_ISR+2
  5024  000B  1283               	bcf	3,5	;RP0=0, select bank0
  5025  000C  1303               	bcf	3,6	;RP1=0, select bank0
  5026  000D  087F               	movf	btemp+1,w
  5027  000E  00FC               	movwf	??_ISR+3
  5028  000F  118A  2813         	ljmp	_ISR
  5029                           
  5030                           	psect	text1275
  5031  0000                     __ptext1275:	
  5032 ;; =============== function _getWaitResetFlag ends ============
  5033                           
  5034  007E                     btemp	set	126	;btemp
  5035  007E                     wtemp0	set	126


HI-TECH Software PICC Macro Assembler V9.83 build 10920 
Symbol Table                                                                                   Tue Nov 19 23:12:03 2019

                                  ??_clock_config 0035                                 ?_getWaitResetFlag 0070  
                             ?_startOneHoursTimer 0035                                                _GO 00F9  
                              ??_getWaitResetFlag 0070                                                fsr 0004  
                        ?_timer1_interrupt_config 0070                                               l702 0524  
                                             l710 0000                                               l713 0000  
                                             l722 05E7                                               l707 0000  
                                             l716 0000                                               l719 0000  
                                             l737 026E                                               l682 0514  
                                             l692 051C                                               l677 04E7  
                                             l687 04F7                                               l697 0502  
                                             _GIE 005F                                               _PB2 0032  
                                             _PB3 0033                                               _PB4 0034  
                                             _PB5 0035                                               _PR2 0092  
                                             _ISR 0013                                               fsr0 0004  
                                             indf 0000                            ??_startThreeHoursTimer 0037  
                                            ?_ISR 0070                              ??_startOneHoursTimer 0037  
                              __size_of_AD_Sample 0014                                              l4000 0000  
                                            l4002 0000                                              l4010 0000  
                                            l2322 0000                                              l4004 0000  
                                            l4020 0000                                              l4012 0000  
                                            l2316 0000                                              l4100 0000  
                                            l1605 0000                                              l4014 0000  
                                            l4006 0000                                              l4022 0000  
                                            l4030 0000                                              l1614 0000  
                                            l4110 0000                                              l4016 0000  
                                            l4008 0000                                              l4024 0000  
                                            l4032 0000                                              l4040 0000  
                                            l4112 0000                                              l4120 0000  
                                            l1608 0000                                              l1561 0000  
                                            l1473 0000                                              l4018 0000  
                                            l4026 0000                                              l4042 0000  
                                            l4034 0000                                              l4050 0000  
                                            l1570 0000                                              l1564 0000  
                                            l4028 0000                                              l4036 0000  
                                            l4044 0000                                              l4052 04D0  
                                            l4124 0000                                              l4204 0000  
                                            l4212 0000                                              l4300 0000  
                                            l1573 0000                                              l1558 05C7  
                                            l4038 0000                                              l4054 0000  
                                            l1654 0000                                              l4118 0000  
                                            l4126 0000                                              l4150 0000  
                                            l4206 0000                                              l4230 04B2  
                                            l4222 0000                                              l4302 0000  
                                            l1567 0000                                              l1495 0000  
                                            l4072 0000                                              l4136 0000  
                                            l4144 0000                                              l4152 0000  
                                            l4216 0000                                              l4232 0000  
                                            l4240 0000                                              l4400 0365  
                                            l4320 02A7                                              l4312 02A0  
                                            l4304 028C                                              l4066 0000  
                                            l4074 0000                                              l4138 0000  
                                            l4146 0000                                              l4162 0000  
                                            l4170 03DC                                              l4226 0000  
                                            l4218 0000                                              l4234 0000  
                                            l4242 0000                                              l4410 0000  
                                            l4402 0000                                              l4322 0000  
                                            l4314 02A1                                              l4306 0292  
                                            l1579 0000                                              l4068 0000  
                                            l4084 0000                                              l4092 0000  
                                            l4172 0000                                              l4164 0000  
                                            l4236 0000                                              l4420 039E  
                                            l4412 0388                                              l4404 0377  
                                            l4340 02CB                                              l4332 02C4  
                                            l4324 02B2                                              l4316 0000  
                                            l4308 0294                                              l4260 0000  
                                            l4086 0000                                              l4094 0000  
                                            l4190 0441                                              l4174 0000  
                                            l4238 0000                                              l4246 0000  
                                            l4254 0000                                              l4414 0000  
                                            l4350 0000                                              l4342 0000  
                                            l4334 02C5                                              l4318 0000  
                                            l4430 03A7                                              l4270 0242  
                                            l4262 0000                                              l4192 03FC  
                                            l4176 0000                                              l4424 03A5  
                                            l4408 0383                                              l4352 02E2  
                                            l4344 0000                                              l4336 0000  
                                            l4272 0000                                              l4264 0000  
                                            l4098 0000                                              l4194 0444  
                                            l4418 039C                                              l4370 030B  
                                            l4354 0000                                              l4346 0000  
                                            l4338 0000                                              l4290 0267  
                                            l4282 0000                                              l4274 0000  
                                            l4266 0000                                              l4258 0000  
                                            l4196 0000                                              l4364 0304  
                                            l4348 0000                                              l4284 025A  
                                            l4268 0000                                              l4390 0000  
                                            l4374 0000                                              l4366 0000  
                                            l4294 0000                                              l4278 0250  
                                            l4384 0335                                              l4376 0000  
                                            l4368 0309                                              l4296 026F  
                                            l4288 0266                                              l4394 0358  
                                            l4386 0339                                              l4298 0000  
                                            l4396 035A                                              l4398 0361  
                                            l3980 0000                                              l3982 0000  
                                            l3990 0000                                              _ADIE 046A  
                                            l3984 0000                                              l3992 0000  
                                            _ADIF 006A                                              l3986 0000  
                                            l3994 0000                                              l3988 0000  
                                            l3996 0000                                              l3998 0000  
                                            _ADON 00F8                     startTwelveHourTimer@uiSetTime 0035  
                                            u2277 023A                                              u1955 03F6  
                                            _PEIE 005E                                              u1965 0425  
                                            u1975 040D                              FilterCh13@filter_buf 00C3  
                            FilterCh13@filter_sum 00C1                                              _main 0217  
                                            btemp 007E                                              start 0011  
                         ?_getAdOriginalCh13Value 003B                        ??_isFinishedTwentyMinTimer 0035  
                                           ??_ISR 0079                                 ??_setPinInitVaule 0036  
                      __end_of_isPermitSampleTime 05CF                               _sampleChannelSelect 0059  
                                           ?_main 0070                                             _CLKPR 0108  
                                           _T1CON 0010                                             _T2CON 0012  
                                 __end_of_adc_get 0084                                             _PBOD2 0C42  
                                           _TMR1H 000F                                             _TMR1L 000E  
                           setAD_ConvertFlag@flag 0035                                 ??_selectAdChannel 0035  
                           FilterCh13@filter_temp 00BF                                        _FilterCh13 03D3  
                                 __end_of_initPB3 04EA                                   __end_of_initPB4 04FA  
                                 __end_of_initPB5 0505                           _vPutSampleDataIntoTable 0087  
                                 __end_of_initPin 04DE                                             _reset 05E7  
                                           _timer 0051                                             pclath 000A  
                             main@uiTimerThreeP5s 00A6                                             status 0003  
                                           wtemp0 007E                    __end_of_getAdOriginalCh13Value 03D3  
                   __size_of_startTwelveHourTimer 000E                              __end_of_clrSampeTime 05E7  
                                    __end_of_main 03CC                            __size_of_adc_test_init 001B  
                               __end_of_AD_Sample 04B5                                            ??_main 00CD  
                             setPWM_Width@ucWidth 0070                                     main@ucChValue 00CE  
                                   main@ucDelay1s 00A2                                            _ADCON0 001F  
                                          _ADCON1 009F                              __end_of_clock_config 05CA  
                                          _ADRESH 001E                                            _ADRESL 009E  
                                          _CCPR1L 0015                                            ?_reset 0070  
                                          _CLKPCE 0847                                            i1l1508 0000  
                                          i1l2325 0000                                            i1l1534 00DA  
                                          i1l1482 0000                                            i1l1539 00F5  
                                          i1l1476 0000                                            i1l1573 0000  
                                          i1l1661 0027                                            i1l1662 0031  
                                          i1l1663 003C                                            i1l1664 0047  
                                          i1l3610 0000                                            i1l3524 0000  
                                          i1l3620 0000                                            i1l3604 01C2  
                                          i1l1669 006C                                            i1l3606 0182  
                                          i1l3702 0000                                            i1l3528 0000  
                                          i1l3608 01C4                                            i1l3704 012D  
                                          i1l3640 0000                                            i1l3632 0000  
                                          i1l3618 0000                                            i1l3714 0139  
                                          i1l3706 0000                                            i1l3650 0000  
                                          i1l3642 0000                                            i1l3634 0000  
                                          i1l3626 0000                                            i1l3716 0000  
                                          i1l3708 0133                                            i1l3652 00BC  
                                          i1l3644 0000                                            i1l3740 0000  
                                          u115_25 017C                                            u123_25 00A7  
                                          i1l3590 0000                                            i1l3718 0000  
                                          i1l3654 0000                                            i1l3638 0000  
                                          i1l3750 0000                                            i1l3584 0165  
                                          i1l3664 00E8                                            i1l3656 0000  
                                          i1l3648 0000                                            i1l3680 0103  
                                          i1l3744 0000                                            i1l3586 0000  
                                          i1l3578 0000                                            i1l3690 0000  
                                          i1l3682 0000                                            i1l3674 00FB  
                                          i1l3658 00CD                                            i1l3746 0000  
                                          i1l3762 0051                                            i1l3588 0000  
                                          i1l3692 0118                                            i1l3668 00EF  
                                          i1l3684 0109                                            i1l3772 0063  
                                          u116_25 01A5                                            i1l3774 0000  
                                          i1l3694 0000                                            i1l3678 0101  
                                          i1l3766 0000                                            i1l3696 011E  
                                          i1l3768 0000                                            i1l3778 0000  
                                          u117_25 018F                                            u134_25 0157  
                                          _TMR1IE 0460                                            _TMR1IF 0060  
                               _getAD_ConvertFlag 049A                                 _setAD_ConvertFlag 049E  
                                          _TRISB0 0430                                            _TRISB1 0431  
                                          _TRISB2 0432                                            _TRISB3 0433  
                                          _TRISB4 0434                                            _TRISB5 0435  
                              ?_getAD_ConvertFlag 0070                                            _Filter 015C  
                              ?_setAD_ConvertFlag 0070                       ??_isFinishedThreeHoursTimer 0035  
                   __size_of_clearThreeHoursTimer 0004                                         ??_adc_get 0072  
                             ??_getAD_ConvertFlag 0035                               ??_setAD_ConvertFlag 0035  
                                          _setPB3 050D                                            _setPB4 0516  
                                          _setPB5 051E                       __end_of_clearTwentyMinTimer 05DB  
                                          clrloop 05BB                                  Filter@filter_buf 0025  
                                       ??_initPB3 0035                                         ??_initPB4 0035  
                                       ??_initPB5 0035                                  Filter@filter_sum 0022  
                                       ??_initPin 0036                         ??_vPutSampleDataIntoTable 0079  
                                          saved_w 007E                           ??_clearTwelveHoursTimer 0035  
                                     ?_FilterCh13 0035                          __end_of_setWaitResetFlag 05E2  
                     ?_process_AD_Converter_Value 0070                                     _adc_test_init 04B5  
                       __end_of_getAD_ConvertFlag 049E                         __end_of_setAD_ConvertFlag 04A1  
                                   ?_setPWM_Width 0070                                __size_of_adc_start 0004  
                        _initPB2_AsHighResistence 04EA                  __size_of_isFinishedOneHoursTimer 000B  
                __end_of_isFinishedTwentyMinTimer 05B0                                    __pcstackCOMMON 0070  
                                    __pidataBANK0 0000                                 main@uiTimerOneP5s 00A4  
                                   __end_of_reset 05DB                                 main@uiTimerTwoP5s 00A8  
                          setWaitResetFlag@bValue 0035                    vPutSampleDataIntoTable@channel 0078  
                       _isFinishedThreeHoursTimer 0592                             __end_of_timer1_config 05BA  
                       __size_of_getWaitResetFlag 0002                                    ?_adc_test_init 0035  
                     __end_of_startTwentyMinTimer 0587                                           ??_reset 0035  
                __size_of_timer1_interrupt_config 0003                             __size_of_clrSampeTime 0002  
                                      __pbssBANK0 003D                                        __pbssBANK1 00A0  
                                  ??_setPWM_Width 0070                      __size_ofi1_setAD_ConvertFlag 0003  
                                 _setPinInitVaule 0505                                        adc_get@val 0072  
                                _uiTwentyMinTimer 0043                   __end_of_vPutSampleDataIntoTable 015A  
                                         ?_Filter 0070                                        __pmaintext 0217  
             vPutSampleDataIntoTable@ucCh12Length 007D                               __size_of_FilterCh13 0095  
             vPutSampleDataIntoTable@ucCh13Length 0057           vPutSampleDataIntoTable@uiDeviationValue 0031  
                                 _selectAdChannel 05DB                                        __pintentry 0004  
                                         _CCP1CON 0017                                        __ptext1231 03CC  
                                      __ptext1240 0587                                        __ptext1232 0484  
                                      __ptext1241 054F                                        __ptext1233 0505  
                                      __ptext1250 05E5                                        __ptext1242 05CF  
                                      __ptext1234 04D4                                        __ptext1251 05CA  
                                      __ptext1243 0592                                        __ptext1235 04A1  
                                      __ptext1260 0526                                        __ptext1252 04D0  
                                      __ptext1244 055D                                        __ptext1236 049E  
                                      __ptext1261 04EA                                        __ptext1253 0579  
                                      __ptext1245 05D3                                        __ptext1237 049A  
                                      __ptext1270 0084                                        __ptext1262 051E  
                                      __ptext1254 04B5                                        __ptext1246 059C  
                                      __ptext1238 03D3                                           ?_setPB3 0070  
                                      __ptext1271 0079                                        __ptext1263 04FA  
                                      __ptext1255 05E2                                        __ptext1247 056B  
                                      __ptext1239 05DF                                           ?_setPB4 0070  
                                      __ptext1272 015C                                        __ptext1264 0516  
                                      __ptext1256 05B0                                        __ptext1248 05D7  
                                         ?_setPB5 0070                                        __ptext1273 01E2  
                                      __ptext1265 04EF                                        __ptext1257 05C2  
                                      __ptext1249 05A6                                        __ptext1274 015A  
                                      __ptext1266 050D                                        __ptext1258 05E7  
                                      __ptext1275 0000                                        __ptext1267 04DE  
                                      __ptext1259 05DB                                        __ptext1268 0013  
                                      __ptext1269 0087                             __size_of_clock_config 0008  
                                    _clrSampeTime 05E5                                 __end_of_adc_start 04D4  
                            _uiTwentySecondsTimer 00A0                                _isPermitSampleTime 05CA  
                                         Filter@i 002E                                           Filter@j 002D  
                              __size_of_pwm_start 0015                       __size_of_startOneHoursTimer 000E  
                   __size_of_startThreeHoursTimer 000E                        __size_of_getAD_ConvertFlag 0004  
                      __size_of_setAD_ConvertFlag 0003                                    main@ucTimerP3s 0055  
                                  main@ucTimerP5s 0056                               ?_isPermitSampleTime 0070  
                                 __size_of_Filter 0086                                        _uiBigTimer 003D  
                                    setPB3@bValue 0035                                      setPB4@bValue 0035  
                                    _clock_config 05C2                                      setPB5@bValue 0035  
                                         _adc_get 0079                                   __size_of_setPB3 0009  
                                 __size_of_setPB4 0008                                   __size_of_setPB5 0008  
                            ??_isPermitSampleTime 0035                      __end_of_startTwelveHourTimer 0579  
                                   initPB3@bValue 0035                                     initPB4@bValue 0035  
                                       _AD_Sample 04A1                                           _initPB3 04DE  
                                         _initPB4 04EF                                           _initPB5 04FA  
                                    __size_of_ISR 0066                                     initPB5@bValue 0035  
                                         _initPin 04D4                              _bSmallTimerStartFlag 004D  
                                 ??_adc_test_init 0036                 __size_of_isFinishedTwentyMinTimer 000A  
                       ?_isFinishedTwentyMinTimer 0070                           __end_of_setPinInitVaule 050D  
                            end_of_initialization 054C                                 Filter@filter_temp 0020  
                           pwm_start@ucPulseWidth 0036                           __end_of_selectAdChannel 05DF  
                         _isFinishedOneHoursTimer 0587                                 __end_of_pwm_start 053B  
                            __end_of_setPWM_Width 01E5                                        ?_AD_Sample 0070  
                    ??_isFinishedTwelveHoursTimer 0035                                         Filter@cir 002B  
                             _bTwentyMinStartFlag 004E                                  _adc_convert_flag 004A  
                                    ??_FilterCh13 0037                                  _getWaitResetFlag 015A  
                    __end_of_clearThreeHoursTimer 05D3                    __size_of_clearTwelveHoursTimer 0004  
                               ?_setWaitResetFlag 0070                           _timer1_interrupt_config 05E2  
                   __end_of_clearTwelveHoursTimer 05D7                        ??_initPB2_AsHighResistence 0035  
                              ??_setWaitResetFlag 0035                __size_of_isFinishedThreeHoursTimer 000A  
                                      main@ucStep 0054                                    __end_of_Filter 01E2  
                   startTwentyMinTimer@uiSetValue 0035               __size_of_isFinishedTwelveHoursTimer 000A  
                              FilterCh13@tmpValue 00BE                                __end_of_FilterCh13 0468  
                        vPutSampleDataIntoTable@i 0033                               i1_setAD_ConvertFlag 0084  
                                  __end_of_setPB3 0516                                    __end_of_setPB4 051E  
                                  __end_of_setPB5 0526                               start_initialization 053B  
                                     __end_of_ISR 0079                                  ?_setPinInitVaule 0070  
                        ??_getAdOriginalCh13Value 003D                      __size_of_clearTwentyMinTimer 0004  
                       ??_isFinishedOneHoursTimer 0035                              ?i1_setAD_ConvertFlag 0070  
                            _startTwelveHourTimer 056B                 __end_of_isFinishedThreeHoursTimer 059C  
                                ?_selectAdChannel 0070                                          ??_Filter 0072  
                                     __pdataBANK0 0059                                          ??_setPB3 0035  
                                        ??_setPB4 0035                                          ??_setPB5 0035  
                        ?_vPutSampleDataIntoTable 0076                                       ??_AD_Sample 0035  
                       ??_timer1_interrupt_config 0035                                       __pbssCOMMON 007D  
                                   __pcstackBANK0 0020                                     __pcstackBANK1 00BE  
                                       _adc_start 04D0                             ??i1_setAD_ConvertFlag 0070  
                                 main@uiCh13Value 00D0                             ?_startTwelveHourTimer 0035  
                    __size_of_startTwentyMinTimer 000E                            __size_of_timer1_config 000A  
                            _clearThreeHoursTimer 05CF                             __size_of_setPWM_Width 0003  
                    __end_of_startThreeHoursTimer 056B                                 main@cTimerP5s_781 0052  
                               main@cTimerP5s_787 0053                                          ?_adc_get 0070  
                 __end_of_isFinishedOneHoursTimer 0592                __end_of_isFinishedTwelveHoursTimer 05A6  
                      _isFinishedTwelveHoursTimer 059C                                          ?_initPB3 0070  
                                        ?_initPB4 0070                                          ?_initPB5 0070  
                                 ISR@ucTimer1sCnt 0049                                          ?_initPin 0070  
                      __end_of_startOneHoursTimer 055D                  __end_of_initPB2_AsHighResistence 04EF  
                       _uiSampleChannelFourteenth 00B8                                        ?_adc_start 0070  
                 __size_of_getAdOriginalCh13Value 0007                                    __size_of_reset FFF4  
                               interrupt_function 0004                                      _setPWM_Width 01E2  
                                  _bWaitResetFlag 004F                   __end_of_timer1_interrupt_config 05E5  
                       pwm_start@ucPulseFrequency 0035                          __end_of_getWaitResetFlag 015C  
                           ?_clearThreeHoursTimer 0070                                      _uiSampleCh12 00AC  
                                    _uiSampleCh13 00B2                              adc_test_init@channel 0037  
             vPutSampleDataIntoTable@uiSampleData 0076                       __size_of_isPermitSampleTime 0005  
                                       _pwm_start 0526         vPutSampleDataIntoTable@uiCalWidthArrayOld 0047  
       vPutSampleDataIntoTable@uiCalWidthArrayNew 0045                                      _uiSmallTimer 0041  
            vPutSampleDataIntoTable@uiCalWidthCnt 00AA                             __end_of_adc_test_init 04D0  
                                   _timer1_config 05B0                      ??_process_AD_Converter_Value 0038  
                          ??_startTwelveHourTimer 0037                         __size_of_setWaitResetFlag 0003  
                          _getAdOriginalCh13Value 03CC                               _clearTwentyMinTimer 05D7  
                     startOneHoursTimer@uiSetTime 0035                                  __size_of_adc_get 000B  
             __size_of_process_AD_Converter_Value 0016                                        ?_pwm_start 0035  
                        _isFinishedTwentyMinTimer 05A6  vPutSampleDataIntoTable@ucChannelFourteenthLength 0058  
                                __size_of_initPB3 000C                                  __size_of_initPB4 000B  
                                __size_of_initPB5 000B                                  __size_of_initPin 000A  
                                  Filter@tmpValue 0024                                    ?_timer1_config 0070  
                            ?_clearTwentyMinTimer 0070                                       ??_adc_start 0035  
                            _startThreeHoursTimer 055D                             _clearTwelveHoursTimer 05D3  
                                  _uiOneHourTimer 003F                                     __size_of_main 01B5  
              vPutSampleDataIntoTable@uiInitWidth 005A                                     FilterCh13@cir 00C9  
                                        clear_ram 05BA                            ??_clearThreeHoursTimer 0035  
               __size_of_initPB2_AsHighResistence 0005                         ?_initPB2_AsHighResistence 0070  
                          _bOneHourTimerStartFlag 004C                                     ?_clrSampeTime 0070  
                             _startTwentyMinTimer 0579                                       _sampleTimes 0050  
                           ??_clearTwentyMinTimer 0035                             ?_startThreeHoursTimer 0035  
                __size_of_vPutSampleDataIntoTable 00D3                                          intlevel1 0000  
                            ?_startTwentyMinTimer 0035                          __size_of_setPinInitVaule 0008  
                      ?_isFinishedThreeHoursTimer 0070            vPutSampleDataIntoTable@uiAbstractValue 002F  
                                   ?_clock_config 0070                          __size_of_selectAdChannel 0004  
                   startThreeHoursTimer@uiSetTime 0035                           i1setAD_ConvertFlag@flag 0070  
                                     ??_pwm_start 0036                                    ??_clrSampeTime 0035  
                     ?_isFinishedTwelveHoursTimer 0070                                _bBigTimerStartFlag 004B  
                                 ??_timer1_config 0035                                       FilterCh13@i 00CC  
                                     FilterCh13@j 00CB                       __end_ofi1_setAD_ConvertFlag 0087  
              __end_of_process_AD_Converter_Value 049A                        _process_AD_Converter_Value 0484  
                        ?_isFinishedOneHoursTimer 0070                            ?_clearTwelveHoursTimer 0070  
                                adc_test_init@ref 0035                             ??_startTwentyMinTimer 0037  
                              _startOneHoursTimer 054F                                  _setWaitResetFlag 05DF  
